
Inclinometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c2a0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000c2a0  0000c2a0  0001c2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000005e0  20000000  0000c2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000738  200005e0  0000c888  000205e0  2**2
                  ALLOC
  4 .stack        00002000  20000d18  0000cfc0  000205e0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000205e0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020608  2**0
                  CONTENTS, READONLY
  7 .debug_info   00050915  00000000  00000000  00020661  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000655f  00000000  00000000  00070f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016f45  00000000  00000000  000774d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d80  00000000  00000000  0008e41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001758  00000000  00000000  0008f19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020b6f  00000000  00000000  000908f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000169ff  00000000  00000000  000b1461  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00098abf  00000000  00000000  000c7e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003594  00000000  00000000  00160920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 2d 00 20 21 47 00 00 1d 47 00 00 1d 47 00 00     .-. !G...G...G..
	...
      2c:	1d 47 00 00 00 00 00 00 00 00 00 00 1d 47 00 00     .G...........G..
      3c:	1d 47 00 00 1d 47 00 00 1d 47 00 00 1d 47 00 00     .G...G...G...G..
      4c:	1d 47 00 00 95 14 00 00 1d 47 00 00 1d 47 00 00     .G.......G...G..
      5c:	2d 3e 00 00 1d 47 00 00 59 1c 00 00 69 1c 00 00     ->...G..Y...i...
      6c:	79 1c 00 00 89 1c 00 00 99 1c 00 00 a9 1c 00 00     y...............
      7c:	1d 47 00 00 1d 47 00 00 1d 47 00 00 1d 47 00 00     .G...G...G...G..
      8c:	1d 47 00 00 1d 47 00 00 00 00 00 00 00 00 00 00     .G...G..........
      9c:	1d 47 00 00 1d 47 00 00 1d 47 00 00 1d 47 00 00     .G...G...G...G..
      ac:	1d 47 00 00 00 00 00 00                             .G......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200005e0 	.word	0x200005e0
      d4:	00000000 	.word	0x00000000
      d8:	0000c2a8 	.word	0x0000c2a8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200005e4 	.word	0x200005e4
     108:	0000c2a8 	.word	0x0000c2a8
     10c:	0000c2a8 	.word	0x0000c2a8
     110:	00000000 	.word	0x00000000

00000114 <stdio_usb_putchar>:
     114:	b510      	push	{r4, lr}
     116:	4b06      	ldr	r3, [pc, #24]	; (130 <stdio_usb_putchar+0x1c>)
     118:	781b      	ldrb	r3, [r3, #0]
     11a:	2000      	movs	r0, #0
     11c:	2b00      	cmp	r3, #0
     11e:	d100      	bne.n	122 <stdio_usb_putchar+0xe>
     120:	bd10      	pop	{r4, pc}
     122:	0008      	movs	r0, r1
     124:	4b03      	ldr	r3, [pc, #12]	; (134 <stdio_usb_putchar+0x20>)
     126:	4798      	blx	r3
     128:	4243      	negs	r3, r0
     12a:	4158      	adcs	r0, r3
     12c:	4240      	negs	r0, r0
     12e:	e7f7      	b.n	120 <stdio_usb_putchar+0xc>
     130:	200005fc 	.word	0x200005fc
     134:	00000965 	.word	0x00000965

00000138 <stdio_usb_getchar>:
     138:	b510      	push	{r4, lr}
     13a:	000c      	movs	r4, r1
     13c:	4b04      	ldr	r3, [pc, #16]	; (150 <stdio_usb_getchar+0x18>)
     13e:	781b      	ldrb	r3, [r3, #0]
     140:	2b00      	cmp	r3, #0
     142:	d101      	bne.n	148 <stdio_usb_getchar+0x10>
     144:	700b      	strb	r3, [r1, #0]
     146:	bd10      	pop	{r4, pc}
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <stdio_usb_getchar+0x1c>)
     14a:	4798      	blx	r3
     14c:	7020      	strb	r0, [r4, #0]
     14e:	e7fa      	b.n	146 <stdio_usb_getchar+0xe>
     150:	200005fc 	.word	0x200005fc
     154:	0000080d 	.word	0x0000080d

00000158 <stdio_usb_enable>:
     158:	2201      	movs	r2, #1
     15a:	4b02      	ldr	r3, [pc, #8]	; (164 <stdio_usb_enable+0xc>)
     15c:	701a      	strb	r2, [r3, #0]
     15e:	2001      	movs	r0, #1
     160:	4770      	bx	lr
     162:	46c0      	nop			; (mov r8, r8)
     164:	200005fc 	.word	0x200005fc

00000168 <stdio_usb_init>:
     168:	b570      	push	{r4, r5, r6, lr}
     16a:	2200      	movs	r2, #0
     16c:	4b0a      	ldr	r3, [pc, #40]	; (198 <stdio_usb_init+0x30>)
     16e:	601a      	str	r2, [r3, #0]
     170:	4a0a      	ldr	r2, [pc, #40]	; (19c <stdio_usb_init+0x34>)
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <stdio_usb_init+0x38>)
     174:	601a      	str	r2, [r3, #0]
     176:	4a0b      	ldr	r2, [pc, #44]	; (1a4 <stdio_usb_init+0x3c>)
     178:	4b0b      	ldr	r3, [pc, #44]	; (1a8 <stdio_usb_init+0x40>)
     17a:	601a      	str	r2, [r3, #0]
     17c:	4b0b      	ldr	r3, [pc, #44]	; (1ac <stdio_usb_init+0x44>)
     17e:	4798      	blx	r3
     180:	4d0b      	ldr	r5, [pc, #44]	; (1b0 <stdio_usb_init+0x48>)
     182:	682b      	ldr	r3, [r5, #0]
     184:	6898      	ldr	r0, [r3, #8]
     186:	2100      	movs	r1, #0
     188:	4c0a      	ldr	r4, [pc, #40]	; (1b4 <stdio_usb_init+0x4c>)
     18a:	47a0      	blx	r4
     18c:	682b      	ldr	r3, [r5, #0]
     18e:	6858      	ldr	r0, [r3, #4]
     190:	2100      	movs	r1, #0
     192:	47a0      	blx	r4
     194:	bd70      	pop	{r4, r5, r6, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	20000c24 	.word	0x20000c24
     19c:	00000115 	.word	0x00000115
     1a0:	20000c20 	.word	0x20000c20
     1a4:	00000139 	.word	0x00000139
     1a8:	20000c1c 	.word	0x20000c1c
     1ac:	00000b11 	.word	0x00000b11
     1b0:	2000057c 	.word	0x2000057c
     1b4:	0000a5ed 	.word	0x0000a5ed

000001b8 <system_board_init>:
     1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ba:	46c6      	mov	lr, r8
     1bc:	b500      	push	{lr}
     1be:	b082      	sub	sp, #8
     1c0:	ac01      	add	r4, sp, #4
     1c2:	2301      	movs	r3, #1
     1c4:	4698      	mov	r8, r3
     1c6:	7063      	strb	r3, [r4, #1]
     1c8:	2700      	movs	r7, #0
     1ca:	70a7      	strb	r7, [r4, #2]
     1cc:	7023      	strb	r3, [r4, #0]
     1ce:	0021      	movs	r1, r4
     1d0:	2008      	movs	r0, #8
     1d2:	4d1f      	ldr	r5, [pc, #124]	; (250 <system_board_init+0x98>)
     1d4:	47a8      	blx	r5
     1d6:	4e1f      	ldr	r6, [pc, #124]	; (254 <system_board_init+0x9c>)
     1d8:	2380      	movs	r3, #128	; 0x80
     1da:	005b      	lsls	r3, r3, #1
     1dc:	6173      	str	r3, [r6, #20]
     1de:	0021      	movs	r1, r4
     1e0:	2011      	movs	r0, #17
     1e2:	47a8      	blx	r5
     1e4:	2380      	movs	r3, #128	; 0x80
     1e6:	029b      	lsls	r3, r3, #10
     1e8:	61b3      	str	r3, [r6, #24]
     1ea:	0021      	movs	r1, r4
     1ec:	2014      	movs	r0, #20
     1ee:	47a8      	blx	r5
     1f0:	2380      	movs	r3, #128	; 0x80
     1f2:	035b      	lsls	r3, r3, #13
     1f4:	61b3      	str	r3, [r6, #24]
     1f6:	0021      	movs	r1, r4
     1f8:	2013      	movs	r0, #19
     1fa:	47a8      	blx	r5
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	031b      	lsls	r3, r3, #12
     200:	61b3      	str	r3, [r6, #24]
     202:	0021      	movs	r1, r4
     204:	2012      	movs	r0, #18
     206:	47a8      	blx	r5
     208:	2380      	movs	r3, #128	; 0x80
     20a:	02db      	lsls	r3, r3, #11
     20c:	61b3      	str	r3, [r6, #24]
     20e:	7027      	strb	r7, [r4, #0]
     210:	4643      	mov	r3, r8
     212:	7063      	strb	r3, [r4, #1]
     214:	0021      	movs	r1, r4
     216:	2007      	movs	r0, #7
     218:	47a8      	blx	r5
     21a:	0021      	movs	r1, r4
     21c:	2002      	movs	r0, #2
     21e:	47a8      	blx	r5
     220:	0021      	movs	r1, r4
     222:	2003      	movs	r0, #3
     224:	47a8      	blx	r5
     226:	0021      	movs	r1, r4
     228:	2009      	movs	r0, #9
     22a:	47a8      	blx	r5
     22c:	0021      	movs	r1, r4
     22e:	200a      	movs	r0, #10
     230:	47a8      	blx	r5
     232:	0021      	movs	r1, r4
     234:	200b      	movs	r0, #11
     236:	47a8      	blx	r5
     238:	0021      	movs	r1, r4
     23a:	2023      	movs	r0, #35	; 0x23
     23c:	47a8      	blx	r5
     23e:	7067      	strb	r7, [r4, #1]
     240:	0021      	movs	r1, r4
     242:	2015      	movs	r0, #21
     244:	47a8      	blx	r5
     246:	b002      	add	sp, #8
     248:	bc04      	pop	{r2}
     24a:	4690      	mov	r8, r2
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     24e:	46c0      	nop			; (mov r8, r8)
     250:	0000156d 	.word	0x0000156d
     254:	41004400 	.word	0x41004400

00000258 <udi_cdc_comm_disable>:
     258:	4a02      	ldr	r2, [pc, #8]	; (264 <udi_cdc_comm_disable+0xc>)
     25a:	7813      	ldrb	r3, [r2, #0]
     25c:	3b01      	subs	r3, #1
     25e:	b2db      	uxtb	r3, r3
     260:	7013      	strb	r3, [r2, #0]
     262:	4770      	bx	lr
     264:	2000060b 	.word	0x2000060b

00000268 <udi_cdc_data_setup>:
     268:	2000      	movs	r0, #0
     26a:	4770      	bx	lr

0000026c <udi_cdc_getsetting>:
     26c:	2000      	movs	r0, #0
     26e:	4770      	bx	lr

00000270 <udi_cdc_line_coding_received>:
     270:	4770      	bx	lr
	...

00000274 <udi_cdc_comm_enable>:
     274:	b510      	push	{r4, lr}
     276:	2200      	movs	r2, #0
     278:	4b10      	ldr	r3, [pc, #64]	; (2bc <udi_cdc_comm_enable+0x48>)
     27a:	701a      	strb	r2, [r3, #0]
     27c:	2100      	movs	r1, #0
     27e:	4b10      	ldr	r3, [pc, #64]	; (2c0 <udi_cdc_comm_enable+0x4c>)
     280:	801a      	strh	r2, [r3, #0]
     282:	4b10      	ldr	r3, [pc, #64]	; (2c4 <udi_cdc_comm_enable+0x50>)
     284:	20a1      	movs	r0, #161	; 0xa1
     286:	7018      	strb	r0, [r3, #0]
     288:	3881      	subs	r0, #129	; 0x81
     28a:	7058      	strb	r0, [r3, #1]
     28c:	805a      	strh	r2, [r3, #2]
     28e:	809a      	strh	r2, [r3, #4]
     290:	381e      	subs	r0, #30
     292:	80d8      	strh	r0, [r3, #6]
     294:	811a      	strh	r2, [r3, #8]
     296:	4b0c      	ldr	r3, [pc, #48]	; (2c8 <udi_cdc_comm_enable+0x54>)
     298:	22e1      	movs	r2, #225	; 0xe1
     29a:	0252      	lsls	r2, r2, #9
     29c:	601a      	str	r2, [r3, #0]
     29e:	7119      	strb	r1, [r3, #4]
     2a0:	7159      	strb	r1, [r3, #5]
     2a2:	2208      	movs	r2, #8
     2a4:	719a      	strb	r2, [r3, #6]
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <udi_cdc_comm_enable+0x58>)
     2a8:	4798      	blx	r3
     2aa:	2800      	cmp	r0, #0
     2ac:	d004      	beq.n	2b8 <udi_cdc_comm_enable+0x44>
     2ae:	4a03      	ldr	r2, [pc, #12]	; (2bc <udi_cdc_comm_enable+0x48>)
     2b0:	7813      	ldrb	r3, [r2, #0]
     2b2:	3301      	adds	r3, #1
     2b4:	b2db      	uxtb	r3, r3
     2b6:	7013      	strb	r3, [r2, #0]
     2b8:	bd10      	pop	{r4, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	2000060b 	.word	0x2000060b
     2c0:	200006a0 	.word	0x200006a0
     2c4:	20000738 	.word	0x20000738
     2c8:	20000604 	.word	0x20000604
     2cc:	00005945 	.word	0x00005945

000002d0 <udi_cdc_tx_send>:
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	4b46      	ldr	r3, [pc, #280]	; (3f0 <udi_cdc_tx_send+0x120>)
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d001      	beq.n	2e0 <udi_cdc_tx_send+0x10>
     2dc:	b004      	add	sp, #16
     2de:	bd70      	pop	{r4, r5, r6, pc}
     2e0:	4b44      	ldr	r3, [pc, #272]	; (3f4 <udi_cdc_tx_send+0x124>)
     2e2:	4798      	blx	r3
     2e4:	2800      	cmp	r0, #0
     2e6:	d043      	beq.n	370 <udi_cdc_tx_send+0xa0>
     2e8:	4b43      	ldr	r3, [pc, #268]	; (3f8 <udi_cdc_tx_send+0x128>)
     2ea:	881c      	ldrh	r4, [r3, #0]
     2ec:	4b43      	ldr	r3, [pc, #268]	; (3fc <udi_cdc_tx_send+0x12c>)
     2ee:	4798      	blx	r3
     2f0:	4284      	cmp	r4, r0
     2f2:	d0f3      	beq.n	2dc <udi_cdc_tx_send+0xc>
     2f4:	f3ef 8310 	mrs	r3, PRIMASK
     2f8:	425a      	negs	r2, r3
     2fa:	4153      	adcs	r3, r2
     2fc:	9303      	str	r3, [sp, #12]
     2fe:	b672      	cpsid	i
     300:	f3bf 8f5f 	dmb	sy
     304:	2200      	movs	r2, #0
     306:	4b3e      	ldr	r3, [pc, #248]	; (400 <udi_cdc_tx_send+0x130>)
     308:	701a      	strb	r2, [r3, #0]
     30a:	9d03      	ldr	r5, [sp, #12]
     30c:	4b3d      	ldr	r3, [pc, #244]	; (404 <udi_cdc_tx_send+0x134>)
     30e:	781c      	ldrb	r4, [r3, #0]
     310:	b2e4      	uxtb	r4, r4
     312:	0062      	lsls	r2, r4, #1
     314:	4b3c      	ldr	r3, [pc, #240]	; (408 <udi_cdc_tx_send+0x138>)
     316:	5ad3      	ldrh	r3, [r2, r3]
     318:	2b00      	cmp	r3, #0
     31a:	d030      	beq.n	37e <udi_cdc_tx_send+0xae>
     31c:	2200      	movs	r2, #0
     31e:	4b3b      	ldr	r3, [pc, #236]	; (40c <udi_cdc_tx_send+0x13c>)
     320:	801a      	strh	r2, [r3, #0]
     322:	4b3b      	ldr	r3, [pc, #236]	; (410 <udi_cdc_tx_send+0x140>)
     324:	781b      	ldrb	r3, [r3, #0]
     326:	2b00      	cmp	r3, #0
     328:	d148      	bne.n	3bc <udi_cdc_tx_send+0xec>
     32a:	4263      	negs	r3, r4
     32c:	4163      	adcs	r3, r4
     32e:	b2db      	uxtb	r3, r3
     330:	4a34      	ldr	r2, [pc, #208]	; (404 <udi_cdc_tx_send+0x134>)
     332:	7013      	strb	r3, [r2, #0]
     334:	2201      	movs	r2, #1
     336:	4b2e      	ldr	r3, [pc, #184]	; (3f0 <udi_cdc_tx_send+0x120>)
     338:	701a      	strb	r2, [r3, #0]
     33a:	2d00      	cmp	r5, #0
     33c:	d004      	beq.n	348 <udi_cdc_tx_send+0x78>
     33e:	4b30      	ldr	r3, [pc, #192]	; (400 <udi_cdc_tx_send+0x130>)
     340:	701a      	strb	r2, [r3, #0]
     342:	f3bf 8f5f 	dmb	sy
     346:	b662      	cpsie	i
     348:	0026      	movs	r6, r4
     34a:	0063      	lsls	r3, r4, #1
     34c:	4a2e      	ldr	r2, [pc, #184]	; (408 <udi_cdc_tx_send+0x138>)
     34e:	5a9b      	ldrh	r3, [r3, r2]
     350:	001d      	movs	r5, r3
     352:	3d40      	subs	r5, #64	; 0x40
     354:	1e6a      	subs	r2, r5, #1
     356:	4195      	sbcs	r5, r2
     358:	b2ed      	uxtb	r5, r5
     35a:	2b40      	cmp	r3, #64	; 0x40
     35c:	d037      	beq.n	3ce <udi_cdc_tx_send+0xfe>
     35e:	4b25      	ldr	r3, [pc, #148]	; (3f4 <udi_cdc_tx_send+0x124>)
     360:	4798      	blx	r3
     362:	2800      	cmp	r0, #0
     364:	d02e      	beq.n	3c4 <udi_cdc_tx_send+0xf4>
     366:	4b25      	ldr	r3, [pc, #148]	; (3fc <udi_cdc_tx_send+0x12c>)
     368:	4798      	blx	r3
     36a:	4b23      	ldr	r3, [pc, #140]	; (3f8 <udi_cdc_tx_send+0x128>)
     36c:	8018      	strh	r0, [r3, #0]
     36e:	e031      	b.n	3d4 <udi_cdc_tx_send+0x104>
     370:	4b21      	ldr	r3, [pc, #132]	; (3f8 <udi_cdc_tx_send+0x128>)
     372:	881c      	ldrh	r4, [r3, #0]
     374:	4b27      	ldr	r3, [pc, #156]	; (414 <udi_cdc_tx_send+0x144>)
     376:	4798      	blx	r3
     378:	4284      	cmp	r4, r0
     37a:	d1bb      	bne.n	2f4 <udi_cdc_tx_send+0x24>
     37c:	e7ae      	b.n	2dc <udi_cdc_tx_send+0xc>
     37e:	4a23      	ldr	r2, [pc, #140]	; (40c <udi_cdc_tx_send+0x13c>)
     380:	8813      	ldrh	r3, [r2, #0]
     382:	3301      	adds	r3, #1
     384:	8013      	strh	r3, [r2, #0]
     386:	4b1b      	ldr	r3, [pc, #108]	; (3f4 <udi_cdc_tx_send+0x124>)
     388:	4798      	blx	r3
     38a:	2800      	cmp	r0, #0
     38c:	d103      	bne.n	396 <udi_cdc_tx_send+0xc6>
     38e:	4b1f      	ldr	r3, [pc, #124]	; (40c <udi_cdc_tx_send+0x13c>)
     390:	881b      	ldrh	r3, [r3, #0]
     392:	2b63      	cmp	r3, #99	; 0x63
     394:	d908      	bls.n	3a8 <udi_cdc_tx_send+0xd8>
     396:	4b17      	ldr	r3, [pc, #92]	; (3f4 <udi_cdc_tx_send+0x124>)
     398:	4798      	blx	r3
     39a:	2800      	cmp	r0, #0
     39c:	d0be      	beq.n	31c <udi_cdc_tx_send+0x4c>
     39e:	4b1e      	ldr	r3, [pc, #120]	; (418 <udi_cdc_tx_send+0x148>)
     3a0:	4a1a      	ldr	r2, [pc, #104]	; (40c <udi_cdc_tx_send+0x13c>)
     3a2:	8812      	ldrh	r2, [r2, #0]
     3a4:	429a      	cmp	r2, r3
     3a6:	d8b9      	bhi.n	31c <udi_cdc_tx_send+0x4c>
     3a8:	2d00      	cmp	r5, #0
     3aa:	d100      	bne.n	3ae <udi_cdc_tx_send+0xde>
     3ac:	e796      	b.n	2dc <udi_cdc_tx_send+0xc>
     3ae:	2201      	movs	r2, #1
     3b0:	4b13      	ldr	r3, [pc, #76]	; (400 <udi_cdc_tx_send+0x130>)
     3b2:	701a      	strb	r2, [r3, #0]
     3b4:	f3bf 8f5f 	dmb	sy
     3b8:	b662      	cpsie	i
     3ba:	e78f      	b.n	2dc <udi_cdc_tx_send+0xc>
     3bc:	4262      	negs	r2, r4
     3be:	4154      	adcs	r4, r2
     3c0:	b2e4      	uxtb	r4, r4
     3c2:	e7b7      	b.n	334 <udi_cdc_tx_send+0x64>
     3c4:	4b13      	ldr	r3, [pc, #76]	; (414 <udi_cdc_tx_send+0x144>)
     3c6:	4798      	blx	r3
     3c8:	4b0b      	ldr	r3, [pc, #44]	; (3f8 <udi_cdc_tx_send+0x128>)
     3ca:	8018      	strh	r0, [r3, #0]
     3cc:	e002      	b.n	3d4 <udi_cdc_tx_send+0x104>
     3ce:	2200      	movs	r2, #0
     3d0:	4b09      	ldr	r3, [pc, #36]	; (3f8 <udi_cdc_tx_send+0x128>)
     3d2:	801a      	strh	r2, [r3, #0]
     3d4:	0076      	lsls	r6, r6, #1
     3d6:	4b0c      	ldr	r3, [pc, #48]	; (408 <udi_cdc_tx_send+0x138>)
     3d8:	5af3      	ldrh	r3, [r6, r3]
     3da:	01a4      	lsls	r4, r4, #6
     3dc:	4a0f      	ldr	r2, [pc, #60]	; (41c <udi_cdc_tx_send+0x14c>)
     3de:	1914      	adds	r4, r2, r4
     3e0:	4a0f      	ldr	r2, [pc, #60]	; (420 <udi_cdc_tx_send+0x150>)
     3e2:	9200      	str	r2, [sp, #0]
     3e4:	0022      	movs	r2, r4
     3e6:	0029      	movs	r1, r5
     3e8:	2081      	movs	r0, #129	; 0x81
     3ea:	4c0e      	ldr	r4, [pc, #56]	; (424 <udi_cdc_tx_send+0x154>)
     3ec:	47a0      	blx	r4
     3ee:	e775      	b.n	2dc <udi_cdc_tx_send+0xc>
     3f0:	20000734 	.word	0x20000734
     3f4:	00003165 	.word	0x00003165
     3f8:	20000730 	.word	0x20000730
     3fc:	00003179 	.word	0x00003179
     400:	200000f4 	.word	0x200000f4
     404:	2000072c 	.word	0x2000072c
     408:	20000728 	.word	0x20000728
     40c:	200005fe 	.word	0x200005fe
     410:	200006a4 	.word	0x200006a4
     414:	00003169 	.word	0x00003169
     418:	0000031f 	.word	0x0000031f
     41c:	200006a8 	.word	0x200006a8
     420:	00000429 	.word	0x00000429
     424:	00003471 	.word	0x00003471

00000428 <udi_cdc_data_sent>:
     428:	b510      	push	{r4, lr}
     42a:	2800      	cmp	r0, #0
     42c:	d000      	beq.n	430 <udi_cdc_data_sent+0x8>
     42e:	bd10      	pop	{r4, pc}
     430:	4b07      	ldr	r3, [pc, #28]	; (450 <udi_cdc_data_sent+0x28>)
     432:	781b      	ldrb	r3, [r3, #0]
     434:	425a      	negs	r2, r3
     436:	4153      	adcs	r3, r2
     438:	005b      	lsls	r3, r3, #1
     43a:	2200      	movs	r2, #0
     43c:	4905      	ldr	r1, [pc, #20]	; (454 <udi_cdc_data_sent+0x2c>)
     43e:	5258      	strh	r0, [r3, r1]
     440:	4b05      	ldr	r3, [pc, #20]	; (458 <udi_cdc_data_sent+0x30>)
     442:	701a      	strb	r2, [r3, #0]
     444:	4b05      	ldr	r3, [pc, #20]	; (45c <udi_cdc_data_sent+0x34>)
     446:	701a      	strb	r2, [r3, #0]
     448:	4b05      	ldr	r3, [pc, #20]	; (460 <udi_cdc_data_sent+0x38>)
     44a:	4798      	blx	r3
     44c:	e7ef      	b.n	42e <udi_cdc_data_sent+0x6>
     44e:	46c0      	nop			; (mov r8, r8)
     450:	2000072c 	.word	0x2000072c
     454:	20000728 	.word	0x20000728
     458:	200006a4 	.word	0x200006a4
     45c:	20000734 	.word	0x20000734
     460:	000002d1 	.word	0x000002d1

00000464 <udi_cdc_data_sof_notify>:
     464:	b510      	push	{r4, lr}
     466:	2000      	movs	r0, #0
     468:	4b01      	ldr	r3, [pc, #4]	; (470 <udi_cdc_data_sof_notify+0xc>)
     46a:	4798      	blx	r3
     46c:	bd10      	pop	{r4, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	000002d1 	.word	0x000002d1

00000474 <udi_cdc_data_disable>:
     474:	b510      	push	{r4, lr}
     476:	4a06      	ldr	r2, [pc, #24]	; (490 <udi_cdc_data_disable+0x1c>)
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	3b01      	subs	r3, #1
     47c:	b2db      	uxtb	r3, r3
     47e:	7013      	strb	r3, [r2, #0]
     480:	7813      	ldrb	r3, [r2, #0]
     482:	4b04      	ldr	r3, [pc, #16]	; (494 <udi_cdc_data_disable+0x20>)
     484:	4798      	blx	r3
     486:	2200      	movs	r2, #0
     488:	4b03      	ldr	r3, [pc, #12]	; (498 <udi_cdc_data_disable+0x24>)
     48a:	701a      	strb	r2, [r3, #0]
     48c:	bd10      	pop	{r4, pc}
     48e:	46c0      	nop			; (mov r8, r8)
     490:	2000060c 	.word	0x2000060c
     494:	00005949 	.word	0x00005949
     498:	20000600 	.word	0x20000600

0000049c <udi_cdc_comm_setup>:
     49c:	b510      	push	{r4, lr}
     49e:	4b20      	ldr	r3, [pc, #128]	; (520 <udi_cdc_comm_setup+0x84>)
     4a0:	781a      	ldrb	r2, [r3, #0]
     4a2:	b253      	sxtb	r3, r2
     4a4:	2b00      	cmp	r3, #0
     4a6:	db05      	blt.n	4b4 <udi_cdc_comm_setup+0x18>
     4a8:	2360      	movs	r3, #96	; 0x60
     4aa:	4013      	ands	r3, r2
     4ac:	2000      	movs	r0, #0
     4ae:	2b20      	cmp	r3, #32
     4b0:	d014      	beq.n	4dc <udi_cdc_comm_setup+0x40>
     4b2:	bd10      	pop	{r4, pc}
     4b4:	2360      	movs	r3, #96	; 0x60
     4b6:	4013      	ands	r3, r2
     4b8:	2000      	movs	r0, #0
     4ba:	2b20      	cmp	r3, #32
     4bc:	d1f9      	bne.n	4b2 <udi_cdc_comm_setup+0x16>
     4be:	4b18      	ldr	r3, [pc, #96]	; (520 <udi_cdc_comm_setup+0x84>)
     4c0:	785b      	ldrb	r3, [r3, #1]
     4c2:	2b21      	cmp	r3, #33	; 0x21
     4c4:	d129      	bne.n	51a <udi_cdc_comm_setup+0x7e>
     4c6:	4b16      	ldr	r3, [pc, #88]	; (520 <udi_cdc_comm_setup+0x84>)
     4c8:	88db      	ldrh	r3, [r3, #6]
     4ca:	2b07      	cmp	r3, #7
     4cc:	d1f1      	bne.n	4b2 <udi_cdc_comm_setup+0x16>
     4ce:	4b14      	ldr	r3, [pc, #80]	; (520 <udi_cdc_comm_setup+0x84>)
     4d0:	4a14      	ldr	r2, [pc, #80]	; (524 <udi_cdc_comm_setup+0x88>)
     4d2:	609a      	str	r2, [r3, #8]
     4d4:	2207      	movs	r2, #7
     4d6:	819a      	strh	r2, [r3, #12]
     4d8:	3001      	adds	r0, #1
     4da:	e7ea      	b.n	4b2 <udi_cdc_comm_setup+0x16>
     4dc:	4b10      	ldr	r3, [pc, #64]	; (520 <udi_cdc_comm_setup+0x84>)
     4de:	785b      	ldrb	r3, [r3, #1]
     4e0:	2b20      	cmp	r3, #32
     4e2:	d003      	beq.n	4ec <udi_cdc_comm_setup+0x50>
     4e4:	2b22      	cmp	r3, #34	; 0x22
     4e6:	d00f      	beq.n	508 <udi_cdc_comm_setup+0x6c>
     4e8:	2000      	movs	r0, #0
     4ea:	e7e2      	b.n	4b2 <udi_cdc_comm_setup+0x16>
     4ec:	4b0c      	ldr	r3, [pc, #48]	; (520 <udi_cdc_comm_setup+0x84>)
     4ee:	88db      	ldrh	r3, [r3, #6]
     4f0:	2000      	movs	r0, #0
     4f2:	2b07      	cmp	r3, #7
     4f4:	d1dd      	bne.n	4b2 <udi_cdc_comm_setup+0x16>
     4f6:	4b0a      	ldr	r3, [pc, #40]	; (520 <udi_cdc_comm_setup+0x84>)
     4f8:	4a0b      	ldr	r2, [pc, #44]	; (528 <udi_cdc_comm_setup+0x8c>)
     4fa:	611a      	str	r2, [r3, #16]
     4fc:	4a09      	ldr	r2, [pc, #36]	; (524 <udi_cdc_comm_setup+0x88>)
     4fe:	609a      	str	r2, [r3, #8]
     500:	2207      	movs	r2, #7
     502:	819a      	strh	r2, [r3, #12]
     504:	3001      	adds	r0, #1
     506:	e7d4      	b.n	4b2 <udi_cdc_comm_setup+0x16>
     508:	4b05      	ldr	r3, [pc, #20]	; (520 <udi_cdc_comm_setup+0x84>)
     50a:	885b      	ldrh	r3, [r3, #2]
     50c:	2101      	movs	r1, #1
     50e:	4019      	ands	r1, r3
     510:	2000      	movs	r0, #0
     512:	4b06      	ldr	r3, [pc, #24]	; (52c <udi_cdc_comm_setup+0x90>)
     514:	4798      	blx	r3
     516:	2001      	movs	r0, #1
     518:	e7cb      	b.n	4b2 <udi_cdc_comm_setup+0x16>
     51a:	2000      	movs	r0, #0
     51c:	e7c9      	b.n	4b2 <udi_cdc_comm_setup+0x16>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	20000ac4 	.word	0x20000ac4
     524:	20000604 	.word	0x20000604
     528:	00000271 	.word	0x00000271
     52c:	00005935 	.word	0x00005935

00000530 <udi_cdc_multi_get_nb_received_data>:
     530:	b082      	sub	sp, #8
     532:	f3ef 8310 	mrs	r3, PRIMASK
     536:	425a      	negs	r2, r3
     538:	4153      	adcs	r3, r2
     53a:	9301      	str	r3, [sp, #4]
     53c:	b672      	cpsid	i
     53e:	f3bf 8f5f 	dmb	sy
     542:	2200      	movs	r2, #0
     544:	4b0a      	ldr	r3, [pc, #40]	; (570 <udi_cdc_multi_get_nb_received_data+0x40>)
     546:	701a      	strb	r2, [r3, #0]
     548:	9a01      	ldr	r2, [sp, #4]
     54a:	4b0a      	ldr	r3, [pc, #40]	; (574 <udi_cdc_multi_get_nb_received_data+0x44>)
     54c:	8819      	ldrh	r1, [r3, #0]
     54e:	4b0a      	ldr	r3, [pc, #40]	; (578 <udi_cdc_multi_get_nb_received_data+0x48>)
     550:	781b      	ldrb	r3, [r3, #0]
     552:	005b      	lsls	r3, r3, #1
     554:	4809      	ldr	r0, [pc, #36]	; (57c <udi_cdc_multi_get_nb_received_data+0x4c>)
     556:	5a18      	ldrh	r0, [r3, r0]
     558:	1a40      	subs	r0, r0, r1
     55a:	2a00      	cmp	r2, #0
     55c:	d005      	beq.n	56a <udi_cdc_multi_get_nb_received_data+0x3a>
     55e:	2201      	movs	r2, #1
     560:	4b03      	ldr	r3, [pc, #12]	; (570 <udi_cdc_multi_get_nb_received_data+0x40>)
     562:	701a      	strb	r2, [r3, #0]
     564:	f3bf 8f5f 	dmb	sy
     568:	b662      	cpsie	i
     56a:	b002      	add	sp, #8
     56c:	4770      	bx	lr
     56e:	46c0      	nop			; (mov r8, r8)
     570:	200000f4 	.word	0x200000f4
     574:	20000698 	.word	0x20000698
     578:	20000694 	.word	0x20000694
     57c:	20000690 	.word	0x20000690

00000580 <udi_cdc_multi_is_rx_ready>:
     580:	b510      	push	{r4, lr}
     582:	4b03      	ldr	r3, [pc, #12]	; (590 <udi_cdc_multi_is_rx_ready+0x10>)
     584:	4798      	blx	r3
     586:	1e43      	subs	r3, r0, #1
     588:	4198      	sbcs	r0, r3
     58a:	b2c0      	uxtb	r0, r0
     58c:	bd10      	pop	{r4, pc}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	00000531 	.word	0x00000531

00000594 <udi_cdc_rx_start>:
     594:	b510      	push	{r4, lr}
     596:	b084      	sub	sp, #16
     598:	f3ef 8310 	mrs	r3, PRIMASK
     59c:	425a      	negs	r2, r3
     59e:	4153      	adcs	r3, r2
     5a0:	9303      	str	r3, [sp, #12]
     5a2:	b672      	cpsid	i
     5a4:	f3bf 8f5f 	dmb	sy
     5a8:	2200      	movs	r2, #0
     5aa:	4b1f      	ldr	r3, [pc, #124]	; (628 <udi_cdc_rx_start+0x94>)
     5ac:	701a      	strb	r2, [r3, #0]
     5ae:	9b03      	ldr	r3, [sp, #12]
     5b0:	4a1e      	ldr	r2, [pc, #120]	; (62c <udi_cdc_rx_start+0x98>)
     5b2:	7814      	ldrb	r4, [r2, #0]
     5b4:	b2e4      	uxtb	r4, r4
     5b6:	4a1e      	ldr	r2, [pc, #120]	; (630 <udi_cdc_rx_start+0x9c>)
     5b8:	7812      	ldrb	r2, [r2, #0]
     5ba:	2a00      	cmp	r2, #0
     5bc:	d107      	bne.n	5ce <udi_cdc_rx_start+0x3a>
     5be:	4a1d      	ldr	r2, [pc, #116]	; (634 <udi_cdc_rx_start+0xa0>)
     5c0:	8812      	ldrh	r2, [r2, #0]
     5c2:	0061      	lsls	r1, r4, #1
     5c4:	481c      	ldr	r0, [pc, #112]	; (638 <udi_cdc_rx_start+0xa4>)
     5c6:	5a09      	ldrh	r1, [r1, r0]
     5c8:	b292      	uxth	r2, r2
     5ca:	428a      	cmp	r2, r1
     5cc:	d20a      	bcs.n	5e4 <udi_cdc_rx_start+0x50>
     5ce:	2000      	movs	r0, #0
     5d0:	2b00      	cmp	r3, #0
     5d2:	d005      	beq.n	5e0 <udi_cdc_rx_start+0x4c>
     5d4:	2201      	movs	r2, #1
     5d6:	4b14      	ldr	r3, [pc, #80]	; (628 <udi_cdc_rx_start+0x94>)
     5d8:	701a      	strb	r2, [r3, #0]
     5da:	f3bf 8f5f 	dmb	sy
     5de:	b662      	cpsie	i
     5e0:	b004      	add	sp, #16
     5e2:	bd10      	pop	{r4, pc}
     5e4:	2100      	movs	r1, #0
     5e6:	4a13      	ldr	r2, [pc, #76]	; (634 <udi_cdc_rx_start+0xa0>)
     5e8:	8011      	strh	r1, [r2, #0]
     5ea:	4262      	negs	r2, r4
     5ec:	4162      	adcs	r2, r4
     5ee:	b2d2      	uxtb	r2, r2
     5f0:	490e      	ldr	r1, [pc, #56]	; (62c <udi_cdc_rx_start+0x98>)
     5f2:	700a      	strb	r2, [r1, #0]
     5f4:	2101      	movs	r1, #1
     5f6:	4a0e      	ldr	r2, [pc, #56]	; (630 <udi_cdc_rx_start+0x9c>)
     5f8:	7011      	strb	r1, [r2, #0]
     5fa:	2b00      	cmp	r3, #0
     5fc:	d005      	beq.n	60a <udi_cdc_rx_start+0x76>
     5fe:	2201      	movs	r2, #1
     600:	4b09      	ldr	r3, [pc, #36]	; (628 <udi_cdc_rx_start+0x94>)
     602:	701a      	strb	r2, [r3, #0]
     604:	f3bf 8f5f 	dmb	sy
     608:	b662      	cpsie	i
     60a:	2000      	movs	r0, #0
     60c:	4b0b      	ldr	r3, [pc, #44]	; (63c <udi_cdc_rx_start+0xa8>)
     60e:	4798      	blx	r3
     610:	01a4      	lsls	r4, r4, #6
     612:	4a0b      	ldr	r2, [pc, #44]	; (640 <udi_cdc_rx_start+0xac>)
     614:	1912      	adds	r2, r2, r4
     616:	4b0b      	ldr	r3, [pc, #44]	; (644 <udi_cdc_rx_start+0xb0>)
     618:	9300      	str	r3, [sp, #0]
     61a:	2340      	movs	r3, #64	; 0x40
     61c:	2101      	movs	r1, #1
     61e:	2002      	movs	r0, #2
     620:	4c09      	ldr	r4, [pc, #36]	; (648 <udi_cdc_rx_start+0xb4>)
     622:	47a0      	blx	r4
     624:	e7dc      	b.n	5e0 <udi_cdc_rx_start+0x4c>
     626:	46c0      	nop			; (mov r8, r8)
     628:	200000f4 	.word	0x200000f4
     62c:	20000694 	.word	0x20000694
     630:	2000069c 	.word	0x2000069c
     634:	20000698 	.word	0x20000698
     638:	20000690 	.word	0x20000690
     63c:	00000581 	.word	0x00000581
     640:	20000610 	.word	0x20000610
     644:	000006dd 	.word	0x000006dd
     648:	00003471 	.word	0x00003471

0000064c <udi_cdc_data_enable>:
     64c:	b570      	push	{r4, r5, r6, lr}
     64e:	2400      	movs	r4, #0
     650:	4b15      	ldr	r3, [pc, #84]	; (6a8 <udi_cdc_data_enable+0x5c>)
     652:	701c      	strb	r4, [r3, #0]
     654:	4b15      	ldr	r3, [pc, #84]	; (6ac <udi_cdc_data_enable+0x60>)
     656:	701c      	strb	r4, [r3, #0]
     658:	4b15      	ldr	r3, [pc, #84]	; (6b0 <udi_cdc_data_enable+0x64>)
     65a:	701c      	strb	r4, [r3, #0]
     65c:	4b15      	ldr	r3, [pc, #84]	; (6b4 <udi_cdc_data_enable+0x68>)
     65e:	701c      	strb	r4, [r3, #0]
     660:	4b15      	ldr	r3, [pc, #84]	; (6b8 <udi_cdc_data_enable+0x6c>)
     662:	2500      	movs	r5, #0
     664:	801c      	strh	r4, [r3, #0]
     666:	805c      	strh	r4, [r3, #2]
     668:	4b14      	ldr	r3, [pc, #80]	; (6bc <udi_cdc_data_enable+0x70>)
     66a:	801c      	strh	r4, [r3, #0]
     66c:	2000      	movs	r0, #0
     66e:	4b14      	ldr	r3, [pc, #80]	; (6c0 <udi_cdc_data_enable+0x74>)
     670:	4798      	blx	r3
     672:	4b14      	ldr	r3, [pc, #80]	; (6c4 <udi_cdc_data_enable+0x78>)
     674:	701d      	strb	r5, [r3, #0]
     676:	4b14      	ldr	r3, [pc, #80]	; (6c8 <udi_cdc_data_enable+0x7c>)
     678:	701d      	strb	r5, [r3, #0]
     67a:	4b14      	ldr	r3, [pc, #80]	; (6cc <udi_cdc_data_enable+0x80>)
     67c:	801c      	strh	r4, [r3, #0]
     67e:	805c      	strh	r4, [r3, #2]
     680:	4b13      	ldr	r3, [pc, #76]	; (6d0 <udi_cdc_data_enable+0x84>)
     682:	801c      	strh	r4, [r3, #0]
     684:	2000      	movs	r0, #0
     686:	4b13      	ldr	r3, [pc, #76]	; (6d4 <udi_cdc_data_enable+0x88>)
     688:	4798      	blx	r3
     68a:	2800      	cmp	r0, #0
     68c:	d007      	beq.n	69e <udi_cdc_data_enable+0x52>
     68e:	4a06      	ldr	r2, [pc, #24]	; (6a8 <udi_cdc_data_enable+0x5c>)
     690:	7813      	ldrb	r3, [r2, #0]
     692:	3301      	adds	r3, #1
     694:	b2db      	uxtb	r3, r3
     696:	7013      	strb	r3, [r2, #0]
     698:	7813      	ldrb	r3, [r2, #0]
     69a:	2b01      	cmp	r3, #1
     69c:	d000      	beq.n	6a0 <udi_cdc_data_enable+0x54>
     69e:	bd70      	pop	{r4, r5, r6, pc}
     6a0:	2201      	movs	r2, #1
     6a2:	4b0d      	ldr	r3, [pc, #52]	; (6d8 <udi_cdc_data_enable+0x8c>)
     6a4:	701a      	strb	r2, [r3, #0]
     6a6:	e7fa      	b.n	69e <udi_cdc_data_enable+0x52>
     6a8:	2000060c 	.word	0x2000060c
     6ac:	20000734 	.word	0x20000734
     6b0:	200006a4 	.word	0x200006a4
     6b4:	2000072c 	.word	0x2000072c
     6b8:	20000728 	.word	0x20000728
     6bc:	20000730 	.word	0x20000730
     6c0:	000002d1 	.word	0x000002d1
     6c4:	2000069c 	.word	0x2000069c
     6c8:	20000694 	.word	0x20000694
     6cc:	20000690 	.word	0x20000690
     6d0:	20000698 	.word	0x20000698
     6d4:	00000595 	.word	0x00000595
     6d8:	20000600 	.word	0x20000600

000006dc <udi_cdc_data_received>:
     6dc:	b510      	push	{r4, lr}
     6de:	b082      	sub	sp, #8
     6e0:	0014      	movs	r4, r2
     6e2:	2800      	cmp	r0, #0
     6e4:	d110      	bne.n	708 <udi_cdc_data_received+0x2c>
     6e6:	4b0f      	ldr	r3, [pc, #60]	; (724 <udi_cdc_data_received+0x48>)
     6e8:	781a      	ldrb	r2, [r3, #0]
     6ea:	4253      	negs	r3, r2
     6ec:	415a      	adcs	r2, r3
     6ee:	b2d2      	uxtb	r2, r2
     6f0:	2900      	cmp	r1, #0
     6f2:	d00b      	beq.n	70c <udi_cdc_data_received+0x30>
     6f4:	b289      	uxth	r1, r1
     6f6:	0052      	lsls	r2, r2, #1
     6f8:	4b0b      	ldr	r3, [pc, #44]	; (728 <udi_cdc_data_received+0x4c>)
     6fa:	52d1      	strh	r1, [r2, r3]
     6fc:	2200      	movs	r2, #0
     6fe:	4b0b      	ldr	r3, [pc, #44]	; (72c <udi_cdc_data_received+0x50>)
     700:	701a      	strb	r2, [r3, #0]
     702:	2000      	movs	r0, #0
     704:	4b0a      	ldr	r3, [pc, #40]	; (730 <udi_cdc_data_received+0x54>)
     706:	4798      	blx	r3
     708:	b002      	add	sp, #8
     70a:	bd10      	pop	{r4, pc}
     70c:	0192      	lsls	r2, r2, #6
     70e:	4b09      	ldr	r3, [pc, #36]	; (734 <udi_cdc_data_received+0x58>)
     710:	189a      	adds	r2, r3, r2
     712:	4b09      	ldr	r3, [pc, #36]	; (738 <udi_cdc_data_received+0x5c>)
     714:	9300      	str	r3, [sp, #0]
     716:	2340      	movs	r3, #64	; 0x40
     718:	3101      	adds	r1, #1
     71a:	0020      	movs	r0, r4
     71c:	4c07      	ldr	r4, [pc, #28]	; (73c <udi_cdc_data_received+0x60>)
     71e:	47a0      	blx	r4
     720:	e7f2      	b.n	708 <udi_cdc_data_received+0x2c>
     722:	46c0      	nop			; (mov r8, r8)
     724:	20000694 	.word	0x20000694
     728:	20000690 	.word	0x20000690
     72c:	2000069c 	.word	0x2000069c
     730:	00000595 	.word	0x00000595
     734:	20000610 	.word	0x20000610
     738:	000006dd 	.word	0x000006dd
     73c:	00003471 	.word	0x00003471

00000740 <udi_cdc_multi_getc>:
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	46d6      	mov	lr, sl
     744:	464f      	mov	r7, r9
     746:	4646      	mov	r6, r8
     748:	b5c0      	push	{r6, r7, lr}
     74a:	b082      	sub	sp, #8
     74c:	4b27      	ldr	r3, [pc, #156]	; (7ec <udi_cdc_multi_getc+0xac>)
     74e:	799b      	ldrb	r3, [r3, #6]
     750:	3b09      	subs	r3, #9
     752:	425a      	negs	r2, r3
     754:	4153      	adcs	r3, r2
     756:	b2db      	uxtb	r3, r3
     758:	4699      	mov	r9, r3
     75a:	2300      	movs	r3, #0
     75c:	469c      	mov	ip, r3
     75e:	4b24      	ldr	r3, [pc, #144]	; (7f0 <udi_cdc_multi_getc+0xb0>)
     760:	4698      	mov	r8, r3
     762:	2700      	movs	r7, #0
     764:	4e23      	ldr	r6, [pc, #140]	; (7f4 <udi_cdc_multi_getc+0xb4>)
     766:	4c24      	ldr	r4, [pc, #144]	; (7f8 <udi_cdc_multi_getc+0xb8>)
     768:	e005      	b.n	776 <udi_cdc_multi_getc+0x36>
     76a:	428b      	cmp	r3, r1
     76c:	d329      	bcc.n	7c2 <udi_cdc_multi_getc+0x82>
     76e:	4b23      	ldr	r3, [pc, #140]	; (7fc <udi_cdc_multi_getc+0xbc>)
     770:	781b      	ldrb	r3, [r3, #0]
     772:	2b00      	cmp	r3, #0
     774:	d01d      	beq.n	7b2 <udi_cdc_multi_getc+0x72>
     776:	f3ef 8310 	mrs	r3, PRIMASK
     77a:	425a      	negs	r2, r3
     77c:	4153      	adcs	r3, r2
     77e:	9301      	str	r3, [sp, #4]
     780:	b672      	cpsid	i
     782:	f3bf 8f5f 	dmb	sy
     786:	4643      	mov	r3, r8
     788:	701f      	strb	r7, [r3, #0]
     78a:	9801      	ldr	r0, [sp, #4]
     78c:	8833      	ldrh	r3, [r6, #0]
     78e:	b29b      	uxth	r3, r3
     790:	7822      	ldrb	r2, [r4, #0]
     792:	b2d2      	uxtb	r2, r2
     794:	0055      	lsls	r5, r2, #1
     796:	491a      	ldr	r1, [pc, #104]	; (800 <udi_cdc_multi_getc+0xc0>)
     798:	5a69      	ldrh	r1, [r5, r1]
     79a:	b289      	uxth	r1, r1
     79c:	2800      	cmp	r0, #0
     79e:	d0e4      	beq.n	76a <udi_cdc_multi_getc+0x2a>
     7a0:	2001      	movs	r0, #1
     7a2:	4682      	mov	sl, r0
     7a4:	4812      	ldr	r0, [pc, #72]	; (7f0 <udi_cdc_multi_getc+0xb0>)
     7a6:	4655      	mov	r5, sl
     7a8:	7005      	strb	r5, [r0, #0]
     7aa:	f3bf 8f5f 	dmb	sy
     7ae:	b662      	cpsie	i
     7b0:	e7db      	b.n	76a <udi_cdc_multi_getc+0x2a>
     7b2:	2500      	movs	r5, #0
     7b4:	0028      	movs	r0, r5
     7b6:	b002      	add	sp, #8
     7b8:	bc1c      	pop	{r2, r3, r4}
     7ba:	4690      	mov	r8, r2
     7bc:	4699      	mov	r9, r3
     7be:	46a2      	mov	sl, r4
     7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7c2:	0192      	lsls	r2, r2, #6
     7c4:	490f      	ldr	r1, [pc, #60]	; (804 <udi_cdc_multi_getc+0xc4>)
     7c6:	188a      	adds	r2, r1, r2
     7c8:	5cd2      	ldrb	r2, [r2, r3]
     7ca:	4665      	mov	r5, ip
     7cc:	4315      	orrs	r5, r2
     7ce:	3301      	adds	r3, #1
     7d0:	b29b      	uxth	r3, r3
     7d2:	4a08      	ldr	r2, [pc, #32]	; (7f4 <udi_cdc_multi_getc+0xb4>)
     7d4:	8013      	strh	r3, [r2, #0]
     7d6:	2000      	movs	r0, #0
     7d8:	4b0b      	ldr	r3, [pc, #44]	; (808 <udi_cdc_multi_getc+0xc8>)
     7da:	4798      	blx	r3
     7dc:	464b      	mov	r3, r9
     7de:	2b00      	cmp	r3, #0
     7e0:	d0e8      	beq.n	7b4 <udi_cdc_multi_getc+0x74>
     7e2:	022b      	lsls	r3, r5, #8
     7e4:	469c      	mov	ip, r3
     7e6:	2300      	movs	r3, #0
     7e8:	4699      	mov	r9, r3
     7ea:	e7c4      	b.n	776 <udi_cdc_multi_getc+0x36>
     7ec:	20000604 	.word	0x20000604
     7f0:	200000f4 	.word	0x200000f4
     7f4:	20000698 	.word	0x20000698
     7f8:	20000694 	.word	0x20000694
     7fc:	20000600 	.word	0x20000600
     800:	20000690 	.word	0x20000690
     804:	20000610 	.word	0x20000610
     808:	00000595 	.word	0x00000595

0000080c <udi_cdc_getc>:
     80c:	b510      	push	{r4, lr}
     80e:	2000      	movs	r0, #0
     810:	4b01      	ldr	r3, [pc, #4]	; (818 <udi_cdc_getc+0xc>)
     812:	4798      	blx	r3
     814:	bd10      	pop	{r4, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	00000741 	.word	0x00000741

0000081c <udi_cdc_multi_get_free_tx_buffer>:
     81c:	b082      	sub	sp, #8
     81e:	f3ef 8310 	mrs	r3, PRIMASK
     822:	425a      	negs	r2, r3
     824:	4153      	adcs	r3, r2
     826:	9301      	str	r3, [sp, #4]
     828:	b672      	cpsid	i
     82a:	f3bf 8f5f 	dmb	sy
     82e:	2200      	movs	r2, #0
     830:	4b14      	ldr	r3, [pc, #80]	; (884 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     832:	701a      	strb	r2, [r3, #0]
     834:	9901      	ldr	r1, [sp, #4]
     836:	4b14      	ldr	r3, [pc, #80]	; (888 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     838:	781b      	ldrb	r3, [r3, #0]
     83a:	b2db      	uxtb	r3, r3
     83c:	0058      	lsls	r0, r3, #1
     83e:	4a13      	ldr	r2, [pc, #76]	; (88c <udi_cdc_multi_get_free_tx_buffer+0x70>)
     840:	5a82      	ldrh	r2, [r0, r2]
     842:	2a40      	cmp	r2, #64	; 0x40
     844:	d00b      	beq.n	85e <udi_cdc_multi_get_free_tx_buffer+0x42>
     846:	2040      	movs	r0, #64	; 0x40
     848:	1a80      	subs	r0, r0, r2
     84a:	2900      	cmp	r1, #0
     84c:	d005      	beq.n	85a <udi_cdc_multi_get_free_tx_buffer+0x3e>
     84e:	2201      	movs	r2, #1
     850:	4b0c      	ldr	r3, [pc, #48]	; (884 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     852:	701a      	strb	r2, [r3, #0]
     854:	f3bf 8f5f 	dmb	sy
     858:	b662      	cpsie	i
     85a:	b002      	add	sp, #8
     85c:	4770      	bx	lr
     85e:	480c      	ldr	r0, [pc, #48]	; (890 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     860:	7800      	ldrb	r0, [r0, #0]
     862:	2800      	cmp	r0, #0
     864:	d1ef      	bne.n	846 <udi_cdc_multi_get_free_tx_buffer+0x2a>
     866:	480b      	ldr	r0, [pc, #44]	; (894 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     868:	7800      	ldrb	r0, [r0, #0]
     86a:	2800      	cmp	r0, #0
     86c:	d1eb      	bne.n	846 <udi_cdc_multi_get_free_tx_buffer+0x2a>
     86e:	3001      	adds	r0, #1
     870:	4a08      	ldr	r2, [pc, #32]	; (894 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     872:	7010      	strb	r0, [r2, #0]
     874:	425a      	negs	r2, r3
     876:	4153      	adcs	r3, r2
     878:	b2db      	uxtb	r3, r3
     87a:	4a03      	ldr	r2, [pc, #12]	; (888 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     87c:	7013      	strb	r3, [r2, #0]
     87e:	2200      	movs	r2, #0
     880:	e7e1      	b.n	846 <udi_cdc_multi_get_free_tx_buffer+0x2a>
     882:	46c0      	nop			; (mov r8, r8)
     884:	200000f4 	.word	0x200000f4
     888:	2000072c 	.word	0x2000072c
     88c:	20000728 	.word	0x20000728
     890:	20000734 	.word	0x20000734
     894:	200006a4 	.word	0x200006a4

00000898 <udi_cdc_multi_is_tx_ready>:
     898:	b510      	push	{r4, lr}
     89a:	4b03      	ldr	r3, [pc, #12]	; (8a8 <udi_cdc_multi_is_tx_ready+0x10>)
     89c:	4798      	blx	r3
     89e:	1e43      	subs	r3, r0, #1
     8a0:	4198      	sbcs	r0, r3
     8a2:	b2c0      	uxtb	r0, r0
     8a4:	bd10      	pop	{r4, pc}
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	0000081d 	.word	0x0000081d

000008ac <udi_cdc_multi_putc>:
     8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ae:	46de      	mov	lr, fp
     8b0:	4657      	mov	r7, sl
     8b2:	464e      	mov	r6, r9
     8b4:	4645      	mov	r5, r8
     8b6:	b5e0      	push	{r5, r6, r7, lr}
     8b8:	b083      	sub	sp, #12
     8ba:	000c      	movs	r4, r1
     8bc:	4b22      	ldr	r3, [pc, #136]	; (948 <udi_cdc_multi_putc+0x9c>)
     8be:	799d      	ldrb	r5, [r3, #6]
     8c0:	3d09      	subs	r5, #9
     8c2:	426b      	negs	r3, r5
     8c4:	415d      	adcs	r5, r3
     8c6:	b2ed      	uxtb	r5, r5
     8c8:	4e20      	ldr	r6, [pc, #128]	; (94c <udi_cdc_multi_putc+0xa0>)
     8ca:	4b21      	ldr	r3, [pc, #132]	; (950 <udi_cdc_multi_putc+0xa4>)
     8cc:	4698      	mov	r8, r3
     8ce:	4b21      	ldr	r3, [pc, #132]	; (954 <udi_cdc_multi_putc+0xa8>)
     8d0:	469a      	mov	sl, r3
     8d2:	e027      	b.n	924 <udi_cdc_multi_putc+0x78>
     8d4:	f3ef 8310 	mrs	r3, PRIMASK
     8d8:	425a      	negs	r2, r3
     8da:	4153      	adcs	r3, r2
     8dc:	9301      	str	r3, [sp, #4]
     8de:	b672      	cpsid	i
     8e0:	f3bf 8f5f 	dmb	sy
     8e4:	2300      	movs	r3, #0
     8e6:	4642      	mov	r2, r8
     8e8:	7013      	strb	r3, [r2, #0]
     8ea:	9b01      	ldr	r3, [sp, #4]
     8ec:	469b      	mov	fp, r3
     8ee:	4653      	mov	r3, sl
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	b2db      	uxtb	r3, r3
     8f4:	4a18      	ldr	r2, [pc, #96]	; (958 <udi_cdc_multi_putc+0xac>)
     8f6:	4694      	mov	ip, r2
     8f8:	005f      	lsls	r7, r3, #1
     8fa:	5ab9      	ldrh	r1, [r7, r2]
     8fc:	1c4a      	adds	r2, r1, #1
     8fe:	4660      	mov	r0, ip
     900:	523a      	strh	r2, [r7, r0]
     902:	019b      	lsls	r3, r3, #6
     904:	4a15      	ldr	r2, [pc, #84]	; (95c <udi_cdc_multi_putc+0xb0>)
     906:	18d3      	adds	r3, r2, r3
     908:	545c      	strb	r4, [r3, r1]
     90a:	465b      	mov	r3, fp
     90c:	2b00      	cmp	r3, #0
     90e:	d005      	beq.n	91c <udi_cdc_multi_putc+0x70>
     910:	2201      	movs	r2, #1
     912:	4b0f      	ldr	r3, [pc, #60]	; (950 <udi_cdc_multi_putc+0xa4>)
     914:	701a      	strb	r2, [r3, #0]
     916:	f3bf 8f5f 	dmb	sy
     91a:	b662      	cpsie	i
     91c:	2d00      	cmp	r5, #0
     91e:	d010      	beq.n	942 <udi_cdc_multi_putc+0x96>
     920:	1224      	asrs	r4, r4, #8
     922:	2500      	movs	r5, #0
     924:	2000      	movs	r0, #0
     926:	47b0      	blx	r6
     928:	2800      	cmp	r0, #0
     92a:	d1d3      	bne.n	8d4 <udi_cdc_multi_putc+0x28>
     92c:	4b0c      	ldr	r3, [pc, #48]	; (960 <udi_cdc_multi_putc+0xb4>)
     92e:	781b      	ldrb	r3, [r3, #0]
     930:	2b00      	cmp	r3, #0
     932:	d1f7      	bne.n	924 <udi_cdc_multi_putc+0x78>
     934:	b003      	add	sp, #12
     936:	bc3c      	pop	{r2, r3, r4, r5}
     938:	4690      	mov	r8, r2
     93a:	4699      	mov	r9, r3
     93c:	46a2      	mov	sl, r4
     93e:	46ab      	mov	fp, r5
     940:	bdf0      	pop	{r4, r5, r6, r7, pc}
     942:	2001      	movs	r0, #1
     944:	e7f6      	b.n	934 <udi_cdc_multi_putc+0x88>
     946:	46c0      	nop			; (mov r8, r8)
     948:	20000604 	.word	0x20000604
     94c:	00000899 	.word	0x00000899
     950:	200000f4 	.word	0x200000f4
     954:	2000072c 	.word	0x2000072c
     958:	20000728 	.word	0x20000728
     95c:	200006a8 	.word	0x200006a8
     960:	20000600 	.word	0x20000600

00000964 <udi_cdc_putc>:
     964:	b510      	push	{r4, lr}
     966:	0001      	movs	r1, r0
     968:	2000      	movs	r0, #0
     96a:	4b01      	ldr	r3, [pc, #4]	; (970 <udi_cdc_putc+0xc>)
     96c:	4798      	blx	r3
     96e:	bd10      	pop	{r4, pc}
     970:	000008ad 	.word	0x000008ad

00000974 <udc_next_desc_in_iface>:
     974:	b510      	push	{r4, lr}
     976:	4b11      	ldr	r3, [pc, #68]	; (9bc <udc_next_desc_in_iface+0x48>)
     978:	681b      	ldr	r3, [r3, #0]
     97a:	681a      	ldr	r2, [r3, #0]
     97c:	7894      	ldrb	r4, [r2, #2]
     97e:	78d3      	ldrb	r3, [r2, #3]
     980:	021b      	lsls	r3, r3, #8
     982:	4323      	orrs	r3, r4
     984:	18d2      	adds	r2, r2, r3
     986:	7803      	ldrb	r3, [r0, #0]
     988:	18c0      	adds	r0, r0, r3
     98a:	4290      	cmp	r0, r2
     98c:	d210      	bcs.n	9b0 <udc_next_desc_in_iface+0x3c>
     98e:	7843      	ldrb	r3, [r0, #1]
     990:	2b04      	cmp	r3, #4
     992:	d00f      	beq.n	9b4 <udc_next_desc_in_iface+0x40>
     994:	428b      	cmp	r3, r1
     996:	d00a      	beq.n	9ae <udc_next_desc_in_iface+0x3a>
     998:	7803      	ldrb	r3, [r0, #0]
     99a:	18c0      	adds	r0, r0, r3
     99c:	4290      	cmp	r0, r2
     99e:	d205      	bcs.n	9ac <udc_next_desc_in_iface+0x38>
     9a0:	7843      	ldrb	r3, [r0, #1]
     9a2:	2b04      	cmp	r3, #4
     9a4:	d008      	beq.n	9b8 <udc_next_desc_in_iface+0x44>
     9a6:	428b      	cmp	r3, r1
     9a8:	d1f6      	bne.n	998 <udc_next_desc_in_iface+0x24>
     9aa:	e000      	b.n	9ae <udc_next_desc_in_iface+0x3a>
     9ac:	2000      	movs	r0, #0
     9ae:	bd10      	pop	{r4, pc}
     9b0:	2000      	movs	r0, #0
     9b2:	e7fc      	b.n	9ae <udc_next_desc_in_iface+0x3a>
     9b4:	2000      	movs	r0, #0
     9b6:	e7fa      	b.n	9ae <udc_next_desc_in_iface+0x3a>
     9b8:	2000      	movs	r0, #0
     9ba:	e7f8      	b.n	9ae <udc_next_desc_in_iface+0x3a>
     9bc:	20000750 	.word	0x20000750

000009c0 <udc_valid_address>:
     9c0:	b510      	push	{r4, lr}
     9c2:	4b03      	ldr	r3, [pc, #12]	; (9d0 <udc_valid_address+0x10>)
     9c4:	885b      	ldrh	r3, [r3, #2]
     9c6:	207f      	movs	r0, #127	; 0x7f
     9c8:	4018      	ands	r0, r3
     9ca:	4b02      	ldr	r3, [pc, #8]	; (9d4 <udc_valid_address+0x14>)
     9cc:	4798      	blx	r3
     9ce:	bd10      	pop	{r4, pc}
     9d0:	20000ac4 	.word	0x20000ac4
     9d4:	00003649 	.word	0x00003649

000009d8 <udc_update_iface_desc>:
     9d8:	b570      	push	{r4, r5, r6, lr}
     9da:	4b19      	ldr	r3, [pc, #100]	; (a40 <udc_update_iface_desc+0x68>)
     9dc:	781b      	ldrb	r3, [r3, #0]
     9de:	2200      	movs	r2, #0
     9e0:	2b00      	cmp	r3, #0
     9e2:	d029      	beq.n	a38 <udc_update_iface_desc+0x60>
     9e4:	4b17      	ldr	r3, [pc, #92]	; (a44 <udc_update_iface_desc+0x6c>)
     9e6:	681b      	ldr	r3, [r3, #0]
     9e8:	681b      	ldr	r3, [r3, #0]
     9ea:	791c      	ldrb	r4, [r3, #4]
     9ec:	4284      	cmp	r4, r0
     9ee:	d923      	bls.n	a38 <udc_update_iface_desc+0x60>
     9f0:	4a15      	ldr	r2, [pc, #84]	; (a48 <udc_update_iface_desc+0x70>)
     9f2:	6013      	str	r3, [r2, #0]
     9f4:	789a      	ldrb	r2, [r3, #2]
     9f6:	78dc      	ldrb	r4, [r3, #3]
     9f8:	0224      	lsls	r4, r4, #8
     9fa:	4314      	orrs	r4, r2
     9fc:	191c      	adds	r4, r3, r4
     9fe:	42a3      	cmp	r3, r4
     a00:	d21c      	bcs.n	a3c <udc_update_iface_desc+0x64>
     a02:	2500      	movs	r5, #0
     a04:	2601      	movs	r6, #1
     a06:	e007      	b.n	a18 <udc_update_iface_desc+0x40>
     a08:	4a0f      	ldr	r2, [pc, #60]	; (a48 <udc_update_iface_desc+0x70>)
     a0a:	6013      	str	r3, [r2, #0]
     a0c:	e00f      	b.n	a2e <udc_update_iface_desc+0x56>
     a0e:	781a      	ldrb	r2, [r3, #0]
     a10:	189b      	adds	r3, r3, r2
     a12:	0035      	movs	r5, r6
     a14:	42a3      	cmp	r3, r4
     a16:	d20c      	bcs.n	a32 <udc_update_iface_desc+0x5a>
     a18:	785a      	ldrb	r2, [r3, #1]
     a1a:	2a04      	cmp	r2, #4
     a1c:	d1f7      	bne.n	a0e <udc_update_iface_desc+0x36>
     a1e:	789a      	ldrb	r2, [r3, #2]
     a20:	4282      	cmp	r2, r0
     a22:	d1f4      	bne.n	a0e <udc_update_iface_desc+0x36>
     a24:	78da      	ldrb	r2, [r3, #3]
     a26:	428a      	cmp	r2, r1
     a28:	d1f1      	bne.n	a0e <udc_update_iface_desc+0x36>
     a2a:	2d00      	cmp	r5, #0
     a2c:	d1ec      	bne.n	a08 <udc_update_iface_desc+0x30>
     a2e:	2201      	movs	r2, #1
     a30:	e002      	b.n	a38 <udc_update_iface_desc+0x60>
     a32:	4a05      	ldr	r2, [pc, #20]	; (a48 <udc_update_iface_desc+0x70>)
     a34:	6013      	str	r3, [r2, #0]
     a36:	2200      	movs	r2, #0
     a38:	0010      	movs	r0, r2
     a3a:	bd70      	pop	{r4, r5, r6, pc}
     a3c:	2200      	movs	r2, #0
     a3e:	e7fb      	b.n	a38 <udc_update_iface_desc+0x60>
     a40:	2000074c 	.word	0x2000074c
     a44:	20000750 	.word	0x20000750
     a48:	20000754 	.word	0x20000754

00000a4c <udc_iface_disable>:
     a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4e:	46c6      	mov	lr, r8
     a50:	b500      	push	{lr}
     a52:	0004      	movs	r4, r0
     a54:	2100      	movs	r1, #0
     a56:	4b13      	ldr	r3, [pc, #76]	; (aa4 <udc_iface_disable+0x58>)
     a58:	4798      	blx	r3
     a5a:	1e05      	subs	r5, r0, #0
     a5c:	d103      	bne.n	a66 <udc_iface_disable+0x1a>
     a5e:	0028      	movs	r0, r5
     a60:	bc04      	pop	{r2}
     a62:	4690      	mov	r8, r2
     a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a66:	4b10      	ldr	r3, [pc, #64]	; (aa8 <udc_iface_disable+0x5c>)
     a68:	681b      	ldr	r3, [r3, #0]
     a6a:	685b      	ldr	r3, [r3, #4]
     a6c:	00a2      	lsls	r2, r4, #2
     a6e:	58d3      	ldr	r3, [r2, r3]
     a70:	4698      	mov	r8, r3
     a72:	68db      	ldr	r3, [r3, #12]
     a74:	4798      	blx	r3
     a76:	0001      	movs	r1, r0
     a78:	0020      	movs	r0, r4
     a7a:	4b0a      	ldr	r3, [pc, #40]	; (aa4 <udc_iface_disable+0x58>)
     a7c:	4798      	blx	r3
     a7e:	1e05      	subs	r5, r0, #0
     a80:	d0ed      	beq.n	a5e <udc_iface_disable+0x12>
     a82:	4b0a      	ldr	r3, [pc, #40]	; (aac <udc_iface_disable+0x60>)
     a84:	681c      	ldr	r4, [r3, #0]
     a86:	4e0a      	ldr	r6, [pc, #40]	; (ab0 <udc_iface_disable+0x64>)
     a88:	4f0a      	ldr	r7, [pc, #40]	; (ab4 <udc_iface_disable+0x68>)
     a8a:	2105      	movs	r1, #5
     a8c:	0020      	movs	r0, r4
     a8e:	47b0      	blx	r6
     a90:	1e04      	subs	r4, r0, #0
     a92:	d002      	beq.n	a9a <udc_iface_disable+0x4e>
     a94:	7880      	ldrb	r0, [r0, #2]
     a96:	47b8      	blx	r7
     a98:	e7f7      	b.n	a8a <udc_iface_disable+0x3e>
     a9a:	4643      	mov	r3, r8
     a9c:	685b      	ldr	r3, [r3, #4]
     a9e:	4798      	blx	r3
     aa0:	e7dd      	b.n	a5e <udc_iface_disable+0x12>
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	000009d9 	.word	0x000009d9
     aa8:	20000750 	.word	0x20000750
     aac:	20000754 	.word	0x20000754
     ab0:	00000975 	.word	0x00000975
     ab4:	00003189 	.word	0x00003189

00000ab8 <udc_iface_enable>:
     ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aba:	0005      	movs	r5, r0
     abc:	4b0f      	ldr	r3, [pc, #60]	; (afc <udc_iface_enable+0x44>)
     abe:	4798      	blx	r3
     ac0:	2800      	cmp	r0, #0
     ac2:	d019      	beq.n	af8 <udc_iface_enable+0x40>
     ac4:	4b0e      	ldr	r3, [pc, #56]	; (b00 <udc_iface_enable+0x48>)
     ac6:	681c      	ldr	r4, [r3, #0]
     ac8:	4e0e      	ldr	r6, [pc, #56]	; (b04 <udc_iface_enable+0x4c>)
     aca:	4f0f      	ldr	r7, [pc, #60]	; (b08 <udc_iface_enable+0x50>)
     acc:	2105      	movs	r1, #5
     ace:	0020      	movs	r0, r4
     ad0:	47b0      	blx	r6
     ad2:	1e04      	subs	r4, r0, #0
     ad4:	d009      	beq.n	aea <udc_iface_enable+0x32>
     ad6:	7903      	ldrb	r3, [r0, #4]
     ad8:	7942      	ldrb	r2, [r0, #5]
     ada:	0212      	lsls	r2, r2, #8
     adc:	431a      	orrs	r2, r3
     ade:	78c1      	ldrb	r1, [r0, #3]
     ae0:	7880      	ldrb	r0, [r0, #2]
     ae2:	47b8      	blx	r7
     ae4:	2800      	cmp	r0, #0
     ae6:	d1f1      	bne.n	acc <udc_iface_enable+0x14>
     ae8:	e006      	b.n	af8 <udc_iface_enable+0x40>
     aea:	4b08      	ldr	r3, [pc, #32]	; (b0c <udc_iface_enable+0x54>)
     aec:	681b      	ldr	r3, [r3, #0]
     aee:	685b      	ldr	r3, [r3, #4]
     af0:	00ad      	lsls	r5, r5, #2
     af2:	58eb      	ldr	r3, [r5, r3]
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	4798      	blx	r3
     af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	000009d9 	.word	0x000009d9
     b00:	20000754 	.word	0x20000754
     b04:	00000975 	.word	0x00000975
     b08:	000031e1 	.word	0x000031e1
     b0c:	20000750 	.word	0x20000750

00000b10 <udc_start>:
     b10:	b510      	push	{r4, lr}
     b12:	4b01      	ldr	r3, [pc, #4]	; (b18 <udc_start+0x8>)
     b14:	4798      	blx	r3
     b16:	bd10      	pop	{r4, pc}
     b18:	000036f9 	.word	0x000036f9

00000b1c <udc_reset>:
     b1c:	b570      	push	{r4, r5, r6, lr}
     b1e:	4b0e      	ldr	r3, [pc, #56]	; (b58 <udc_reset+0x3c>)
     b20:	781b      	ldrb	r3, [r3, #0]
     b22:	2b00      	cmp	r3, #0
     b24:	d011      	beq.n	b4a <udc_reset+0x2e>
     b26:	4b0d      	ldr	r3, [pc, #52]	; (b5c <udc_reset+0x40>)
     b28:	681b      	ldr	r3, [r3, #0]
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	791b      	ldrb	r3, [r3, #4]
     b2e:	2b00      	cmp	r3, #0
     b30:	d00b      	beq.n	b4a <udc_reset+0x2e>
     b32:	2400      	movs	r4, #0
     b34:	4e0a      	ldr	r6, [pc, #40]	; (b60 <udc_reset+0x44>)
     b36:	4d09      	ldr	r5, [pc, #36]	; (b5c <udc_reset+0x40>)
     b38:	0020      	movs	r0, r4
     b3a:	47b0      	blx	r6
     b3c:	3401      	adds	r4, #1
     b3e:	b2e4      	uxtb	r4, r4
     b40:	682b      	ldr	r3, [r5, #0]
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	791b      	ldrb	r3, [r3, #4]
     b46:	42a3      	cmp	r3, r4
     b48:	d8f6      	bhi.n	b38 <udc_reset+0x1c>
     b4a:	2300      	movs	r3, #0
     b4c:	4a02      	ldr	r2, [pc, #8]	; (b58 <udc_reset+0x3c>)
     b4e:	7013      	strb	r3, [r2, #0]
     b50:	4a04      	ldr	r2, [pc, #16]	; (b64 <udc_reset+0x48>)
     b52:	8013      	strh	r3, [r2, #0]
     b54:	bd70      	pop	{r4, r5, r6, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	2000074c 	.word	0x2000074c
     b5c:	20000750 	.word	0x20000750
     b60:	00000a4d 	.word	0x00000a4d
     b64:	20000742 	.word	0x20000742

00000b68 <udc_sof_notify>:
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	4b0e      	ldr	r3, [pc, #56]	; (ba4 <udc_sof_notify+0x3c>)
     b6c:	781b      	ldrb	r3, [r3, #0]
     b6e:	2b00      	cmp	r3, #0
     b70:	d017      	beq.n	ba2 <udc_sof_notify+0x3a>
     b72:	4b0d      	ldr	r3, [pc, #52]	; (ba8 <udc_sof_notify+0x40>)
     b74:	681b      	ldr	r3, [r3, #0]
     b76:	681a      	ldr	r2, [r3, #0]
     b78:	7912      	ldrb	r2, [r2, #4]
     b7a:	2a00      	cmp	r2, #0
     b7c:	d011      	beq.n	ba2 <udc_sof_notify+0x3a>
     b7e:	2400      	movs	r4, #0
     b80:	4d09      	ldr	r5, [pc, #36]	; (ba8 <udc_sof_notify+0x40>)
     b82:	e006      	b.n	b92 <udc_sof_notify+0x2a>
     b84:	3401      	adds	r4, #1
     b86:	b2e4      	uxtb	r4, r4
     b88:	682b      	ldr	r3, [r5, #0]
     b8a:	681a      	ldr	r2, [r3, #0]
     b8c:	7912      	ldrb	r2, [r2, #4]
     b8e:	42a2      	cmp	r2, r4
     b90:	d907      	bls.n	ba2 <udc_sof_notify+0x3a>
     b92:	685b      	ldr	r3, [r3, #4]
     b94:	00a2      	lsls	r2, r4, #2
     b96:	58d3      	ldr	r3, [r2, r3]
     b98:	691b      	ldr	r3, [r3, #16]
     b9a:	2b00      	cmp	r3, #0
     b9c:	d0f2      	beq.n	b84 <udc_sof_notify+0x1c>
     b9e:	4798      	blx	r3
     ba0:	e7f0      	b.n	b84 <udc_sof_notify+0x1c>
     ba2:	bd70      	pop	{r4, r5, r6, pc}
     ba4:	2000074c 	.word	0x2000074c
     ba8:	20000750 	.word	0x20000750

00000bac <udc_process_setup>:
     bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bae:	4baa      	ldr	r3, [pc, #680]	; (e58 <udc_process_setup+0x2ac>)
     bb0:	2200      	movs	r2, #0
     bb2:	819a      	strh	r2, [r3, #12]
     bb4:	611a      	str	r2, [r3, #16]
     bb6:	615a      	str	r2, [r3, #20]
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	b25a      	sxtb	r2, r3
     bbc:	2a00      	cmp	r2, #0
     bbe:	db13      	blt.n	be8 <udc_process_setup+0x3c>
     bc0:	2260      	movs	r2, #96	; 0x60
     bc2:	421a      	tst	r2, r3
     bc4:	d100      	bne.n	bc8 <udc_process_setup+0x1c>
     bc6:	e0d6      	b.n	d76 <udc_process_setup+0x1ca>
     bc8:	4ba3      	ldr	r3, [pc, #652]	; (e58 <udc_process_setup+0x2ac>)
     bca:	781a      	ldrb	r2, [r3, #0]
     bcc:	231f      	movs	r3, #31
     bce:	4013      	ands	r3, r2
     bd0:	2b01      	cmp	r3, #1
     bd2:	d100      	bne.n	bd6 <udc_process_setup+0x2a>
     bd4:	e172      	b.n	ebc <udc_process_setup+0x310>
     bd6:	4ba0      	ldr	r3, [pc, #640]	; (e58 <udc_process_setup+0x2ac>)
     bd8:	781a      	ldrb	r2, [r3, #0]
     bda:	231f      	movs	r3, #31
     bdc:	4013      	ands	r3, r2
     bde:	2000      	movs	r0, #0
     be0:	2b02      	cmp	r3, #2
     be2:	d100      	bne.n	be6 <udc_process_setup+0x3a>
     be4:	e1c8      	b.n	f78 <udc_process_setup+0x3cc>
     be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     be8:	4a9b      	ldr	r2, [pc, #620]	; (e58 <udc_process_setup+0x2ac>)
     bea:	88d2      	ldrh	r2, [r2, #6]
     bec:	2000      	movs	r0, #0
     bee:	2a00      	cmp	r2, #0
     bf0:	d0f9      	beq.n	be6 <udc_process_setup+0x3a>
     bf2:	2160      	movs	r1, #96	; 0x60
     bf4:	4219      	tst	r1, r3
     bf6:	d1e7      	bne.n	bc8 <udc_process_setup+0x1c>
     bf8:	211f      	movs	r1, #31
     bfa:	400b      	ands	r3, r1
     bfc:	d108      	bne.n	c10 <udc_process_setup+0x64>
     bfe:	4996      	ldr	r1, [pc, #600]	; (e58 <udc_process_setup+0x2ac>)
     c00:	7849      	ldrb	r1, [r1, #1]
     c02:	2906      	cmp	r1, #6
     c04:	d023      	beq.n	c4e <udc_process_setup+0xa2>
     c06:	2908      	cmp	r1, #8
     c08:	d100      	bne.n	c0c <udc_process_setup+0x60>
     c0a:	e083      	b.n	d14 <udc_process_setup+0x168>
     c0c:	2900      	cmp	r1, #0
     c0e:	d017      	beq.n	c40 <udc_process_setup+0x94>
     c10:	2b01      	cmp	r3, #1
     c12:	d100      	bne.n	c16 <udc_process_setup+0x6a>
     c14:	e086      	b.n	d24 <udc_process_setup+0x178>
     c16:	2b02      	cmp	r3, #2
     c18:	d1d6      	bne.n	bc8 <udc_process_setup+0x1c>
     c1a:	4b8f      	ldr	r3, [pc, #572]	; (e58 <udc_process_setup+0x2ac>)
     c1c:	785b      	ldrb	r3, [r3, #1]
     c1e:	2000      	movs	r0, #0
     c20:	2b00      	cmp	r3, #0
     c22:	d000      	beq.n	c26 <udc_process_setup+0x7a>
     c24:	e1a4      	b.n	f70 <udc_process_setup+0x3c4>
     c26:	2a02      	cmp	r2, #2
     c28:	d1d5      	bne.n	bd6 <udc_process_setup+0x2a>
     c2a:	4b8b      	ldr	r3, [pc, #556]	; (e58 <udc_process_setup+0x2ac>)
     c2c:	7918      	ldrb	r0, [r3, #4]
     c2e:	4b8b      	ldr	r3, [pc, #556]	; (e5c <udc_process_setup+0x2b0>)
     c30:	4798      	blx	r3
     c32:	4b8b      	ldr	r3, [pc, #556]	; (e60 <udc_process_setup+0x2b4>)
     c34:	8018      	strh	r0, [r3, #0]
     c36:	2102      	movs	r1, #2
     c38:	0018      	movs	r0, r3
     c3a:	4b8a      	ldr	r3, [pc, #552]	; (e64 <udc_process_setup+0x2b8>)
     c3c:	4798      	blx	r3
     c3e:	e0fb      	b.n	e38 <udc_process_setup+0x28c>
     c40:	2a02      	cmp	r2, #2
     c42:	d1c8      	bne.n	bd6 <udc_process_setup+0x2a>
     c44:	3102      	adds	r1, #2
     c46:	4888      	ldr	r0, [pc, #544]	; (e68 <udc_process_setup+0x2bc>)
     c48:	4b86      	ldr	r3, [pc, #536]	; (e64 <udc_process_setup+0x2b8>)
     c4a:	4798      	blx	r3
     c4c:	e0f4      	b.n	e38 <udc_process_setup+0x28c>
     c4e:	4b82      	ldr	r3, [pc, #520]	; (e58 <udc_process_setup+0x2ac>)
     c50:	885a      	ldrh	r2, [r3, #2]
     c52:	0a13      	lsrs	r3, r2, #8
     c54:	2b02      	cmp	r3, #2
     c56:	d023      	beq.n	ca0 <udc_process_setup+0xf4>
     c58:	b2d9      	uxtb	r1, r3
     c5a:	2902      	cmp	r1, #2
     c5c:	d90f      	bls.n	c7e <udc_process_setup+0xd2>
     c5e:	2b03      	cmp	r3, #3
     c60:	d034      	beq.n	ccc <udc_process_setup+0x120>
     c62:	2b0f      	cmp	r3, #15
     c64:	d000      	beq.n	c68 <udc_process_setup+0xbc>
     c66:	e180      	b.n	f6a <udc_process_setup+0x3be>
     c68:	4b80      	ldr	r3, [pc, #512]	; (e6c <udc_process_setup+0x2c0>)
     c6a:	6898      	ldr	r0, [r3, #8]
     c6c:	2800      	cmp	r0, #0
     c6e:	d0b2      	beq.n	bd6 <udc_process_setup+0x2a>
     c70:	7883      	ldrb	r3, [r0, #2]
     c72:	78c1      	ldrb	r1, [r0, #3]
     c74:	0209      	lsls	r1, r1, #8
     c76:	4319      	orrs	r1, r3
     c78:	4b7a      	ldr	r3, [pc, #488]	; (e64 <udc_process_setup+0x2b8>)
     c7a:	4798      	blx	r3
     c7c:	e007      	b.n	c8e <udc_process_setup+0xe2>
     c7e:	2b01      	cmp	r3, #1
     c80:	d000      	beq.n	c84 <udc_process_setup+0xd8>
     c82:	e172      	b.n	f6a <udc_process_setup+0x3be>
     c84:	4b79      	ldr	r3, [pc, #484]	; (e6c <udc_process_setup+0x2c0>)
     c86:	6818      	ldr	r0, [r3, #0]
     c88:	7801      	ldrb	r1, [r0, #0]
     c8a:	4b76      	ldr	r3, [pc, #472]	; (e64 <udc_process_setup+0x2b8>)
     c8c:	4798      	blx	r3
     c8e:	4b72      	ldr	r3, [pc, #456]	; (e58 <udc_process_setup+0x2ac>)
     c90:	88da      	ldrh	r2, [r3, #6]
     c92:	899b      	ldrh	r3, [r3, #12]
     c94:	4293      	cmp	r3, r2
     c96:	d800      	bhi.n	c9a <udc_process_setup+0xee>
     c98:	e0ce      	b.n	e38 <udc_process_setup+0x28c>
     c9a:	4b6f      	ldr	r3, [pc, #444]	; (e58 <udc_process_setup+0x2ac>)
     c9c:	819a      	strh	r2, [r3, #12]
     c9e:	e0cb      	b.n	e38 <udc_process_setup+0x28c>
     ca0:	b2d2      	uxtb	r2, r2
     ca2:	4b72      	ldr	r3, [pc, #456]	; (e6c <udc_process_setup+0x2c0>)
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	7c5b      	ldrb	r3, [r3, #17]
     ca8:	4293      	cmp	r3, r2
     caa:	d800      	bhi.n	cae <udc_process_setup+0x102>
     cac:	e793      	b.n	bd6 <udc_process_setup+0x2a>
     cae:	4b6f      	ldr	r3, [pc, #444]	; (e6c <udc_process_setup+0x2c0>)
     cb0:	685b      	ldr	r3, [r3, #4]
     cb2:	00d2      	lsls	r2, r2, #3
     cb4:	58d0      	ldr	r0, [r2, r3]
     cb6:	7883      	ldrb	r3, [r0, #2]
     cb8:	78c1      	ldrb	r1, [r0, #3]
     cba:	0209      	lsls	r1, r1, #8
     cbc:	4319      	orrs	r1, r3
     cbe:	4b69      	ldr	r3, [pc, #420]	; (e64 <udc_process_setup+0x2b8>)
     cc0:	4798      	blx	r3
     cc2:	4b65      	ldr	r3, [pc, #404]	; (e58 <udc_process_setup+0x2ac>)
     cc4:	689b      	ldr	r3, [r3, #8]
     cc6:	2202      	movs	r2, #2
     cc8:	705a      	strb	r2, [r3, #1]
     cca:	e7e0      	b.n	c8e <udc_process_setup+0xe2>
     ccc:	23ff      	movs	r3, #255	; 0xff
     cce:	401a      	ands	r2, r3
     cd0:	2a01      	cmp	r2, #1
     cd2:	d01c      	beq.n	d0e <udc_process_setup+0x162>
     cd4:	2a00      	cmp	r2, #0
     cd6:	d015      	beq.n	d04 <udc_process_setup+0x158>
     cd8:	2a02      	cmp	r2, #2
     cda:	d000      	beq.n	cde <udc_process_setup+0x132>
     cdc:	e774      	b.n	bc8 <udc_process_setup+0x1c>
     cde:	4c64      	ldr	r4, [pc, #400]	; (e70 <udc_process_setup+0x2c4>)
     ce0:	210f      	movs	r1, #15
     ce2:	4a64      	ldr	r2, [pc, #400]	; (e74 <udc_process_setup+0x2c8>)
     ce4:	2300      	movs	r3, #0
     ce6:	5ce0      	ldrb	r0, [r4, r3]
     ce8:	8050      	strh	r0, [r2, #2]
     cea:	3301      	adds	r3, #1
     cec:	3202      	adds	r2, #2
     cee:	b2d8      	uxtb	r0, r3
     cf0:	4288      	cmp	r0, r1
     cf2:	d3f8      	bcc.n	ce6 <udc_process_setup+0x13a>
     cf4:	0049      	lsls	r1, r1, #1
     cf6:	3102      	adds	r1, #2
     cf8:	485e      	ldr	r0, [pc, #376]	; (e74 <udc_process_setup+0x2c8>)
     cfa:	7001      	strb	r1, [r0, #0]
     cfc:	b289      	uxth	r1, r1
     cfe:	4b59      	ldr	r3, [pc, #356]	; (e64 <udc_process_setup+0x2b8>)
     d00:	4798      	blx	r3
     d02:	e7c4      	b.n	c8e <udc_process_setup+0xe2>
     d04:	2104      	movs	r1, #4
     d06:	485c      	ldr	r0, [pc, #368]	; (e78 <udc_process_setup+0x2cc>)
     d08:	4b56      	ldr	r3, [pc, #344]	; (e64 <udc_process_setup+0x2b8>)
     d0a:	4798      	blx	r3
     d0c:	e7bf      	b.n	c8e <udc_process_setup+0xe2>
     d0e:	4c5b      	ldr	r4, [pc, #364]	; (e7c <udc_process_setup+0x2d0>)
     d10:	2109      	movs	r1, #9
     d12:	e7e6      	b.n	ce2 <udc_process_setup+0x136>
     d14:	2a01      	cmp	r2, #1
     d16:	d000      	beq.n	d1a <udc_process_setup+0x16e>
     d18:	e75d      	b.n	bd6 <udc_process_setup+0x2a>
     d1a:	2101      	movs	r1, #1
     d1c:	4858      	ldr	r0, [pc, #352]	; (e80 <udc_process_setup+0x2d4>)
     d1e:	4b51      	ldr	r3, [pc, #324]	; (e64 <udc_process_setup+0x2b8>)
     d20:	4798      	blx	r3
     d22:	e089      	b.n	e38 <udc_process_setup+0x28c>
     d24:	494c      	ldr	r1, [pc, #304]	; (e58 <udc_process_setup+0x2ac>)
     d26:	7849      	ldrb	r1, [r1, #1]
     d28:	290a      	cmp	r1, #10
     d2a:	d000      	beq.n	d2e <udc_process_setup+0x182>
     d2c:	e773      	b.n	c16 <udc_process_setup+0x6a>
     d2e:	2a01      	cmp	r2, #1
     d30:	d000      	beq.n	d34 <udc_process_setup+0x188>
     d32:	e0c3      	b.n	ebc <udc_process_setup+0x310>
     d34:	4b52      	ldr	r3, [pc, #328]	; (e80 <udc_process_setup+0x2d4>)
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	2b00      	cmp	r3, #0
     d3a:	d100      	bne.n	d3e <udc_process_setup+0x192>
     d3c:	e0be      	b.n	ebc <udc_process_setup+0x310>
     d3e:	4b46      	ldr	r3, [pc, #280]	; (e58 <udc_process_setup+0x2ac>)
     d40:	791c      	ldrb	r4, [r3, #4]
     d42:	4b50      	ldr	r3, [pc, #320]	; (e84 <udc_process_setup+0x2d8>)
     d44:	681d      	ldr	r5, [r3, #0]
     d46:	682b      	ldr	r3, [r5, #0]
     d48:	791b      	ldrb	r3, [r3, #4]
     d4a:	42a3      	cmp	r3, r4
     d4c:	d800      	bhi.n	d50 <udc_process_setup+0x1a4>
     d4e:	e0b5      	b.n	ebc <udc_process_setup+0x310>
     d50:	2100      	movs	r1, #0
     d52:	0020      	movs	r0, r4
     d54:	4b4c      	ldr	r3, [pc, #304]	; (e88 <udc_process_setup+0x2dc>)
     d56:	4798      	blx	r3
     d58:	2800      	cmp	r0, #0
     d5a:	d100      	bne.n	d5e <udc_process_setup+0x1b2>
     d5c:	e734      	b.n	bc8 <udc_process_setup+0x1c>
     d5e:	686b      	ldr	r3, [r5, #4]
     d60:	00a4      	lsls	r4, r4, #2
     d62:	58e3      	ldr	r3, [r4, r3]
     d64:	68db      	ldr	r3, [r3, #12]
     d66:	4798      	blx	r3
     d68:	4b48      	ldr	r3, [pc, #288]	; (e8c <udc_process_setup+0x2e0>)
     d6a:	7018      	strb	r0, [r3, #0]
     d6c:	2101      	movs	r1, #1
     d6e:	0018      	movs	r0, r3
     d70:	4b3c      	ldr	r3, [pc, #240]	; (e64 <udc_process_setup+0x2b8>)
     d72:	4798      	blx	r3
     d74:	e060      	b.n	e38 <udc_process_setup+0x28c>
     d76:	221f      	movs	r2, #31
     d78:	4013      	ands	r3, r2
     d7a:	d15f      	bne.n	e3c <udc_process_setup+0x290>
     d7c:	4a36      	ldr	r2, [pc, #216]	; (e58 <udc_process_setup+0x2ac>)
     d7e:	7852      	ldrb	r2, [r2, #1]
     d80:	2a03      	cmp	r2, #3
     d82:	d100      	bne.n	d86 <udc_process_setup+0x1da>
     d84:	e0f3      	b.n	f6e <udc_process_setup+0x3c2>
     d86:	b2d1      	uxtb	r1, r2
     d88:	2903      	cmp	r1, #3
     d8a:	d93b      	bls.n	e04 <udc_process_setup+0x258>
     d8c:	2a05      	cmp	r2, #5
     d8e:	d04b      	beq.n	e28 <udc_process_setup+0x27c>
     d90:	2a09      	cmp	r2, #9
     d92:	d153      	bne.n	e3c <udc_process_setup+0x290>
     d94:	4b30      	ldr	r3, [pc, #192]	; (e58 <udc_process_setup+0x2ac>)
     d96:	88db      	ldrh	r3, [r3, #6]
     d98:	2b00      	cmp	r3, #0
     d9a:	d000      	beq.n	d9e <udc_process_setup+0x1f2>
     d9c:	e71b      	b.n	bd6 <udc_process_setup+0x2a>
     d9e:	4b3c      	ldr	r3, [pc, #240]	; (e90 <udc_process_setup+0x2e4>)
     da0:	4798      	blx	r3
     da2:	2800      	cmp	r0, #0
     da4:	d100      	bne.n	da8 <udc_process_setup+0x1fc>
     da6:	e70f      	b.n	bc8 <udc_process_setup+0x1c>
     da8:	4b2b      	ldr	r3, [pc, #172]	; (e58 <udc_process_setup+0x2ac>)
     daa:	789a      	ldrb	r2, [r3, #2]
     dac:	4b2f      	ldr	r3, [pc, #188]	; (e6c <udc_process_setup+0x2c0>)
     dae:	681b      	ldr	r3, [r3, #0]
     db0:	7c5b      	ldrb	r3, [r3, #17]
     db2:	429a      	cmp	r2, r3
     db4:	dd00      	ble.n	db8 <udc_process_setup+0x20c>
     db6:	e707      	b.n	bc8 <udc_process_setup+0x1c>
     db8:	4b36      	ldr	r3, [pc, #216]	; (e94 <udc_process_setup+0x2e8>)
     dba:	4798      	blx	r3
     dbc:	4b26      	ldr	r3, [pc, #152]	; (e58 <udc_process_setup+0x2ac>)
     dbe:	789b      	ldrb	r3, [r3, #2]
     dc0:	4a2f      	ldr	r2, [pc, #188]	; (e80 <udc_process_setup+0x2d4>)
     dc2:	7013      	strb	r3, [r2, #0]
     dc4:	2b00      	cmp	r3, #0
     dc6:	d037      	beq.n	e38 <udc_process_setup+0x28c>
     dc8:	4a33      	ldr	r2, [pc, #204]	; (e98 <udc_process_setup+0x2ec>)
     dca:	4694      	mov	ip, r2
     dcc:	4463      	add	r3, ip
     dce:	00db      	lsls	r3, r3, #3
     dd0:	4a26      	ldr	r2, [pc, #152]	; (e6c <udc_process_setup+0x2c0>)
     dd2:	6852      	ldr	r2, [r2, #4]
     dd4:	18d3      	adds	r3, r2, r3
     dd6:	4a2b      	ldr	r2, [pc, #172]	; (e84 <udc_process_setup+0x2d8>)
     dd8:	6013      	str	r3, [r2, #0]
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	791b      	ldrb	r3, [r3, #4]
     dde:	2b00      	cmp	r3, #0
     de0:	d02a      	beq.n	e38 <udc_process_setup+0x28c>
     de2:	2400      	movs	r4, #0
     de4:	4d2d      	ldr	r5, [pc, #180]	; (e9c <udc_process_setup+0x2f0>)
     de6:	0016      	movs	r6, r2
     de8:	2100      	movs	r1, #0
     dea:	0020      	movs	r0, r4
     dec:	47a8      	blx	r5
     dee:	2800      	cmp	r0, #0
     df0:	d100      	bne.n	df4 <udc_process_setup+0x248>
     df2:	e6e9      	b.n	bc8 <udc_process_setup+0x1c>
     df4:	3401      	adds	r4, #1
     df6:	b2e4      	uxtb	r4, r4
     df8:	6833      	ldr	r3, [r6, #0]
     dfa:	681b      	ldr	r3, [r3, #0]
     dfc:	791b      	ldrb	r3, [r3, #4]
     dfe:	42a3      	cmp	r3, r4
     e00:	d8f2      	bhi.n	de8 <udc_process_setup+0x23c>
     e02:	e019      	b.n	e38 <udc_process_setup+0x28c>
     e04:	2a01      	cmp	r2, #1
     e06:	d119      	bne.n	e3c <udc_process_setup+0x290>
     e08:	4b13      	ldr	r3, [pc, #76]	; (e58 <udc_process_setup+0x2ac>)
     e0a:	88db      	ldrh	r3, [r3, #6]
     e0c:	2b00      	cmp	r3, #0
     e0e:	d000      	beq.n	e12 <udc_process_setup+0x266>
     e10:	e6e1      	b.n	bd6 <udc_process_setup+0x2a>
     e12:	4b11      	ldr	r3, [pc, #68]	; (e58 <udc_process_setup+0x2ac>)
     e14:	885b      	ldrh	r3, [r3, #2]
     e16:	2b01      	cmp	r3, #1
     e18:	d000      	beq.n	e1c <udc_process_setup+0x270>
     e1a:	e6dc      	b.n	bd6 <udc_process_setup+0x2a>
     e1c:	4a12      	ldr	r2, [pc, #72]	; (e68 <udc_process_setup+0x2bc>)
     e1e:	8813      	ldrh	r3, [r2, #0]
     e20:	2102      	movs	r1, #2
     e22:	438b      	bics	r3, r1
     e24:	8013      	strh	r3, [r2, #0]
     e26:	e007      	b.n	e38 <udc_process_setup+0x28c>
     e28:	4b0b      	ldr	r3, [pc, #44]	; (e58 <udc_process_setup+0x2ac>)
     e2a:	88db      	ldrh	r3, [r3, #6]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d000      	beq.n	e32 <udc_process_setup+0x286>
     e30:	e6d1      	b.n	bd6 <udc_process_setup+0x2a>
     e32:	4a1b      	ldr	r2, [pc, #108]	; (ea0 <udc_process_setup+0x2f4>)
     e34:	4b08      	ldr	r3, [pc, #32]	; (e58 <udc_process_setup+0x2ac>)
     e36:	611a      	str	r2, [r3, #16]
     e38:	2001      	movs	r0, #1
     e3a:	e6d4      	b.n	be6 <udc_process_setup+0x3a>
     e3c:	2b01      	cmp	r3, #1
     e3e:	d031      	beq.n	ea4 <udc_process_setup+0x2f8>
     e40:	2b02      	cmp	r3, #2
     e42:	d000      	beq.n	e46 <udc_process_setup+0x29a>
     e44:	e6c0      	b.n	bc8 <udc_process_setup+0x1c>
     e46:	4b04      	ldr	r3, [pc, #16]	; (e58 <udc_process_setup+0x2ac>)
     e48:	785b      	ldrb	r3, [r3, #1]
     e4a:	2b01      	cmp	r3, #1
     e4c:	d06c      	beq.n	f28 <udc_process_setup+0x37c>
     e4e:	2b03      	cmp	r3, #3
     e50:	d100      	bne.n	e54 <udc_process_setup+0x2a8>
     e52:	e078      	b.n	f46 <udc_process_setup+0x39a>
     e54:	2000      	movs	r0, #0
     e56:	e08b      	b.n	f70 <udc_process_setup+0x3c4>
     e58:	20000ac4 	.word	0x20000ac4
     e5c:	000032e9 	.word	0x000032e9
     e60:	20000744 	.word	0x20000744
     e64:	00003669 	.word	0x00003669
     e68:	20000742 	.word	0x20000742
     e6c:	20000034 	.word	0x20000034
     e70:	200000e4 	.word	0x200000e4
     e74:	200000b4 	.word	0x200000b4
     e78:	200000d4 	.word	0x200000d4
     e7c:	200000d8 	.word	0x200000d8
     e80:	2000074c 	.word	0x2000074c
     e84:	20000750 	.word	0x20000750
     e88:	000009d9 	.word	0x000009d9
     e8c:	20000748 	.word	0x20000748
     e90:	00003659 	.word	0x00003659
     e94:	00000b1d 	.word	0x00000b1d
     e98:	1fffffff 	.word	0x1fffffff
     e9c:	00000ab9 	.word	0x00000ab9
     ea0:	000009c1 	.word	0x000009c1
     ea4:	4a48      	ldr	r2, [pc, #288]	; (fc8 <udc_process_setup+0x41c>)
     ea6:	7852      	ldrb	r2, [r2, #1]
     ea8:	2a0b      	cmp	r2, #11
     eaa:	d1c9      	bne.n	e40 <udc_process_setup+0x294>
     eac:	4b46      	ldr	r3, [pc, #280]	; (fc8 <udc_process_setup+0x41c>)
     eae:	88db      	ldrh	r3, [r3, #6]
     eb0:	2b00      	cmp	r3, #0
     eb2:	d103      	bne.n	ebc <udc_process_setup+0x310>
     eb4:	4b45      	ldr	r3, [pc, #276]	; (fcc <udc_process_setup+0x420>)
     eb6:	781b      	ldrb	r3, [r3, #0]
     eb8:	2b00      	cmp	r3, #0
     eba:	d127      	bne.n	f0c <udc_process_setup+0x360>
     ebc:	4b43      	ldr	r3, [pc, #268]	; (fcc <udc_process_setup+0x420>)
     ebe:	781b      	ldrb	r3, [r3, #0]
     ec0:	2000      	movs	r0, #0
     ec2:	2b00      	cmp	r3, #0
     ec4:	d100      	bne.n	ec8 <udc_process_setup+0x31c>
     ec6:	e68e      	b.n	be6 <udc_process_setup+0x3a>
     ec8:	4b3f      	ldr	r3, [pc, #252]	; (fc8 <udc_process_setup+0x41c>)
     eca:	791c      	ldrb	r4, [r3, #4]
     ecc:	4b40      	ldr	r3, [pc, #256]	; (fd0 <udc_process_setup+0x424>)
     ece:	681d      	ldr	r5, [r3, #0]
     ed0:	682b      	ldr	r3, [r5, #0]
     ed2:	791b      	ldrb	r3, [r3, #4]
     ed4:	42a3      	cmp	r3, r4
     ed6:	d800      	bhi.n	eda <udc_process_setup+0x32e>
     ed8:	e685      	b.n	be6 <udc_process_setup+0x3a>
     eda:	2100      	movs	r1, #0
     edc:	0020      	movs	r0, r4
     ede:	4b3d      	ldr	r3, [pc, #244]	; (fd4 <udc_process_setup+0x428>)
     ee0:	4798      	blx	r3
     ee2:	2800      	cmp	r0, #0
     ee4:	d100      	bne.n	ee8 <udc_process_setup+0x33c>
     ee6:	e676      	b.n	bd6 <udc_process_setup+0x2a>
     ee8:	686b      	ldr	r3, [r5, #4]
     eea:	00a2      	lsls	r2, r4, #2
     eec:	58d5      	ldr	r5, [r2, r3]
     eee:	68eb      	ldr	r3, [r5, #12]
     ef0:	4798      	blx	r3
     ef2:	0001      	movs	r1, r0
     ef4:	0020      	movs	r0, r4
     ef6:	4b37      	ldr	r3, [pc, #220]	; (fd4 <udc_process_setup+0x428>)
     ef8:	4798      	blx	r3
     efa:	2800      	cmp	r0, #0
     efc:	d100      	bne.n	f00 <udc_process_setup+0x354>
     efe:	e66a      	b.n	bd6 <udc_process_setup+0x2a>
     f00:	68ab      	ldr	r3, [r5, #8]
     f02:	4798      	blx	r3
     f04:	2800      	cmp	r0, #0
     f06:	d000      	beq.n	f0a <udc_process_setup+0x35e>
     f08:	e66d      	b.n	be6 <udc_process_setup+0x3a>
     f0a:	e664      	b.n	bd6 <udc_process_setup+0x2a>
     f0c:	4b2e      	ldr	r3, [pc, #184]	; (fc8 <udc_process_setup+0x41c>)
     f0e:	791d      	ldrb	r5, [r3, #4]
     f10:	885c      	ldrh	r4, [r3, #2]
     f12:	0028      	movs	r0, r5
     f14:	4b30      	ldr	r3, [pc, #192]	; (fd8 <udc_process_setup+0x42c>)
     f16:	4798      	blx	r3
     f18:	2800      	cmp	r0, #0
     f1a:	d100      	bne.n	f1e <udc_process_setup+0x372>
     f1c:	e654      	b.n	bc8 <udc_process_setup+0x1c>
     f1e:	b2e1      	uxtb	r1, r4
     f20:	0028      	movs	r0, r5
     f22:	4b2e      	ldr	r3, [pc, #184]	; (fdc <udc_process_setup+0x430>)
     f24:	4798      	blx	r3
     f26:	e023      	b.n	f70 <udc_process_setup+0x3c4>
     f28:	4b27      	ldr	r3, [pc, #156]	; (fc8 <udc_process_setup+0x41c>)
     f2a:	88db      	ldrh	r3, [r3, #6]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d000      	beq.n	f32 <udc_process_setup+0x386>
     f30:	e651      	b.n	bd6 <udc_process_setup+0x2a>
     f32:	4b25      	ldr	r3, [pc, #148]	; (fc8 <udc_process_setup+0x41c>)
     f34:	885b      	ldrh	r3, [r3, #2]
     f36:	2b00      	cmp	r3, #0
     f38:	d000      	beq.n	f3c <udc_process_setup+0x390>
     f3a:	e64c      	b.n	bd6 <udc_process_setup+0x2a>
     f3c:	4b22      	ldr	r3, [pc, #136]	; (fc8 <udc_process_setup+0x41c>)
     f3e:	7918      	ldrb	r0, [r3, #4]
     f40:	4b27      	ldr	r3, [pc, #156]	; (fe0 <udc_process_setup+0x434>)
     f42:	4798      	blx	r3
     f44:	e014      	b.n	f70 <udc_process_setup+0x3c4>
     f46:	4b20      	ldr	r3, [pc, #128]	; (fc8 <udc_process_setup+0x41c>)
     f48:	88db      	ldrh	r3, [r3, #6]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d000      	beq.n	f50 <udc_process_setup+0x3a4>
     f4e:	e642      	b.n	bd6 <udc_process_setup+0x2a>
     f50:	4b1d      	ldr	r3, [pc, #116]	; (fc8 <udc_process_setup+0x41c>)
     f52:	885b      	ldrh	r3, [r3, #2]
     f54:	2b00      	cmp	r3, #0
     f56:	d000      	beq.n	f5a <udc_process_setup+0x3ae>
     f58:	e63d      	b.n	bd6 <udc_process_setup+0x2a>
     f5a:	4c1b      	ldr	r4, [pc, #108]	; (fc8 <udc_process_setup+0x41c>)
     f5c:	7920      	ldrb	r0, [r4, #4]
     f5e:	4b21      	ldr	r3, [pc, #132]	; (fe4 <udc_process_setup+0x438>)
     f60:	4798      	blx	r3
     f62:	7920      	ldrb	r0, [r4, #4]
     f64:	4b20      	ldr	r3, [pc, #128]	; (fe8 <udc_process_setup+0x43c>)
     f66:	4798      	blx	r3
     f68:	e002      	b.n	f70 <udc_process_setup+0x3c4>
     f6a:	2000      	movs	r0, #0
     f6c:	e000      	b.n	f70 <udc_process_setup+0x3c4>
     f6e:	2000      	movs	r0, #0
     f70:	2800      	cmp	r0, #0
     f72:	d000      	beq.n	f76 <udc_process_setup+0x3ca>
     f74:	e637      	b.n	be6 <udc_process_setup+0x3a>
     f76:	e627      	b.n	bc8 <udc_process_setup+0x1c>
     f78:	4b14      	ldr	r3, [pc, #80]	; (fcc <udc_process_setup+0x420>)
     f7a:	781b      	ldrb	r3, [r3, #0]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d100      	bne.n	f82 <udc_process_setup+0x3d6>
     f80:	e631      	b.n	be6 <udc_process_setup+0x3a>
     f82:	4b13      	ldr	r3, [pc, #76]	; (fd0 <udc_process_setup+0x424>)
     f84:	681b      	ldr	r3, [r3, #0]
     f86:	681a      	ldr	r2, [r3, #0]
     f88:	7912      	ldrb	r2, [r2, #4]
     f8a:	2a00      	cmp	r2, #0
     f8c:	d01a      	beq.n	fc4 <udc_process_setup+0x418>
     f8e:	2500      	movs	r5, #0
     f90:	4e10      	ldr	r6, [pc, #64]	; (fd4 <udc_process_setup+0x428>)
     f92:	4f0f      	ldr	r7, [pc, #60]	; (fd0 <udc_process_setup+0x424>)
     f94:	685b      	ldr	r3, [r3, #4]
     f96:	00aa      	lsls	r2, r5, #2
     f98:	58d4      	ldr	r4, [r2, r3]
     f9a:	68e3      	ldr	r3, [r4, #12]
     f9c:	4798      	blx	r3
     f9e:	0001      	movs	r1, r0
     fa0:	0028      	movs	r0, r5
     fa2:	47b0      	blx	r6
     fa4:	2800      	cmp	r0, #0
     fa6:	d100      	bne.n	faa <udc_process_setup+0x3fe>
     fa8:	e61d      	b.n	be6 <udc_process_setup+0x3a>
     faa:	68a3      	ldr	r3, [r4, #8]
     fac:	4798      	blx	r3
     fae:	2800      	cmp	r0, #0
     fb0:	d000      	beq.n	fb4 <udc_process_setup+0x408>
     fb2:	e618      	b.n	be6 <udc_process_setup+0x3a>
     fb4:	3501      	adds	r5, #1
     fb6:	b2ed      	uxtb	r5, r5
     fb8:	683b      	ldr	r3, [r7, #0]
     fba:	681a      	ldr	r2, [r3, #0]
     fbc:	7912      	ldrb	r2, [r2, #4]
     fbe:	42aa      	cmp	r2, r5
     fc0:	d8e8      	bhi.n	f94 <udc_process_setup+0x3e8>
     fc2:	e610      	b.n	be6 <udc_process_setup+0x3a>
     fc4:	2000      	movs	r0, #0
     fc6:	e60e      	b.n	be6 <udc_process_setup+0x3a>
     fc8:	20000ac4 	.word	0x20000ac4
     fcc:	2000074c 	.word	0x2000074c
     fd0:	20000750 	.word	0x20000750
     fd4:	000009d9 	.word	0x000009d9
     fd8:	00000a4d 	.word	0x00000a4d
     fdc:	00000ab9 	.word	0x00000ab9
     fe0:	0000342d 	.word	0x0000342d
     fe4:	00003129 	.word	0x00003129
     fe8:	000032fd 	.word	0x000032fd

00000fec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     fec:	4b0c      	ldr	r3, [pc, #48]	; (1020 <cpu_irq_enter_critical+0x34>)
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d106      	bne.n	1002 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ff4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     ff8:	2b00      	cmp	r3, #0
     ffa:	d007      	beq.n	100c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ffc:	2200      	movs	r2, #0
     ffe:	4b09      	ldr	r3, [pc, #36]	; (1024 <cpu_irq_enter_critical+0x38>)
    1000:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1002:	4a07      	ldr	r2, [pc, #28]	; (1020 <cpu_irq_enter_critical+0x34>)
    1004:	6813      	ldr	r3, [r2, #0]
    1006:	3301      	adds	r3, #1
    1008:	6013      	str	r3, [r2, #0]
}
    100a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    100c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    100e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1012:	2200      	movs	r2, #0
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <cpu_irq_enter_critical+0x3c>)
    1016:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1018:	3201      	adds	r2, #1
    101a:	4b02      	ldr	r3, [pc, #8]	; (1024 <cpu_irq_enter_critical+0x38>)
    101c:	701a      	strb	r2, [r3, #0]
    101e:	e7f0      	b.n	1002 <cpu_irq_enter_critical+0x16>
    1020:	20000758 	.word	0x20000758
    1024:	2000075c 	.word	0x2000075c
    1028:	200000f4 	.word	0x200000f4

0000102c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    102c:	4b08      	ldr	r3, [pc, #32]	; (1050 <cpu_irq_leave_critical+0x24>)
    102e:	681a      	ldr	r2, [r3, #0]
    1030:	3a01      	subs	r2, #1
    1032:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1034:	681b      	ldr	r3, [r3, #0]
    1036:	2b00      	cmp	r3, #0
    1038:	d109      	bne.n	104e <cpu_irq_leave_critical+0x22>
    103a:	4b06      	ldr	r3, [pc, #24]	; (1054 <cpu_irq_leave_critical+0x28>)
    103c:	781b      	ldrb	r3, [r3, #0]
    103e:	2b00      	cmp	r3, #0
    1040:	d005      	beq.n	104e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1042:	2201      	movs	r2, #1
    1044:	4b04      	ldr	r3, [pc, #16]	; (1058 <cpu_irq_leave_critical+0x2c>)
    1046:	701a      	strb	r2, [r3, #0]
    1048:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    104c:	b662      	cpsie	i
	}
}
    104e:	4770      	bx	lr
    1050:	20000758 	.word	0x20000758
    1054:	2000075c 	.word	0x2000075c
    1058:	200000f4 	.word	0x200000f4

0000105c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    105c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    105e:	2200      	movs	r2, #0
    1060:	2300      	movs	r3, #0
    1062:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1064:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1066:	2100      	movs	r1, #0
    1068:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    106a:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    106c:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    106e:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1070:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1072:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    1074:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1076:	24c0      	movs	r4, #192	; 0xc0
    1078:	0164      	lsls	r4, r4, #5
    107a:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    107c:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    107e:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1080:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1082:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1084:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1086:	242a      	movs	r4, #42	; 0x2a
    1088:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    108a:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    108c:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    108e:	3c06      	subs	r4, #6
    1090:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1092:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1094:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1096:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1098:	232b      	movs	r3, #43	; 0x2b
    109a:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    109c:	3301      	adds	r3, #1
    109e:	54c1      	strb	r1, [r0, r3]
}
    10a0:	bd10      	pop	{r4, pc}
	...

000010a4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    10a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a6:	46d6      	mov	lr, sl
    10a8:	464f      	mov	r7, r9
    10aa:	4646      	mov	r6, r8
    10ac:	b5c0      	push	{r6, r7, lr}
    10ae:	b096      	sub	sp, #88	; 0x58
    10b0:	0007      	movs	r7, r0
    10b2:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    10b4:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    10b6:	4acb      	ldr	r2, [pc, #812]	; (13e4 <adc_init+0x340>)
    10b8:	6a10      	ldr	r0, [r2, #32]
    10ba:	2380      	movs	r3, #128	; 0x80
    10bc:	025b      	lsls	r3, r3, #9
    10be:	4303      	orrs	r3, r0
    10c0:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    10c2:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    10c4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    10c6:	07db      	lsls	r3, r3, #31
    10c8:	d505      	bpl.n	10d6 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    10ca:	b016      	add	sp, #88	; 0x58
    10cc:	bc1c      	pop	{r2, r3, r4}
    10ce:	4690      	mov	r8, r2
    10d0:	4699      	mov	r9, r3
    10d2:	46a2      	mov	sl, r4
    10d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    10d6:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    10d8:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    10da:	079b      	lsls	r3, r3, #30
    10dc:	d4f5      	bmi.n	10ca <adc_init+0x26>
	module_inst->reference = config->reference;
    10de:	7873      	ldrb	r3, [r6, #1]
    10e0:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    10e2:	2b00      	cmp	r3, #0
    10e4:	d104      	bne.n	10f0 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    10e6:	4ac0      	ldr	r2, [pc, #768]	; (13e8 <adc_init+0x344>)
    10e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
    10ea:	2104      	movs	r1, #4
    10ec:	430b      	orrs	r3, r1
    10ee:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
    10f0:	683b      	ldr	r3, [r7, #0]
    10f2:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    10f4:	7833      	ldrb	r3, [r6, #0]
    10f6:	466a      	mov	r2, sp
    10f8:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    10fa:	4669      	mov	r1, sp
    10fc:	201e      	movs	r0, #30
    10fe:	4bbb      	ldr	r3, [pc, #748]	; (13ec <adc_init+0x348>)
    1100:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1102:	201e      	movs	r0, #30
    1104:	4bba      	ldr	r3, [pc, #744]	; (13f0 <adc_init+0x34c>)
    1106:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1108:	232c      	movs	r3, #44	; 0x2c
    110a:	5cf2      	ldrb	r2, [r6, r3]
    110c:	2a00      	cmp	r2, #0
    110e:	d054      	beq.n	11ba <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1110:	3b01      	subs	r3, #1
    1112:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1114:	7b33      	ldrb	r3, [r6, #12]
    1116:	18eb      	adds	r3, r5, r3
    1118:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    111a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    111c:	b2c9      	uxtb	r1, r1
    111e:	428b      	cmp	r3, r1
    1120:	d221      	bcs.n	1166 <adc_init+0xc2>
    1122:	1952      	adds	r2, r2, r5
    1124:	b2d3      	uxtb	r3, r2
    1126:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1128:	4bb2      	ldr	r3, [pc, #712]	; (13f4 <adc_init+0x350>)
    112a:	469a      	mov	sl, r3
    112c:	e003      	b.n	1136 <adc_init+0x92>
			offset++;
    112e:	3501      	adds	r5, #1
    1130:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1132:	45a9      	cmp	r9, r5
    1134:	d017      	beq.n	1166 <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1136:	240f      	movs	r4, #15
    1138:	402c      	ands	r4, r5
    113a:	7b33      	ldrb	r3, [r6, #12]
    113c:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    113e:	2250      	movs	r2, #80	; 0x50
    1140:	49ad      	ldr	r1, [pc, #692]	; (13f8 <adc_init+0x354>)
    1142:	a802      	add	r0, sp, #8
    1144:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1146:	2c13      	cmp	r4, #19
    1148:	d8f1      	bhi.n	112e <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    114a:	00a4      	lsls	r4, r4, #2
    114c:	ab02      	add	r3, sp, #8
    114e:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1150:	a901      	add	r1, sp, #4
    1152:	2300      	movs	r3, #0
    1154:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1156:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1158:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    115a:	3301      	adds	r3, #1
    115c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    115e:	b2c0      	uxtb	r0, r0
    1160:	4ba6      	ldr	r3, [pc, #664]	; (13fc <adc_init+0x358>)
    1162:	4798      	blx	r3
    1164:	e7e3      	b.n	112e <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
    1166:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1168:	2250      	movs	r2, #80	; 0x50
    116a:	49a3      	ldr	r1, [pc, #652]	; (13f8 <adc_init+0x354>)
    116c:	a802      	add	r0, sp, #8
    116e:	4ba1      	ldr	r3, [pc, #644]	; (13f4 <adc_init+0x350>)
    1170:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1172:	2c13      	cmp	r4, #19
    1174:	d913      	bls.n	119e <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1176:	7d73      	ldrb	r3, [r6, #21]
    1178:	009b      	lsls	r3, r3, #2
    117a:	b2db      	uxtb	r3, r3
    117c:	4642      	mov	r2, r8
    117e:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1180:	7db3      	ldrb	r3, [r6, #22]
    1182:	01db      	lsls	r3, r3, #7
    1184:	7872      	ldrb	r2, [r6, #1]
    1186:	4313      	orrs	r3, r2
    1188:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    118a:	4642      	mov	r2, r8
    118c:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    118e:	7933      	ldrb	r3, [r6, #4]
    1190:	2b34      	cmp	r3, #52	; 0x34
    1192:	d900      	bls.n	1196 <adc_init+0xf2>
    1194:	e178      	b.n	1488 <adc_init+0x3e4>
    1196:	009b      	lsls	r3, r3, #2
    1198:	4a99      	ldr	r2, [pc, #612]	; (1400 <adc_init+0x35c>)
    119a:	58d3      	ldr	r3, [r2, r3]
    119c:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    119e:	00a4      	lsls	r4, r4, #2
    11a0:	ab02      	add	r3, sp, #8
    11a2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11a4:	a901      	add	r1, sp, #4
    11a6:	2300      	movs	r3, #0
    11a8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    11aa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    11ac:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    11ae:	3301      	adds	r3, #1
    11b0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    11b2:	b2c0      	uxtb	r0, r0
    11b4:	4b91      	ldr	r3, [pc, #580]	; (13fc <adc_init+0x358>)
    11b6:	4798      	blx	r3
    11b8:	e7dd      	b.n	1176 <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
    11ba:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    11bc:	2250      	movs	r2, #80	; 0x50
    11be:	498e      	ldr	r1, [pc, #568]	; (13f8 <adc_init+0x354>)
    11c0:	a802      	add	r0, sp, #8
    11c2:	4b8c      	ldr	r3, [pc, #560]	; (13f4 <adc_init+0x350>)
    11c4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    11c6:	2c13      	cmp	r4, #19
    11c8:	d915      	bls.n	11f6 <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
    11ca:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    11cc:	2250      	movs	r2, #80	; 0x50
    11ce:	498a      	ldr	r1, [pc, #552]	; (13f8 <adc_init+0x354>)
    11d0:	a802      	add	r0, sp, #8
    11d2:	4b88      	ldr	r3, [pc, #544]	; (13f4 <adc_init+0x350>)
    11d4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    11d6:	2c13      	cmp	r4, #19
    11d8:	d8cd      	bhi.n	1176 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    11da:	00a4      	lsls	r4, r4, #2
    11dc:	ab02      	add	r3, sp, #8
    11de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11e0:	a901      	add	r1, sp, #4
    11e2:	2300      	movs	r3, #0
    11e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    11e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    11e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    11ea:	3301      	adds	r3, #1
    11ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    11ee:	b2c0      	uxtb	r0, r0
    11f0:	4b82      	ldr	r3, [pc, #520]	; (13fc <adc_init+0x358>)
    11f2:	4798      	blx	r3
    11f4:	e7bf      	b.n	1176 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    11f6:	00a4      	lsls	r4, r4, #2
    11f8:	ab02      	add	r3, sp, #8
    11fa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11fc:	a901      	add	r1, sp, #4
    11fe:	2300      	movs	r3, #0
    1200:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1202:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1204:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1206:	3301      	adds	r3, #1
    1208:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    120a:	b2c0      	uxtb	r0, r0
    120c:	4b7b      	ldr	r3, [pc, #492]	; (13fc <adc_init+0x358>)
    120e:	4798      	blx	r3
    1210:	e7db      	b.n	11ca <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1212:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1214:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1216:	2102      	movs	r1, #2
    1218:	e01a      	b.n	1250 <adc_init+0x1ac>
		adjres = config->divide_result;
    121a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    121c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    121e:	2410      	movs	r4, #16
    1220:	e016      	b.n	1250 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1222:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1224:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1226:	2101      	movs	r1, #1
    1228:	e012      	b.n	1250 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    122a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    122c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    122e:	2100      	movs	r1, #0
    1230:	e00e      	b.n	1250 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1232:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1234:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1236:	2100      	movs	r1, #0
    1238:	e00a      	b.n	1250 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    123a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    123c:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    123e:	2100      	movs	r1, #0
    1240:	e006      	b.n	1250 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1242:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1244:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1246:	2100      	movs	r1, #0
    1248:	e002      	b.n	1250 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    124a:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    124c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    124e:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1250:	0109      	lsls	r1, r1, #4
    1252:	2270      	movs	r2, #112	; 0x70
    1254:	400a      	ands	r2, r1
    1256:	4313      	orrs	r3, r2
    1258:	4642      	mov	r2, r8
    125a:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    125c:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    125e:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1260:	2b3f      	cmp	r3, #63	; 0x3f
    1262:	d900      	bls.n	1266 <adc_init+0x1c2>
    1264:	e731      	b.n	10ca <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    1266:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1268:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    126a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    126c:	b25b      	sxtb	r3, r3
    126e:	2b00      	cmp	r3, #0
    1270:	dbfb      	blt.n	126a <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1272:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1274:	8872      	ldrh	r2, [r6, #2]
    1276:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1278:	2224      	movs	r2, #36	; 0x24
    127a:	5cb2      	ldrb	r2, [r6, r2]
    127c:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    127e:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1280:	7d32      	ldrb	r2, [r6, #20]
    1282:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1284:	4313      	orrs	r3, r2
    1286:	7cb2      	ldrb	r2, [r6, #18]
    1288:	0052      	lsls	r2, r2, #1
    128a:	4313      	orrs	r3, r2
    128c:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    128e:	4642      	mov	r2, r8
    1290:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1292:	7e33      	ldrb	r3, [r6, #24]
    1294:	2b00      	cmp	r3, #0
    1296:	d020      	beq.n	12da <adc_init+0x236>
		switch (resolution) {
    1298:	2c10      	cmp	r4, #16
    129a:	d100      	bne.n	129e <adc_init+0x1fa>
    129c:	e0d6      	b.n	144c <adc_init+0x3a8>
    129e:	d800      	bhi.n	12a2 <adc_init+0x1fe>
    12a0:	e080      	b.n	13a4 <adc_init+0x300>
    12a2:	2c20      	cmp	r4, #32
    12a4:	d100      	bne.n	12a8 <adc_init+0x204>
    12a6:	e0b3      	b.n	1410 <adc_init+0x36c>
    12a8:	2c30      	cmp	r4, #48	; 0x30
    12aa:	d116      	bne.n	12da <adc_init+0x236>
			if (config->differential_mode &&
    12ac:	7cf2      	ldrb	r2, [r6, #19]
    12ae:	2a00      	cmp	r2, #0
    12b0:	d00a      	beq.n	12c8 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
    12b2:	69f2      	ldr	r2, [r6, #28]
    12b4:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    12b6:	2017      	movs	r0, #23
			if (config->differential_mode &&
    12b8:	2aff      	cmp	r2, #255	; 0xff
    12ba:	d900      	bls.n	12be <adc_init+0x21a>
    12bc:	e705      	b.n	10ca <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    12be:	6a32      	ldr	r2, [r6, #32]
    12c0:	3280      	adds	r2, #128	; 0x80
    12c2:	2aff      	cmp	r2, #255	; 0xff
    12c4:	d900      	bls.n	12c8 <adc_init+0x224>
    12c6:	e700      	b.n	10ca <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    12c8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    12ca:	69f2      	ldr	r2, [r6, #28]
    12cc:	2aff      	cmp	r2, #255	; 0xff
    12ce:	dd00      	ble.n	12d2 <adc_init+0x22e>
    12d0:	e6fb      	b.n	10ca <adc_init+0x26>
    12d2:	6a32      	ldr	r2, [r6, #32]
    12d4:	2aff      	cmp	r2, #255	; 0xff
    12d6:	dd00      	ble.n	12da <adc_init+0x236>
    12d8:	e6f7      	b.n	10ca <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    12da:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12dc:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    12de:	b252      	sxtb	r2, r2
    12e0:	2a00      	cmp	r2, #0
    12e2:	dbfb      	blt.n	12dc <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
    12e4:	4642      	mov	r2, r8
    12e6:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    12e8:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12ea:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12ec:	b25b      	sxtb	r3, r3
    12ee:	2b00      	cmp	r3, #0
    12f0:	dbfb      	blt.n	12ea <adc_init+0x246>
	adc_module->WINLT.reg =
    12f2:	8bb3      	ldrh	r3, [r6, #28]
    12f4:	4642      	mov	r2, r8
    12f6:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    12f8:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12fa:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12fc:	b25b      	sxtb	r3, r3
    12fe:	2b00      	cmp	r3, #0
    1300:	dbfb      	blt.n	12fa <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1302:	8c33      	ldrh	r3, [r6, #32]
    1304:	4642      	mov	r2, r8
    1306:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1308:	232c      	movs	r3, #44	; 0x2c
    130a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    130c:	2b00      	cmp	r3, #0
    130e:	d005      	beq.n	131c <adc_init+0x278>
		inputs_to_scan--;
    1310:	3b01      	subs	r3, #1
    1312:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1314:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1316:	2b0f      	cmp	r3, #15
    1318:	d900      	bls.n	131c <adc_init+0x278>
    131a:	e6d6      	b.n	10ca <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    131c:	222b      	movs	r2, #43	; 0x2b
    131e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1320:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1322:	290f      	cmp	r1, #15
    1324:	d900      	bls.n	1328 <adc_init+0x284>
    1326:	e6d0      	b.n	10ca <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1328:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    132a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    132c:	b252      	sxtb	r2, r2
    132e:	2a00      	cmp	r2, #0
    1330:	dbfb      	blt.n	132a <adc_init+0x286>
			config->negative_input |
    1332:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1334:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1336:	4302      	orrs	r2, r0
    1338:	68b0      	ldr	r0, [r6, #8]
    133a:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    133c:	0509      	lsls	r1, r1, #20
			config->negative_input |
    133e:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1340:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1342:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1344:	4642      	mov	r2, r8
    1346:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1348:	232a      	movs	r3, #42	; 0x2a
    134a:	5cf3      	ldrb	r3, [r6, r3]
    134c:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    134e:	230f      	movs	r3, #15
    1350:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1352:	3315      	adds	r3, #21
    1354:	5cf3      	ldrb	r3, [r6, r3]
    1356:	2b00      	cmp	r3, #0
    1358:	d012      	beq.n	1380 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    135a:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    135c:	4a29      	ldr	r2, [pc, #164]	; (1404 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
    135e:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1360:	4293      	cmp	r3, r2
    1362:	d900      	bls.n	1366 <adc_init+0x2c2>
    1364:	e6b1      	b.n	10ca <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1366:	4642      	mov	r2, r8
    1368:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    136a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    136c:	2380      	movs	r3, #128	; 0x80
    136e:	011b      	lsls	r3, r3, #4
    1370:	18d3      	adds	r3, r2, r3
    1372:	4924      	ldr	r1, [pc, #144]	; (1404 <adc_init+0x360>)
    1374:	b29b      	uxth	r3, r3
    1376:	428b      	cmp	r3, r1
    1378:	d900      	bls.n	137c <adc_init+0x2d8>
    137a:	e6a6      	b.n	10ca <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    137c:	4643      	mov	r3, r8
    137e:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1380:	4b21      	ldr	r3, [pc, #132]	; (1408 <adc_init+0x364>)
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	015b      	lsls	r3, r3, #5
    1386:	22e0      	movs	r2, #224	; 0xe0
    1388:	00d2      	lsls	r2, r2, #3
    138a:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    138c:	4a1f      	ldr	r2, [pc, #124]	; (140c <adc_init+0x368>)
    138e:	6851      	ldr	r1, [r2, #4]
    1390:	0149      	lsls	r1, r1, #5
    1392:	6812      	ldr	r2, [r2, #0]
    1394:	0ed2      	lsrs	r2, r2, #27
    1396:	430a      	orrs	r2, r1
    1398:	b2d2      	uxtb	r2, r2
			) |
    139a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    139c:	4642      	mov	r2, r8
    139e:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    13a0:	2000      	movs	r0, #0
    13a2:	e692      	b.n	10ca <adc_init+0x26>
		switch (resolution) {
    13a4:	2c00      	cmp	r4, #0
    13a6:	d198      	bne.n	12da <adc_init+0x236>
			if (config->differential_mode &&
    13a8:	7cf2      	ldrb	r2, [r6, #19]
    13aa:	2a00      	cmp	r2, #0
    13ac:	d00f      	beq.n	13ce <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
    13ae:	69f2      	ldr	r2, [r6, #28]
    13b0:	2180      	movs	r1, #128	; 0x80
    13b2:	0109      	lsls	r1, r1, #4
    13b4:	468c      	mov	ip, r1
    13b6:	4462      	add	r2, ip
			if (config->differential_mode &&
    13b8:	4912      	ldr	r1, [pc, #72]	; (1404 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    13ba:	2017      	movs	r0, #23
			if (config->differential_mode &&
    13bc:	428a      	cmp	r2, r1
    13be:	d900      	bls.n	13c2 <adc_init+0x31e>
    13c0:	e683      	b.n	10ca <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    13c2:	6a32      	ldr	r2, [r6, #32]
    13c4:	4462      	add	r2, ip
    13c6:	490f      	ldr	r1, [pc, #60]	; (1404 <adc_init+0x360>)
    13c8:	428a      	cmp	r2, r1
    13ca:	d900      	bls.n	13ce <adc_init+0x32a>
    13cc:	e67d      	b.n	10ca <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    13ce:	4a0d      	ldr	r2, [pc, #52]	; (1404 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    13d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    13d2:	69f1      	ldr	r1, [r6, #28]
    13d4:	4291      	cmp	r1, r2
    13d6:	dd00      	ble.n	13da <adc_init+0x336>
    13d8:	e677      	b.n	10ca <adc_init+0x26>
    13da:	6a31      	ldr	r1, [r6, #32]
    13dc:	4291      	cmp	r1, r2
    13de:	dd00      	ble.n	13e2 <adc_init+0x33e>
    13e0:	e673      	b.n	10ca <adc_init+0x26>
    13e2:	e77a      	b.n	12da <adc_init+0x236>
    13e4:	40000400 	.word	0x40000400
    13e8:	40000800 	.word	0x40000800
    13ec:	0000296d 	.word	0x0000296d
    13f0:	000028e1 	.word	0x000028e1
    13f4:	0000a595 	.word	0x0000a595
    13f8:	0000ba00 	.word	0x0000ba00
    13fc:	00002a65 	.word	0x00002a65
    1400:	0000b92c 	.word	0x0000b92c
    1404:	00000fff 	.word	0x00000fff
    1408:	00806024 	.word	0x00806024
    140c:	00806020 	.word	0x00806020
			if (config->differential_mode &&
    1410:	7cf2      	ldrb	r2, [r6, #19]
    1412:	2a00      	cmp	r2, #0
    1414:	d00f      	beq.n	1436 <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
    1416:	69f2      	ldr	r2, [r6, #28]
    1418:	2180      	movs	r1, #128	; 0x80
    141a:	0089      	lsls	r1, r1, #2
    141c:	468c      	mov	ip, r1
    141e:	4462      	add	r2, ip
			if (config->differential_mode &&
    1420:	491a      	ldr	r1, [pc, #104]	; (148c <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    1422:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1424:	428a      	cmp	r2, r1
    1426:	d900      	bls.n	142a <adc_init+0x386>
    1428:	e64f      	b.n	10ca <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    142a:	6a32      	ldr	r2, [r6, #32]
    142c:	4462      	add	r2, ip
    142e:	4917      	ldr	r1, [pc, #92]	; (148c <adc_init+0x3e8>)
    1430:	428a      	cmp	r2, r1
    1432:	d900      	bls.n	1436 <adc_init+0x392>
    1434:	e649      	b.n	10ca <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1436:	4a15      	ldr	r2, [pc, #84]	; (148c <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    1438:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    143a:	69f1      	ldr	r1, [r6, #28]
    143c:	4291      	cmp	r1, r2
    143e:	dd00      	ble.n	1442 <adc_init+0x39e>
    1440:	e643      	b.n	10ca <adc_init+0x26>
    1442:	6a31      	ldr	r1, [r6, #32]
    1444:	4291      	cmp	r1, r2
    1446:	dd00      	ble.n	144a <adc_init+0x3a6>
    1448:	e63f      	b.n	10ca <adc_init+0x26>
    144a:	e746      	b.n	12da <adc_init+0x236>
			if (config->differential_mode &&
    144c:	7cf2      	ldrb	r2, [r6, #19]
    144e:	2a00      	cmp	r2, #0
    1450:	d00f      	beq.n	1472 <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
    1452:	69f2      	ldr	r2, [r6, #28]
    1454:	2180      	movs	r1, #128	; 0x80
    1456:	0209      	lsls	r1, r1, #8
    1458:	468c      	mov	ip, r1
    145a:	4462      	add	r2, ip
			if (config->differential_mode &&
    145c:	490c      	ldr	r1, [pc, #48]	; (1490 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    145e:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1460:	428a      	cmp	r2, r1
    1462:	d900      	bls.n	1466 <adc_init+0x3c2>
    1464:	e631      	b.n	10ca <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1466:	6a32      	ldr	r2, [r6, #32]
    1468:	4462      	add	r2, ip
    146a:	4909      	ldr	r1, [pc, #36]	; (1490 <adc_init+0x3ec>)
    146c:	428a      	cmp	r2, r1
    146e:	d900      	bls.n	1472 <adc_init+0x3ce>
    1470:	e62b      	b.n	10ca <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    1472:	4a07      	ldr	r2, [pc, #28]	; (1490 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    1474:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1476:	69f1      	ldr	r1, [r6, #28]
    1478:	4291      	cmp	r1, r2
    147a:	dd00      	ble.n	147e <adc_init+0x3da>
    147c:	e625      	b.n	10ca <adc_init+0x26>
    147e:	6a31      	ldr	r1, [r6, #32]
    1480:	4291      	cmp	r1, r2
    1482:	dd00      	ble.n	1486 <adc_init+0x3e2>
    1484:	e621      	b.n	10ca <adc_init+0x26>
    1486:	e728      	b.n	12da <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
    1488:	2017      	movs	r0, #23
    148a:	e61e      	b.n	10ca <adc_init+0x26>
    148c:	000003ff 	.word	0x000003ff
    1490:	0000ffff 	.word	0x0000ffff

00001494 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1494:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1496:	2200      	movs	r2, #0
    1498:	4b10      	ldr	r3, [pc, #64]	; (14dc <EIC_Handler+0x48>)
    149a:	701a      	strb	r2, [r3, #0]
    149c:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    149e:	4910      	ldr	r1, [pc, #64]	; (14e0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    14a0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    14a2:	4e10      	ldr	r6, [pc, #64]	; (14e4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    14a4:	4c0d      	ldr	r4, [pc, #52]	; (14dc <EIC_Handler+0x48>)
    14a6:	e00a      	b.n	14be <EIC_Handler+0x2a>
		return eics[eic_index];
    14a8:	490d      	ldr	r1, [pc, #52]	; (14e0 <EIC_Handler+0x4c>)
    14aa:	e008      	b.n	14be <EIC_Handler+0x2a>
    14ac:	7823      	ldrb	r3, [r4, #0]
    14ae:	3301      	adds	r3, #1
    14b0:	b2db      	uxtb	r3, r3
    14b2:	7023      	strb	r3, [r4, #0]
    14b4:	2b0f      	cmp	r3, #15
    14b6:	d810      	bhi.n	14da <EIC_Handler+0x46>
		return NULL;
    14b8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    14ba:	2b1f      	cmp	r3, #31
    14bc:	d9f4      	bls.n	14a8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    14be:	0028      	movs	r0, r5
    14c0:	4018      	ands	r0, r3
    14c2:	2201      	movs	r2, #1
    14c4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    14c6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    14c8:	4210      	tst	r0, r2
    14ca:	d0ef      	beq.n	14ac <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    14cc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    14ce:	009b      	lsls	r3, r3, #2
    14d0:	599b      	ldr	r3, [r3, r6]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d0ea      	beq.n	14ac <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    14d6:	4798      	blx	r3
    14d8:	e7e8      	b.n	14ac <EIC_Handler+0x18>
			}
		}
	}
}
    14da:	bd70      	pop	{r4, r5, r6, pc}
    14dc:	20000859 	.word	0x20000859
    14e0:	40001800 	.word	0x40001800
    14e4:	2000085c 	.word	0x2000085c

000014e8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    14e8:	4a04      	ldr	r2, [pc, #16]	; (14fc <_extint_enable+0x14>)
    14ea:	7813      	ldrb	r3, [r2, #0]
    14ec:	2102      	movs	r1, #2
    14ee:	430b      	orrs	r3, r1
    14f0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    14f2:	7853      	ldrb	r3, [r2, #1]
    14f4:	b25b      	sxtb	r3, r3
    14f6:	2b00      	cmp	r3, #0
    14f8:	dbfb      	blt.n	14f2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    14fa:	4770      	bx	lr
    14fc:	40001800 	.word	0x40001800

00001500 <_system_extint_init>:
{
    1500:	b500      	push	{lr}
    1502:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1504:	4a12      	ldr	r2, [pc, #72]	; (1550 <_system_extint_init+0x50>)
    1506:	6993      	ldr	r3, [r2, #24]
    1508:	2140      	movs	r1, #64	; 0x40
    150a:	430b      	orrs	r3, r1
    150c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    150e:	a901      	add	r1, sp, #4
    1510:	2300      	movs	r3, #0
    1512:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1514:	2005      	movs	r0, #5
    1516:	4b0f      	ldr	r3, [pc, #60]	; (1554 <_system_extint_init+0x54>)
    1518:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    151a:	2005      	movs	r0, #5
    151c:	4b0e      	ldr	r3, [pc, #56]	; (1558 <_system_extint_init+0x58>)
    151e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1520:	4a0e      	ldr	r2, [pc, #56]	; (155c <_system_extint_init+0x5c>)
    1522:	7813      	ldrb	r3, [r2, #0]
    1524:	2101      	movs	r1, #1
    1526:	430b      	orrs	r3, r1
    1528:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    152a:	7853      	ldrb	r3, [r2, #1]
    152c:	b25b      	sxtb	r3, r3
    152e:	2b00      	cmp	r3, #0
    1530:	dbfb      	blt.n	152a <_system_extint_init+0x2a>
    1532:	4b0b      	ldr	r3, [pc, #44]	; (1560 <_system_extint_init+0x60>)
    1534:	0019      	movs	r1, r3
    1536:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1538:	2200      	movs	r2, #0
    153a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    153c:	4299      	cmp	r1, r3
    153e:	d1fc      	bne.n	153a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1540:	2210      	movs	r2, #16
    1542:	4b08      	ldr	r3, [pc, #32]	; (1564 <_system_extint_init+0x64>)
    1544:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1546:	4b08      	ldr	r3, [pc, #32]	; (1568 <_system_extint_init+0x68>)
    1548:	4798      	blx	r3
}
    154a:	b003      	add	sp, #12
    154c:	bd00      	pop	{pc}
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	40000400 	.word	0x40000400
    1554:	0000296d 	.word	0x0000296d
    1558:	000028e1 	.word	0x000028e1
    155c:	40001800 	.word	0x40001800
    1560:	2000085c 	.word	0x2000085c
    1564:	e000e100 	.word	0xe000e100
    1568:	000014e9 	.word	0x000014e9

0000156c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    156c:	b500      	push	{lr}
    156e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1570:	ab01      	add	r3, sp, #4
    1572:	2280      	movs	r2, #128	; 0x80
    1574:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1576:	780a      	ldrb	r2, [r1, #0]
    1578:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    157a:	784a      	ldrb	r2, [r1, #1]
    157c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    157e:	788a      	ldrb	r2, [r1, #2]
    1580:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1582:	0019      	movs	r1, r3
    1584:	4b01      	ldr	r3, [pc, #4]	; (158c <port_pin_set_config+0x20>)
    1586:	4798      	blx	r3
}
    1588:	b003      	add	sp, #12
    158a:	bd00      	pop	{pc}
    158c:	00002a65 	.word	0x00002a65

00001590 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1590:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1592:	2207      	movs	r2, #7
    1594:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1596:	421a      	tst	r2, r3
    1598:	d1fc      	bne.n	1594 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    159a:	4770      	bx	lr

0000159c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    159c:	b5f0      	push	{r4, r5, r6, r7, lr}
    159e:	46d6      	mov	lr, sl
    15a0:	464f      	mov	r7, r9
    15a2:	4646      	mov	r6, r8
    15a4:	b5c0      	push	{r6, r7, lr}
    15a6:	b08a      	sub	sp, #40	; 0x28
    15a8:	0006      	movs	r6, r0
    15aa:	000f      	movs	r7, r1
    15ac:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    15ae:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    15b0:	0008      	movs	r0, r1
    15b2:	4b97      	ldr	r3, [pc, #604]	; (1810 <i2c_master_init+0x274>)
    15b4:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    15b6:	4a97      	ldr	r2, [pc, #604]	; (1814 <i2c_master_init+0x278>)
    15b8:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    15ba:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    15bc:	2301      	movs	r3, #1
    15be:	40ab      	lsls	r3, r5
    15c0:	430b      	orrs	r3, r1
    15c2:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    15c4:	a909      	add	r1, sp, #36	; 0x24
    15c6:	7b23      	ldrb	r3, [r4, #12]
    15c8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15ca:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    15cc:	b2c5      	uxtb	r5, r0
    15ce:	0028      	movs	r0, r5
    15d0:	4b91      	ldr	r3, [pc, #580]	; (1818 <i2c_master_init+0x27c>)
    15d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    15d4:	0028      	movs	r0, r5
    15d6:	4b91      	ldr	r3, [pc, #580]	; (181c <i2c_master_init+0x280>)
    15d8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    15da:	7b20      	ldrb	r0, [r4, #12]
    15dc:	2100      	movs	r1, #0
    15de:	4b90      	ldr	r3, [pc, #576]	; (1820 <i2c_master_init+0x284>)
    15e0:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    15e2:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    15e4:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    15e6:	079b      	lsls	r3, r3, #30
    15e8:	d505      	bpl.n	15f6 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    15ea:	b00a      	add	sp, #40	; 0x28
    15ec:	bc1c      	pop	{r2, r3, r4}
    15ee:	4690      	mov	r8, r2
    15f0:	4699      	mov	r9, r3
    15f2:	46a2      	mov	sl, r4
    15f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    15f6:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    15f8:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    15fa:	07db      	lsls	r3, r3, #31
    15fc:	d4f5      	bmi.n	15ea <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    15fe:	2314      	movs	r3, #20
    1600:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1602:	6833      	ldr	r3, [r6, #0]
    1604:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1606:	0018      	movs	r0, r3
    1608:	4b81      	ldr	r3, [pc, #516]	; (1810 <i2c_master_init+0x274>)
    160a:	4798      	blx	r3
    160c:	0005      	movs	r5, r0
    160e:	2380      	movs	r3, #128	; 0x80
    1610:	aa08      	add	r2, sp, #32
    1612:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1614:	2300      	movs	r3, #0
    1616:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1618:	2201      	movs	r2, #1
    161a:	a908      	add	r1, sp, #32
    161c:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    161e:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    1620:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1622:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1624:	2800      	cmp	r0, #0
    1626:	d100      	bne.n	162a <i2c_master_init+0x8e>
    1628:	e0af      	b.n	178a <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    162a:	ab08      	add	r3, sp, #32
    162c:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    162e:	2302      	movs	r3, #2
    1630:	aa08      	add	r2, sp, #32
    1632:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1634:	0c00      	lsrs	r0, r0, #16
    1636:	b2c0      	uxtb	r0, r0
    1638:	0011      	movs	r1, r2
    163a:	4b7a      	ldr	r3, [pc, #488]	; (1824 <i2c_master_init+0x288>)
    163c:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    163e:	2f00      	cmp	r7, #0
    1640:	d100      	bne.n	1644 <i2c_master_init+0xa8>
    1642:	e0a7      	b.n	1794 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    1644:	ab08      	add	r3, sp, #32
    1646:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1648:	2302      	movs	r3, #2
    164a:	aa08      	add	r2, sp, #32
    164c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    164e:	0c3f      	lsrs	r7, r7, #16
    1650:	b2f8      	uxtb	r0, r7
    1652:	0011      	movs	r1, r2
    1654:	4b73      	ldr	r3, [pc, #460]	; (1824 <i2c_master_init+0x288>)
    1656:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1658:	8aa3      	ldrh	r3, [r4, #20]
    165a:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    165c:	8ae3      	ldrh	r3, [r4, #22]
    165e:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    1660:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1662:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1664:	2b00      	cmp	r3, #0
    1666:	d104      	bne.n	1672 <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1668:	4b6f      	ldr	r3, [pc, #444]	; (1828 <i2c_master_init+0x28c>)
    166a:	789b      	ldrb	r3, [r3, #2]
    166c:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    166e:	0fdb      	lsrs	r3, r3, #31
    1670:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1672:	68a1      	ldr	r1, [r4, #8]
    1674:	6923      	ldr	r3, [r4, #16]
    1676:	430b      	orrs	r3, r1
    1678:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    167a:	2224      	movs	r2, #36	; 0x24
    167c:	5ca2      	ldrb	r2, [r4, r2]
    167e:	2a00      	cmp	r2, #0
    1680:	d002      	beq.n	1688 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1682:	2280      	movs	r2, #128	; 0x80
    1684:	05d2      	lsls	r2, r2, #23
    1686:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    1688:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    168a:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    168c:	222c      	movs	r2, #44	; 0x2c
    168e:	5ca2      	ldrb	r2, [r4, r2]
    1690:	2a00      	cmp	r2, #0
    1692:	d103      	bne.n	169c <i2c_master_init+0x100>
    1694:	2280      	movs	r2, #128	; 0x80
    1696:	0492      	lsls	r2, r2, #18
    1698:	4291      	cmp	r1, r2
    169a:	d102      	bne.n	16a2 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    169c:	2280      	movs	r2, #128	; 0x80
    169e:	0512      	lsls	r2, r2, #20
    16a0:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    16a2:	222d      	movs	r2, #45	; 0x2d
    16a4:	5ca2      	ldrb	r2, [r4, r2]
    16a6:	2a00      	cmp	r2, #0
    16a8:	d002      	beq.n	16b0 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    16aa:	2280      	movs	r2, #128	; 0x80
    16ac:	0412      	lsls	r2, r2, #16
    16ae:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    16b0:	222e      	movs	r2, #46	; 0x2e
    16b2:	5ca2      	ldrb	r2, [r4, r2]
    16b4:	2a00      	cmp	r2, #0
    16b6:	d002      	beq.n	16be <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    16b8:	2280      	movs	r2, #128	; 0x80
    16ba:	03d2      	lsls	r2, r2, #15
    16bc:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    16be:	4642      	mov	r2, r8
    16c0:	6812      	ldr	r2, [r2, #0]
    16c2:	4313      	orrs	r3, r2
    16c4:	4642      	mov	r2, r8
    16c6:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    16c8:	2380      	movs	r3, #128	; 0x80
    16ca:	005b      	lsls	r3, r3, #1
    16cc:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    16ce:	0028      	movs	r0, r5
    16d0:	3014      	adds	r0, #20
    16d2:	b2c0      	uxtb	r0, r0
    16d4:	4b55      	ldr	r3, [pc, #340]	; (182c <i2c_master_init+0x290>)
    16d6:	4798      	blx	r3
    16d8:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    16da:	23fa      	movs	r3, #250	; 0xfa
    16dc:	009b      	lsls	r3, r3, #2
    16de:	6822      	ldr	r2, [r4, #0]
    16e0:	435a      	muls	r2, r3
    16e2:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    16e4:	6863      	ldr	r3, [r4, #4]
    16e6:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    16e8:	4d51      	ldr	r5, [pc, #324]	; (1830 <i2c_master_init+0x294>)
    16ea:	47a8      	blx	r5
    16ec:	9000      	str	r0, [sp, #0]
    16ee:	9101      	str	r1, [sp, #4]
    16f0:	464b      	mov	r3, r9
    16f2:	0058      	lsls	r0, r3, #1
    16f4:	47a8      	blx	r5
    16f6:	9002      	str	r0, [sp, #8]
    16f8:	9103      	str	r1, [sp, #12]
    16fa:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    16fc:	47a8      	blx	r5
    16fe:	9004      	str	r0, [sp, #16]
    1700:	9105      	str	r1, [sp, #20]
    1702:	4f4c      	ldr	r7, [pc, #304]	; (1834 <i2c_master_init+0x298>)
    1704:	4a4c      	ldr	r2, [pc, #304]	; (1838 <i2c_master_init+0x29c>)
    1706:	4b4d      	ldr	r3, [pc, #308]	; (183c <i2c_master_init+0x2a0>)
    1708:	9800      	ldr	r0, [sp, #0]
    170a:	9901      	ldr	r1, [sp, #4]
    170c:	47b8      	blx	r7
    170e:	0002      	movs	r2, r0
    1710:	000b      	movs	r3, r1
    1712:	9804      	ldr	r0, [sp, #16]
    1714:	9905      	ldr	r1, [sp, #20]
    1716:	47b8      	blx	r7
    1718:	4e49      	ldr	r6, [pc, #292]	; (1840 <i2c_master_init+0x2a4>)
    171a:	2200      	movs	r2, #0
    171c:	4b49      	ldr	r3, [pc, #292]	; (1844 <i2c_master_init+0x2a8>)
    171e:	47b0      	blx	r6
    1720:	9004      	str	r0, [sp, #16]
    1722:	9105      	str	r1, [sp, #20]
    1724:	4648      	mov	r0, r9
    1726:	47a8      	blx	r5
    1728:	0002      	movs	r2, r0
    172a:	000b      	movs	r3, r1
    172c:	9804      	ldr	r0, [sp, #16]
    172e:	9905      	ldr	r1, [sp, #20]
    1730:	47b8      	blx	r7
    1732:	0002      	movs	r2, r0
    1734:	000b      	movs	r3, r1
    1736:	4d44      	ldr	r5, [pc, #272]	; (1848 <i2c_master_init+0x2ac>)
    1738:	9800      	ldr	r0, [sp, #0]
    173a:	9901      	ldr	r1, [sp, #4]
    173c:	47a8      	blx	r5
    173e:	9a02      	ldr	r2, [sp, #8]
    1740:	9b03      	ldr	r3, [sp, #12]
    1742:	47b0      	blx	r6
    1744:	2200      	movs	r2, #0
    1746:	4b41      	ldr	r3, [pc, #260]	; (184c <i2c_master_init+0x2b0>)
    1748:	47a8      	blx	r5
    174a:	9a02      	ldr	r2, [sp, #8]
    174c:	9b03      	ldr	r3, [sp, #12]
    174e:	4d40      	ldr	r5, [pc, #256]	; (1850 <i2c_master_init+0x2b4>)
    1750:	47a8      	blx	r5
    1752:	4b40      	ldr	r3, [pc, #256]	; (1854 <i2c_master_init+0x2b8>)
    1754:	4798      	blx	r3
    1756:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1758:	2380      	movs	r3, #128	; 0x80
    175a:	049b      	lsls	r3, r3, #18
    175c:	68a2      	ldr	r2, [r4, #8]
    175e:	429a      	cmp	r2, r3
    1760:	d01e      	beq.n	17a0 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1762:	0003      	movs	r3, r0
    1764:	2040      	movs	r0, #64	; 0x40
    1766:	2dff      	cmp	r5, #255	; 0xff
    1768:	d900      	bls.n	176c <i2c_master_init+0x1d0>
    176a:	e73e      	b.n	15ea <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    176c:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    176e:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1770:	25ff      	movs	r5, #255	; 0xff
    1772:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1774:	0624      	lsls	r4, r4, #24
    1776:	4325      	orrs	r5, r4
    1778:	0400      	lsls	r0, r0, #16
    177a:	23ff      	movs	r3, #255	; 0xff
    177c:	041b      	lsls	r3, r3, #16
    177e:	4018      	ands	r0, r3
    1780:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1782:	4643      	mov	r3, r8
    1784:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    1786:	2000      	movs	r0, #0
    1788:	e72f      	b.n	15ea <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    178a:	2100      	movs	r1, #0
    178c:	4640      	mov	r0, r8
    178e:	4b32      	ldr	r3, [pc, #200]	; (1858 <i2c_master_init+0x2bc>)
    1790:	4798      	blx	r3
    1792:	e74a      	b.n	162a <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1794:	2101      	movs	r1, #1
    1796:	4640      	mov	r0, r8
    1798:	4b2f      	ldr	r3, [pc, #188]	; (1858 <i2c_master_init+0x2bc>)
    179a:	4798      	blx	r3
    179c:	0007      	movs	r7, r0
    179e:	e751      	b.n	1644 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    17a0:	26fa      	movs	r6, #250	; 0xfa
    17a2:	00b6      	lsls	r6, r6, #2
    17a4:	4653      	mov	r3, sl
    17a6:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    17a8:	9800      	ldr	r0, [sp, #0]
    17aa:	9901      	ldr	r1, [sp, #4]
    17ac:	0002      	movs	r2, r0
    17ae:	000b      	movs	r3, r1
    17b0:	4c23      	ldr	r4, [pc, #140]	; (1840 <i2c_master_init+0x2a4>)
    17b2:	47a0      	blx	r4
    17b4:	9000      	str	r0, [sp, #0]
    17b6:	9101      	str	r1, [sp, #4]
    17b8:	0030      	movs	r0, r6
    17ba:	4b1d      	ldr	r3, [pc, #116]	; (1830 <i2c_master_init+0x294>)
    17bc:	4798      	blx	r3
    17be:	2200      	movs	r2, #0
    17c0:	4b26      	ldr	r3, [pc, #152]	; (185c <i2c_master_init+0x2c0>)
    17c2:	47b8      	blx	r7
    17c4:	0002      	movs	r2, r0
    17c6:	000b      	movs	r3, r1
    17c8:	9800      	ldr	r0, [sp, #0]
    17ca:	9901      	ldr	r1, [sp, #4]
    17cc:	4c20      	ldr	r4, [pc, #128]	; (1850 <i2c_master_init+0x2b4>)
    17ce:	47a0      	blx	r4
    17d0:	2200      	movs	r2, #0
    17d2:	4b1e      	ldr	r3, [pc, #120]	; (184c <i2c_master_init+0x2b0>)
    17d4:	4c1c      	ldr	r4, [pc, #112]	; (1848 <i2c_master_init+0x2ac>)
    17d6:	47a0      	blx	r4
    17d8:	4b1e      	ldr	r3, [pc, #120]	; (1854 <i2c_master_init+0x2b8>)
    17da:	4798      	blx	r3
    17dc:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    17de:	d00c      	beq.n	17fa <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    17e0:	0031      	movs	r1, r6
    17e2:	9807      	ldr	r0, [sp, #28]
    17e4:	4b1e      	ldr	r3, [pc, #120]	; (1860 <i2c_master_init+0x2c4>)
    17e6:	4798      	blx	r3
    17e8:	3802      	subs	r0, #2
    17ea:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    17ec:	002b      	movs	r3, r5
    17ee:	2dff      	cmp	r5, #255	; 0xff
    17f0:	d80c      	bhi.n	180c <i2c_master_init+0x270>
    17f2:	28ff      	cmp	r0, #255	; 0xff
    17f4:	d9bc      	bls.n	1770 <i2c_master_init+0x1d4>
    17f6:	2040      	movs	r0, #64	; 0x40
    17f8:	e6f7      	b.n	15ea <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    17fa:	0071      	lsls	r1, r6, #1
    17fc:	1e48      	subs	r0, r1, #1
    17fe:	9b07      	ldr	r3, [sp, #28]
    1800:	469c      	mov	ip, r3
    1802:	4460      	add	r0, ip
    1804:	4b16      	ldr	r3, [pc, #88]	; (1860 <i2c_master_init+0x2c4>)
    1806:	4798      	blx	r3
    1808:	3801      	subs	r0, #1
    180a:	e7ef      	b.n	17ec <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    180c:	2040      	movs	r0, #64	; 0x40
    180e:	e6ec      	b.n	15ea <i2c_master_init+0x4e>
    1810:	00001c21 	.word	0x00001c21
    1814:	40000400 	.word	0x40000400
    1818:	0000296d 	.word	0x0000296d
    181c:	000028e1 	.word	0x000028e1
    1820:	00001a5d 	.word	0x00001a5d
    1824:	00002a65 	.word	0x00002a65
    1828:	41002000 	.word	0x41002000
    182c:	00002989 	.word	0x00002989
    1830:	0000a301 	.word	0x0000a301
    1834:	000096a9 	.word	0x000096a9
    1838:	e826d695 	.word	0xe826d695
    183c:	3e112e0b 	.word	0x3e112e0b
    1840:	00008821 	.word	0x00008821
    1844:	40240000 	.word	0x40240000
    1848:	00009ba9 	.word	0x00009ba9
    184c:	3ff00000 	.word	0x3ff00000
    1850:	00008e41 	.word	0x00008e41
    1854:	0000a215 	.word	0x0000a215
    1858:	00001aa9 	.word	0x00001aa9
    185c:	40080000 	.word	0x40080000
    1860:	00007ba9 	.word	0x00007ba9

00001864 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1864:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1866:	7e1a      	ldrb	r2, [r3, #24]
    1868:	0792      	lsls	r2, r2, #30
    186a:	d507      	bpl.n	187c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    186c:	2202      	movs	r2, #2
    186e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1870:	8b5b      	ldrh	r3, [r3, #26]
    1872:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1874:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1876:	17db      	asrs	r3, r3, #31
    1878:	4018      	ands	r0, r3
}
    187a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    187c:	8b5a      	ldrh	r2, [r3, #26]
    187e:	0752      	lsls	r2, r2, #29
    1880:	d506      	bpl.n	1890 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1882:	6859      	ldr	r1, [r3, #4]
    1884:	22c0      	movs	r2, #192	; 0xc0
    1886:	0292      	lsls	r2, r2, #10
    1888:	430a      	orrs	r2, r1
    188a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    188c:	2018      	movs	r0, #24
    188e:	e7f4      	b.n	187a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1890:	2000      	movs	r0, #0
    1892:	e7f2      	b.n	187a <_i2c_master_address_response+0x16>

00001894 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1894:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1896:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1898:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    189a:	2401      	movs	r4, #1
    189c:	2502      	movs	r5, #2
    189e:	7e11      	ldrb	r1, [r2, #24]
    18a0:	4221      	tst	r1, r4
    18a2:	d10b      	bne.n	18bc <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    18a4:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    18a6:	4229      	tst	r1, r5
    18a8:	d106      	bne.n	18b8 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    18aa:	3301      	adds	r3, #1
    18ac:	b29b      	uxth	r3, r3
    18ae:	8901      	ldrh	r1, [r0, #8]
    18b0:	4299      	cmp	r1, r3
    18b2:	d8f4      	bhi.n	189e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    18b4:	2012      	movs	r0, #18
    18b6:	e002      	b.n	18be <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    18b8:	2000      	movs	r0, #0
    18ba:	e000      	b.n	18be <_i2c_master_wait_for_bus+0x2a>
    18bc:	2000      	movs	r0, #0
}
    18be:	bd30      	pop	{r4, r5, pc}

000018c0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    18c0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    18c2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18c4:	6862      	ldr	r2, [r4, #4]
    18c6:	2380      	movs	r3, #128	; 0x80
    18c8:	02db      	lsls	r3, r3, #11
    18ca:	4313      	orrs	r3, r2
    18cc:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    18ce:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    18d0:	4b02      	ldr	r3, [pc, #8]	; (18dc <_i2c_master_send_hs_master_code+0x1c>)
    18d2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    18d4:	2301      	movs	r3, #1
    18d6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    18d8:	bd10      	pop	{r4, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	00001895 	.word	0x00001895

000018e0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    18e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e2:	46de      	mov	lr, fp
    18e4:	4657      	mov	r7, sl
    18e6:	464e      	mov	r6, r9
    18e8:	4645      	mov	r5, r8
    18ea:	b5e0      	push	{r5, r6, r7, lr}
    18ec:	b083      	sub	sp, #12
    18ee:	0006      	movs	r6, r0
    18f0:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    18f2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    18f4:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    18f6:	4b32      	ldr	r3, [pc, #200]	; (19c0 <_i2c_master_write_packet+0xe0>)
    18f8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    18fa:	7a7b      	ldrb	r3, [r7, #9]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d11d      	bne.n	193c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1900:	686b      	ldr	r3, [r5, #4]
    1902:	4a30      	ldr	r2, [pc, #192]	; (19c4 <_i2c_master_write_packet+0xe4>)
    1904:	4013      	ands	r3, r2
    1906:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1908:	7a3b      	ldrb	r3, [r7, #8]
    190a:	2b00      	cmp	r3, #0
    190c:	d01b      	beq.n	1946 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    190e:	883b      	ldrh	r3, [r7, #0]
    1910:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1912:	7a7a      	ldrb	r2, [r7, #9]
    1914:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1916:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1918:	2280      	movs	r2, #128	; 0x80
    191a:	0212      	lsls	r2, r2, #8
    191c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    191e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1920:	0030      	movs	r0, r6
    1922:	4b29      	ldr	r3, [pc, #164]	; (19c8 <_i2c_master_write_packet+0xe8>)
    1924:	4798      	blx	r3
    1926:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1928:	2800      	cmp	r0, #0
    192a:	d013      	beq.n	1954 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    192c:	9801      	ldr	r0, [sp, #4]
    192e:	b003      	add	sp, #12
    1930:	bc3c      	pop	{r2, r3, r4, r5}
    1932:	4690      	mov	r8, r2
    1934:	4699      	mov	r9, r3
    1936:	46a2      	mov	sl, r4
    1938:	46ab      	mov	fp, r5
    193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    193c:	7ab9      	ldrb	r1, [r7, #10]
    193e:	0030      	movs	r0, r6
    1940:	4b22      	ldr	r3, [pc, #136]	; (19cc <_i2c_master_write_packet+0xec>)
    1942:	4798      	blx	r3
    1944:	e7dc      	b.n	1900 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1946:	883b      	ldrh	r3, [r7, #0]
    1948:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    194a:	7a7a      	ldrb	r2, [r7, #9]
    194c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    194e:	4313      	orrs	r3, r2
    1950:	626b      	str	r3, [r5, #36]	; 0x24
    1952:	e7e5      	b.n	1920 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    1954:	0030      	movs	r0, r6
    1956:	4b1e      	ldr	r3, [pc, #120]	; (19d0 <_i2c_master_write_packet+0xf0>)
    1958:	4798      	blx	r3
    195a:	1e03      	subs	r3, r0, #0
    195c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    195e:	d1e5      	bne.n	192c <_i2c_master_write_packet+0x4c>
    1960:	46a0      	mov	r8, r4
    1962:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1964:	3320      	adds	r3, #32
    1966:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    1968:	4b15      	ldr	r3, [pc, #84]	; (19c0 <_i2c_master_write_packet+0xe0>)
    196a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    196c:	4b16      	ldr	r3, [pc, #88]	; (19c8 <_i2c_master_write_packet+0xe8>)
    196e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    1970:	4544      	cmp	r4, r8
    1972:	d015      	beq.n	19a0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1974:	8b6b      	ldrh	r3, [r5, #26]
    1976:	464a      	mov	r2, r9
    1978:	4213      	tst	r3, r2
    197a:	d01d      	beq.n	19b8 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    197c:	0030      	movs	r0, r6
    197e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	5d1a      	ldrb	r2, [r3, r4]
    1984:	2328      	movs	r3, #40	; 0x28
    1986:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    1988:	0030      	movs	r0, r6
    198a:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    198c:	2800      	cmp	r0, #0
    198e:	d106      	bne.n	199e <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1990:	8b6b      	ldrh	r3, [r5, #26]
    1992:	3401      	adds	r4, #1
    1994:	075b      	lsls	r3, r3, #29
    1996:	d5eb      	bpl.n	1970 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    1998:	231e      	movs	r3, #30
    199a:	9301      	str	r3, [sp, #4]
    199c:	e000      	b.n	19a0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    199e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    19a0:	7ab3      	ldrb	r3, [r6, #10]
    19a2:	2b00      	cmp	r3, #0
    19a4:	d0c2      	beq.n	192c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    19a6:	0030      	movs	r0, r6
    19a8:	4b05      	ldr	r3, [pc, #20]	; (19c0 <_i2c_master_write_packet+0xe0>)
    19aa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    19ac:	686a      	ldr	r2, [r5, #4]
    19ae:	23c0      	movs	r3, #192	; 0xc0
    19b0:	029b      	lsls	r3, r3, #10
    19b2:	4313      	orrs	r3, r2
    19b4:	606b      	str	r3, [r5, #4]
    19b6:	e7b9      	b.n	192c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    19b8:	2341      	movs	r3, #65	; 0x41
    19ba:	9301      	str	r3, [sp, #4]
    19bc:	e7b6      	b.n	192c <_i2c_master_write_packet+0x4c>
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	00001591 	.word	0x00001591
    19c4:	fffbffff 	.word	0xfffbffff
    19c8:	00001895 	.word	0x00001895
    19cc:	000018c1 	.word	0x000018c1
    19d0:	00001865 	.word	0x00001865

000019d4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    19d4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    19d6:	2301      	movs	r3, #1
    19d8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    19da:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    19dc:	4b01      	ldr	r3, [pc, #4]	; (19e4 <i2c_master_write_packet_wait+0x10>)
    19de:	4798      	blx	r3
}
    19e0:	bd10      	pop	{r4, pc}
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	000018e1 	.word	0x000018e1

000019e8 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    19e8:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    19ea:	2300      	movs	r3, #0
    19ec:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    19ee:	3301      	adds	r3, #1
    19f0:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    19f2:	4b01      	ldr	r3, [pc, #4]	; (19f8 <i2c_master_write_packet_wait_no_stop+0x10>)
    19f4:	4798      	blx	r3
}
    19f6:	bd10      	pop	{r4, pc}
    19f8:	000018e1 	.word	0x000018e1

000019fc <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    19fc:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19fe:	6804      	ldr	r4, [r0, #0]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    1a00:	4b03      	ldr	r3, [pc, #12]	; (1a10 <i2c_master_send_stop+0x14>)
    1a02:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a04:	6862      	ldr	r2, [r4, #4]
    1a06:	23c0      	movs	r3, #192	; 0xc0
    1a08:	029b      	lsls	r3, r3, #10
    1a0a:	4313      	orrs	r3, r2
    1a0c:	6063      	str	r3, [r4, #4]
}
    1a0e:	bd10      	pop	{r4, pc}
    1a10:	00001591 	.word	0x00001591

00001a14 <i2c_master_write_byte>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_write_byte(
		struct i2c_master_module *const module,
		uint8_t byte)
{
    1a14:	b570      	push	{r4, r5, r6, lr}
    1a16:	0004      	movs	r4, r0
    1a18:	000e      	movs	r6, r1
  	enum status_code tmp_status;
  	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a1a:	6805      	ldr	r5, [r0, #0]

	/* Write byte to slave. */
	_i2c_master_wait_for_sync(module);
    1a1c:	4b03      	ldr	r3, [pc, #12]	; (1a2c <i2c_master_write_byte+0x18>)
    1a1e:	4798      	blx	r3
	i2c_module->DATA.reg = byte;
    1a20:	2328      	movs	r3, #40	; 0x28
    1a22:	54ee      	strb	r6, [r5, r3]
	/* Wait for response. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1a24:	0020      	movs	r0, r4
    1a26:	4b02      	ldr	r3, [pc, #8]	; (1a30 <i2c_master_write_byte+0x1c>)
    1a28:	4798      	blx	r3
	return tmp_status;
}
    1a2a:	bd70      	pop	{r4, r5, r6, pc}
    1a2c:	00001591 	.word	0x00001591
    1a30:	00001895 	.word	0x00001895

00001a34 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1a34:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1a36:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a38:	2340      	movs	r3, #64	; 0x40
    1a3a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1a3c:	4281      	cmp	r1, r0
    1a3e:	d202      	bcs.n	1a46 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1a40:	0018      	movs	r0, r3
    1a42:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1a44:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1a46:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1a48:	1c63      	adds	r3, r4, #1
    1a4a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1a4c:	4288      	cmp	r0, r1
    1a4e:	d9f9      	bls.n	1a44 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a50:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1a52:	2cff      	cmp	r4, #255	; 0xff
    1a54:	d8f4      	bhi.n	1a40 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1a56:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1a58:	2300      	movs	r3, #0
    1a5a:	e7f1      	b.n	1a40 <_sercom_get_sync_baud_val+0xc>

00001a5c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1a5c:	b510      	push	{r4, lr}
    1a5e:	b082      	sub	sp, #8
    1a60:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1a62:	4b0e      	ldr	r3, [pc, #56]	; (1a9c <sercom_set_gclk_generator+0x40>)
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	2b00      	cmp	r3, #0
    1a68:	d007      	beq.n	1a7a <sercom_set_gclk_generator+0x1e>
    1a6a:	2900      	cmp	r1, #0
    1a6c:	d105      	bne.n	1a7a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1a6e:	4b0b      	ldr	r3, [pc, #44]	; (1a9c <sercom_set_gclk_generator+0x40>)
    1a70:	785b      	ldrb	r3, [r3, #1]
    1a72:	4283      	cmp	r3, r0
    1a74:	d010      	beq.n	1a98 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a76:	201d      	movs	r0, #29
    1a78:	e00c      	b.n	1a94 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1a7a:	a901      	add	r1, sp, #4
    1a7c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1a7e:	2013      	movs	r0, #19
    1a80:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <sercom_set_gclk_generator+0x44>)
    1a82:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1a84:	2013      	movs	r0, #19
    1a86:	4b07      	ldr	r3, [pc, #28]	; (1aa4 <sercom_set_gclk_generator+0x48>)
    1a88:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1a8a:	4b04      	ldr	r3, [pc, #16]	; (1a9c <sercom_set_gclk_generator+0x40>)
    1a8c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1a8e:	2201      	movs	r2, #1
    1a90:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1a92:	2000      	movs	r0, #0
}
    1a94:	b002      	add	sp, #8
    1a96:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1a98:	2000      	movs	r0, #0
    1a9a:	e7fb      	b.n	1a94 <sercom_set_gclk_generator+0x38>
    1a9c:	20000760 	.word	0x20000760
    1aa0:	0000296d 	.word	0x0000296d
    1aa4:	000028e1 	.word	0x000028e1

00001aa8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1aa8:	4b40      	ldr	r3, [pc, #256]	; (1bac <_sercom_get_default_pad+0x104>)
    1aaa:	4298      	cmp	r0, r3
    1aac:	d031      	beq.n	1b12 <_sercom_get_default_pad+0x6a>
    1aae:	d90a      	bls.n	1ac6 <_sercom_get_default_pad+0x1e>
    1ab0:	4b3f      	ldr	r3, [pc, #252]	; (1bb0 <_sercom_get_default_pad+0x108>)
    1ab2:	4298      	cmp	r0, r3
    1ab4:	d04d      	beq.n	1b52 <_sercom_get_default_pad+0xaa>
    1ab6:	4b3f      	ldr	r3, [pc, #252]	; (1bb4 <_sercom_get_default_pad+0x10c>)
    1ab8:	4298      	cmp	r0, r3
    1aba:	d05a      	beq.n	1b72 <_sercom_get_default_pad+0xca>
    1abc:	4b3e      	ldr	r3, [pc, #248]	; (1bb8 <_sercom_get_default_pad+0x110>)
    1abe:	4298      	cmp	r0, r3
    1ac0:	d037      	beq.n	1b32 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1ac2:	2000      	movs	r0, #0
}
    1ac4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1ac6:	4b3d      	ldr	r3, [pc, #244]	; (1bbc <_sercom_get_default_pad+0x114>)
    1ac8:	4298      	cmp	r0, r3
    1aca:	d00c      	beq.n	1ae6 <_sercom_get_default_pad+0x3e>
    1acc:	4b3c      	ldr	r3, [pc, #240]	; (1bc0 <_sercom_get_default_pad+0x118>)
    1ace:	4298      	cmp	r0, r3
    1ad0:	d1f7      	bne.n	1ac2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ad2:	2901      	cmp	r1, #1
    1ad4:	d017      	beq.n	1b06 <_sercom_get_default_pad+0x5e>
    1ad6:	2900      	cmp	r1, #0
    1ad8:	d05d      	beq.n	1b96 <_sercom_get_default_pad+0xee>
    1ada:	2902      	cmp	r1, #2
    1adc:	d015      	beq.n	1b0a <_sercom_get_default_pad+0x62>
    1ade:	2903      	cmp	r1, #3
    1ae0:	d015      	beq.n	1b0e <_sercom_get_default_pad+0x66>
	return 0;
    1ae2:	2000      	movs	r0, #0
    1ae4:	e7ee      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ae6:	2901      	cmp	r1, #1
    1ae8:	d007      	beq.n	1afa <_sercom_get_default_pad+0x52>
    1aea:	2900      	cmp	r1, #0
    1aec:	d051      	beq.n	1b92 <_sercom_get_default_pad+0xea>
    1aee:	2902      	cmp	r1, #2
    1af0:	d005      	beq.n	1afe <_sercom_get_default_pad+0x56>
    1af2:	2903      	cmp	r1, #3
    1af4:	d005      	beq.n	1b02 <_sercom_get_default_pad+0x5a>
	return 0;
    1af6:	2000      	movs	r0, #0
    1af8:	e7e4      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1afa:	4832      	ldr	r0, [pc, #200]	; (1bc4 <_sercom_get_default_pad+0x11c>)
    1afc:	e7e2      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1afe:	4832      	ldr	r0, [pc, #200]	; (1bc8 <_sercom_get_default_pad+0x120>)
    1b00:	e7e0      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b02:	4832      	ldr	r0, [pc, #200]	; (1bcc <_sercom_get_default_pad+0x124>)
    1b04:	e7de      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b06:	4832      	ldr	r0, [pc, #200]	; (1bd0 <_sercom_get_default_pad+0x128>)
    1b08:	e7dc      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b0a:	4832      	ldr	r0, [pc, #200]	; (1bd4 <_sercom_get_default_pad+0x12c>)
    1b0c:	e7da      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b0e:	4832      	ldr	r0, [pc, #200]	; (1bd8 <_sercom_get_default_pad+0x130>)
    1b10:	e7d8      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b12:	2901      	cmp	r1, #1
    1b14:	d007      	beq.n	1b26 <_sercom_get_default_pad+0x7e>
    1b16:	2900      	cmp	r1, #0
    1b18:	d03f      	beq.n	1b9a <_sercom_get_default_pad+0xf2>
    1b1a:	2902      	cmp	r1, #2
    1b1c:	d005      	beq.n	1b2a <_sercom_get_default_pad+0x82>
    1b1e:	2903      	cmp	r1, #3
    1b20:	d005      	beq.n	1b2e <_sercom_get_default_pad+0x86>
	return 0;
    1b22:	2000      	movs	r0, #0
    1b24:	e7ce      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b26:	482d      	ldr	r0, [pc, #180]	; (1bdc <_sercom_get_default_pad+0x134>)
    1b28:	e7cc      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b2a:	482d      	ldr	r0, [pc, #180]	; (1be0 <_sercom_get_default_pad+0x138>)
    1b2c:	e7ca      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b2e:	482d      	ldr	r0, [pc, #180]	; (1be4 <_sercom_get_default_pad+0x13c>)
    1b30:	e7c8      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b32:	2901      	cmp	r1, #1
    1b34:	d007      	beq.n	1b46 <_sercom_get_default_pad+0x9e>
    1b36:	2900      	cmp	r1, #0
    1b38:	d031      	beq.n	1b9e <_sercom_get_default_pad+0xf6>
    1b3a:	2902      	cmp	r1, #2
    1b3c:	d005      	beq.n	1b4a <_sercom_get_default_pad+0xa2>
    1b3e:	2903      	cmp	r1, #3
    1b40:	d005      	beq.n	1b4e <_sercom_get_default_pad+0xa6>
	return 0;
    1b42:	2000      	movs	r0, #0
    1b44:	e7be      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b46:	4828      	ldr	r0, [pc, #160]	; (1be8 <_sercom_get_default_pad+0x140>)
    1b48:	e7bc      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b4a:	4828      	ldr	r0, [pc, #160]	; (1bec <_sercom_get_default_pad+0x144>)
    1b4c:	e7ba      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b4e:	4828      	ldr	r0, [pc, #160]	; (1bf0 <_sercom_get_default_pad+0x148>)
    1b50:	e7b8      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b52:	2901      	cmp	r1, #1
    1b54:	d007      	beq.n	1b66 <_sercom_get_default_pad+0xbe>
    1b56:	2900      	cmp	r1, #0
    1b58:	d023      	beq.n	1ba2 <_sercom_get_default_pad+0xfa>
    1b5a:	2902      	cmp	r1, #2
    1b5c:	d005      	beq.n	1b6a <_sercom_get_default_pad+0xc2>
    1b5e:	2903      	cmp	r1, #3
    1b60:	d005      	beq.n	1b6e <_sercom_get_default_pad+0xc6>
	return 0;
    1b62:	2000      	movs	r0, #0
    1b64:	e7ae      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b66:	4823      	ldr	r0, [pc, #140]	; (1bf4 <_sercom_get_default_pad+0x14c>)
    1b68:	e7ac      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b6a:	4823      	ldr	r0, [pc, #140]	; (1bf8 <_sercom_get_default_pad+0x150>)
    1b6c:	e7aa      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b6e:	4823      	ldr	r0, [pc, #140]	; (1bfc <_sercom_get_default_pad+0x154>)
    1b70:	e7a8      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b72:	2901      	cmp	r1, #1
    1b74:	d007      	beq.n	1b86 <_sercom_get_default_pad+0xde>
    1b76:	2900      	cmp	r1, #0
    1b78:	d015      	beq.n	1ba6 <_sercom_get_default_pad+0xfe>
    1b7a:	2902      	cmp	r1, #2
    1b7c:	d005      	beq.n	1b8a <_sercom_get_default_pad+0xe2>
    1b7e:	2903      	cmp	r1, #3
    1b80:	d005      	beq.n	1b8e <_sercom_get_default_pad+0xe6>
	return 0;
    1b82:	2000      	movs	r0, #0
    1b84:	e79e      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b86:	481e      	ldr	r0, [pc, #120]	; (1c00 <_sercom_get_default_pad+0x158>)
    1b88:	e79c      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b8a:	481e      	ldr	r0, [pc, #120]	; (1c04 <_sercom_get_default_pad+0x15c>)
    1b8c:	e79a      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b8e:	481e      	ldr	r0, [pc, #120]	; (1c08 <_sercom_get_default_pad+0x160>)
    1b90:	e798      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b92:	481e      	ldr	r0, [pc, #120]	; (1c0c <_sercom_get_default_pad+0x164>)
    1b94:	e796      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b96:	2003      	movs	r0, #3
    1b98:	e794      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b9a:	481d      	ldr	r0, [pc, #116]	; (1c10 <_sercom_get_default_pad+0x168>)
    1b9c:	e792      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1b9e:	481d      	ldr	r0, [pc, #116]	; (1c14 <_sercom_get_default_pad+0x16c>)
    1ba0:	e790      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1ba2:	481d      	ldr	r0, [pc, #116]	; (1c18 <_sercom_get_default_pad+0x170>)
    1ba4:	e78e      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1ba6:	481d      	ldr	r0, [pc, #116]	; (1c1c <_sercom_get_default_pad+0x174>)
    1ba8:	e78c      	b.n	1ac4 <_sercom_get_default_pad+0x1c>
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	42001000 	.word	0x42001000
    1bb0:	42001800 	.word	0x42001800
    1bb4:	42001c00 	.word	0x42001c00
    1bb8:	42001400 	.word	0x42001400
    1bbc:	42000800 	.word	0x42000800
    1bc0:	42000c00 	.word	0x42000c00
    1bc4:	00050003 	.word	0x00050003
    1bc8:	00060003 	.word	0x00060003
    1bcc:	00070003 	.word	0x00070003
    1bd0:	00010003 	.word	0x00010003
    1bd4:	001e0003 	.word	0x001e0003
    1bd8:	001f0003 	.word	0x001f0003
    1bdc:	00090003 	.word	0x00090003
    1be0:	000a0003 	.word	0x000a0003
    1be4:	000b0003 	.word	0x000b0003
    1be8:	00110003 	.word	0x00110003
    1bec:	00120003 	.word	0x00120003
    1bf0:	00130003 	.word	0x00130003
    1bf4:	000d0003 	.word	0x000d0003
    1bf8:	000e0003 	.word	0x000e0003
    1bfc:	000f0003 	.word	0x000f0003
    1c00:	00170003 	.word	0x00170003
    1c04:	00180003 	.word	0x00180003
    1c08:	00190003 	.word	0x00190003
    1c0c:	00040003 	.word	0x00040003
    1c10:	00080003 	.word	0x00080003
    1c14:	00100003 	.word	0x00100003
    1c18:	000c0003 	.word	0x000c0003
    1c1c:	00160003 	.word	0x00160003

00001c20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1c20:	b530      	push	{r4, r5, lr}
    1c22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1c24:	4b0b      	ldr	r3, [pc, #44]	; (1c54 <_sercom_get_sercom_inst_index+0x34>)
    1c26:	466a      	mov	r2, sp
    1c28:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c2a:	c232      	stmia	r2!, {r1, r4, r5}
    1c2c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c2e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1c30:	9b00      	ldr	r3, [sp, #0]
    1c32:	4283      	cmp	r3, r0
    1c34:	d00b      	beq.n	1c4e <_sercom_get_sercom_inst_index+0x2e>
    1c36:	2301      	movs	r3, #1
    1c38:	009a      	lsls	r2, r3, #2
    1c3a:	4669      	mov	r1, sp
    1c3c:	5852      	ldr	r2, [r2, r1]
    1c3e:	4282      	cmp	r2, r0
    1c40:	d006      	beq.n	1c50 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c42:	3301      	adds	r3, #1
    1c44:	2b06      	cmp	r3, #6
    1c46:	d1f7      	bne.n	1c38 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1c48:	2000      	movs	r0, #0
}
    1c4a:	b007      	add	sp, #28
    1c4c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c4e:	2300      	movs	r3, #0
			return i;
    1c50:	b2d8      	uxtb	r0, r3
    1c52:	e7fa      	b.n	1c4a <_sercom_get_sercom_inst_index+0x2a>
    1c54:	0000ba50 	.word	0x0000ba50

00001c58 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1c58:	b510      	push	{r4, lr}
    1c5a:	4b02      	ldr	r3, [pc, #8]	; (1c64 <SERCOM0_Handler+0xc>)
    1c5c:	681b      	ldr	r3, [r3, #0]
    1c5e:	2000      	movs	r0, #0
    1c60:	4798      	blx	r3
    1c62:	bd10      	pop	{r4, pc}
    1c64:	20000764 	.word	0x20000764

00001c68 <SERCOM1_Handler>:
    1c68:	b510      	push	{r4, lr}
    1c6a:	4b02      	ldr	r3, [pc, #8]	; (1c74 <SERCOM1_Handler+0xc>)
    1c6c:	685b      	ldr	r3, [r3, #4]
    1c6e:	2001      	movs	r0, #1
    1c70:	4798      	blx	r3
    1c72:	bd10      	pop	{r4, pc}
    1c74:	20000764 	.word	0x20000764

00001c78 <SERCOM2_Handler>:
    1c78:	b510      	push	{r4, lr}
    1c7a:	4b02      	ldr	r3, [pc, #8]	; (1c84 <SERCOM2_Handler+0xc>)
    1c7c:	689b      	ldr	r3, [r3, #8]
    1c7e:	2002      	movs	r0, #2
    1c80:	4798      	blx	r3
    1c82:	bd10      	pop	{r4, pc}
    1c84:	20000764 	.word	0x20000764

00001c88 <SERCOM3_Handler>:
    1c88:	b510      	push	{r4, lr}
    1c8a:	4b02      	ldr	r3, [pc, #8]	; (1c94 <SERCOM3_Handler+0xc>)
    1c8c:	68db      	ldr	r3, [r3, #12]
    1c8e:	2003      	movs	r0, #3
    1c90:	4798      	blx	r3
    1c92:	bd10      	pop	{r4, pc}
    1c94:	20000764 	.word	0x20000764

00001c98 <SERCOM4_Handler>:
    1c98:	b510      	push	{r4, lr}
    1c9a:	4b02      	ldr	r3, [pc, #8]	; (1ca4 <SERCOM4_Handler+0xc>)
    1c9c:	691b      	ldr	r3, [r3, #16]
    1c9e:	2004      	movs	r0, #4
    1ca0:	4798      	blx	r3
    1ca2:	bd10      	pop	{r4, pc}
    1ca4:	20000764 	.word	0x20000764

00001ca8 <SERCOM5_Handler>:
    1ca8:	b510      	push	{r4, lr}
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <SERCOM5_Handler+0xc>)
    1cac:	695b      	ldr	r3, [r3, #20]
    1cae:	2005      	movs	r0, #5
    1cb0:	4798      	blx	r3
    1cb2:	bd10      	pop	{r4, pc}
    1cb4:	20000764 	.word	0x20000764

00001cb8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cba:	46d6      	mov	lr, sl
    1cbc:	464f      	mov	r7, r9
    1cbe:	b580      	push	{r7, lr}
    1cc0:	b08b      	sub	sp, #44	; 0x2c
    1cc2:	4681      	mov	r9, r0
    1cc4:	000f      	movs	r7, r1
    1cc6:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1cc8:	0003      	movs	r3, r0
    1cca:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1ccc:	680b      	ldr	r3, [r1, #0]
    1cce:	079b      	lsls	r3, r3, #30
    1cd0:	d409      	bmi.n	1ce6 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1cd2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1cd4:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1cd6:	07db      	lsls	r3, r3, #31
    1cd8:	d400      	bmi.n	1cdc <spi_init+0x24>
    1cda:	e0b1      	b.n	1e40 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1cdc:	b00b      	add	sp, #44	; 0x2c
    1cde:	bc0c      	pop	{r2, r3}
    1ce0:	4691      	mov	r9, r2
    1ce2:	469a      	mov	sl, r3
    1ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    1ce6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1ce8:	9305      	str	r3, [sp, #20]
    1cea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1cec:	9306      	str	r3, [sp, #24]
    1cee:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1cf0:	9307      	str	r3, [sp, #28]
    1cf2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1cf4:	9308      	str	r3, [sp, #32]
    1cf6:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1cf8:	ab05      	add	r3, sp, #20
    1cfa:	9301      	str	r3, [sp, #4]
    1cfc:	e00a      	b.n	1d14 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1cfe:	0038      	movs	r0, r7
    1d00:	4baf      	ldr	r3, [pc, #700]	; (1fc0 <spi_init+0x308>)
    1d02:	4798      	blx	r3
    1d04:	e00c      	b.n	1d20 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1d06:	230f      	movs	r3, #15
    1d08:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    1d0a:	4281      	cmp	r1, r0
    1d0c:	d12d      	bne.n	1d6a <spi_init+0xb2>
    1d0e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1d10:	2e04      	cmp	r6, #4
    1d12:	d02f      	beq.n	1d74 <spi_init+0xbc>
    1d14:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1d16:	00b3      	lsls	r3, r6, #2
    1d18:	9a01      	ldr	r2, [sp, #4]
    1d1a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    1d1c:	2800      	cmp	r0, #0
    1d1e:	d0ee      	beq.n	1cfe <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    1d20:	1c43      	adds	r3, r0, #1
    1d22:	d0f4      	beq.n	1d0e <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    1d24:	0401      	lsls	r1, r0, #16
    1d26:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1d28:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    1d2a:	b2c3      	uxtb	r3, r0
    1d2c:	469c      	mov	ip, r3
		return NULL;
    1d2e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d30:	0602      	lsls	r2, r0, #24
    1d32:	d405      	bmi.n	1d40 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    1d34:	4663      	mov	r3, ip
    1d36:	095b      	lsrs	r3, r3, #5
    1d38:	01db      	lsls	r3, r3, #7
    1d3a:	4aa2      	ldr	r2, [pc, #648]	; (1fc4 <spi_init+0x30c>)
    1d3c:	4692      	mov	sl, r2
    1d3e:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    1d40:	221f      	movs	r2, #31
    1d42:	4660      	mov	r0, ip
    1d44:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1d46:	1898      	adds	r0, r3, r2
    1d48:	3040      	adds	r0, #64	; 0x40
    1d4a:	7800      	ldrb	r0, [r0, #0]
    1d4c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1d4e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1d50:	4655      	mov	r5, sl
    1d52:	07ed      	lsls	r5, r5, #31
    1d54:	d5d9      	bpl.n	1d0a <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1d56:	0852      	lsrs	r2, r2, #1
    1d58:	189b      	adds	r3, r3, r2
    1d5a:	3330      	adds	r3, #48	; 0x30
    1d5c:	7818      	ldrb	r0, [r3, #0]
    1d5e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    1d60:	4663      	mov	r3, ip
    1d62:	07db      	lsls	r3, r3, #31
    1d64:	d5cf      	bpl.n	1d06 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1d66:	0900      	lsrs	r0, r0, #4
    1d68:	e7cf      	b.n	1d0a <spi_init+0x52>
			module->hw = NULL;
    1d6a:	2300      	movs	r3, #0
    1d6c:	464a      	mov	r2, r9
    1d6e:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    1d70:	201c      	movs	r0, #28
    1d72:	e7b3      	b.n	1cdc <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1d74:	2013      	movs	r0, #19
    1d76:	4b94      	ldr	r3, [pc, #592]	; (1fc8 <spi_init+0x310>)
    1d78:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1d7a:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1d7c:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    1d7e:	2a01      	cmp	r2, #1
    1d80:	d016      	beq.n	1db0 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    1d82:	7821      	ldrb	r1, [r4, #0]
    1d84:	2900      	cmp	r1, #0
    1d86:	d127      	bne.n	1dd8 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    1d88:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1d8a:	7fe2      	ldrb	r2, [r4, #31]
    1d8c:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1d8e:	7fa0      	ldrb	r0, [r4, #30]
    1d90:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    1d92:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    1d94:	429a      	cmp	r2, r3
    1d96:	d1a1      	bne.n	1cdc <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    1d98:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    1d9a:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    1d9c:	3004      	adds	r0, #4
    1d9e:	5c20      	ldrb	r0, [r4, r0]
    1da0:	2800      	cmp	r0, #0
    1da2:	d001      	beq.n	1da8 <spi_init+0xf0>
    1da4:	2040      	movs	r0, #64	; 0x40
    1da6:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    1da8:	2008      	movs	r0, #8
    1daa:	4303      	orrs	r3, r0
    1dac:	431d      	orrs	r5, r3
    1dae:	e014      	b.n	1dda <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1db0:	aa04      	add	r2, sp, #16
    1db2:	0001      	movs	r1, r0
    1db4:	69a0      	ldr	r0, [r4, #24]
    1db6:	4b85      	ldr	r3, [pc, #532]	; (1fcc <spi_init+0x314>)
    1db8:	4798      	blx	r3
    1dba:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1dbc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d000      	beq.n	1dc4 <spi_init+0x10c>
    1dc2:	e78b      	b.n	1cdc <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1dc4:	7b3b      	ldrb	r3, [r7, #12]
    1dc6:	b2db      	uxtb	r3, r3
    1dc8:	aa04      	add	r2, sp, #16
    1dca:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1dcc:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1dce:	429a      	cmp	r2, r3
    1dd0:	d000      	beq.n	1dd4 <spi_init+0x11c>
    1dd2:	e783      	b.n	1cdc <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    1dd4:	350c      	adds	r5, #12
    1dd6:	e7d4      	b.n	1d82 <spi_init+0xca>
	uint32_t ctrlb = 0;
    1dd8:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    1dda:	6863      	ldr	r3, [r4, #4]
    1ddc:	68a0      	ldr	r0, [r4, #8]
    1dde:	4303      	orrs	r3, r0
    1de0:	68e0      	ldr	r0, [r4, #12]
    1de2:	4303      	orrs	r3, r0
    1de4:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    1de6:	7c20      	ldrb	r0, [r4, #16]
    1de8:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    1dea:	7c60      	ldrb	r0, [r4, #17]
    1dec:	2800      	cmp	r0, #0
    1dee:	d001      	beq.n	1df4 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1df0:	2080      	movs	r0, #128	; 0x80
    1df2:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    1df4:	7ca0      	ldrb	r0, [r4, #18]
    1df6:	2800      	cmp	r0, #0
    1df8:	d002      	beq.n	1e00 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1dfa:	2080      	movs	r0, #128	; 0x80
    1dfc:	0280      	lsls	r0, r0, #10
    1dfe:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    1e00:	7ce0      	ldrb	r0, [r4, #19]
    1e02:	2800      	cmp	r0, #0
    1e04:	d002      	beq.n	1e0c <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1e06:	2080      	movs	r0, #128	; 0x80
    1e08:	0080      	lsls	r0, r0, #2
    1e0a:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    1e0c:	7d20      	ldrb	r0, [r4, #20]
    1e0e:	2800      	cmp	r0, #0
    1e10:	d002      	beq.n	1e18 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1e12:	2080      	movs	r0, #128	; 0x80
    1e14:	0180      	lsls	r0, r0, #6
    1e16:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    1e18:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1e1a:	2502      	movs	r5, #2
    1e1c:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    1e1e:	4283      	cmp	r3, r0
    1e20:	d004      	beq.n	1e2c <spi_init+0x174>
	module->hw = NULL;
    1e22:	2300      	movs	r3, #0
    1e24:	464a      	mov	r2, r9
    1e26:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    1e28:	201c      	movs	r0, #28
    1e2a:	e757      	b.n	1cdc <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    1e2c:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    1e2e:	4293      	cmp	r3, r2
    1e30:	d1f7      	bne.n	1e22 <spi_init+0x16a>
		module->mode           = config->mode;
    1e32:	464b      	mov	r3, r9
    1e34:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    1e36:	7c23      	ldrb	r3, [r4, #16]
    1e38:	464a      	mov	r2, r9
    1e3a:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    1e3c:	2000      	movs	r0, #0
    1e3e:	e74d      	b.n	1cdc <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1e40:	0008      	movs	r0, r1
    1e42:	4b63      	ldr	r3, [pc, #396]	; (1fd0 <spi_init+0x318>)
    1e44:	4798      	blx	r3
    1e46:	4a63      	ldr	r2, [pc, #396]	; (1fd4 <spi_init+0x31c>)
    1e48:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1e4a:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1e4c:	2301      	movs	r3, #1
    1e4e:	40ab      	lsls	r3, r5
    1e50:	430b      	orrs	r3, r1
    1e52:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1e54:	a909      	add	r1, sp, #36	; 0x24
    1e56:	2624      	movs	r6, #36	; 0x24
    1e58:	5da3      	ldrb	r3, [r4, r6]
    1e5a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1e5c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1e5e:	b2c5      	uxtb	r5, r0
    1e60:	0028      	movs	r0, r5
    1e62:	4b5d      	ldr	r3, [pc, #372]	; (1fd8 <spi_init+0x320>)
    1e64:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1e66:	0028      	movs	r0, r5
    1e68:	4b5c      	ldr	r3, [pc, #368]	; (1fdc <spi_init+0x324>)
    1e6a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1e6c:	5da0      	ldrb	r0, [r4, r6]
    1e6e:	2100      	movs	r1, #0
    1e70:	4b5b      	ldr	r3, [pc, #364]	; (1fe0 <spi_init+0x328>)
    1e72:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1e74:	7823      	ldrb	r3, [r4, #0]
    1e76:	2b01      	cmp	r3, #1
    1e78:	d020      	beq.n	1ebc <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    1e7a:	7823      	ldrb	r3, [r4, #0]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d103      	bne.n	1e88 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1e80:	683b      	ldr	r3, [r7, #0]
    1e82:	2208      	movs	r2, #8
    1e84:	4313      	orrs	r3, r2
    1e86:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1e88:	464b      	mov	r3, r9
    1e8a:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1e8c:	ab04      	add	r3, sp, #16
    1e8e:	2280      	movs	r2, #128	; 0x80
    1e90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e92:	2200      	movs	r2, #0
    1e94:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1e96:	2101      	movs	r1, #1
    1e98:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1e9a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1e9c:	7823      	ldrb	r3, [r4, #0]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d101      	bne.n	1ea6 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ea2:	ab04      	add	r3, sp, #16
    1ea4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1ea6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ea8:	9305      	str	r3, [sp, #20]
    1eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1eac:	9306      	str	r3, [sp, #24]
    1eae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1eb0:	9307      	str	r3, [sp, #28]
    1eb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1eb4:	9308      	str	r3, [sp, #32]
    1eb6:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1eb8:	ad05      	add	r5, sp, #20
    1eba:	e011      	b.n	1ee0 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1ebc:	683b      	ldr	r3, [r7, #0]
    1ebe:	220c      	movs	r2, #12
    1ec0:	4313      	orrs	r3, r2
    1ec2:	603b      	str	r3, [r7, #0]
    1ec4:	e7d9      	b.n	1e7a <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1ec6:	0030      	movs	r0, r6
    1ec8:	4b3d      	ldr	r3, [pc, #244]	; (1fc0 <spi_init+0x308>)
    1eca:	4798      	blx	r3
    1ecc:	e00d      	b.n	1eea <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1ece:	a904      	add	r1, sp, #16
    1ed0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1ed2:	0c00      	lsrs	r0, r0, #16
    1ed4:	b2c0      	uxtb	r0, r0
    1ed6:	4b43      	ldr	r3, [pc, #268]	; (1fe4 <spi_init+0x32c>)
    1ed8:	4798      	blx	r3
    1eda:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1edc:	2f04      	cmp	r7, #4
    1ede:	d007      	beq.n	1ef0 <spi_init+0x238>
    1ee0:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1ee2:	00bb      	lsls	r3, r7, #2
    1ee4:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    1ee6:	2800      	cmp	r0, #0
    1ee8:	d0ed      	beq.n	1ec6 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    1eea:	1c43      	adds	r3, r0, #1
    1eec:	d1ef      	bne.n	1ece <spi_init+0x216>
    1eee:	e7f4      	b.n	1eda <spi_init+0x222>
	module->mode             = config->mode;
    1ef0:	7823      	ldrb	r3, [r4, #0]
    1ef2:	464a      	mov	r2, r9
    1ef4:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    1ef6:	7c23      	ldrb	r3, [r4, #16]
    1ef8:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1efa:	7ca3      	ldrb	r3, [r4, #18]
    1efc:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1efe:	7d23      	ldrb	r3, [r4, #20]
    1f00:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    1f02:	2200      	movs	r2, #0
    1f04:	ab02      	add	r3, sp, #8
    1f06:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1f08:	7823      	ldrb	r3, [r4, #0]
    1f0a:	2b01      	cmp	r3, #1
    1f0c:	d012      	beq.n	1f34 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    1f0e:	7823      	ldrb	r3, [r4, #0]
    1f10:	2b00      	cmp	r3, #0
    1f12:	d127      	bne.n	1f64 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    1f14:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    1f16:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    1f18:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1f1a:	7fe1      	ldrb	r1, [r4, #31]
    1f1c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1f1e:	7fa5      	ldrb	r5, [r4, #30]
    1f20:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    1f22:	4319      	orrs	r1, r3
    1f24:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1f26:	2320      	movs	r3, #32
    1f28:	5ce3      	ldrb	r3, [r4, r3]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d01c      	beq.n	1f68 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1f2e:	2340      	movs	r3, #64	; 0x40
    1f30:	431a      	orrs	r2, r3
    1f32:	e019      	b.n	1f68 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f34:	464b      	mov	r3, r9
    1f36:	6818      	ldr	r0, [r3, #0]
    1f38:	4b25      	ldr	r3, [pc, #148]	; (1fd0 <spi_init+0x318>)
    1f3a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f3c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1f3e:	b2c0      	uxtb	r0, r0
    1f40:	4b21      	ldr	r3, [pc, #132]	; (1fc8 <spi_init+0x310>)
    1f42:	4798      	blx	r3
    1f44:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1f46:	ab02      	add	r3, sp, #8
    1f48:	1d9a      	adds	r2, r3, #6
    1f4a:	69a0      	ldr	r0, [r4, #24]
    1f4c:	4b1f      	ldr	r3, [pc, #124]	; (1fcc <spi_init+0x314>)
    1f4e:	4798      	blx	r3
    1f50:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1f52:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1f54:	2b00      	cmp	r3, #0
    1f56:	d000      	beq.n	1f5a <spi_init+0x2a2>
    1f58:	e6c0      	b.n	1cdc <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1f5a:	ab02      	add	r3, sp, #8
    1f5c:	3306      	adds	r3, #6
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	7333      	strb	r3, [r6, #12]
    1f62:	e7d4      	b.n	1f0e <spi_init+0x256>
	uint32_t ctrlb = 0;
    1f64:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1f66:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    1f68:	6863      	ldr	r3, [r4, #4]
    1f6a:	68a1      	ldr	r1, [r4, #8]
    1f6c:	430b      	orrs	r3, r1
    1f6e:	68e1      	ldr	r1, [r4, #12]
    1f70:	430b      	orrs	r3, r1
    1f72:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    1f74:	7c21      	ldrb	r1, [r4, #16]
    1f76:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1f78:	7c61      	ldrb	r1, [r4, #17]
    1f7a:	2900      	cmp	r1, #0
    1f7c:	d103      	bne.n	1f86 <spi_init+0x2ce>
    1f7e:	491a      	ldr	r1, [pc, #104]	; (1fe8 <spi_init+0x330>)
    1f80:	7889      	ldrb	r1, [r1, #2]
    1f82:	0789      	lsls	r1, r1, #30
    1f84:	d501      	bpl.n	1f8a <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1f86:	2180      	movs	r1, #128	; 0x80
    1f88:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1f8a:	7ca1      	ldrb	r1, [r4, #18]
    1f8c:	2900      	cmp	r1, #0
    1f8e:	d002      	beq.n	1f96 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1f90:	2180      	movs	r1, #128	; 0x80
    1f92:	0289      	lsls	r1, r1, #10
    1f94:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1f96:	7ce1      	ldrb	r1, [r4, #19]
    1f98:	2900      	cmp	r1, #0
    1f9a:	d002      	beq.n	1fa2 <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1f9c:	2180      	movs	r1, #128	; 0x80
    1f9e:	0089      	lsls	r1, r1, #2
    1fa0:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1fa2:	7d21      	ldrb	r1, [r4, #20]
    1fa4:	2900      	cmp	r1, #0
    1fa6:	d002      	beq.n	1fae <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1fa8:	2180      	movs	r1, #128	; 0x80
    1faa:	0189      	lsls	r1, r1, #6
    1fac:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1fae:	6831      	ldr	r1, [r6, #0]
    1fb0:	430b      	orrs	r3, r1
    1fb2:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1fb4:	6873      	ldr	r3, [r6, #4]
    1fb6:	431a      	orrs	r2, r3
    1fb8:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    1fba:	2000      	movs	r0, #0
    1fbc:	e68e      	b.n	1cdc <spi_init+0x24>
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	00001aa9 	.word	0x00001aa9
    1fc4:	41004400 	.word	0x41004400
    1fc8:	00002989 	.word	0x00002989
    1fcc:	00001a35 	.word	0x00001a35
    1fd0:	00001c21 	.word	0x00001c21
    1fd4:	40000400 	.word	0x40000400
    1fd8:	0000296d 	.word	0x0000296d
    1fdc:	000028e1 	.word	0x000028e1
    1fe0:	00001a5d 	.word	0x00001a5d
    1fe4:	00002a65 	.word	0x00002a65
    1fe8:	41002000 	.word	0x41002000

00001fec <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    1fec:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    1fee:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1ff0:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1ff2:	2c00      	cmp	r4, #0
    1ff4:	d101      	bne.n	1ffa <spi_transceive_wait+0xe>

	/* Read data */
	retval = spi_read(module, rx_data);

	return retval;
}
    1ff6:	0018      	movs	r0, r3
    1ff8:	bd70      	pop	{r4, r5, r6, pc}
	if (module->mode == SPI_MODE_SLAVE) {
    1ffa:	7943      	ldrb	r3, [r0, #5]
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d10e      	bne.n	201e <STACK_SIZE+0x1e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2000:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2002:	7e2b      	ldrb	r3, [r5, #24]
			if (spi_is_ready_to_write(module)) {
    2004:	07db      	lsls	r3, r3, #31
    2006:	d40a      	bmi.n	201e <STACK_SIZE+0x1e>
    2008:	4b23      	ldr	r3, [pc, #140]	; (2098 <STACK_SIZE+0x98>)
    200a:	2601      	movs	r6, #1
    200c:	7e2c      	ldrb	r4, [r5, #24]
    200e:	4234      	tst	r4, r6
    2010:	d105      	bne.n	201e <STACK_SIZE+0x1e>
			} else if (j == SPI_TIMEOUT) {
    2012:	2b01      	cmp	r3, #1
    2014:	d03c      	beq.n	2090 <STACK_SIZE+0x90>
    2016:	3b01      	subs	r3, #1
    2018:	b29b      	uxth	r3, r3
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    201a:	2b00      	cmp	r3, #0
    201c:	d1f6      	bne.n	200c <STACK_SIZE+0xc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    201e:	6804      	ldr	r4, [r0, #0]
	while (!spi_is_ready_to_write(module)) {
    2020:	2501      	movs	r5, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2022:	7e23      	ldrb	r3, [r4, #24]
    2024:	422b      	tst	r3, r5
    2026:	d0fc      	beq.n	2022 <STACK_SIZE+0x22>
    2028:	7e23      	ldrb	r3, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    202a:	07db      	lsls	r3, r3, #31
    202c:	d502      	bpl.n	2034 <STACK_SIZE+0x34>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    202e:	05c9      	lsls	r1, r1, #23
    2030:	0dc9      	lsrs	r1, r1, #23
    2032:	62a1      	str	r1, [r4, #40]	; 0x28
	if (module->mode == SPI_MODE_SLAVE) {
    2034:	7943      	ldrb	r3, [r0, #5]
    2036:	2b00      	cmp	r3, #0
    2038:	d10e      	bne.n	2058 <STACK_SIZE+0x58>
	SercomSpi *const spi_module = &(module->hw->SPI);
    203a:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    203c:	7e23      	ldrb	r3, [r4, #24]
			if (spi_is_ready_to_read(module)) {
    203e:	075b      	lsls	r3, r3, #29
    2040:	d40a      	bmi.n	2058 <STACK_SIZE+0x58>
    2042:	4b15      	ldr	r3, [pc, #84]	; (2098 <STACK_SIZE+0x98>)
    2044:	2504      	movs	r5, #4
    2046:	7e21      	ldrb	r1, [r4, #24]
    2048:	4229      	tst	r1, r5
    204a:	d105      	bne.n	2058 <STACK_SIZE+0x58>
			} else if (j == SPI_TIMEOUT) {
    204c:	2b01      	cmp	r3, #1
    204e:	d021      	beq.n	2094 <STACK_SIZE+0x94>
    2050:	3b01      	subs	r3, #1
    2052:	b29b      	uxth	r3, r3
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    2054:	2b00      	cmp	r3, #0
    2056:	d1f6      	bne.n	2046 <STACK_SIZE+0x46>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2058:	6801      	ldr	r1, [r0, #0]
	while (!spi_is_ready_to_read(module)) {
    205a:	2404      	movs	r4, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    205c:	7e0b      	ldrb	r3, [r1, #24]
    205e:	4223      	tst	r3, r4
    2060:	d0fc      	beq.n	205c <STACK_SIZE+0x5c>
    2062:	7e0c      	ldrb	r4, [r1, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2064:	2310      	movs	r3, #16
	if (!spi_is_ready_to_read(module)) {
    2066:	0764      	lsls	r4, r4, #29
    2068:	d5c5      	bpl.n	1ff6 <spi_transceive_wait+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    206a:	8b4c      	ldrh	r4, [r1, #26]
	enum status_code retval = STATUS_OK;
    206c:	2300      	movs	r3, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    206e:	0764      	lsls	r4, r4, #29
    2070:	d502      	bpl.n	2078 <STACK_SIZE+0x78>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2072:	3304      	adds	r3, #4
    2074:	834b      	strh	r3, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    2076:	331a      	adds	r3, #26
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2078:	7980      	ldrb	r0, [r0, #6]
    207a:	2801      	cmp	r0, #1
    207c:	d003      	beq.n	2086 <STACK_SIZE+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    207e:	6a89      	ldr	r1, [r1, #40]	; 0x28
    2080:	b2c9      	uxtb	r1, r1
    2082:	8011      	strh	r1, [r2, #0]
    2084:	e7b7      	b.n	1ff6 <spi_transceive_wait+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2086:	6a89      	ldr	r1, [r1, #40]	; 0x28
    2088:	05c9      	lsls	r1, r1, #23
    208a:	0dc9      	lsrs	r1, r1, #23
    208c:	8011      	strh	r1, [r2, #0]
    208e:	e7b2      	b.n	1ff6 <spi_transceive_wait+0xa>
				return STATUS_ERR_TIMEOUT;
    2090:	2312      	movs	r3, #18
    2092:	e7b0      	b.n	1ff6 <spi_transceive_wait+0xa>
				return STATUS_ERR_TIMEOUT;
    2094:	2312      	movs	r3, #18
    2096:	e7ae      	b.n	1ff6 <spi_transceive_wait+0xa>
    2098:	00002710 	.word	0x00002710

0000209c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    209c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    209e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    20a0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    20a2:	2c01      	cmp	r4, #1
    20a4:	d001      	beq.n	20aa <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    20a6:	0018      	movs	r0, r3
    20a8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    20aa:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    20ac:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    20ae:	2c00      	cmp	r4, #0
    20b0:	d1f9      	bne.n	20a6 <spi_select_slave+0xa>
		if (select) {
    20b2:	2a00      	cmp	r2, #0
    20b4:	d058      	beq.n	2168 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    20b6:	784b      	ldrb	r3, [r1, #1]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d044      	beq.n	2146 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20bc:	6803      	ldr	r3, [r0, #0]
    20be:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    20c0:	07db      	lsls	r3, r3, #31
    20c2:	d410      	bmi.n	20e6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    20c4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    20c6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    20c8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    20ca:	2900      	cmp	r1, #0
    20cc:	d104      	bne.n	20d8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    20ce:	0953      	lsrs	r3, r2, #5
    20d0:	01db      	lsls	r3, r3, #7
    20d2:	492e      	ldr	r1, [pc, #184]	; (218c <spi_select_slave+0xf0>)
    20d4:	468c      	mov	ip, r1
    20d6:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20d8:	211f      	movs	r1, #31
    20da:	4011      	ands	r1, r2
    20dc:	2201      	movs	r2, #1
    20de:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    20e0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    20e2:	2305      	movs	r3, #5
    20e4:	e7df      	b.n	20a6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    20e6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    20e8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    20ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    20ec:	2c00      	cmp	r4, #0
    20ee:	d104      	bne.n	20fa <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    20f0:	0953      	lsrs	r3, r2, #5
    20f2:	01db      	lsls	r3, r3, #7
    20f4:	4c25      	ldr	r4, [pc, #148]	; (218c <spi_select_slave+0xf0>)
    20f6:	46a4      	mov	ip, r4
    20f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20fa:	241f      	movs	r4, #31
    20fc:	4014      	ands	r4, r2
    20fe:	2201      	movs	r2, #1
    2100:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2102:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2104:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2106:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2108:	07d2      	lsls	r2, r2, #31
    210a:	d501      	bpl.n	2110 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    210c:	788a      	ldrb	r2, [r1, #2]
    210e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2110:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    2112:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2114:	2a00      	cmp	r2, #0
    2116:	d1c6      	bne.n	20a6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2118:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    211a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    211c:	7e13      	ldrb	r3, [r2, #24]
    211e:	420b      	tst	r3, r1
    2120:	d0fc      	beq.n	211c <spi_select_slave+0x80>
    2122:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2124:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    2126:	0749      	lsls	r1, r1, #29
    2128:	d5bd      	bpl.n	20a6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    212a:	8b53      	ldrh	r3, [r2, #26]
    212c:	075b      	lsls	r3, r3, #29
    212e:	d501      	bpl.n	2134 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2130:	2304      	movs	r3, #4
    2132:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2134:	7983      	ldrb	r3, [r0, #6]
    2136:	2b01      	cmp	r3, #1
    2138:	d002      	beq.n	2140 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    213a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    213c:	2300      	movs	r3, #0
    213e:	e7b2      	b.n	20a6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2140:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2142:	2300      	movs	r3, #0
    2144:	e7af      	b.n	20a6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2146:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2148:	09d1      	lsrs	r1, r2, #7
		return NULL;
    214a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    214c:	2900      	cmp	r1, #0
    214e:	d104      	bne.n	215a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2150:	0953      	lsrs	r3, r2, #5
    2152:	01db      	lsls	r3, r3, #7
    2154:	490d      	ldr	r1, [pc, #52]	; (218c <spi_select_slave+0xf0>)
    2156:	468c      	mov	ip, r1
    2158:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    215a:	211f      	movs	r1, #31
    215c:	4011      	ands	r1, r2
    215e:	2201      	movs	r2, #1
    2160:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2162:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    2164:	2300      	movs	r3, #0
    2166:	e79e      	b.n	20a6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2168:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    216a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    216c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    216e:	2900      	cmp	r1, #0
    2170:	d104      	bne.n	217c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2172:	0953      	lsrs	r3, r2, #5
    2174:	01db      	lsls	r3, r3, #7
    2176:	4905      	ldr	r1, [pc, #20]	; (218c <spi_select_slave+0xf0>)
    2178:	468c      	mov	ip, r1
    217a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    217c:	211f      	movs	r1, #31
    217e:	4011      	ands	r1, r2
    2180:	2201      	movs	r2, #1
    2182:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2184:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2186:	2300      	movs	r3, #0
    2188:	e78d      	b.n	20a6 <spi_select_slave+0xa>
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	41004400 	.word	0x41004400

00002190 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    2190:	b5f0      	push	{r4, r5, r6, r7, lr}
    2192:	46de      	mov	lr, fp
    2194:	4657      	mov	r7, sl
    2196:	464e      	mov	r6, r9
    2198:	4645      	mov	r5, r8
    219a:	b5e0      	push	{r5, r6, r7, lr}
    219c:	b085      	sub	sp, #20
    219e:	4688      	mov	r8, r1
    21a0:	9203      	str	r2, [sp, #12]
    21a2:	4699      	mov	r9, r3
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    21a4:	2417      	movs	r4, #23
	if (length == 0) {
    21a6:	2b00      	cmp	r3, #0
    21a8:	d107      	bne.n	21ba <spi_transceive_buffer_wait+0x2a>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    21aa:	0020      	movs	r0, r4
    21ac:	b005      	add	sp, #20
    21ae:	bc3c      	pop	{r2, r3, r4, r5}
    21b0:	4690      	mov	r8, r2
    21b2:	4699      	mov	r9, r3
    21b4:	46a2      	mov	sl, r4
    21b6:	46ab      	mov	fp, r5
    21b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    21ba:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
    21bc:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    21be:	2b00      	cmp	r3, #0
    21c0:	d0f3      	beq.n	21aa <spi_transceive_buffer_wait+0x1a>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    21c2:	7943      	ldrb	r3, [r0, #5]
    21c4:	2b00      	cmp	r3, #0
    21c6:	d103      	bne.n	21d0 <spi_transceive_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    21c8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    21ca:	7e1a      	ldrb	r2, [r3, #24]
    21cc:	0792      	lsls	r2, r2, #30
    21ce:	d407      	bmi.n	21e0 <spi_transceive_buffer_wait+0x50>
	while (length--) {
    21d0:	464b      	mov	r3, r9
    21d2:	1e59      	subs	r1, r3, #1
    21d4:	b289      	uxth	r1, r1
    21d6:	2300      	movs	r3, #0
    21d8:	469a      	mov	sl, r3
				if (spi_is_ready_to_write(module)) {
    21da:	2201      	movs	r2, #1
				if (spi_is_ready_to_read(module)) {
    21dc:	2704      	movs	r7, #4
    21de:	e075      	b.n	22cc <spi_transceive_buffer_wait+0x13c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    21e0:	2202      	movs	r2, #2
    21e2:	761a      	strb	r2, [r3, #24]
    21e4:	e7f4      	b.n	21d0 <spi_transceive_buffer_wait+0x40>
    21e6:	2302      	movs	r3, #2
    21e8:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    21ea:	2404      	movs	r4, #4
    21ec:	e7dd      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
			data_to_send |= (tx_data[tx_pos++] << 8);
    21ee:	3302      	adds	r3, #2
    21f0:	b29b      	uxth	r3, r3
    21f2:	4644      	mov	r4, r8
    21f4:	5da6      	ldrb	r6, [r4, r6]
    21f6:	0236      	lsls	r6, r6, #8
    21f8:	465c      	mov	r4, fp
    21fa:	4334      	orrs	r4, r6
    21fc:	e08f      	b.n	231e <spi_transceive_buffer_wait+0x18e>
						data_to_send |= (tx_data[tx_pos++] << 8);
    21fe:	3302      	adds	r3, #2
    2200:	b29b      	uxth	r3, r3
    2202:	4641      	mov	r1, r8
    2204:	4666      	mov	r6, ip
    2206:	5d89      	ldrb	r1, [r1, r6]
    2208:	0209      	lsls	r1, r1, #8
    220a:	9e02      	ldr	r6, [sp, #8]
    220c:	430e      	orrs	r6, r1
    220e:	e01a      	b.n	2246 <spi_transceive_buffer_wait+0xb6>
					length--;
    2210:	9901      	ldr	r1, [sp, #4]
    2212:	3901      	subs	r1, #1
    2214:	b289      	uxth	r1, r1
    2216:	9101      	str	r1, [sp, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2218:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    221a:	7e26      	ldrb	r6, [r4, #24]
				if (spi_is_ready_to_read(module)) {
    221c:	423e      	tst	r6, r7
    221e:	d119      	bne.n	2254 <spi_transceive_buffer_wait+0xc4>
    2220:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2222:	2d00      	cmp	r5, #0
    2224:	d016      	beq.n	2254 <spi_transceive_buffer_wait+0xc4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2226:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2228:	7e26      	ldrb	r6, [r4, #24]
				if (spi_is_ready_to_write(module)) {
    222a:	4216      	tst	r6, r2
    222c:	d0f4      	beq.n	2218 <spi_transceive_buffer_wait+0x88>
					data_to_send = tx_data[tx_pos++];
    222e:	1c5e      	adds	r6, r3, #1
    2230:	b2b6      	uxth	r6, r6
    2232:	46b4      	mov	ip, r6
    2234:	4646      	mov	r6, r8
    2236:	5cf1      	ldrb	r1, [r6, r3]
    2238:	000e      	movs	r6, r1
    223a:	9102      	str	r1, [sp, #8]
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    223c:	7981      	ldrb	r1, [r0, #6]
    223e:	2901      	cmp	r1, #1
    2240:	d0dd      	beq.n	21fe <spi_transceive_buffer_wait+0x6e>
					data_to_send = tx_data[tx_pos++];
    2242:	b2b6      	uxth	r6, r6
    2244:	4663      	mov	r3, ip
    2246:	7e21      	ldrb	r1, [r4, #24]
	if (!spi_is_ready_to_write(module)) {
    2248:	4211      	tst	r1, r2
    224a:	d0e1      	beq.n	2210 <spi_transceive_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    224c:	05f6      	lsls	r6, r6, #23
    224e:	0df6      	lsrs	r6, r6, #23
    2250:	62a6      	str	r6, [r4, #40]	; 0x28
    2252:	e7dd      	b.n	2210 <spi_transceive_buffer_wait+0x80>
    2254:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2256:	7e25      	ldrb	r5, [r4, #24]
			if (spi_is_write_complete(module)) {
    2258:	2602      	movs	r6, #2
    225a:	4235      	tst	r5, r6
    225c:	d105      	bne.n	226a <spi_transceive_buffer_wait+0xda>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    225e:	7e24      	ldrb	r4, [r4, #24]
			if (!spi_is_ready_to_read(module)) {
    2260:	423c      	tst	r4, r7
    2262:	d100      	bne.n	2266 <spi_transceive_buffer_wait+0xd6>
    2264:	e0ce      	b.n	2404 <spi_transceive_buffer_wait+0x274>
    2266:	000e      	movs	r6, r1
    2268:	e004      	b.n	2274 <spi_transceive_buffer_wait+0xe4>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    226a:	2302      	movs	r3, #2
    226c:	7623      	strb	r3, [r4, #24]
				return STATUS_ABORTED;
    226e:	2404      	movs	r4, #4
    2270:	e79b      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
    2272:	000e      	movs	r6, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
    2274:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2276:	7e29      	ldrb	r1, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    2278:	4239      	tst	r1, r7
    227a:	d0fc      	beq.n	2276 <spi_transceive_buffer_wait+0xe6>
		rx_length--;
    227c:	4649      	mov	r1, r9
    227e:	3901      	subs	r1, #1
    2280:	b289      	uxth	r1, r1
    2282:	4689      	mov	r9, r1
    2284:	7e29      	ldrb	r1, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    2286:	4239      	tst	r1, r7
    2288:	d100      	bne.n	228c <spi_transceive_buffer_wait+0xfc>
    228a:	e0bd      	b.n	2408 <spi_transceive_buffer_wait+0x278>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    228c:	8b69      	ldrh	r1, [r5, #26]
	enum status_code retval = STATUS_OK;
    228e:	2400      	movs	r4, #0
    2290:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2292:	4239      	tst	r1, r7
    2294:	d002      	beq.n	229c <spi_transceive_buffer_wait+0x10c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2296:	836f      	strh	r7, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    2298:	211e      	movs	r1, #30
    229a:	9101      	str	r1, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    229c:	7981      	ldrb	r1, [r0, #6]
    229e:	2901      	cmp	r1, #1
    22a0:	d049      	beq.n	2336 <spi_transceive_buffer_wait+0x1a6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    22a2:	6aad      	ldr	r5, [r5, #40]	; 0x28
    22a4:	b2ed      	uxtb	r5, r5
		if (retval != STATUS_OK) {
    22a6:	9901      	ldr	r1, [sp, #4]
    22a8:	2900      	cmp	r1, #0
    22aa:	d000      	beq.n	22ae <spi_transceive_buffer_wait+0x11e>
    22ac:	e0b4      	b.n	2418 <spi_transceive_buffer_wait+0x288>
		rx_data[rx_pos++] = received_data;
    22ae:	4651      	mov	r1, sl
    22b0:	3101      	adds	r1, #1
    22b2:	b289      	uxth	r1, r1
    22b4:	468b      	mov	fp, r1
    22b6:	9c03      	ldr	r4, [sp, #12]
    22b8:	4651      	mov	r1, sl
    22ba:	5465      	strb	r5, [r4, r1]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22bc:	7984      	ldrb	r4, [r0, #6]
    22be:	2c01      	cmp	r4, #1
    22c0:	d03d      	beq.n	233e <spi_transceive_buffer_wait+0x1ae>
		rx_data[rx_pos++] = received_data;
    22c2:	46da      	mov	sl, fp
	while (length--) {
    22c4:	1e71      	subs	r1, r6, #1
    22c6:	b289      	uxth	r1, r1
    22c8:	2e00      	cmp	r6, #0
    22ca:	d045      	beq.n	2358 <spi_transceive_buffer_wait+0x1c8>
		if (module->mode == SPI_MODE_SLAVE) {
    22cc:	7944      	ldrb	r4, [r0, #5]
    22ce:	2c00      	cmp	r4, #0
    22d0:	d113      	bne.n	22fa <spi_transceive_buffer_wait+0x16a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    22d2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22d4:	7e34      	ldrb	r4, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    22d6:	4214      	tst	r4, r2
    22d8:	d106      	bne.n	22e8 <spi_transceive_buffer_wait+0x158>
    22da:	4c50      	ldr	r4, [pc, #320]	; (241c <spi_transceive_buffer_wait+0x28c>)
    22dc:	7e35      	ldrb	r5, [r6, #24]
    22de:	4215      	tst	r5, r2
    22e0:	d102      	bne.n	22e8 <spi_transceive_buffer_wait+0x158>
    22e2:	3c01      	subs	r4, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    22e4:	2c00      	cmp	r4, #0
    22e6:	d1f9      	bne.n	22dc <spi_transceive_buffer_wait+0x14c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    22e8:	7e34      	ldrb	r4, [r6, #24]
			if (spi_is_write_complete(module)) {
    22ea:	2502      	movs	r5, #2
    22ec:	422c      	tst	r4, r5
    22ee:	d000      	beq.n	22f2 <spi_transceive_buffer_wait+0x162>
    22f0:	e779      	b.n	21e6 <spi_transceive_buffer_wait+0x56>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22f2:	7e34      	ldrb	r4, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    22f4:	4214      	tst	r4, r2
    22f6:	d100      	bne.n	22fa <spi_transceive_buffer_wait+0x16a>
    22f8:	e082      	b.n	2400 <spi_transceive_buffer_wait+0x270>
	SercomSpi *const spi_module = &(module->hw->SPI);
    22fa:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22fc:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_write(module)) {
    22fe:	4214      	tst	r4, r2
    2300:	d0fc      	beq.n	22fc <spi_transceive_buffer_wait+0x16c>
		uint16_t data_to_send = tx_data[tx_pos++];
    2302:	1c5e      	adds	r6, r3, #1
    2304:	b2b6      	uxth	r6, r6
    2306:	4644      	mov	r4, r8
    2308:	5ce4      	ldrb	r4, [r4, r3]
    230a:	46a3      	mov	fp, r4
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    230c:	7984      	ldrb	r4, [r0, #6]
    230e:	2c01      	cmp	r4, #1
    2310:	d100      	bne.n	2314 <spi_transceive_buffer_wait+0x184>
    2312:	e76c      	b.n	21ee <spi_transceive_buffer_wait+0x5e>
		uint16_t data_to_send = tx_data[tx_pos++];
    2314:	465b      	mov	r3, fp
    2316:	466c      	mov	r4, sp
    2318:	80a3      	strh	r3, [r4, #4]
    231a:	88a4      	ldrh	r4, [r4, #4]
    231c:	0033      	movs	r3, r6
    231e:	7e2e      	ldrb	r6, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    2320:	4216      	tst	r6, r2
    2322:	d002      	beq.n	232a <spi_transceive_buffer_wait+0x19a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2324:	05e4      	lsls	r4, r4, #23
    2326:	0de4      	lsrs	r4, r4, #23
    2328:	62ac      	str	r4, [r5, #40]	; 0x28
		if (module->mode == SPI_MODE_SLAVE) {
    232a:	7944      	ldrb	r4, [r0, #5]
    232c:	2c00      	cmp	r4, #0
    232e:	d1a0      	bne.n	2272 <spi_transceive_buffer_wait+0xe2>
    2330:	4d3b      	ldr	r5, [pc, #236]	; (2420 <spi_transceive_buffer_wait+0x290>)
    2332:	9101      	str	r1, [sp, #4]
    2334:	e777      	b.n	2226 <spi_transceive_buffer_wait+0x96>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2336:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2338:	05ed      	lsls	r5, r5, #23
    233a:	0ded      	lsrs	r5, r5, #23
    233c:	e7b3      	b.n	22a6 <spi_transceive_buffer_wait+0x116>
			rx_data[rx_pos++] = (received_data >> 8);
    233e:	2102      	movs	r1, #2
    2340:	468c      	mov	ip, r1
    2342:	44e2      	add	sl, ip
    2344:	4651      	mov	r1, sl
    2346:	466c      	mov	r4, sp
    2348:	8121      	strh	r1, [r4, #8]
    234a:	8921      	ldrh	r1, [r4, #8]
    234c:	468a      	mov	sl, r1
    234e:	0a2d      	lsrs	r5, r5, #8
    2350:	9903      	ldr	r1, [sp, #12]
    2352:	465c      	mov	r4, fp
    2354:	550d      	strb	r5, [r1, r4]
    2356:	e7b5      	b.n	22c4 <spi_transceive_buffer_wait+0x134>
    2358:	9c01      	ldr	r4, [sp, #4]
	if (module->mode == SPI_MODE_MASTER) {
    235a:	7943      	ldrb	r3, [r0, #5]
    235c:	2b01      	cmp	r3, #1
    235e:	d010      	beq.n	2382 <spi_transceive_buffer_wait+0x1f2>
	if (module->mode == SPI_MODE_SLAVE) {
    2360:	2b00      	cmp	r3, #0
    2362:	d000      	beq.n	2366 <spi_transceive_buffer_wait+0x1d6>
    2364:	e721      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
		while (rx_length) {
    2366:	464b      	mov	r3, r9
    2368:	2b00      	cmp	r3, #0
    236a:	d100      	bne.n	236e <spi_transceive_buffer_wait+0x1de>
    236c:	e71d      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
				if (spi_is_ready_to_read(module)) {
    236e:	2704      	movs	r7, #4
	enum status_code retval = STATUS_OK;
    2370:	0021      	movs	r1, r4
		retval = STATUS_ERR_OVERFLOW;
    2372:	251e      	movs	r5, #30
    2374:	0004      	movs	r4, r0
    2376:	4650      	mov	r0, sl
    2378:	9b03      	ldr	r3, [sp, #12]
    237a:	4698      	mov	r8, r3
    237c:	9102      	str	r1, [sp, #8]
    237e:	4649      	mov	r1, r9
    2380:	e026      	b.n	23d0 <spi_transceive_buffer_wait+0x240>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2382:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    2384:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2386:	7e0b      	ldrb	r3, [r1, #24]
    2388:	4213      	tst	r3, r2
    238a:	d0fc      	beq.n	2386 <spi_transceive_buffer_wait+0x1f6>
    238c:	e70d      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    238e:	7e33      	ldrb	r3, [r6, #24]
			if (!spi_is_ready_to_read(module)) {
    2390:	423b      	tst	r3, r7
    2392:	d03b      	beq.n	240c <spi_transceive_buffer_wait+0x27c>
			rx_length--;
    2394:	3901      	subs	r1, #1
    2396:	b289      	uxth	r1, r1
    2398:	7e33      	ldrb	r3, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    239a:	423b      	tst	r3, r7
    239c:	d038      	beq.n	2410 <spi_transceive_buffer_wait+0x280>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    239e:	8b73      	ldrh	r3, [r6, #26]
	enum status_code retval = STATUS_OK;
    23a0:	9a02      	ldr	r2, [sp, #8]
    23a2:	9201      	str	r2, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23a4:	423b      	tst	r3, r7
    23a6:	d001      	beq.n	23ac <spi_transceive_buffer_wait+0x21c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    23a8:	8377      	strh	r7, [r6, #26]
		retval = STATUS_ERR_OVERFLOW;
    23aa:	9501      	str	r5, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23ac:	79a3      	ldrb	r3, [r4, #6]
    23ae:	2b01      	cmp	r3, #1
    23b0:	d01a      	beq.n	23e8 <spi_transceive_buffer_wait+0x258>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    23b2:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    23b4:	b2f6      	uxtb	r6, r6
			if (retval != STATUS_OK) {
    23b6:	9b01      	ldr	r3, [sp, #4]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d12b      	bne.n	2414 <spi_transceive_buffer_wait+0x284>
			rx_data[rx_pos++] = received_data;
    23bc:	1c43      	adds	r3, r0, #1
    23be:	b29b      	uxth	r3, r3
    23c0:	4642      	mov	r2, r8
    23c2:	5416      	strb	r6, [r2, r0]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23c4:	79a2      	ldrb	r2, [r4, #6]
    23c6:	2a01      	cmp	r2, #1
    23c8:	d012      	beq.n	23f0 <spi_transceive_buffer_wait+0x260>
			rx_data[rx_pos++] = received_data;
    23ca:	0018      	movs	r0, r3
		while (rx_length) {
    23cc:	2900      	cmp	r1, #0
    23ce:	d015      	beq.n	23fc <spi_transceive_buffer_wait+0x26c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    23d0:	6826      	ldr	r6, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    23d2:	7e33      	ldrb	r3, [r6, #24]
				if (spi_is_ready_to_read(module)) {
    23d4:	423b      	tst	r3, r7
    23d6:	d1da      	bne.n	238e <spi_transceive_buffer_wait+0x1fe>
    23d8:	4b10      	ldr	r3, [pc, #64]	; (241c <spi_transceive_buffer_wait+0x28c>)
    23da:	7e32      	ldrb	r2, [r6, #24]
    23dc:	423a      	tst	r2, r7
    23de:	d1d6      	bne.n	238e <spi_transceive_buffer_wait+0x1fe>
    23e0:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    23e2:	2b00      	cmp	r3, #0
    23e4:	d1f9      	bne.n	23da <spi_transceive_buffer_wait+0x24a>
    23e6:	e7d2      	b.n	238e <spi_transceive_buffer_wait+0x1fe>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    23e8:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    23ea:	05f6      	lsls	r6, r6, #23
    23ec:	0df6      	lsrs	r6, r6, #23
    23ee:	e7e2      	b.n	23b6 <spi_transceive_buffer_wait+0x226>
				rx_data[rx_pos++] = (received_data >> 8);
    23f0:	3002      	adds	r0, #2
    23f2:	b280      	uxth	r0, r0
    23f4:	0a36      	lsrs	r6, r6, #8
    23f6:	4642      	mov	r2, r8
    23f8:	54d6      	strb	r6, [r2, r3]
    23fa:	e7e7      	b.n	23cc <spi_transceive_buffer_wait+0x23c>
    23fc:	9c01      	ldr	r4, [sp, #4]
    23fe:	e6d4      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
				return STATUS_ERR_TIMEOUT;
    2400:	2412      	movs	r4, #18
    2402:	e6d2      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
				return STATUS_ERR_TIMEOUT;
    2404:	2412      	movs	r4, #18
    2406:	e6d0      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    2408:	2410      	movs	r4, #16
    240a:	e6ce      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
				return STATUS_ERR_TIMEOUT;
    240c:	2412      	movs	r4, #18
    240e:	e6cc      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
    2410:	2410      	movs	r4, #16
    2412:	e6ca      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
    2414:	9c01      	ldr	r4, [sp, #4]
    2416:	e6c8      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
    2418:	9c01      	ldr	r4, [sp, #4]
    241a:	e6c6      	b.n	21aa <spi_transceive_buffer_wait+0x1a>
    241c:	00002710 	.word	0x00002710
    2420:	00002711 	.word	0x00002711

00002424 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2424:	b510      	push	{r4, lr}
	switch (clock_source) {
    2426:	2808      	cmp	r0, #8
    2428:	d803      	bhi.n	2432 <system_clock_source_get_hz+0xe>
    242a:	0080      	lsls	r0, r0, #2
    242c:	4b1c      	ldr	r3, [pc, #112]	; (24a0 <system_clock_source_get_hz+0x7c>)
    242e:	581b      	ldr	r3, [r3, r0]
    2430:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2432:	2000      	movs	r0, #0
    2434:	e032      	b.n	249c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2436:	4b1b      	ldr	r3, [pc, #108]	; (24a4 <system_clock_source_get_hz+0x80>)
    2438:	6918      	ldr	r0, [r3, #16]
    243a:	e02f      	b.n	249c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    243c:	4b1a      	ldr	r3, [pc, #104]	; (24a8 <system_clock_source_get_hz+0x84>)
    243e:	6a1b      	ldr	r3, [r3, #32]
    2440:	059b      	lsls	r3, r3, #22
    2442:	0f9b      	lsrs	r3, r3, #30
    2444:	4819      	ldr	r0, [pc, #100]	; (24ac <system_clock_source_get_hz+0x88>)
    2446:	40d8      	lsrs	r0, r3
    2448:	e028      	b.n	249c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    244a:	4b16      	ldr	r3, [pc, #88]	; (24a4 <system_clock_source_get_hz+0x80>)
    244c:	6958      	ldr	r0, [r3, #20]
    244e:	e025      	b.n	249c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2450:	4b14      	ldr	r3, [pc, #80]	; (24a4 <system_clock_source_get_hz+0x80>)
    2452:	681b      	ldr	r3, [r3, #0]
			return 0;
    2454:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2456:	079b      	lsls	r3, r3, #30
    2458:	d520      	bpl.n	249c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    245a:	4913      	ldr	r1, [pc, #76]	; (24a8 <system_clock_source_get_hz+0x84>)
    245c:	2210      	movs	r2, #16
    245e:	68cb      	ldr	r3, [r1, #12]
    2460:	421a      	tst	r2, r3
    2462:	d0fc      	beq.n	245e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2464:	4b0f      	ldr	r3, [pc, #60]	; (24a4 <system_clock_source_get_hz+0x80>)
    2466:	681a      	ldr	r2, [r3, #0]
    2468:	2324      	movs	r3, #36	; 0x24
    246a:	4013      	ands	r3, r2
    246c:	2b04      	cmp	r3, #4
    246e:	d001      	beq.n	2474 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2470:	480f      	ldr	r0, [pc, #60]	; (24b0 <system_clock_source_get_hz+0x8c>)
    2472:	e013      	b.n	249c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2474:	2000      	movs	r0, #0
    2476:	4b0f      	ldr	r3, [pc, #60]	; (24b4 <system_clock_source_get_hz+0x90>)
    2478:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    247a:	4b0a      	ldr	r3, [pc, #40]	; (24a4 <system_clock_source_get_hz+0x80>)
    247c:	689b      	ldr	r3, [r3, #8]
    247e:	041b      	lsls	r3, r3, #16
    2480:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2482:	4358      	muls	r0, r3
    2484:	e00a      	b.n	249c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2486:	2350      	movs	r3, #80	; 0x50
    2488:	4a07      	ldr	r2, [pc, #28]	; (24a8 <system_clock_source_get_hz+0x84>)
    248a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    248c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    248e:	075b      	lsls	r3, r3, #29
    2490:	d504      	bpl.n	249c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2492:	4b04      	ldr	r3, [pc, #16]	; (24a4 <system_clock_source_get_hz+0x80>)
    2494:	68d8      	ldr	r0, [r3, #12]
    2496:	e001      	b.n	249c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2498:	2080      	movs	r0, #128	; 0x80
    249a:	0200      	lsls	r0, r0, #8
	}
}
    249c:	bd10      	pop	{r4, pc}
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	0000ba68 	.word	0x0000ba68
    24a4:	2000077c 	.word	0x2000077c
    24a8:	40000800 	.word	0x40000800
    24ac:	007a1200 	.word	0x007a1200
    24b0:	02dc6c00 	.word	0x02dc6c00
    24b4:	00002989 	.word	0x00002989

000024b8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    24b8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    24ba:	490c      	ldr	r1, [pc, #48]	; (24ec <system_clock_source_osc8m_set_config+0x34>)
    24bc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    24be:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    24c0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    24c2:	7840      	ldrb	r0, [r0, #1]
    24c4:	2201      	movs	r2, #1
    24c6:	4010      	ands	r0, r2
    24c8:	0180      	lsls	r0, r0, #6
    24ca:	2640      	movs	r6, #64	; 0x40
    24cc:	43b3      	bics	r3, r6
    24ce:	4303      	orrs	r3, r0
    24d0:	402a      	ands	r2, r5
    24d2:	01d2      	lsls	r2, r2, #7
    24d4:	2080      	movs	r0, #128	; 0x80
    24d6:	4383      	bics	r3, r0
    24d8:	4313      	orrs	r3, r2
    24da:	2203      	movs	r2, #3
    24dc:	4022      	ands	r2, r4
    24de:	0212      	lsls	r2, r2, #8
    24e0:	4803      	ldr	r0, [pc, #12]	; (24f0 <system_clock_source_osc8m_set_config+0x38>)
    24e2:	4003      	ands	r3, r0
    24e4:	4313      	orrs	r3, r2
    24e6:	620b      	str	r3, [r1, #32]
}
    24e8:	bd70      	pop	{r4, r5, r6, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	40000800 	.word	0x40000800
    24f0:	fffffcff 	.word	0xfffffcff

000024f4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    24f4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    24f6:	7a03      	ldrb	r3, [r0, #8]
    24f8:	069b      	lsls	r3, r3, #26
    24fa:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    24fc:	8942      	ldrh	r2, [r0, #10]
    24fe:	0592      	lsls	r2, r2, #22
    2500:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2502:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2504:	4918      	ldr	r1, [pc, #96]	; (2568 <system_clock_source_dfll_set_config+0x74>)
    2506:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2508:	7983      	ldrb	r3, [r0, #6]
    250a:	79c2      	ldrb	r2, [r0, #7]
    250c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    250e:	8842      	ldrh	r2, [r0, #2]
    2510:	8884      	ldrh	r4, [r0, #4]
    2512:	4322      	orrs	r2, r4
    2514:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2516:	7842      	ldrb	r2, [r0, #1]
    2518:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    251a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    251c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    251e:	7803      	ldrb	r3, [r0, #0]
    2520:	2b04      	cmp	r3, #4
    2522:	d011      	beq.n	2548 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2524:	2b20      	cmp	r3, #32
    2526:	d10e      	bne.n	2546 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2528:	7b03      	ldrb	r3, [r0, #12]
    252a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    252c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    252e:	4313      	orrs	r3, r2
    2530:	89c2      	ldrh	r2, [r0, #14]
    2532:	0412      	lsls	r2, r2, #16
    2534:	490d      	ldr	r1, [pc, #52]	; (256c <system_clock_source_dfll_set_config+0x78>)
    2536:	400a      	ands	r2, r1
    2538:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    253a:	4a0b      	ldr	r2, [pc, #44]	; (2568 <system_clock_source_dfll_set_config+0x74>)
    253c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    253e:	6811      	ldr	r1, [r2, #0]
    2540:	4b0b      	ldr	r3, [pc, #44]	; (2570 <system_clock_source_dfll_set_config+0x7c>)
    2542:	430b      	orrs	r3, r1
    2544:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2546:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2548:	7b03      	ldrb	r3, [r0, #12]
    254a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    254c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    254e:	4313      	orrs	r3, r2
    2550:	89c2      	ldrh	r2, [r0, #14]
    2552:	0412      	lsls	r2, r2, #16
    2554:	4905      	ldr	r1, [pc, #20]	; (256c <system_clock_source_dfll_set_config+0x78>)
    2556:	400a      	ands	r2, r1
    2558:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    255a:	4a03      	ldr	r2, [pc, #12]	; (2568 <system_clock_source_dfll_set_config+0x74>)
    255c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    255e:	6813      	ldr	r3, [r2, #0]
    2560:	2104      	movs	r1, #4
    2562:	430b      	orrs	r3, r1
    2564:	6013      	str	r3, [r2, #0]
    2566:	e7ee      	b.n	2546 <system_clock_source_dfll_set_config+0x52>
    2568:	2000077c 	.word	0x2000077c
    256c:	03ff0000 	.word	0x03ff0000
    2570:	00000424 	.word	0x00000424

00002574 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2574:	2808      	cmp	r0, #8
    2576:	d803      	bhi.n	2580 <system_clock_source_enable+0xc>
    2578:	0080      	lsls	r0, r0, #2
    257a:	4b25      	ldr	r3, [pc, #148]	; (2610 <system_clock_source_enable+0x9c>)
    257c:	581b      	ldr	r3, [r3, r0]
    257e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2580:	2017      	movs	r0, #23
    2582:	e044      	b.n	260e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2584:	4a23      	ldr	r2, [pc, #140]	; (2614 <system_clock_source_enable+0xa0>)
    2586:	6a13      	ldr	r3, [r2, #32]
    2588:	2102      	movs	r1, #2
    258a:	430b      	orrs	r3, r1
    258c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    258e:	2000      	movs	r0, #0
    2590:	e03d      	b.n	260e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2592:	4a20      	ldr	r2, [pc, #128]	; (2614 <system_clock_source_enable+0xa0>)
    2594:	6993      	ldr	r3, [r2, #24]
    2596:	2102      	movs	r1, #2
    2598:	430b      	orrs	r3, r1
    259a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    259c:	2000      	movs	r0, #0
		break;
    259e:	e036      	b.n	260e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    25a0:	4a1c      	ldr	r2, [pc, #112]	; (2614 <system_clock_source_enable+0xa0>)
    25a2:	8a13      	ldrh	r3, [r2, #16]
    25a4:	2102      	movs	r1, #2
    25a6:	430b      	orrs	r3, r1
    25a8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    25aa:	2000      	movs	r0, #0
		break;
    25ac:	e02f      	b.n	260e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    25ae:	4a19      	ldr	r2, [pc, #100]	; (2614 <system_clock_source_enable+0xa0>)
    25b0:	8a93      	ldrh	r3, [r2, #20]
    25b2:	2102      	movs	r1, #2
    25b4:	430b      	orrs	r3, r1
    25b6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    25b8:	2000      	movs	r0, #0
		break;
    25ba:	e028      	b.n	260e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    25bc:	4916      	ldr	r1, [pc, #88]	; (2618 <system_clock_source_enable+0xa4>)
    25be:	680b      	ldr	r3, [r1, #0]
    25c0:	2202      	movs	r2, #2
    25c2:	4313      	orrs	r3, r2
    25c4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    25c6:	4b13      	ldr	r3, [pc, #76]	; (2614 <system_clock_source_enable+0xa0>)
    25c8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    25ca:	0019      	movs	r1, r3
    25cc:	320e      	adds	r2, #14
    25ce:	68cb      	ldr	r3, [r1, #12]
    25d0:	421a      	tst	r2, r3
    25d2:	d0fc      	beq.n	25ce <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    25d4:	4a10      	ldr	r2, [pc, #64]	; (2618 <system_clock_source_enable+0xa4>)
    25d6:	6891      	ldr	r1, [r2, #8]
    25d8:	4b0e      	ldr	r3, [pc, #56]	; (2614 <system_clock_source_enable+0xa0>)
    25da:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    25dc:	6852      	ldr	r2, [r2, #4]
    25de:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    25e0:	2200      	movs	r2, #0
    25e2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    25e4:	0019      	movs	r1, r3
    25e6:	3210      	adds	r2, #16
    25e8:	68cb      	ldr	r3, [r1, #12]
    25ea:	421a      	tst	r2, r3
    25ec:	d0fc      	beq.n	25e8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    25ee:	4b0a      	ldr	r3, [pc, #40]	; (2618 <system_clock_source_enable+0xa4>)
    25f0:	681b      	ldr	r3, [r3, #0]
    25f2:	b29b      	uxth	r3, r3
    25f4:	4a07      	ldr	r2, [pc, #28]	; (2614 <system_clock_source_enable+0xa0>)
    25f6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    25f8:	2000      	movs	r0, #0
    25fa:	e008      	b.n	260e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    25fc:	4905      	ldr	r1, [pc, #20]	; (2614 <system_clock_source_enable+0xa0>)
    25fe:	2244      	movs	r2, #68	; 0x44
    2600:	5c8b      	ldrb	r3, [r1, r2]
    2602:	2002      	movs	r0, #2
    2604:	4303      	orrs	r3, r0
    2606:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2608:	2000      	movs	r0, #0
		break;
    260a:	e000      	b.n	260e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    260c:	2000      	movs	r0, #0
}
    260e:	4770      	bx	lr
    2610:	0000ba8c 	.word	0x0000ba8c
    2614:	40000800 	.word	0x40000800
    2618:	2000077c 	.word	0x2000077c

0000261c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    261c:	b570      	push	{r4, r5, r6, lr}
    261e:	b08a      	sub	sp, #40	; 0x28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2620:	22c2      	movs	r2, #194	; 0xc2
    2622:	00d2      	lsls	r2, r2, #3
    2624:	4b36      	ldr	r3, [pc, #216]	; (2700 <system_clock_init+0xe4>)
    2626:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2628:	4a36      	ldr	r2, [pc, #216]	; (2704 <system_clock_init+0xe8>)
    262a:	6853      	ldr	r3, [r2, #4]
    262c:	211e      	movs	r1, #30
    262e:	438b      	bics	r3, r1
    2630:	391a      	subs	r1, #26
    2632:	430b      	orrs	r3, r1
    2634:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2636:	2202      	movs	r2, #2
    2638:	ab01      	add	r3, sp, #4
    263a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    263c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    263e:	4d32      	ldr	r5, [pc, #200]	; (2708 <system_clock_init+0xec>)
    2640:	b2e0      	uxtb	r0, r4
    2642:	a901      	add	r1, sp, #4
    2644:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2646:	3401      	adds	r4, #1
    2648:	2c25      	cmp	r4, #37	; 0x25
    264a:	d1f9      	bne.n	2640 <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    264c:	ab05      	add	r3, sp, #20
    264e:	2200      	movs	r2, #0
    2650:	2100      	movs	r1, #0
    2652:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2654:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2656:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2658:	3120      	adds	r1, #32
    265a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    265c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    265e:	4b2b      	ldr	r3, [pc, #172]	; (270c <system_clock_init+0xf0>)
    2660:	681b      	ldr	r3, [r3, #0]
    2662:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2664:	2b3f      	cmp	r3, #63	; 0x3f
    2666:	d049      	beq.n	26fc <system_clock_init+0xe0>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2668:	a805      	add	r0, sp, #20
    266a:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    266c:	2307      	movs	r3, #7
    266e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    2670:	3303      	adds	r3, #3
    2672:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2674:	4b26      	ldr	r3, [pc, #152]	; (2710 <system_clock_init+0xf4>)
    2676:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2678:	3bff      	subs	r3, #255	; 0xff
    267a:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    267c:	4b25      	ldr	r3, [pc, #148]	; (2714 <system_clock_init+0xf8>)
    267e:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2680:	4b25      	ldr	r3, [pc, #148]	; (2718 <system_clock_init+0xfc>)
    2682:	4798      	blx	r3
	config->run_in_standby  = false;
    2684:	a804      	add	r0, sp, #16
    2686:	2400      	movs	r4, #0
    2688:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    268a:	2601      	movs	r6, #1
    268c:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    268e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2690:	4b22      	ldr	r3, [pc, #136]	; (271c <system_clock_init+0x100>)
    2692:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2694:	2006      	movs	r0, #6
    2696:	4d22      	ldr	r5, [pc, #136]	; (2720 <system_clock_init+0x104>)
    2698:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    269a:	4b22      	ldr	r3, [pc, #136]	; (2724 <system_clock_init+0x108>)
    269c:	4798      	blx	r3
	config->division_factor    = 1;
    269e:	a901      	add	r1, sp, #4
    26a0:	604e      	str	r6, [r1, #4]
	config->high_when_disabled = false;
    26a2:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    26a4:	2306      	movs	r3, #6
    26a6:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    26a8:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    26aa:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    26ac:	2001      	movs	r0, #1
    26ae:	4b1e      	ldr	r3, [pc, #120]	; (2728 <system_clock_init+0x10c>)
    26b0:	4798      	blx	r3
    26b2:	2001      	movs	r0, #1
    26b4:	4b1d      	ldr	r3, [pc, #116]	; (272c <system_clock_init+0x110>)
    26b6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    26b8:	2007      	movs	r0, #7
    26ba:	47a8      	blx	r5
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    26bc:	4910      	ldr	r1, [pc, #64]	; (2700 <system_clock_init+0xe4>)
    26be:	2210      	movs	r2, #16
    26c0:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    26c2:	421a      	tst	r2, r3
    26c4:	d0fc      	beq.n	26c0 <system_clock_init+0xa4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    26c6:	4a0e      	ldr	r2, [pc, #56]	; (2700 <system_clock_init+0xe4>)
    26c8:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    26ca:	2180      	movs	r1, #128	; 0x80
    26cc:	430b      	orrs	r3, r1
    26ce:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    26d0:	4a17      	ldr	r2, [pc, #92]	; (2730 <system_clock_init+0x114>)
    26d2:	2300      	movs	r3, #0
    26d4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    26d6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    26d8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    26da:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    26dc:	a901      	add	r1, sp, #4
    26de:	2201      	movs	r2, #1
    26e0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    26e2:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    26e4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    26e6:	3307      	adds	r3, #7
    26e8:	700b      	strb	r3, [r1, #0]
    26ea:	720a      	strb	r2, [r1, #8]
    26ec:	2000      	movs	r0, #0
    26ee:	4b0e      	ldr	r3, [pc, #56]	; (2728 <system_clock_init+0x10c>)
    26f0:	4798      	blx	r3
    26f2:	2000      	movs	r0, #0
    26f4:	4b0d      	ldr	r3, [pc, #52]	; (272c <system_clock_init+0x110>)
    26f6:	4798      	blx	r3
#endif
}
    26f8:	b00a      	add	sp, #40	; 0x28
    26fa:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    26fc:	3b20      	subs	r3, #32
    26fe:	e7b3      	b.n	2668 <system_clock_init+0x4c>
    2700:	40000800 	.word	0x40000800
    2704:	41004000 	.word	0x41004000
    2708:	0000296d 	.word	0x0000296d
    270c:	00806024 	.word	0x00806024
    2710:	000001ff 	.word	0x000001ff
    2714:	ffffbb80 	.word	0xffffbb80
    2718:	000024f5 	.word	0x000024f5
    271c:	000024b9 	.word	0x000024b9
    2720:	00002575 	.word	0x00002575
    2724:	00002735 	.word	0x00002735
    2728:	00002759 	.word	0x00002759
    272c:	00002811 	.word	0x00002811
    2730:	40000400 	.word	0x40000400

00002734 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2734:	4a06      	ldr	r2, [pc, #24]	; (2750 <system_gclk_init+0x1c>)
    2736:	6993      	ldr	r3, [r2, #24]
    2738:	2108      	movs	r1, #8
    273a:	430b      	orrs	r3, r1
    273c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    273e:	2201      	movs	r2, #1
    2740:	4b04      	ldr	r3, [pc, #16]	; (2754 <system_gclk_init+0x20>)
    2742:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2744:	0019      	movs	r1, r3
    2746:	780b      	ldrb	r3, [r1, #0]
    2748:	4213      	tst	r3, r2
    274a:	d1fc      	bne.n	2746 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    274c:	4770      	bx	lr
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	40000400 	.word	0x40000400
    2754:	40000c00 	.word	0x40000c00

00002758 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2758:	b570      	push	{r4, r5, r6, lr}
    275a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    275c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    275e:	780d      	ldrb	r5, [r1, #0]
    2760:	022d      	lsls	r5, r5, #8
    2762:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2764:	784b      	ldrb	r3, [r1, #1]
    2766:	2b00      	cmp	r3, #0
    2768:	d002      	beq.n	2770 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    276a:	2380      	movs	r3, #128	; 0x80
    276c:	02db      	lsls	r3, r3, #11
    276e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2770:	7a4b      	ldrb	r3, [r1, #9]
    2772:	2b00      	cmp	r3, #0
    2774:	d002      	beq.n	277c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2776:	2380      	movs	r3, #128	; 0x80
    2778:	031b      	lsls	r3, r3, #12
    277a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    277c:	6848      	ldr	r0, [r1, #4]
    277e:	2801      	cmp	r0, #1
    2780:	d910      	bls.n	27a4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2782:	1e43      	subs	r3, r0, #1
    2784:	4218      	tst	r0, r3
    2786:	d134      	bne.n	27f2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2788:	2802      	cmp	r0, #2
    278a:	d930      	bls.n	27ee <system_gclk_gen_set_config+0x96>
    278c:	2302      	movs	r3, #2
    278e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2790:	3201      	adds	r2, #1
						mask <<= 1) {
    2792:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2794:	4298      	cmp	r0, r3
    2796:	d8fb      	bhi.n	2790 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2798:	0212      	lsls	r2, r2, #8
    279a:	4332      	orrs	r2, r6
    279c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    279e:	2380      	movs	r3, #128	; 0x80
    27a0:	035b      	lsls	r3, r3, #13
    27a2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    27a4:	7a0b      	ldrb	r3, [r1, #8]
    27a6:	2b00      	cmp	r3, #0
    27a8:	d002      	beq.n	27b0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    27aa:	2380      	movs	r3, #128	; 0x80
    27ac:	039b      	lsls	r3, r3, #14
    27ae:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27b0:	4a13      	ldr	r2, [pc, #76]	; (2800 <system_gclk_gen_set_config+0xa8>)
    27b2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    27b4:	b25b      	sxtb	r3, r3
    27b6:	2b00      	cmp	r3, #0
    27b8:	dbfb      	blt.n	27b2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    27ba:	4b12      	ldr	r3, [pc, #72]	; (2804 <system_gclk_gen_set_config+0xac>)
    27bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    27be:	4b12      	ldr	r3, [pc, #72]	; (2808 <system_gclk_gen_set_config+0xb0>)
    27c0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27c2:	4a0f      	ldr	r2, [pc, #60]	; (2800 <system_gclk_gen_set_config+0xa8>)
    27c4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    27c6:	b25b      	sxtb	r3, r3
    27c8:	2b00      	cmp	r3, #0
    27ca:	dbfb      	blt.n	27c4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    27cc:	4b0c      	ldr	r3, [pc, #48]	; (2800 <system_gclk_gen_set_config+0xa8>)
    27ce:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27d0:	001a      	movs	r2, r3
    27d2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    27d4:	b25b      	sxtb	r3, r3
    27d6:	2b00      	cmp	r3, #0
    27d8:	dbfb      	blt.n	27d2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    27da:	4a09      	ldr	r2, [pc, #36]	; (2800 <system_gclk_gen_set_config+0xa8>)
    27dc:	6853      	ldr	r3, [r2, #4]
    27de:	2180      	movs	r1, #128	; 0x80
    27e0:	0249      	lsls	r1, r1, #9
    27e2:	400b      	ands	r3, r1
    27e4:	431d      	orrs	r5, r3
    27e6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    27e8:	4b08      	ldr	r3, [pc, #32]	; (280c <system_gclk_gen_set_config+0xb4>)
    27ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27ec:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    27ee:	2200      	movs	r2, #0
    27f0:	e7d2      	b.n	2798 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    27f2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    27f4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    27f6:	2380      	movs	r3, #128	; 0x80
    27f8:	029b      	lsls	r3, r3, #10
    27fa:	431d      	orrs	r5, r3
    27fc:	e7d2      	b.n	27a4 <system_gclk_gen_set_config+0x4c>
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	40000c00 	.word	0x40000c00
    2804:	00000fed 	.word	0x00000fed
    2808:	40000c08 	.word	0x40000c08
    280c:	0000102d 	.word	0x0000102d

00002810 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2810:	b510      	push	{r4, lr}
    2812:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2814:	4a0b      	ldr	r2, [pc, #44]	; (2844 <system_gclk_gen_enable+0x34>)
    2816:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2818:	b25b      	sxtb	r3, r3
    281a:	2b00      	cmp	r3, #0
    281c:	dbfb      	blt.n	2816 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    281e:	4b0a      	ldr	r3, [pc, #40]	; (2848 <system_gclk_gen_enable+0x38>)
    2820:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2822:	4b0a      	ldr	r3, [pc, #40]	; (284c <system_gclk_gen_enable+0x3c>)
    2824:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2826:	4a07      	ldr	r2, [pc, #28]	; (2844 <system_gclk_gen_enable+0x34>)
    2828:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    282a:	b25b      	sxtb	r3, r3
    282c:	2b00      	cmp	r3, #0
    282e:	dbfb      	blt.n	2828 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2830:	4a04      	ldr	r2, [pc, #16]	; (2844 <system_gclk_gen_enable+0x34>)
    2832:	6851      	ldr	r1, [r2, #4]
    2834:	2380      	movs	r3, #128	; 0x80
    2836:	025b      	lsls	r3, r3, #9
    2838:	430b      	orrs	r3, r1
    283a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    283c:	4b04      	ldr	r3, [pc, #16]	; (2850 <system_gclk_gen_enable+0x40>)
    283e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2840:	bd10      	pop	{r4, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	40000c00 	.word	0x40000c00
    2848:	00000fed 	.word	0x00000fed
    284c:	40000c04 	.word	0x40000c04
    2850:	0000102d 	.word	0x0000102d

00002854 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2854:	b570      	push	{r4, r5, r6, lr}
    2856:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2858:	4a1a      	ldr	r2, [pc, #104]	; (28c4 <system_gclk_gen_get_hz+0x70>)
    285a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    285c:	b25b      	sxtb	r3, r3
    285e:	2b00      	cmp	r3, #0
    2860:	dbfb      	blt.n	285a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2862:	4b19      	ldr	r3, [pc, #100]	; (28c8 <system_gclk_gen_get_hz+0x74>)
    2864:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2866:	4b19      	ldr	r3, [pc, #100]	; (28cc <system_gclk_gen_get_hz+0x78>)
    2868:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    286a:	4a16      	ldr	r2, [pc, #88]	; (28c4 <system_gclk_gen_get_hz+0x70>)
    286c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    286e:	b25b      	sxtb	r3, r3
    2870:	2b00      	cmp	r3, #0
    2872:	dbfb      	blt.n	286c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2874:	4e13      	ldr	r6, [pc, #76]	; (28c4 <system_gclk_gen_get_hz+0x70>)
    2876:	6870      	ldr	r0, [r6, #4]
    2878:	04c0      	lsls	r0, r0, #19
    287a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    287c:	4b14      	ldr	r3, [pc, #80]	; (28d0 <system_gclk_gen_get_hz+0x7c>)
    287e:	4798      	blx	r3
    2880:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2882:	4b12      	ldr	r3, [pc, #72]	; (28cc <system_gclk_gen_get_hz+0x78>)
    2884:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2886:	6876      	ldr	r6, [r6, #4]
    2888:	02f6      	lsls	r6, r6, #11
    288a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    288c:	4b11      	ldr	r3, [pc, #68]	; (28d4 <system_gclk_gen_get_hz+0x80>)
    288e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2890:	4a0c      	ldr	r2, [pc, #48]	; (28c4 <system_gclk_gen_get_hz+0x70>)
    2892:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2894:	b25b      	sxtb	r3, r3
    2896:	2b00      	cmp	r3, #0
    2898:	dbfb      	blt.n	2892 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    289a:	4b0a      	ldr	r3, [pc, #40]	; (28c4 <system_gclk_gen_get_hz+0x70>)
    289c:	689c      	ldr	r4, [r3, #8]
    289e:	0224      	lsls	r4, r4, #8
    28a0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    28a2:	4b0d      	ldr	r3, [pc, #52]	; (28d8 <system_gclk_gen_get_hz+0x84>)
    28a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    28a6:	2e00      	cmp	r6, #0
    28a8:	d107      	bne.n	28ba <system_gclk_gen_get_hz+0x66>
    28aa:	2c01      	cmp	r4, #1
    28ac:	d907      	bls.n	28be <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    28ae:	0021      	movs	r1, r4
    28b0:	0028      	movs	r0, r5
    28b2:	4b0a      	ldr	r3, [pc, #40]	; (28dc <system_gclk_gen_get_hz+0x88>)
    28b4:	4798      	blx	r3
    28b6:	0005      	movs	r5, r0
    28b8:	e001      	b.n	28be <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    28ba:	3401      	adds	r4, #1
    28bc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    28be:	0028      	movs	r0, r5
    28c0:	bd70      	pop	{r4, r5, r6, pc}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	40000c00 	.word	0x40000c00
    28c8:	00000fed 	.word	0x00000fed
    28cc:	40000c04 	.word	0x40000c04
    28d0:	00002425 	.word	0x00002425
    28d4:	40000c08 	.word	0x40000c08
    28d8:	0000102d 	.word	0x0000102d
    28dc:	00007ba9 	.word	0x00007ba9

000028e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    28e0:	b510      	push	{r4, lr}
    28e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    28e4:	4b06      	ldr	r3, [pc, #24]	; (2900 <system_gclk_chan_enable+0x20>)
    28e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    28e8:	4b06      	ldr	r3, [pc, #24]	; (2904 <system_gclk_chan_enable+0x24>)
    28ea:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    28ec:	4a06      	ldr	r2, [pc, #24]	; (2908 <system_gclk_chan_enable+0x28>)
    28ee:	8853      	ldrh	r3, [r2, #2]
    28f0:	2180      	movs	r1, #128	; 0x80
    28f2:	01c9      	lsls	r1, r1, #7
    28f4:	430b      	orrs	r3, r1
    28f6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    28f8:	4b04      	ldr	r3, [pc, #16]	; (290c <system_gclk_chan_enable+0x2c>)
    28fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    28fc:	bd10      	pop	{r4, pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	00000fed 	.word	0x00000fed
    2904:	40000c02 	.word	0x40000c02
    2908:	40000c00 	.word	0x40000c00
    290c:	0000102d 	.word	0x0000102d

00002910 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2910:	b510      	push	{r4, lr}
    2912:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2914:	4b0f      	ldr	r3, [pc, #60]	; (2954 <system_gclk_chan_disable+0x44>)
    2916:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2918:	4b0f      	ldr	r3, [pc, #60]	; (2958 <system_gclk_chan_disable+0x48>)
    291a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    291c:	4a0f      	ldr	r2, [pc, #60]	; (295c <system_gclk_chan_disable+0x4c>)
    291e:	8853      	ldrh	r3, [r2, #2]
    2920:	051b      	lsls	r3, r3, #20
    2922:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2924:	8853      	ldrh	r3, [r2, #2]
    2926:	490e      	ldr	r1, [pc, #56]	; (2960 <system_gclk_chan_disable+0x50>)
    2928:	400b      	ands	r3, r1
    292a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    292c:	8853      	ldrh	r3, [r2, #2]
    292e:	490d      	ldr	r1, [pc, #52]	; (2964 <system_gclk_chan_disable+0x54>)
    2930:	400b      	ands	r3, r1
    2932:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2934:	0011      	movs	r1, r2
    2936:	2280      	movs	r2, #128	; 0x80
    2938:	01d2      	lsls	r2, r2, #7
    293a:	884b      	ldrh	r3, [r1, #2]
    293c:	4213      	tst	r3, r2
    293e:	d1fc      	bne.n	293a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2940:	4906      	ldr	r1, [pc, #24]	; (295c <system_gclk_chan_disable+0x4c>)
    2942:	884a      	ldrh	r2, [r1, #2]
    2944:	0203      	lsls	r3, r0, #8
    2946:	4806      	ldr	r0, [pc, #24]	; (2960 <system_gclk_chan_disable+0x50>)
    2948:	4002      	ands	r2, r0
    294a:	4313      	orrs	r3, r2
    294c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    294e:	4b06      	ldr	r3, [pc, #24]	; (2968 <system_gclk_chan_disable+0x58>)
    2950:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2952:	bd10      	pop	{r4, pc}
    2954:	00000fed 	.word	0x00000fed
    2958:	40000c02 	.word	0x40000c02
    295c:	40000c00 	.word	0x40000c00
    2960:	fffff0ff 	.word	0xfffff0ff
    2964:	ffffbfff 	.word	0xffffbfff
    2968:	0000102d 	.word	0x0000102d

0000296c <system_gclk_chan_set_config>:
{
    296c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    296e:	780c      	ldrb	r4, [r1, #0]
    2970:	0224      	lsls	r4, r4, #8
    2972:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2974:	4b02      	ldr	r3, [pc, #8]	; (2980 <system_gclk_chan_set_config+0x14>)
    2976:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2978:	b2a4      	uxth	r4, r4
    297a:	4b02      	ldr	r3, [pc, #8]	; (2984 <system_gclk_chan_set_config+0x18>)
    297c:	805c      	strh	r4, [r3, #2]
}
    297e:	bd10      	pop	{r4, pc}
    2980:	00002911 	.word	0x00002911
    2984:	40000c00 	.word	0x40000c00

00002988 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2988:	b510      	push	{r4, lr}
    298a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    298c:	4b06      	ldr	r3, [pc, #24]	; (29a8 <system_gclk_chan_get_hz+0x20>)
    298e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2990:	4b06      	ldr	r3, [pc, #24]	; (29ac <system_gclk_chan_get_hz+0x24>)
    2992:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2994:	4b06      	ldr	r3, [pc, #24]	; (29b0 <system_gclk_chan_get_hz+0x28>)
    2996:	885c      	ldrh	r4, [r3, #2]
    2998:	0524      	lsls	r4, r4, #20
    299a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    299c:	4b05      	ldr	r3, [pc, #20]	; (29b4 <system_gclk_chan_get_hz+0x2c>)
    299e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    29a0:	0020      	movs	r0, r4
    29a2:	4b05      	ldr	r3, [pc, #20]	; (29b8 <system_gclk_chan_get_hz+0x30>)
    29a4:	4798      	blx	r3
}
    29a6:	bd10      	pop	{r4, pc}
    29a8:	00000fed 	.word	0x00000fed
    29ac:	40000c02 	.word	0x40000c02
    29b0:	40000c00 	.word	0x40000c00
    29b4:	0000102d 	.word	0x0000102d
    29b8:	00002855 	.word	0x00002855

000029bc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    29bc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    29be:	78d3      	ldrb	r3, [r2, #3]
    29c0:	2b00      	cmp	r3, #0
    29c2:	d135      	bne.n	2a30 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    29c4:	7813      	ldrb	r3, [r2, #0]
    29c6:	2b80      	cmp	r3, #128	; 0x80
    29c8:	d029      	beq.n	2a1e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    29ca:	061b      	lsls	r3, r3, #24
    29cc:	2480      	movs	r4, #128	; 0x80
    29ce:	0264      	lsls	r4, r4, #9
    29d0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    29d2:	7854      	ldrb	r4, [r2, #1]
    29d4:	2502      	movs	r5, #2
    29d6:	43ac      	bics	r4, r5
    29d8:	d106      	bne.n	29e8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    29da:	7894      	ldrb	r4, [r2, #2]
    29dc:	2c00      	cmp	r4, #0
    29de:	d120      	bne.n	2a22 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    29e0:	2480      	movs	r4, #128	; 0x80
    29e2:	02a4      	lsls	r4, r4, #10
    29e4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    29e6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29e8:	7854      	ldrb	r4, [r2, #1]
    29ea:	3c01      	subs	r4, #1
    29ec:	2c01      	cmp	r4, #1
    29ee:	d91c      	bls.n	2a2a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    29f0:	040d      	lsls	r5, r1, #16
    29f2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    29f4:	24a0      	movs	r4, #160	; 0xa0
    29f6:	05e4      	lsls	r4, r4, #23
    29f8:	432c      	orrs	r4, r5
    29fa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29fc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    29fe:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2a00:	24d0      	movs	r4, #208	; 0xd0
    2a02:	0624      	lsls	r4, r4, #24
    2a04:	432c      	orrs	r4, r5
    2a06:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a08:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2a0a:	78d4      	ldrb	r4, [r2, #3]
    2a0c:	2c00      	cmp	r4, #0
    2a0e:	d122      	bne.n	2a56 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2a10:	035b      	lsls	r3, r3, #13
    2a12:	d51c      	bpl.n	2a4e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2a14:	7893      	ldrb	r3, [r2, #2]
    2a16:	2b01      	cmp	r3, #1
    2a18:	d01e      	beq.n	2a58 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2a1a:	6141      	str	r1, [r0, #20]
    2a1c:	e017      	b.n	2a4e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2a1e:	2300      	movs	r3, #0
    2a20:	e7d7      	b.n	29d2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2a22:	24c0      	movs	r4, #192	; 0xc0
    2a24:	02e4      	lsls	r4, r4, #11
    2a26:	4323      	orrs	r3, r4
    2a28:	e7dd      	b.n	29e6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2a2a:	4c0d      	ldr	r4, [pc, #52]	; (2a60 <_system_pinmux_config+0xa4>)
    2a2c:	4023      	ands	r3, r4
    2a2e:	e7df      	b.n	29f0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2a30:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2a32:	040c      	lsls	r4, r1, #16
    2a34:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2a36:	23a0      	movs	r3, #160	; 0xa0
    2a38:	05db      	lsls	r3, r3, #23
    2a3a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a3c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2a3e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2a40:	23d0      	movs	r3, #208	; 0xd0
    2a42:	061b      	lsls	r3, r3, #24
    2a44:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a46:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2a48:	78d3      	ldrb	r3, [r2, #3]
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	d103      	bne.n	2a56 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2a4e:	7853      	ldrb	r3, [r2, #1]
    2a50:	3b01      	subs	r3, #1
    2a52:	2b01      	cmp	r3, #1
    2a54:	d902      	bls.n	2a5c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2a56:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2a58:	6181      	str	r1, [r0, #24]
    2a5a:	e7f8      	b.n	2a4e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2a5c:	6081      	str	r1, [r0, #8]
}
    2a5e:	e7fa      	b.n	2a56 <_system_pinmux_config+0x9a>
    2a60:	fffbffff 	.word	0xfffbffff

00002a64 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2a64:	b510      	push	{r4, lr}
    2a66:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2a68:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2a6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2a6c:	2900      	cmp	r1, #0
    2a6e:	d104      	bne.n	2a7a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2a70:	0943      	lsrs	r3, r0, #5
    2a72:	01db      	lsls	r3, r3, #7
    2a74:	4905      	ldr	r1, [pc, #20]	; (2a8c <system_pinmux_pin_set_config+0x28>)
    2a76:	468c      	mov	ip, r1
    2a78:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2a7a:	241f      	movs	r4, #31
    2a7c:	4020      	ands	r0, r4
    2a7e:	2101      	movs	r1, #1
    2a80:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2a82:	0018      	movs	r0, r3
    2a84:	4b02      	ldr	r3, [pc, #8]	; (2a90 <system_pinmux_pin_set_config+0x2c>)
    2a86:	4798      	blx	r3
}
    2a88:	bd10      	pop	{r4, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	41004400 	.word	0x41004400
    2a90:	000029bd 	.word	0x000029bd

00002a94 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2a94:	4770      	bx	lr
	...

00002a98 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2a98:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2a9a:	4b05      	ldr	r3, [pc, #20]	; (2ab0 <system_init+0x18>)
    2a9c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2a9e:	4b05      	ldr	r3, [pc, #20]	; (2ab4 <system_init+0x1c>)
    2aa0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2aa2:	4b05      	ldr	r3, [pc, #20]	; (2ab8 <system_init+0x20>)
    2aa4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2aa6:	4b05      	ldr	r3, [pc, #20]	; (2abc <system_init+0x24>)
    2aa8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2aaa:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <system_init+0x28>)
    2aac:	4798      	blx	r3
}
    2aae:	bd10      	pop	{r4, pc}
    2ab0:	0000261d 	.word	0x0000261d
    2ab4:	000001b9 	.word	0x000001b9
    2ab8:	00002a95 	.word	0x00002a95
    2abc:	00001501 	.word	0x00001501
    2ac0:	00002a95 	.word	0x00002a95

00002ac4 <udd_sleep_mode>:
    2ac4:	b510      	push	{r4, lr}
    2ac6:	b084      	sub	sp, #16
    2ac8:	ab03      	add	r3, sp, #12
    2aca:	2200      	movs	r2, #0
    2acc:	701a      	strb	r2, [r3, #0]
    2ace:	3203      	adds	r2, #3
    2ad0:	705a      	strb	r2, [r3, #1]
    2ad2:	3a01      	subs	r2, #1
    2ad4:	709a      	strb	r2, [r3, #2]
    2ad6:	3a01      	subs	r2, #1
    2ad8:	70da      	strb	r2, [r3, #3]
    2ada:	4b27      	ldr	r3, [pc, #156]	; (2b78 <udd_sleep_mode+0xb4>)
    2adc:	781b      	ldrb	r3, [r3, #0]
    2ade:	4283      	cmp	r3, r0
    2ae0:	d007      	beq.n	2af2 <udd_sleep_mode+0x2e>
    2ae2:	2800      	cmp	r0, #0
    2ae4:	d107      	bne.n	2af6 <udd_sleep_mode+0x32>
    2ae6:	4b24      	ldr	r3, [pc, #144]	; (2b78 <udd_sleep_mode+0xb4>)
    2ae8:	781b      	ldrb	r3, [r3, #0]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d123      	bne.n	2b36 <udd_sleep_mode+0x72>
    2aee:	4b22      	ldr	r3, [pc, #136]	; (2b78 <udd_sleep_mode+0xb4>)
    2af0:	7018      	strb	r0, [r3, #0]
    2af2:	b004      	add	sp, #16
    2af4:	bd10      	pop	{r4, pc}
    2af6:	ab03      	add	r3, sp, #12
    2af8:	5c1b      	ldrb	r3, [r3, r0]
    2afa:	4a20      	ldr	r2, [pc, #128]	; (2b7c <udd_sleep_mode+0xb8>)
    2afc:	5cd2      	ldrb	r2, [r2, r3]
    2afe:	2aff      	cmp	r2, #255	; 0xff
    2b00:	d100      	bne.n	2b04 <udd_sleep_mode+0x40>
    2b02:	e7fe      	b.n	2b02 <udd_sleep_mode+0x3e>
    2b04:	f3ef 8210 	mrs	r2, PRIMASK
    2b08:	4251      	negs	r1, r2
    2b0a:	414a      	adcs	r2, r1
    2b0c:	9201      	str	r2, [sp, #4]
    2b0e:	b672      	cpsid	i
    2b10:	f3bf 8f5f 	dmb	sy
    2b14:	2100      	movs	r1, #0
    2b16:	4a1a      	ldr	r2, [pc, #104]	; (2b80 <udd_sleep_mode+0xbc>)
    2b18:	7011      	strb	r1, [r2, #0]
    2b1a:	9c01      	ldr	r4, [sp, #4]
    2b1c:	4917      	ldr	r1, [pc, #92]	; (2b7c <udd_sleep_mode+0xb8>)
    2b1e:	5cca      	ldrb	r2, [r1, r3]
    2b20:	3201      	adds	r2, #1
    2b22:	54ca      	strb	r2, [r1, r3]
    2b24:	2c00      	cmp	r4, #0
    2b26:	d0de      	beq.n	2ae6 <udd_sleep_mode+0x22>
    2b28:	2201      	movs	r2, #1
    2b2a:	4b15      	ldr	r3, [pc, #84]	; (2b80 <udd_sleep_mode+0xbc>)
    2b2c:	701a      	strb	r2, [r3, #0]
    2b2e:	f3bf 8f5f 	dmb	sy
    2b32:	b662      	cpsie	i
    2b34:	e7d7      	b.n	2ae6 <udd_sleep_mode+0x22>
    2b36:	aa03      	add	r2, sp, #12
    2b38:	5cd3      	ldrb	r3, [r2, r3]
    2b3a:	4a10      	ldr	r2, [pc, #64]	; (2b7c <udd_sleep_mode+0xb8>)
    2b3c:	5cd2      	ldrb	r2, [r2, r3]
    2b3e:	2a00      	cmp	r2, #0
    2b40:	d100      	bne.n	2b44 <udd_sleep_mode+0x80>
    2b42:	e7fe      	b.n	2b42 <udd_sleep_mode+0x7e>
    2b44:	f3ef 8210 	mrs	r2, PRIMASK
    2b48:	4251      	negs	r1, r2
    2b4a:	414a      	adcs	r2, r1
    2b4c:	9202      	str	r2, [sp, #8]
    2b4e:	b672      	cpsid	i
    2b50:	f3bf 8f5f 	dmb	sy
    2b54:	2100      	movs	r1, #0
    2b56:	4a0a      	ldr	r2, [pc, #40]	; (2b80 <udd_sleep_mode+0xbc>)
    2b58:	7011      	strb	r1, [r2, #0]
    2b5a:	9c02      	ldr	r4, [sp, #8]
    2b5c:	4907      	ldr	r1, [pc, #28]	; (2b7c <udd_sleep_mode+0xb8>)
    2b5e:	5cca      	ldrb	r2, [r1, r3]
    2b60:	3a01      	subs	r2, #1
    2b62:	54ca      	strb	r2, [r1, r3]
    2b64:	2c00      	cmp	r4, #0
    2b66:	d0c2      	beq.n	2aee <udd_sleep_mode+0x2a>
    2b68:	2201      	movs	r2, #1
    2b6a:	4b05      	ldr	r3, [pc, #20]	; (2b80 <udd_sleep_mode+0xbc>)
    2b6c:	701a      	strb	r2, [r3, #0]
    2b6e:	f3bf 8f5f 	dmb	sy
    2b72:	b662      	cpsie	i
    2b74:	e7bb      	b.n	2aee <udd_sleep_mode+0x2a>
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	20000814 	.word	0x20000814
    2b7c:	20000854 	.word	0x20000854
    2b80:	200000f4 	.word	0x200000f4

00002b84 <udd_ep_get_job>:
    2b84:	0643      	lsls	r3, r0, #25
    2b86:	d00b      	beq.n	2ba0 <udd_ep_get_job+0x1c>
    2b88:	230f      	movs	r3, #15
    2b8a:	4003      	ands	r3, r0
    2b8c:	005b      	lsls	r3, r3, #1
    2b8e:	09c0      	lsrs	r0, r0, #7
    2b90:	1818      	adds	r0, r3, r0
    2b92:	3802      	subs	r0, #2
    2b94:	0083      	lsls	r3, r0, #2
    2b96:	1818      	adds	r0, r3, r0
    2b98:	0080      	lsls	r0, r0, #2
    2b9a:	4b02      	ldr	r3, [pc, #8]	; (2ba4 <udd_ep_get_job+0x20>)
    2b9c:	1818      	adds	r0, r3, r0
    2b9e:	4770      	bx	lr
    2ba0:	2000      	movs	r0, #0
    2ba2:	e7fc      	b.n	2b9e <udd_ep_get_job+0x1a>
    2ba4:	2000079c 	.word	0x2000079c

00002ba8 <udd_ep_transfer_process>:
    2ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2baa:	46d6      	mov	lr, sl
    2bac:	464f      	mov	r7, r9
    2bae:	4646      	mov	r6, r8
    2bb0:	b5c0      	push	{r6, r7, lr}
    2bb2:	4689      	mov	r9, r1
    2bb4:	798d      	ldrb	r5, [r1, #6]
    2bb6:	b26b      	sxtb	r3, r5
    2bb8:	2b00      	cmp	r3, #0
    2bba:	db26      	blt.n	2c0a <udd_ep_transfer_process+0x62>
    2bbc:	0028      	movs	r0, r5
    2bbe:	4b5e      	ldr	r3, [pc, #376]	; (2d38 <udd_ep_transfer_process+0x190>)
    2bc0:	4798      	blx	r3
    2bc2:	0004      	movs	r4, r0
    2bc4:	270f      	movs	r7, #15
    2bc6:	402f      	ands	r7, r5
    2bc8:	8a03      	ldrh	r3, [r0, #16]
    2bca:	4698      	mov	r8, r3
    2bcc:	464b      	mov	r3, r9
    2bce:	881b      	ldrh	r3, [r3, #0]
    2bd0:	469a      	mov	sl, r3
    2bd2:	7c83      	ldrb	r3, [r0, #18]
    2bd4:	075b      	lsls	r3, r3, #29
    2bd6:	d46a      	bmi.n	2cae <udd_ep_transfer_process+0x106>
    2bd8:	68e3      	ldr	r3, [r4, #12]
    2bda:	4453      	add	r3, sl
    2bdc:	001e      	movs	r6, r3
    2bde:	60e3      	str	r3, [r4, #12]
    2be0:	68a3      	ldr	r3, [r4, #8]
    2be2:	429e      	cmp	r6, r3
    2be4:	d800      	bhi.n	2be8 <udd_ep_transfer_process+0x40>
    2be6:	e074      	b.n	2cd2 <udd_ep_transfer_process+0x12a>
    2be8:	60e3      	str	r3, [r4, #12]
    2bea:	7ca3      	ldrb	r3, [r4, #18]
    2bec:	2201      	movs	r2, #1
    2bee:	4393      	bics	r3, r2
    2bf0:	74a3      	strb	r3, [r4, #18]
    2bf2:	6823      	ldr	r3, [r4, #0]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d003      	beq.n	2c00 <udd_ep_transfer_process+0x58>
    2bf8:	68e1      	ldr	r1, [r4, #12]
    2bfa:	002a      	movs	r2, r5
    2bfc:	2000      	movs	r0, #0
    2bfe:	4798      	blx	r3
    2c00:	bc1c      	pop	{r2, r3, r4}
    2c02:	4690      	mov	r8, r2
    2c04:	4699      	mov	r9, r3
    2c06:	46a2      	mov	sl, r4
    2c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c0a:	0028      	movs	r0, r5
    2c0c:	4b4a      	ldr	r3, [pc, #296]	; (2d38 <udd_ep_transfer_process+0x190>)
    2c0e:	4798      	blx	r3
    2c10:	0004      	movs	r4, r0
    2c12:	270f      	movs	r7, #15
    2c14:	402f      	ands	r7, r5
    2c16:	8a03      	ldrh	r3, [r0, #16]
    2c18:	4698      	mov	r8, r3
    2c1a:	464b      	mov	r3, r9
    2c1c:	885e      	ldrh	r6, [r3, #2]
    2c1e:	68c3      	ldr	r3, [r0, #12]
    2c20:	469c      	mov	ip, r3
    2c22:	4466      	add	r6, ip
    2c24:	60c6      	str	r6, [r0, #12]
    2c26:	6881      	ldr	r1, [r0, #8]
    2c28:	428e      	cmp	r6, r1
    2c2a:	d025      	beq.n	2c78 <udd_ep_transfer_process+0xd0>
    2c2c:	1b8d      	subs	r5, r1, r6
    2c2e:	b2ad      	uxth	r5, r5
    2c30:	4b42      	ldr	r3, [pc, #264]	; (2d3c <udd_ep_transfer_process+0x194>)
    2c32:	429d      	cmp	r5, r3
    2c34:	d906      	bls.n	2c44 <udd_ep_transfer_process+0x9c>
    2c36:	001d      	movs	r5, r3
    2c38:	4641      	mov	r1, r8
    2c3a:	0018      	movs	r0, r3
    2c3c:	4b40      	ldr	r3, [pc, #256]	; (2d40 <udd_ep_transfer_process+0x198>)
    2c3e:	4798      	blx	r3
    2c40:	1a6d      	subs	r5, r5, r1
    2c42:	b2ad      	uxth	r5, r5
    2c44:	7ca2      	ldrb	r2, [r4, #18]
    2c46:	2300      	movs	r3, #0
    2c48:	0792      	lsls	r2, r2, #30
    2c4a:	d507      	bpl.n	2c5c <udd_ep_transfer_process+0xb4>
    2c4c:	4641      	mov	r1, r8
    2c4e:	0028      	movs	r0, r5
    2c50:	4b3c      	ldr	r3, [pc, #240]	; (2d44 <udd_ep_transfer_process+0x19c>)
    2c52:	4798      	blx	r3
    2c54:	b289      	uxth	r1, r1
    2c56:	424b      	negs	r3, r1
    2c58:	414b      	adcs	r3, r1
    2c5a:	b2db      	uxtb	r3, r3
    2c5c:	005b      	lsls	r3, r3, #1
    2c5e:	7ca2      	ldrb	r2, [r4, #18]
    2c60:	2102      	movs	r1, #2
    2c62:	438a      	bics	r2, r1
    2c64:	4313      	orrs	r3, r2
    2c66:	74a3      	strb	r3, [r4, #18]
    2c68:	6862      	ldr	r2, [r4, #4]
    2c6a:	1992      	adds	r2, r2, r6
    2c6c:	002b      	movs	r3, r5
    2c6e:	0039      	movs	r1, r7
    2c70:	4835      	ldr	r0, [pc, #212]	; (2d48 <udd_ep_transfer_process+0x1a0>)
    2c72:	4c36      	ldr	r4, [pc, #216]	; (2d4c <udd_ep_transfer_process+0x1a4>)
    2c74:	47a0      	blx	r4
    2c76:	e7c3      	b.n	2c00 <udd_ep_transfer_process+0x58>
    2c78:	7c83      	ldrb	r3, [r0, #18]
    2c7a:	079b      	lsls	r3, r3, #30
    2c7c:	d40b      	bmi.n	2c96 <udd_ep_transfer_process+0xee>
    2c7e:	7c83      	ldrb	r3, [r0, #18]
    2c80:	2201      	movs	r2, #1
    2c82:	4393      	bics	r3, r2
    2c84:	7483      	strb	r3, [r0, #18]
    2c86:	6803      	ldr	r3, [r0, #0]
    2c88:	2b00      	cmp	r3, #0
    2c8a:	d0b9      	beq.n	2c00 <udd_ep_transfer_process+0x58>
    2c8c:	002a      	movs	r2, r5
    2c8e:	0031      	movs	r1, r6
    2c90:	2000      	movs	r0, #0
    2c92:	4798      	blx	r3
    2c94:	e7b4      	b.n	2c00 <udd_ep_transfer_process+0x58>
    2c96:	7c83      	ldrb	r3, [r0, #18]
    2c98:	2202      	movs	r2, #2
    2c9a:	4393      	bics	r3, r2
    2c9c:	7483      	strb	r3, [r0, #18]
    2c9e:	6842      	ldr	r2, [r0, #4]
    2ca0:	1992      	adds	r2, r2, r6
    2ca2:	2300      	movs	r3, #0
    2ca4:	0039      	movs	r1, r7
    2ca6:	4828      	ldr	r0, [pc, #160]	; (2d48 <udd_ep_transfer_process+0x1a0>)
    2ca8:	4c28      	ldr	r4, [pc, #160]	; (2d4c <udd_ep_transfer_process+0x1a4>)
    2caa:	47a0      	blx	r4
    2cac:	e7a8      	b.n	2c00 <udd_ep_transfer_process+0x58>
    2cae:	6843      	ldr	r3, [r0, #4]
    2cb0:	68c2      	ldr	r2, [r0, #12]
    2cb2:	4694      	mov	ip, r2
    2cb4:	4463      	add	r3, ip
    2cb6:	001e      	movs	r6, r3
    2cb8:	4641      	mov	r1, r8
    2cba:	6880      	ldr	r0, [r0, #8]
    2cbc:	4b21      	ldr	r3, [pc, #132]	; (2d44 <udd_ep_transfer_process+0x19c>)
    2cbe:	4798      	blx	r3
    2cc0:	000a      	movs	r2, r1
    2cc2:	1e7b      	subs	r3, r7, #1
    2cc4:	019b      	lsls	r3, r3, #6
    2cc6:	4922      	ldr	r1, [pc, #136]	; (2d50 <udd_ep_transfer_process+0x1a8>)
    2cc8:	1859      	adds	r1, r3, r1
    2cca:	0030      	movs	r0, r6
    2ccc:	4b21      	ldr	r3, [pc, #132]	; (2d54 <udd_ep_transfer_process+0x1ac>)
    2cce:	4798      	blx	r3
    2cd0:	e782      	b.n	2bd8 <udd_ep_transfer_process+0x30>
    2cd2:	464a      	mov	r2, r9
    2cd4:	8892      	ldrh	r2, [r2, #4]
    2cd6:	4552      	cmp	r2, sl
    2cd8:	d000      	beq.n	2cdc <udd_ep_transfer_process+0x134>
    2cda:	e786      	b.n	2bea <udd_ep_transfer_process+0x42>
    2cdc:	429e      	cmp	r6, r3
    2cde:	d100      	bne.n	2ce2 <udd_ep_transfer_process+0x13a>
    2ce0:	e783      	b.n	2bea <udd_ep_transfer_process+0x42>
    2ce2:	1b9b      	subs	r3, r3, r6
    2ce4:	b29d      	uxth	r5, r3
    2ce6:	4b15      	ldr	r3, [pc, #84]	; (2d3c <udd_ep_transfer_process+0x194>)
    2ce8:	429d      	cmp	r5, r3
    2cea:	d916      	bls.n	2d1a <udd_ep_transfer_process+0x172>
    2cec:	001d      	movs	r5, r3
    2cee:	4641      	mov	r1, r8
    2cf0:	0018      	movs	r0, r3
    2cf2:	4b13      	ldr	r3, [pc, #76]	; (2d40 <udd_ep_transfer_process+0x198>)
    2cf4:	4798      	blx	r3
    2cf6:	1a6b      	subs	r3, r5, r1
    2cf8:	b29b      	uxth	r3, r3
    2cfa:	4598      	cmp	r8, r3
    2cfc:	d914      	bls.n	2d28 <udd_ep_transfer_process+0x180>
    2cfe:	7ca3      	ldrb	r3, [r4, #18]
    2d00:	2204      	movs	r2, #4
    2d02:	4313      	orrs	r3, r2
    2d04:	74a3      	strb	r3, [r4, #18]
    2d06:	1e7a      	subs	r2, r7, #1
    2d08:	0192      	lsls	r2, r2, #6
    2d0a:	4b11      	ldr	r3, [pc, #68]	; (2d50 <udd_ep_transfer_process+0x1a8>)
    2d0c:	18d2      	adds	r2, r2, r3
    2d0e:	4643      	mov	r3, r8
    2d10:	0039      	movs	r1, r7
    2d12:	480d      	ldr	r0, [pc, #52]	; (2d48 <udd_ep_transfer_process+0x1a0>)
    2d14:	4c10      	ldr	r4, [pc, #64]	; (2d58 <udd_ep_transfer_process+0x1b0>)
    2d16:	47a0      	blx	r4
    2d18:	e772      	b.n	2c00 <udd_ep_transfer_process+0x58>
    2d1a:	4641      	mov	r1, r8
    2d1c:	0028      	movs	r0, r5
    2d1e:	4b09      	ldr	r3, [pc, #36]	; (2d44 <udd_ep_transfer_process+0x19c>)
    2d20:	4798      	blx	r3
    2d22:	1a6b      	subs	r3, r5, r1
    2d24:	b29b      	uxth	r3, r3
    2d26:	e7e8      	b.n	2cfa <udd_ep_transfer_process+0x152>
    2d28:	6862      	ldr	r2, [r4, #4]
    2d2a:	1992      	adds	r2, r2, r6
    2d2c:	0039      	movs	r1, r7
    2d2e:	4806      	ldr	r0, [pc, #24]	; (2d48 <udd_ep_transfer_process+0x1a0>)
    2d30:	4c09      	ldr	r4, [pc, #36]	; (2d58 <udd_ep_transfer_process+0x1b0>)
    2d32:	47a0      	blx	r4
    2d34:	e764      	b.n	2c00 <udd_ep_transfer_process+0x58>
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	00002b85 	.word	0x00002b85
    2d3c:	00001fff 	.word	0x00001fff
    2d40:	00007e89 	.word	0x00007e89
    2d44:	00007cb5 	.word	0x00007cb5
    2d48:	2000095c 	.word	0x2000095c
    2d4c:	00003d45 	.word	0x00003d45
    2d50:	2000089c 	.word	0x2000089c
    2d54:	0000a595 	.word	0x0000a595
    2d58:	00003d99 	.word	0x00003d99

00002d5c <udd_ctrl_stall_data>:
    2d5c:	b510      	push	{r4, lr}
    2d5e:	2205      	movs	r2, #5
    2d60:	4b05      	ldr	r3, [pc, #20]	; (2d78 <udd_ctrl_stall_data+0x1c>)
    2d62:	701a      	strb	r2, [r3, #0]
    2d64:	4c05      	ldr	r4, [pc, #20]	; (2d7c <udd_ctrl_stall_data+0x20>)
    2d66:	2180      	movs	r1, #128	; 0x80
    2d68:	0020      	movs	r0, r4
    2d6a:	4b05      	ldr	r3, [pc, #20]	; (2d80 <udd_ctrl_stall_data+0x24>)
    2d6c:	4798      	blx	r3
    2d6e:	2100      	movs	r1, #0
    2d70:	0020      	movs	r0, r4
    2d72:	4b04      	ldr	r3, [pc, #16]	; (2d84 <udd_ctrl_stall_data+0x28>)
    2d74:	4798      	blx	r3
    2d76:	bd10      	pop	{r4, pc}
    2d78:	2000079a 	.word	0x2000079a
    2d7c:	2000095c 	.word	0x2000095c
    2d80:	00003c99 	.word	0x00003c99
    2d84:	00003cbf 	.word	0x00003cbf

00002d88 <_usb_device_lpm_suspend>:
    2d88:	b570      	push	{r4, r5, r6, lr}
    2d8a:	4c08      	ldr	r4, [pc, #32]	; (2dac <_usb_device_lpm_suspend+0x24>)
    2d8c:	2106      	movs	r1, #6
    2d8e:	0020      	movs	r0, r4
    2d90:	4d07      	ldr	r5, [pc, #28]	; (2db0 <_usb_device_lpm_suspend+0x28>)
    2d92:	47a8      	blx	r5
    2d94:	2104      	movs	r1, #4
    2d96:	0020      	movs	r0, r4
    2d98:	47a8      	blx	r5
    2d9a:	2102      	movs	r1, #2
    2d9c:	0020      	movs	r0, r4
    2d9e:	4b05      	ldr	r3, [pc, #20]	; (2db4 <_usb_device_lpm_suspend+0x2c>)
    2da0:	4798      	blx	r3
    2da2:	2002      	movs	r0, #2
    2da4:	4b04      	ldr	r3, [pc, #16]	; (2db8 <_usb_device_lpm_suspend+0x30>)
    2da6:	4798      	blx	r3
    2da8:	bd70      	pop	{r4, r5, r6, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	2000095c 	.word	0x2000095c
    2db0:	000037d9 	.word	0x000037d9
    2db4:	000037b9 	.word	0x000037b9
    2db8:	00002ac5 	.word	0x00002ac5

00002dbc <_usb_on_wakeup>:
    2dbc:	b570      	push	{r4, r5, r6, lr}
    2dbe:	4b12      	ldr	r3, [pc, #72]	; (2e08 <_usb_on_wakeup+0x4c>)
    2dc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2dc2:	069b      	lsls	r3, r3, #26
    2dc4:	d41a      	bmi.n	2dfc <_usb_on_wakeup+0x40>
    2dc6:	4910      	ldr	r1, [pc, #64]	; (2e08 <_usb_on_wakeup+0x4c>)
    2dc8:	22d0      	movs	r2, #208	; 0xd0
    2dca:	68cb      	ldr	r3, [r1, #12]
    2dcc:	4013      	ands	r3, r2
    2dce:	2bd0      	cmp	r3, #208	; 0xd0
    2dd0:	d1fb      	bne.n	2dca <_usb_on_wakeup+0xe>
    2dd2:	4c0e      	ldr	r4, [pc, #56]	; (2e0c <_usb_on_wakeup+0x50>)
    2dd4:	2102      	movs	r1, #2
    2dd6:	0020      	movs	r0, r4
    2dd8:	4b0d      	ldr	r3, [pc, #52]	; (2e10 <_usb_on_wakeup+0x54>)
    2dda:	4798      	blx	r3
    2ddc:	2104      	movs	r1, #4
    2dde:	0020      	movs	r0, r4
    2de0:	4d0c      	ldr	r5, [pc, #48]	; (2e14 <_usb_on_wakeup+0x58>)
    2de2:	47a8      	blx	r5
    2de4:	4a0c      	ldr	r2, [pc, #48]	; (2e18 <_usb_on_wakeup+0x5c>)
    2de6:	2106      	movs	r1, #6
    2de8:	0020      	movs	r0, r4
    2dea:	4b0c      	ldr	r3, [pc, #48]	; (2e1c <_usb_on_wakeup+0x60>)
    2dec:	4798      	blx	r3
    2dee:	2106      	movs	r1, #6
    2df0:	0020      	movs	r0, r4
    2df2:	47a8      	blx	r5
    2df4:	2003      	movs	r0, #3
    2df6:	4b0a      	ldr	r3, [pc, #40]	; (2e20 <_usb_on_wakeup+0x64>)
    2df8:	4798      	blx	r3
    2dfa:	bd70      	pop	{r4, r5, r6, pc}
    2dfc:	4902      	ldr	r1, [pc, #8]	; (2e08 <_usb_on_wakeup+0x4c>)
    2dfe:	2210      	movs	r2, #16
    2e00:	68cb      	ldr	r3, [r1, #12]
    2e02:	421a      	tst	r2, r3
    2e04:	d0fc      	beq.n	2e00 <_usb_on_wakeup+0x44>
    2e06:	e7e4      	b.n	2dd2 <_usb_on_wakeup+0x16>
    2e08:	40000800 	.word	0x40000800
    2e0c:	2000095c 	.word	0x2000095c
    2e10:	000037d9 	.word	0x000037d9
    2e14:	000037b9 	.word	0x000037b9
    2e18:	00002d89 	.word	0x00002d89
    2e1c:	00003795 	.word	0x00003795
    2e20:	00002ac5 	.word	0x00002ac5

00002e24 <_usb_on_suspend>:
    2e24:	b510      	push	{r4, lr}
    2e26:	4c06      	ldr	r4, [pc, #24]	; (2e40 <_usb_on_suspend+0x1c>)
    2e28:	2104      	movs	r1, #4
    2e2a:	0020      	movs	r0, r4
    2e2c:	4b05      	ldr	r3, [pc, #20]	; (2e44 <_usb_on_suspend+0x20>)
    2e2e:	4798      	blx	r3
    2e30:	2102      	movs	r1, #2
    2e32:	0020      	movs	r0, r4
    2e34:	4b04      	ldr	r3, [pc, #16]	; (2e48 <_usb_on_suspend+0x24>)
    2e36:	4798      	blx	r3
    2e38:	2001      	movs	r0, #1
    2e3a:	4b04      	ldr	r3, [pc, #16]	; (2e4c <_usb_on_suspend+0x28>)
    2e3c:	4798      	blx	r3
    2e3e:	bd10      	pop	{r4, pc}
    2e40:	2000095c 	.word	0x2000095c
    2e44:	000037d9 	.word	0x000037d9
    2e48:	000037b9 	.word	0x000037b9
    2e4c:	00002ac5 	.word	0x00002ac5

00002e50 <_usb_on_bus_reset>:
    2e50:	b530      	push	{r4, r5, lr}
    2e52:	b083      	sub	sp, #12
    2e54:	0004      	movs	r4, r0
    2e56:	4b1e      	ldr	r3, [pc, #120]	; (2ed0 <_usb_on_bus_reset+0x80>)
    2e58:	4798      	blx	r3
    2e5a:	2380      	movs	r3, #128	; 0x80
    2e5c:	6822      	ldr	r2, [r4, #0]
    2e5e:	7293      	strb	r3, [r2, #10]
    2e60:	ad01      	add	r5, sp, #4
    2e62:	0028      	movs	r0, r5
    2e64:	4b1b      	ldr	r3, [pc, #108]	; (2ed4 <_usb_on_bus_reset+0x84>)
    2e66:	4798      	blx	r3
    2e68:	2303      	movs	r3, #3
    2e6a:	706b      	strb	r3, [r5, #1]
    2e6c:	0029      	movs	r1, r5
    2e6e:	0020      	movs	r0, r4
    2e70:	4b19      	ldr	r3, [pc, #100]	; (2ed8 <_usb_on_bus_reset+0x88>)
    2e72:	4798      	blx	r3
    2e74:	4919      	ldr	r1, [pc, #100]	; (2edc <_usb_on_bus_reset+0x8c>)
    2e76:	0020      	movs	r0, r4
    2e78:	4b19      	ldr	r3, [pc, #100]	; (2ee0 <_usb_on_bus_reset+0x90>)
    2e7a:	4798      	blx	r3
    2e7c:	4b19      	ldr	r3, [pc, #100]	; (2ee4 <_usb_on_bus_reset+0x94>)
    2e7e:	2202      	movs	r2, #2
    2e80:	2100      	movs	r1, #0
    2e82:	0020      	movs	r0, r4
    2e84:	4d18      	ldr	r5, [pc, #96]	; (2ee8 <_usb_on_bus_reset+0x98>)
    2e86:	47a8      	blx	r5
    2e88:	4b18      	ldr	r3, [pc, #96]	; (2eec <_usb_on_bus_reset+0x9c>)
    2e8a:	2200      	movs	r2, #0
    2e8c:	2100      	movs	r1, #0
    2e8e:	0020      	movs	r0, r4
    2e90:	47a8      	blx	r5
    2e92:	4b17      	ldr	r3, [pc, #92]	; (2ef0 <_usb_on_bus_reset+0xa0>)
    2e94:	2201      	movs	r2, #1
    2e96:	2100      	movs	r1, #0
    2e98:	0020      	movs	r0, r4
    2e9a:	47a8      	blx	r5
    2e9c:	2202      	movs	r2, #2
    2e9e:	2100      	movs	r1, #0
    2ea0:	0020      	movs	r0, r4
    2ea2:	4d14      	ldr	r5, [pc, #80]	; (2ef4 <_usb_on_bus_reset+0xa4>)
    2ea4:	47a8      	blx	r5
    2ea6:	2200      	movs	r2, #0
    2ea8:	2100      	movs	r1, #0
    2eaa:	0020      	movs	r0, r4
    2eac:	47a8      	blx	r5
    2eae:	2201      	movs	r2, #1
    2eb0:	2100      	movs	r1, #0
    2eb2:	0020      	movs	r0, r4
    2eb4:	47a8      	blx	r5
    2eb6:	6821      	ldr	r1, [r4, #0]
    2eb8:	890b      	ldrh	r3, [r1, #8]
    2eba:	4a0f      	ldr	r2, [pc, #60]	; (2ef8 <_usb_on_bus_reset+0xa8>)
    2ebc:	401a      	ands	r2, r3
    2ebe:	2380      	movs	r3, #128	; 0x80
    2ec0:	00db      	lsls	r3, r3, #3
    2ec2:	4313      	orrs	r3, r2
    2ec4:	810b      	strh	r3, [r1, #8]
    2ec6:	2200      	movs	r2, #0
    2ec8:	4b0c      	ldr	r3, [pc, #48]	; (2efc <_usb_on_bus_reset+0xac>)
    2eca:	701a      	strb	r2, [r3, #0]
    2ecc:	b003      	add	sp, #12
    2ece:	bd30      	pop	{r4, r5, pc}
    2ed0:	00000b1d 	.word	0x00000b1d
    2ed4:	000039e5 	.word	0x000039e5
    2ed8:	000039f5 	.word	0x000039f5
    2edc:	20000adc 	.word	0x20000adc
    2ee0:	00003de9 	.word	0x00003de9
    2ee4:	00003039 	.word	0x00003039
    2ee8:	000037f5 	.word	0x000037f5
    2eec:	0000332d 	.word	0x0000332d
    2ef0:	00002f3d 	.word	0x00002f3d
    2ef4:	00003845 	.word	0x00003845
    2ef8:	fffff3ff 	.word	0xfffff3ff
    2efc:	2000079a 	.word	0x2000079a

00002f00 <udd_ctrl_send_zlp_in>:
    2f00:	b510      	push	{r4, lr}
    2f02:	2203      	movs	r2, #3
    2f04:	4b07      	ldr	r3, [pc, #28]	; (2f24 <udd_ctrl_send_zlp_in+0x24>)
    2f06:	701a      	strb	r2, [r3, #0]
    2f08:	4c07      	ldr	r4, [pc, #28]	; (2f28 <udd_ctrl_send_zlp_in+0x28>)
    2f0a:	4908      	ldr	r1, [pc, #32]	; (2f2c <udd_ctrl_send_zlp_in+0x2c>)
    2f0c:	0020      	movs	r0, r4
    2f0e:	4b08      	ldr	r3, [pc, #32]	; (2f30 <udd_ctrl_send_zlp_in+0x30>)
    2f10:	4798      	blx	r3
    2f12:	4b08      	ldr	r3, [pc, #32]	; (2f34 <udd_ctrl_send_zlp_in+0x34>)
    2f14:	689a      	ldr	r2, [r3, #8]
    2f16:	2300      	movs	r3, #0
    2f18:	2100      	movs	r1, #0
    2f1a:	0020      	movs	r0, r4
    2f1c:	4c06      	ldr	r4, [pc, #24]	; (2f38 <udd_ctrl_send_zlp_in+0x38>)
    2f1e:	47a0      	blx	r4
    2f20:	bd10      	pop	{r4, pc}
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	2000079a 	.word	0x2000079a
    2f28:	2000095c 	.word	0x2000095c
    2f2c:	20000adc 	.word	0x20000adc
    2f30:	00003de9 	.word	0x00003de9
    2f34:	20000ac4 	.word	0x20000ac4
    2f38:	00003d45 	.word	0x00003d45

00002f3c <_usb_ep0_on_tansfer_fail>:
    2f3c:	b510      	push	{r4, lr}
    2f3e:	7989      	ldrb	r1, [r1, #6]
    2f40:	b24b      	sxtb	r3, r1
    2f42:	2b00      	cmp	r3, #0
    2f44:	db06      	blt.n	2f54 <_usb_ep0_on_tansfer_fail+0x18>
    2f46:	4b0e      	ldr	r3, [pc, #56]	; (2f80 <_usb_ep0_on_tansfer_fail+0x44>)
    2f48:	781b      	ldrb	r3, [r3, #0]
    2f4a:	2b02      	cmp	r3, #2
    2f4c:	d00f      	beq.n	2f6e <_usb_ep0_on_tansfer_fail+0x32>
    2f4e:	2b03      	cmp	r3, #3
    2f50:	d011      	beq.n	2f76 <_usb_ep0_on_tansfer_fail+0x3a>
    2f52:	bd10      	pop	{r4, pc}
    2f54:	4b0a      	ldr	r3, [pc, #40]	; (2f80 <_usb_ep0_on_tansfer_fail+0x44>)
    2f56:	781b      	ldrb	r3, [r3, #0]
    2f58:	2b01      	cmp	r3, #1
    2f5a:	d005      	beq.n	2f68 <_usb_ep0_on_tansfer_fail+0x2c>
    2f5c:	2b04      	cmp	r3, #4
    2f5e:	d1f8      	bne.n	2f52 <_usb_ep0_on_tansfer_fail+0x16>
    2f60:	4808      	ldr	r0, [pc, #32]	; (2f84 <_usb_ep0_on_tansfer_fail+0x48>)
    2f62:	4b09      	ldr	r3, [pc, #36]	; (2f88 <_usb_ep0_on_tansfer_fail+0x4c>)
    2f64:	4798      	blx	r3
    2f66:	e7f4      	b.n	2f52 <_usb_ep0_on_tansfer_fail+0x16>
    2f68:	4b08      	ldr	r3, [pc, #32]	; (2f8c <_usb_ep0_on_tansfer_fail+0x50>)
    2f6a:	4798      	blx	r3
    2f6c:	e7f1      	b.n	2f52 <_usb_ep0_on_tansfer_fail+0x16>
    2f6e:	2204      	movs	r2, #4
    2f70:	4b03      	ldr	r3, [pc, #12]	; (2f80 <_usb_ep0_on_tansfer_fail+0x44>)
    2f72:	701a      	strb	r2, [r3, #0]
    2f74:	e7ed      	b.n	2f52 <_usb_ep0_on_tansfer_fail+0x16>
    2f76:	4803      	ldr	r0, [pc, #12]	; (2f84 <_usb_ep0_on_tansfer_fail+0x48>)
    2f78:	4b03      	ldr	r3, [pc, #12]	; (2f88 <_usb_ep0_on_tansfer_fail+0x4c>)
    2f7a:	4798      	blx	r3
    2f7c:	e7e9      	b.n	2f52 <_usb_ep0_on_tansfer_fail+0x16>
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	2000079a 	.word	0x2000079a
    2f84:	2000095c 	.word	0x2000095c
    2f88:	00003c99 	.word	0x00003c99
    2f8c:	00002f01 	.word	0x00002f01

00002f90 <udd_ctrl_in_sent>:
    2f90:	b570      	push	{r4, r5, r6, lr}
    2f92:	4b20      	ldr	r3, [pc, #128]	; (3014 <udd_ctrl_in_sent+0x84>)
    2f94:	881b      	ldrh	r3, [r3, #0]
    2f96:	4a20      	ldr	r2, [pc, #128]	; (3018 <udd_ctrl_in_sent+0x88>)
    2f98:	8994      	ldrh	r4, [r2, #12]
    2f9a:	1ae4      	subs	r4, r4, r3
    2f9c:	b2a4      	uxth	r4, r4
    2f9e:	2c00      	cmp	r4, #0
    2fa0:	d118      	bne.n	2fd4 <udd_ctrl_in_sent+0x44>
    2fa2:	4a1e      	ldr	r2, [pc, #120]	; (301c <udd_ctrl_in_sent+0x8c>)
    2fa4:	8811      	ldrh	r1, [r2, #0]
    2fa6:	185b      	adds	r3, r3, r1
    2fa8:	b29b      	uxth	r3, r3
    2faa:	8013      	strh	r3, [r2, #0]
    2fac:	4a1a      	ldr	r2, [pc, #104]	; (3018 <udd_ctrl_in_sent+0x88>)
    2fae:	88d2      	ldrh	r2, [r2, #6]
    2fb0:	429a      	cmp	r2, r3
    2fb2:	d023      	beq.n	2ffc <udd_ctrl_in_sent+0x6c>
    2fb4:	4b1a      	ldr	r3, [pc, #104]	; (3020 <udd_ctrl_in_sent+0x90>)
    2fb6:	781b      	ldrb	r3, [r3, #0]
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d11f      	bne.n	2ffc <udd_ctrl_in_sent+0x6c>
    2fbc:	4b16      	ldr	r3, [pc, #88]	; (3018 <udd_ctrl_in_sent+0x88>)
    2fbe:	695b      	ldr	r3, [r3, #20]
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d023      	beq.n	300c <udd_ctrl_in_sent+0x7c>
    2fc4:	4798      	blx	r3
    2fc6:	2800      	cmp	r0, #0
    2fc8:	d020      	beq.n	300c <udd_ctrl_in_sent+0x7c>
    2fca:	2200      	movs	r2, #0
    2fcc:	4b11      	ldr	r3, [pc, #68]	; (3014 <udd_ctrl_in_sent+0x84>)
    2fce:	801a      	strh	r2, [r3, #0]
    2fd0:	4b11      	ldr	r3, [pc, #68]	; (3018 <udd_ctrl_in_sent+0x88>)
    2fd2:	899c      	ldrh	r4, [r3, #12]
    2fd4:	2c3f      	cmp	r4, #63	; 0x3f
    2fd6:	d919      	bls.n	300c <udd_ctrl_in_sent+0x7c>
    2fd8:	2200      	movs	r2, #0
    2fda:	4b11      	ldr	r3, [pc, #68]	; (3020 <udd_ctrl_in_sent+0x90>)
    2fdc:	701a      	strb	r2, [r3, #0]
    2fde:	2440      	movs	r4, #64	; 0x40
    2fe0:	4d0c      	ldr	r5, [pc, #48]	; (3014 <udd_ctrl_in_sent+0x84>)
    2fe2:	882b      	ldrh	r3, [r5, #0]
    2fe4:	4a0c      	ldr	r2, [pc, #48]	; (3018 <udd_ctrl_in_sent+0x88>)
    2fe6:	6892      	ldr	r2, [r2, #8]
    2fe8:	18d2      	adds	r2, r2, r3
    2fea:	0023      	movs	r3, r4
    2fec:	2100      	movs	r1, #0
    2fee:	480d      	ldr	r0, [pc, #52]	; (3024 <udd_ctrl_in_sent+0x94>)
    2ff0:	4e0d      	ldr	r6, [pc, #52]	; (3028 <udd_ctrl_in_sent+0x98>)
    2ff2:	47b0      	blx	r6
    2ff4:	882b      	ldrh	r3, [r5, #0]
    2ff6:	18e4      	adds	r4, r4, r3
    2ff8:	802c      	strh	r4, [r5, #0]
    2ffa:	bd70      	pop	{r4, r5, r6, pc}
    2ffc:	2204      	movs	r2, #4
    2ffe:	4b0b      	ldr	r3, [pc, #44]	; (302c <udd_ctrl_in_sent+0x9c>)
    3000:	701a      	strb	r2, [r3, #0]
    3002:	490b      	ldr	r1, [pc, #44]	; (3030 <udd_ctrl_in_sent+0xa0>)
    3004:	4807      	ldr	r0, [pc, #28]	; (3024 <udd_ctrl_in_sent+0x94>)
    3006:	4b0b      	ldr	r3, [pc, #44]	; (3034 <udd_ctrl_in_sent+0xa4>)
    3008:	4798      	blx	r3
    300a:	e7f6      	b.n	2ffa <udd_ctrl_in_sent+0x6a>
    300c:	2201      	movs	r2, #1
    300e:	4b04      	ldr	r3, [pc, #16]	; (3020 <udd_ctrl_in_sent+0x90>)
    3010:	701a      	strb	r2, [r3, #0]
    3012:	e7e5      	b.n	2fe0 <udd_ctrl_in_sent+0x50>
    3014:	20000796 	.word	0x20000796
    3018:	20000ac4 	.word	0x20000ac4
    301c:	20000798 	.word	0x20000798
    3020:	20000794 	.word	0x20000794
    3024:	2000095c 	.word	0x2000095c
    3028:	00003d45 	.word	0x00003d45
    302c:	2000079a 	.word	0x2000079a
    3030:	20000adc 	.word	0x20000adc
    3034:	00003de9 	.word	0x00003de9

00003038 <_usb_ep0_on_setup>:
    3038:	b510      	push	{r4, lr}
    303a:	000c      	movs	r4, r1
    303c:	4b2c      	ldr	r3, [pc, #176]	; (30f0 <_usb_ep0_on_setup+0xb8>)
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	2b00      	cmp	r3, #0
    3042:	d007      	beq.n	3054 <_usb_ep0_on_setup+0x1c>
    3044:	4b2b      	ldr	r3, [pc, #172]	; (30f4 <_usb_ep0_on_setup+0xbc>)
    3046:	691b      	ldr	r3, [r3, #16]
    3048:	2b00      	cmp	r3, #0
    304a:	d000      	beq.n	304e <_usb_ep0_on_setup+0x16>
    304c:	4798      	blx	r3
    304e:	2200      	movs	r2, #0
    3050:	4b27      	ldr	r3, [pc, #156]	; (30f0 <_usb_ep0_on_setup+0xb8>)
    3052:	701a      	strb	r2, [r3, #0]
    3054:	8823      	ldrh	r3, [r4, #0]
    3056:	2b08      	cmp	r3, #8
    3058:	d002      	beq.n	3060 <_usb_ep0_on_setup+0x28>
    305a:	4b27      	ldr	r3, [pc, #156]	; (30f8 <_usb_ep0_on_setup+0xc0>)
    305c:	4798      	blx	r3
    305e:	bd10      	pop	{r4, pc}
    3060:	4a24      	ldr	r2, [pc, #144]	; (30f4 <_usb_ep0_on_setup+0xbc>)
    3062:	4b26      	ldr	r3, [pc, #152]	; (30fc <_usb_ep0_on_setup+0xc4>)
    3064:	7819      	ldrb	r1, [r3, #0]
    3066:	7011      	strb	r1, [r2, #0]
    3068:	7859      	ldrb	r1, [r3, #1]
    306a:	7051      	strb	r1, [r2, #1]
    306c:	78d8      	ldrb	r0, [r3, #3]
    306e:	0200      	lsls	r0, r0, #8
    3070:	7899      	ldrb	r1, [r3, #2]
    3072:	1809      	adds	r1, r1, r0
    3074:	8051      	strh	r1, [r2, #2]
    3076:	7958      	ldrb	r0, [r3, #5]
    3078:	0200      	lsls	r0, r0, #8
    307a:	7919      	ldrb	r1, [r3, #4]
    307c:	1809      	adds	r1, r1, r0
    307e:	8091      	strh	r1, [r2, #4]
    3080:	79d9      	ldrb	r1, [r3, #7]
    3082:	0209      	lsls	r1, r1, #8
    3084:	799b      	ldrb	r3, [r3, #6]
    3086:	185b      	adds	r3, r3, r1
    3088:	80d3      	strh	r3, [r2, #6]
    308a:	4b1d      	ldr	r3, [pc, #116]	; (3100 <_usb_ep0_on_setup+0xc8>)
    308c:	4798      	blx	r3
    308e:	2800      	cmp	r0, #0
    3090:	d016      	beq.n	30c0 <_usb_ep0_on_setup+0x88>
    3092:	4b18      	ldr	r3, [pc, #96]	; (30f4 <_usb_ep0_on_setup+0xbc>)
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	2b7f      	cmp	r3, #127	; 0x7f
    3098:	d815      	bhi.n	30c6 <_usb_ep0_on_setup+0x8e>
    309a:	4b16      	ldr	r3, [pc, #88]	; (30f4 <_usb_ep0_on_setup+0xbc>)
    309c:	88db      	ldrh	r3, [r3, #6]
    309e:	2b00      	cmp	r3, #0
    30a0:	d022      	beq.n	30e8 <_usb_ep0_on_setup+0xb0>
    30a2:	2300      	movs	r3, #0
    30a4:	4a17      	ldr	r2, [pc, #92]	; (3104 <_usb_ep0_on_setup+0xcc>)
    30a6:	8013      	strh	r3, [r2, #0]
    30a8:	4a17      	ldr	r2, [pc, #92]	; (3108 <_usb_ep0_on_setup+0xd0>)
    30aa:	8013      	strh	r3, [r2, #0]
    30ac:	2201      	movs	r2, #1
    30ae:	4b10      	ldr	r3, [pc, #64]	; (30f0 <_usb_ep0_on_setup+0xb8>)
    30b0:	701a      	strb	r2, [r3, #0]
    30b2:	2340      	movs	r3, #64	; 0x40
    30b4:	4a11      	ldr	r2, [pc, #68]	; (30fc <_usb_ep0_on_setup+0xc4>)
    30b6:	2100      	movs	r1, #0
    30b8:	4814      	ldr	r0, [pc, #80]	; (310c <_usb_ep0_on_setup+0xd4>)
    30ba:	4c15      	ldr	r4, [pc, #84]	; (3110 <_usb_ep0_on_setup+0xd8>)
    30bc:	47a0      	blx	r4
    30be:	e7ce      	b.n	305e <_usb_ep0_on_setup+0x26>
    30c0:	4b0d      	ldr	r3, [pc, #52]	; (30f8 <_usb_ep0_on_setup+0xc0>)
    30c2:	4798      	blx	r3
    30c4:	e7cb      	b.n	305e <_usb_ep0_on_setup+0x26>
    30c6:	2300      	movs	r3, #0
    30c8:	4a0e      	ldr	r2, [pc, #56]	; (3104 <_usb_ep0_on_setup+0xcc>)
    30ca:	8013      	strh	r3, [r2, #0]
    30cc:	4a0e      	ldr	r2, [pc, #56]	; (3108 <_usb_ep0_on_setup+0xd0>)
    30ce:	8013      	strh	r3, [r2, #0]
    30d0:	2202      	movs	r2, #2
    30d2:	4b07      	ldr	r3, [pc, #28]	; (30f0 <_usb_ep0_on_setup+0xb8>)
    30d4:	701a      	strb	r2, [r3, #0]
    30d6:	2340      	movs	r3, #64	; 0x40
    30d8:	4a08      	ldr	r2, [pc, #32]	; (30fc <_usb_ep0_on_setup+0xc4>)
    30da:	2100      	movs	r1, #0
    30dc:	480b      	ldr	r0, [pc, #44]	; (310c <_usb_ep0_on_setup+0xd4>)
    30de:	4c0c      	ldr	r4, [pc, #48]	; (3110 <_usb_ep0_on_setup+0xd8>)
    30e0:	47a0      	blx	r4
    30e2:	4b0c      	ldr	r3, [pc, #48]	; (3114 <_usb_ep0_on_setup+0xdc>)
    30e4:	4798      	blx	r3
    30e6:	e7ba      	b.n	305e <_usb_ep0_on_setup+0x26>
    30e8:	4b0b      	ldr	r3, [pc, #44]	; (3118 <_usb_ep0_on_setup+0xe0>)
    30ea:	4798      	blx	r3
    30ec:	e7b7      	b.n	305e <_usb_ep0_on_setup+0x26>
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	2000079a 	.word	0x2000079a
    30f4:	20000ac4 	.word	0x20000ac4
    30f8:	00002d5d 	.word	0x00002d5d
    30fc:	20000adc 	.word	0x20000adc
    3100:	00000bad 	.word	0x00000bad
    3104:	20000798 	.word	0x20000798
    3108:	20000796 	.word	0x20000796
    310c:	2000095c 	.word	0x2000095c
    3110:	00003d99 	.word	0x00003d99
    3114:	00002f91 	.word	0x00002f91
    3118:	00002f01 	.word	0x00002f01

0000311c <_usb_on_sof_notify>:
    311c:	b510      	push	{r4, lr}
    311e:	4b01      	ldr	r3, [pc, #4]	; (3124 <_usb_on_sof_notify+0x8>)
    3120:	4798      	blx	r3
    3122:	bd10      	pop	{r4, pc}
    3124:	00000b69 	.word	0x00000b69

00003128 <udd_ep_abort>:
    3128:	b510      	push	{r4, lr}
    312a:	0004      	movs	r4, r0
    312c:	0001      	movs	r1, r0
    312e:	480a      	ldr	r0, [pc, #40]	; (3158 <udd_ep_abort+0x30>)
    3130:	4b0a      	ldr	r3, [pc, #40]	; (315c <udd_ep_abort+0x34>)
    3132:	4798      	blx	r3
    3134:	0020      	movs	r0, r4
    3136:	4b0a      	ldr	r3, [pc, #40]	; (3160 <udd_ep_abort+0x38>)
    3138:	4798      	blx	r3
    313a:	7c83      	ldrb	r3, [r0, #18]
    313c:	07db      	lsls	r3, r3, #31
    313e:	d50a      	bpl.n	3156 <udd_ep_abort+0x2e>
    3140:	7c83      	ldrb	r3, [r0, #18]
    3142:	2201      	movs	r2, #1
    3144:	4393      	bics	r3, r2
    3146:	7483      	strb	r3, [r0, #18]
    3148:	6803      	ldr	r3, [r0, #0]
    314a:	2b00      	cmp	r3, #0
    314c:	d003      	beq.n	3156 <udd_ep_abort+0x2e>
    314e:	68c1      	ldr	r1, [r0, #12]
    3150:	0022      	movs	r2, r4
    3152:	2001      	movs	r0, #1
    3154:	4798      	blx	r3
    3156:	bd10      	pop	{r4, pc}
    3158:	2000095c 	.word	0x2000095c
    315c:	00003c39 	.word	0x00003c39
    3160:	00002b85 	.word	0x00002b85

00003164 <udd_is_high_speed>:
    3164:	2000      	movs	r0, #0
    3166:	4770      	bx	lr

00003168 <udd_get_frame_number>:
    3168:	4b02      	ldr	r3, [pc, #8]	; (3174 <udd_get_frame_number+0xc>)
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	8a18      	ldrh	r0, [r3, #16]
    316e:	0480      	lsls	r0, r0, #18
    3170:	0d40      	lsrs	r0, r0, #21
    3172:	4770      	bx	lr
    3174:	2000095c 	.word	0x2000095c

00003178 <udd_get_micro_frame_number>:
    3178:	4b02      	ldr	r3, [pc, #8]	; (3184 <udd_get_micro_frame_number+0xc>)
    317a:	681b      	ldr	r3, [r3, #0]
    317c:	8a18      	ldrh	r0, [r3, #16]
    317e:	b280      	uxth	r0, r0
    3180:	4770      	bx	lr
    3182:	46c0      	nop			; (mov r8, r8)
    3184:	2000095c 	.word	0x2000095c

00003188 <udd_ep_free>:
    3188:	b570      	push	{r4, r5, r6, lr}
    318a:	b082      	sub	sp, #8
    318c:	0004      	movs	r4, r0
    318e:	ad01      	add	r5, sp, #4
    3190:	0028      	movs	r0, r5
    3192:	4b0d      	ldr	r3, [pc, #52]	; (31c8 <udd_ep_free+0x40>)
    3194:	4798      	blx	r3
    3196:	0020      	movs	r0, r4
    3198:	4b0c      	ldr	r3, [pc, #48]	; (31cc <udd_ep_free+0x44>)
    319a:	4798      	blx	r3
    319c:	702c      	strb	r4, [r5, #0]
    319e:	2300      	movs	r3, #0
    31a0:	70eb      	strb	r3, [r5, #3]
    31a2:	4e0b      	ldr	r6, [pc, #44]	; (31d0 <udd_ep_free+0x48>)
    31a4:	0029      	movs	r1, r5
    31a6:	0030      	movs	r0, r6
    31a8:	4b0a      	ldr	r3, [pc, #40]	; (31d4 <udd_ep_free+0x4c>)
    31aa:	4798      	blx	r3
    31ac:	210f      	movs	r1, #15
    31ae:	4021      	ands	r1, r4
    31b0:	2200      	movs	r2, #0
    31b2:	0030      	movs	r0, r6
    31b4:	4b08      	ldr	r3, [pc, #32]	; (31d8 <udd_ep_free+0x50>)
    31b6:	4798      	blx	r3
    31b8:	2200      	movs	r2, #0
    31ba:	0021      	movs	r1, r4
    31bc:	0030      	movs	r0, r6
    31be:	4b07      	ldr	r3, [pc, #28]	; (31dc <udd_ep_free+0x54>)
    31c0:	4798      	blx	r3
    31c2:	b002      	add	sp, #8
    31c4:	bd70      	pop	{r4, r5, r6, pc}
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	000039e5 	.word	0x000039e5
    31cc:	00003129 	.word	0x00003129
    31d0:	2000095c 	.word	0x2000095c
    31d4:	000039f5 	.word	0x000039f5
    31d8:	0000381d 	.word	0x0000381d
    31dc:	00003915 	.word	0x00003915

000031e0 <udd_ep_alloc>:
    31e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31e2:	b083      	sub	sp, #12
    31e4:	0005      	movs	r5, r0
    31e6:	000f      	movs	r7, r1
    31e8:	0014      	movs	r4, r2
    31ea:	ae01      	add	r6, sp, #4
    31ec:	0030      	movs	r0, r6
    31ee:	4b36      	ldr	r3, [pc, #216]	; (32c8 <udd_ep_alloc+0xe8>)
    31f0:	4798      	blx	r3
    31f2:	7035      	strb	r5, [r6, #0]
    31f4:	2c08      	cmp	r4, #8
    31f6:	d813      	bhi.n	3220 <udd_ep_alloc+0x40>
    31f8:	2200      	movs	r2, #0
    31fa:	ab01      	add	r3, sp, #4
    31fc:	705a      	strb	r2, [r3, #1]
    31fe:	0028      	movs	r0, r5
    3200:	4b32      	ldr	r3, [pc, #200]	; (32cc <udd_ep_alloc+0xec>)
    3202:	4798      	blx	r3
    3204:	8204      	strh	r4, [r0, #16]
    3206:	2103      	movs	r1, #3
    3208:	4039      	ands	r1, r7
    320a:	2901      	cmp	r1, #1
    320c:	d038      	beq.n	3280 <udd_ep_alloc+0xa0>
    320e:	2902      	cmp	r1, #2
    3210:	d043      	beq.n	329a <udd_ep_alloc+0xba>
    3212:	2300      	movs	r3, #0
    3214:	2903      	cmp	r1, #3
    3216:	d13d      	bne.n	3294 <udd_ep_alloc+0xb4>
    3218:	2204      	movs	r2, #4
    321a:	ab01      	add	r3, sp, #4
    321c:	70da      	strb	r2, [r3, #3]
    321e:	e032      	b.n	3286 <udd_ep_alloc+0xa6>
    3220:	2c10      	cmp	r4, #16
    3222:	d803      	bhi.n	322c <udd_ep_alloc+0x4c>
    3224:	2201      	movs	r2, #1
    3226:	ab01      	add	r3, sp, #4
    3228:	705a      	strb	r2, [r3, #1]
    322a:	e7e8      	b.n	31fe <udd_ep_alloc+0x1e>
    322c:	2c20      	cmp	r4, #32
    322e:	d803      	bhi.n	3238 <udd_ep_alloc+0x58>
    3230:	2202      	movs	r2, #2
    3232:	ab01      	add	r3, sp, #4
    3234:	705a      	strb	r2, [r3, #1]
    3236:	e7e2      	b.n	31fe <udd_ep_alloc+0x1e>
    3238:	2c40      	cmp	r4, #64	; 0x40
    323a:	d803      	bhi.n	3244 <udd_ep_alloc+0x64>
    323c:	2203      	movs	r2, #3
    323e:	ab01      	add	r3, sp, #4
    3240:	705a      	strb	r2, [r3, #1]
    3242:	e7dc      	b.n	31fe <udd_ep_alloc+0x1e>
    3244:	2c80      	cmp	r4, #128	; 0x80
    3246:	d803      	bhi.n	3250 <udd_ep_alloc+0x70>
    3248:	2204      	movs	r2, #4
    324a:	ab01      	add	r3, sp, #4
    324c:	705a      	strb	r2, [r3, #1]
    324e:	e7d6      	b.n	31fe <udd_ep_alloc+0x1e>
    3250:	2380      	movs	r3, #128	; 0x80
    3252:	005b      	lsls	r3, r3, #1
    3254:	429c      	cmp	r4, r3
    3256:	d803      	bhi.n	3260 <udd_ep_alloc+0x80>
    3258:	2205      	movs	r2, #5
    325a:	ab01      	add	r3, sp, #4
    325c:	705a      	strb	r2, [r3, #1]
    325e:	e7ce      	b.n	31fe <udd_ep_alloc+0x1e>
    3260:	2380      	movs	r3, #128	; 0x80
    3262:	009b      	lsls	r3, r3, #2
    3264:	429c      	cmp	r4, r3
    3266:	d803      	bhi.n	3270 <udd_ep_alloc+0x90>
    3268:	2206      	movs	r2, #6
    326a:	ab01      	add	r3, sp, #4
    326c:	705a      	strb	r2, [r3, #1]
    326e:	e7c6      	b.n	31fe <udd_ep_alloc+0x1e>
    3270:	4a17      	ldr	r2, [pc, #92]	; (32d0 <udd_ep_alloc+0xf0>)
    3272:	2300      	movs	r3, #0
    3274:	4294      	cmp	r4, r2
    3276:	d80d      	bhi.n	3294 <udd_ep_alloc+0xb4>
    3278:	2207      	movs	r2, #7
    327a:	ab01      	add	r3, sp, #4
    327c:	705a      	strb	r2, [r3, #1]
    327e:	e7be      	b.n	31fe <udd_ep_alloc+0x1e>
    3280:	2202      	movs	r2, #2
    3282:	ab01      	add	r3, sp, #4
    3284:	70da      	strb	r2, [r3, #3]
    3286:	a901      	add	r1, sp, #4
    3288:	4812      	ldr	r0, [pc, #72]	; (32d4 <udd_ep_alloc+0xf4>)
    328a:	4b13      	ldr	r3, [pc, #76]	; (32d8 <udd_ep_alloc+0xf8>)
    328c:	4798      	blx	r3
    328e:	2300      	movs	r3, #0
    3290:	2800      	cmp	r0, #0
    3292:	d006      	beq.n	32a2 <udd_ep_alloc+0xc2>
    3294:	0018      	movs	r0, r3
    3296:	b003      	add	sp, #12
    3298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    329a:	2203      	movs	r2, #3
    329c:	ab01      	add	r3, sp, #4
    329e:	70da      	strb	r2, [r3, #3]
    32a0:	e7f1      	b.n	3286 <udd_ep_alloc+0xa6>
    32a2:	210f      	movs	r1, #15
    32a4:	4029      	ands	r1, r5
    32a6:	4c0b      	ldr	r4, [pc, #44]	; (32d4 <udd_ep_alloc+0xf4>)
    32a8:	4b0c      	ldr	r3, [pc, #48]	; (32dc <udd_ep_alloc+0xfc>)
    32aa:	2200      	movs	r2, #0
    32ac:	0020      	movs	r0, r4
    32ae:	4e0c      	ldr	r6, [pc, #48]	; (32e0 <udd_ep_alloc+0x100>)
    32b0:	47b0      	blx	r6
    32b2:	2200      	movs	r2, #0
    32b4:	0029      	movs	r1, r5
    32b6:	0020      	movs	r0, r4
    32b8:	4e0a      	ldr	r6, [pc, #40]	; (32e4 <udd_ep_alloc+0x104>)
    32ba:	47b0      	blx	r6
    32bc:	2201      	movs	r2, #1
    32be:	0029      	movs	r1, r5
    32c0:	0020      	movs	r0, r4
    32c2:	47b0      	blx	r6
    32c4:	2301      	movs	r3, #1
    32c6:	e7e5      	b.n	3294 <udd_ep_alloc+0xb4>
    32c8:	000039e5 	.word	0x000039e5
    32cc:	00002b85 	.word	0x00002b85
    32d0:	000003ff 	.word	0x000003ff
    32d4:	2000095c 	.word	0x2000095c
    32d8:	000039f5 	.word	0x000039f5
    32dc:	00002ba9 	.word	0x00002ba9
    32e0:	000037f5 	.word	0x000037f5
    32e4:	00003845 	.word	0x00003845

000032e8 <udd_ep_is_halted>:
    32e8:	b510      	push	{r4, lr}
    32ea:	0001      	movs	r1, r0
    32ec:	4801      	ldr	r0, [pc, #4]	; (32f4 <udd_ep_is_halted+0xc>)
    32ee:	4b02      	ldr	r3, [pc, #8]	; (32f8 <udd_ep_is_halted+0x10>)
    32f0:	4798      	blx	r3
    32f2:	bd10      	pop	{r4, pc}
    32f4:	2000095c 	.word	0x2000095c
    32f8:	00003c6f 	.word	0x00003c6f

000032fc <udd_ep_set_halt>:
    32fc:	b510      	push	{r4, lr}
    32fe:	0004      	movs	r4, r0
    3300:	230f      	movs	r3, #15
    3302:	4003      	ands	r3, r0
    3304:	2000      	movs	r0, #0
    3306:	2b03      	cmp	r3, #3
    3308:	d900      	bls.n	330c <udd_ep_set_halt+0x10>
    330a:	bd10      	pop	{r4, pc}
    330c:	0021      	movs	r1, r4
    330e:	4804      	ldr	r0, [pc, #16]	; (3320 <udd_ep_set_halt+0x24>)
    3310:	4b04      	ldr	r3, [pc, #16]	; (3324 <udd_ep_set_halt+0x28>)
    3312:	4798      	blx	r3
    3314:	0020      	movs	r0, r4
    3316:	4b04      	ldr	r3, [pc, #16]	; (3328 <udd_ep_set_halt+0x2c>)
    3318:	4798      	blx	r3
    331a:	2001      	movs	r0, #1
    331c:	e7f5      	b.n	330a <udd_ep_set_halt+0xe>
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	2000095c 	.word	0x2000095c
    3324:	00003c99 	.word	0x00003c99
    3328:	00003129 	.word	0x00003129

0000332c <_usb_ep0_on_tansfer_ok>:
    332c:	b570      	push	{r4, r5, r6, lr}
    332e:	4b34      	ldr	r3, [pc, #208]	; (3400 <_usb_ep0_on_tansfer_ok+0xd4>)
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	2b01      	cmp	r3, #1
    3334:	d00a      	beq.n	334c <_usb_ep0_on_tansfer_ok+0x20>
    3336:	2b02      	cmp	r3, #2
    3338:	d05f      	beq.n	33fa <_usb_ep0_on_tansfer_ok+0xce>
    333a:	4b32      	ldr	r3, [pc, #200]	; (3404 <_usb_ep0_on_tansfer_ok+0xd8>)
    333c:	691b      	ldr	r3, [r3, #16]
    333e:	2b00      	cmp	r3, #0
    3340:	d000      	beq.n	3344 <_usb_ep0_on_tansfer_ok+0x18>
    3342:	4798      	blx	r3
    3344:	2200      	movs	r2, #0
    3346:	4b2e      	ldr	r3, [pc, #184]	; (3400 <_usb_ep0_on_tansfer_ok+0xd4>)
    3348:	701a      	strb	r2, [r3, #0]
    334a:	bd70      	pop	{r4, r5, r6, pc}
    334c:	880d      	ldrh	r5, [r1, #0]
    334e:	4b2d      	ldr	r3, [pc, #180]	; (3404 <_usb_ep0_on_tansfer_ok+0xd8>)
    3350:	899b      	ldrh	r3, [r3, #12]
    3352:	4a2d      	ldr	r2, [pc, #180]	; (3408 <_usb_ep0_on_tansfer_ok+0xdc>)
    3354:	8814      	ldrh	r4, [r2, #0]
    3356:	1962      	adds	r2, r4, r5
    3358:	4293      	cmp	r3, r2
    335a:	da01      	bge.n	3360 <_usb_ep0_on_tansfer_ok+0x34>
    335c:	1b1d      	subs	r5, r3, r4
    335e:	b2ad      	uxth	r5, r5
    3360:	4b28      	ldr	r3, [pc, #160]	; (3404 <_usb_ep0_on_tansfer_ok+0xd8>)
    3362:	6898      	ldr	r0, [r3, #8]
    3364:	1900      	adds	r0, r0, r4
    3366:	002a      	movs	r2, r5
    3368:	4928      	ldr	r1, [pc, #160]	; (340c <_usb_ep0_on_tansfer_ok+0xe0>)
    336a:	4b29      	ldr	r3, [pc, #164]	; (3410 <_usb_ep0_on_tansfer_ok+0xe4>)
    336c:	4798      	blx	r3
    336e:	1964      	adds	r4, r4, r5
    3370:	b2a4      	uxth	r4, r4
    3372:	4b25      	ldr	r3, [pc, #148]	; (3408 <_usb_ep0_on_tansfer_ok+0xdc>)
    3374:	801c      	strh	r4, [r3, #0]
    3376:	2d40      	cmp	r5, #64	; 0x40
    3378:	d00a      	beq.n	3390 <_usb_ep0_on_tansfer_ok+0x64>
    337a:	4b22      	ldr	r3, [pc, #136]	; (3404 <_usb_ep0_on_tansfer_ok+0xd8>)
    337c:	819c      	strh	r4, [r3, #12]
    337e:	695b      	ldr	r3, [r3, #20]
    3380:	2b00      	cmp	r3, #0
    3382:	d002      	beq.n	338a <_usb_ep0_on_tansfer_ok+0x5e>
    3384:	4798      	blx	r3
    3386:	2800      	cmp	r0, #0
    3388:	d014      	beq.n	33b4 <_usb_ep0_on_tansfer_ok+0x88>
    338a:	4b22      	ldr	r3, [pc, #136]	; (3414 <_usb_ep0_on_tansfer_ok+0xe8>)
    338c:	4798      	blx	r3
    338e:	e7dc      	b.n	334a <_usb_ep0_on_tansfer_ok+0x1e>
    3390:	4b1c      	ldr	r3, [pc, #112]	; (3404 <_usb_ep0_on_tansfer_ok+0xd8>)
    3392:	88da      	ldrh	r2, [r3, #6]
    3394:	4b20      	ldr	r3, [pc, #128]	; (3418 <_usb_ep0_on_tansfer_ok+0xec>)
    3396:	881b      	ldrh	r3, [r3, #0]
    3398:	191b      	adds	r3, r3, r4
    339a:	429a      	cmp	r2, r3
    339c:	dded      	ble.n	337a <_usb_ep0_on_tansfer_ok+0x4e>
    339e:	4b19      	ldr	r3, [pc, #100]	; (3404 <_usb_ep0_on_tansfer_ok+0xd8>)
    33a0:	899b      	ldrh	r3, [r3, #12]
    33a2:	42a3      	cmp	r3, r4
    33a4:	d00c      	beq.n	33c0 <_usb_ep0_on_tansfer_ok+0x94>
    33a6:	2340      	movs	r3, #64	; 0x40
    33a8:	4a18      	ldr	r2, [pc, #96]	; (340c <_usb_ep0_on_tansfer_ok+0xe0>)
    33aa:	2100      	movs	r1, #0
    33ac:	481b      	ldr	r0, [pc, #108]	; (341c <_usb_ep0_on_tansfer_ok+0xf0>)
    33ae:	4c1c      	ldr	r4, [pc, #112]	; (3420 <_usb_ep0_on_tansfer_ok+0xf4>)
    33b0:	47a0      	blx	r4
    33b2:	e7ca      	b.n	334a <_usb_ep0_on_tansfer_ok+0x1e>
    33b4:	2205      	movs	r2, #5
    33b6:	4b12      	ldr	r3, [pc, #72]	; (3400 <_usb_ep0_on_tansfer_ok+0xd4>)
    33b8:	701a      	strb	r2, [r3, #0]
    33ba:	4b1a      	ldr	r3, [pc, #104]	; (3424 <_usb_ep0_on_tansfer_ok+0xf8>)
    33bc:	4798      	blx	r3
    33be:	e7c4      	b.n	334a <_usb_ep0_on_tansfer_ok+0x1e>
    33c0:	4b10      	ldr	r3, [pc, #64]	; (3404 <_usb_ep0_on_tansfer_ok+0xd8>)
    33c2:	695b      	ldr	r3, [r3, #20]
    33c4:	2b00      	cmp	r3, #0
    33c6:	d00b      	beq.n	33e0 <_usb_ep0_on_tansfer_ok+0xb4>
    33c8:	4798      	blx	r3
    33ca:	2800      	cmp	r0, #0
    33cc:	d00f      	beq.n	33ee <_usb_ep0_on_tansfer_ok+0xc2>
    33ce:	4912      	ldr	r1, [pc, #72]	; (3418 <_usb_ep0_on_tansfer_ok+0xec>)
    33d0:	4a0d      	ldr	r2, [pc, #52]	; (3408 <_usb_ep0_on_tansfer_ok+0xdc>)
    33d2:	880b      	ldrh	r3, [r1, #0]
    33d4:	8810      	ldrh	r0, [r2, #0]
    33d6:	181b      	adds	r3, r3, r0
    33d8:	800b      	strh	r3, [r1, #0]
    33da:	2300      	movs	r3, #0
    33dc:	8013      	strh	r3, [r2, #0]
    33de:	e7e2      	b.n	33a6 <_usb_ep0_on_tansfer_ok+0x7a>
    33e0:	2205      	movs	r2, #5
    33e2:	4b07      	ldr	r3, [pc, #28]	; (3400 <_usb_ep0_on_tansfer_ok+0xd4>)
    33e4:	701a      	strb	r2, [r3, #0]
    33e6:	2000      	movs	r0, #0
    33e8:	4b0e      	ldr	r3, [pc, #56]	; (3424 <_usb_ep0_on_tansfer_ok+0xf8>)
    33ea:	4798      	blx	r3
    33ec:	e7ad      	b.n	334a <_usb_ep0_on_tansfer_ok+0x1e>
    33ee:	2205      	movs	r2, #5
    33f0:	4b03      	ldr	r3, [pc, #12]	; (3400 <_usb_ep0_on_tansfer_ok+0xd4>)
    33f2:	701a      	strb	r2, [r3, #0]
    33f4:	4b0b      	ldr	r3, [pc, #44]	; (3424 <_usb_ep0_on_tansfer_ok+0xf8>)
    33f6:	4798      	blx	r3
    33f8:	e7a7      	b.n	334a <_usb_ep0_on_tansfer_ok+0x1e>
    33fa:	4b0b      	ldr	r3, [pc, #44]	; (3428 <_usb_ep0_on_tansfer_ok+0xfc>)
    33fc:	4798      	blx	r3
    33fe:	e7a4      	b.n	334a <_usb_ep0_on_tansfer_ok+0x1e>
    3400:	2000079a 	.word	0x2000079a
    3404:	20000ac4 	.word	0x20000ac4
    3408:	20000796 	.word	0x20000796
    340c:	20000adc 	.word	0x20000adc
    3410:	0000a595 	.word	0x0000a595
    3414:	00002f01 	.word	0x00002f01
    3418:	20000798 	.word	0x20000798
    341c:	2000095c 	.word	0x2000095c
    3420:	00003d99 	.word	0x00003d99
    3424:	000032fd 	.word	0x000032fd
    3428:	00002f91 	.word	0x00002f91

0000342c <udd_ep_clear_halt>:
    342c:	b570      	push	{r4, r5, r6, lr}
    342e:	0004      	movs	r4, r0
    3430:	230f      	movs	r3, #15
    3432:	4003      	ands	r3, r0
    3434:	2000      	movs	r0, #0
    3436:	2b03      	cmp	r3, #3
    3438:	d900      	bls.n	343c <udd_ep_clear_halt+0x10>
    343a:	bd70      	pop	{r4, r5, r6, pc}
    343c:	0020      	movs	r0, r4
    343e:	4b09      	ldr	r3, [pc, #36]	; (3464 <udd_ep_clear_halt+0x38>)
    3440:	4798      	blx	r3
    3442:	0005      	movs	r5, r0
    3444:	0021      	movs	r1, r4
    3446:	4808      	ldr	r0, [pc, #32]	; (3468 <udd_ep_clear_halt+0x3c>)
    3448:	4b08      	ldr	r3, [pc, #32]	; (346c <udd_ep_clear_halt+0x40>)
    344a:	4798      	blx	r3
    344c:	7cab      	ldrb	r3, [r5, #18]
    344e:	2001      	movs	r0, #1
    3450:	07db      	lsls	r3, r3, #31
    3452:	d5f2      	bpl.n	343a <udd_ep_clear_halt+0xe>
    3454:	7cab      	ldrb	r3, [r5, #18]
    3456:	2201      	movs	r2, #1
    3458:	4393      	bics	r3, r2
    345a:	74ab      	strb	r3, [r5, #18]
    345c:	682b      	ldr	r3, [r5, #0]
    345e:	4798      	blx	r3
    3460:	2001      	movs	r0, #1
    3462:	e7ea      	b.n	343a <udd_ep_clear_halt+0xe>
    3464:	00002b85 	.word	0x00002b85
    3468:	2000095c 	.word	0x2000095c
    346c:	00003cbf 	.word	0x00003cbf

00003470 <udd_ep_run>:
    3470:	b5f0      	push	{r4, r5, r6, r7, lr}
    3472:	b087      	sub	sp, #28
    3474:	0005      	movs	r5, r0
    3476:	9103      	str	r1, [sp, #12]
    3478:	9202      	str	r2, [sp, #8]
    347a:	9301      	str	r3, [sp, #4]
    347c:	260f      	movs	r6, #15
    347e:	4006      	ands	r6, r0
    3480:	2400      	movs	r4, #0
    3482:	2e03      	cmp	r6, #3
    3484:	d902      	bls.n	348c <udd_ep_run+0x1c>
    3486:	0020      	movs	r0, r4
    3488:	b007      	add	sp, #28
    348a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    348c:	4b64      	ldr	r3, [pc, #400]	; (3620 <udd_ep_run+0x1b0>)
    348e:	4798      	blx	r3
    3490:	1e04      	subs	r4, r0, #0
    3492:	d000      	beq.n	3496 <udd_ep_run+0x26>
    3494:	e0bd      	b.n	3612 <udd_ep_run+0x1a2>
    3496:	0028      	movs	r0, r5
    3498:	4b62      	ldr	r3, [pc, #392]	; (3624 <udd_ep_run+0x1b4>)
    349a:	4798      	blx	r3
    349c:	0007      	movs	r7, r0
    349e:	f3ef 8310 	mrs	r3, PRIMASK
    34a2:	425a      	negs	r2, r3
    34a4:	4153      	adcs	r3, r2
    34a6:	9305      	str	r3, [sp, #20]
    34a8:	b672      	cpsid	i
    34aa:	f3bf 8f5f 	dmb	sy
    34ae:	2200      	movs	r2, #0
    34b0:	4b5d      	ldr	r3, [pc, #372]	; (3628 <udd_ep_run+0x1b8>)
    34b2:	701a      	strb	r2, [r3, #0]
    34b4:	9a05      	ldr	r2, [sp, #20]
    34b6:	7c83      	ldrb	r3, [r0, #18]
    34b8:	07db      	lsls	r3, r3, #31
    34ba:	d508      	bpl.n	34ce <udd_ep_run+0x5e>
    34bc:	2a00      	cmp	r2, #0
    34be:	d0e2      	beq.n	3486 <udd_ep_run+0x16>
    34c0:	2201      	movs	r2, #1
    34c2:	4b59      	ldr	r3, [pc, #356]	; (3628 <udd_ep_run+0x1b8>)
    34c4:	701a      	strb	r2, [r3, #0]
    34c6:	f3bf 8f5f 	dmb	sy
    34ca:	b662      	cpsie	i
    34cc:	e7db      	b.n	3486 <udd_ep_run+0x16>
    34ce:	7c83      	ldrb	r3, [r0, #18]
    34d0:	2101      	movs	r1, #1
    34d2:	430b      	orrs	r3, r1
    34d4:	7483      	strb	r3, [r0, #18]
    34d6:	2a00      	cmp	r2, #0
    34d8:	d005      	beq.n	34e6 <udd_ep_run+0x76>
    34da:	2201      	movs	r2, #1
    34dc:	4b52      	ldr	r3, [pc, #328]	; (3628 <udd_ep_run+0x1b8>)
    34de:	701a      	strb	r2, [r3, #0]
    34e0:	f3bf 8f5f 	dmb	sy
    34e4:	b662      	cpsie	i
    34e6:	9b02      	ldr	r3, [sp, #8]
    34e8:	607b      	str	r3, [r7, #4]
    34ea:	9b01      	ldr	r3, [sp, #4]
    34ec:	60bb      	str	r3, [r7, #8]
    34ee:	2300      	movs	r3, #0
    34f0:	60fb      	str	r3, [r7, #12]
    34f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34f4:	603b      	str	r3, [r7, #0]
    34f6:	2301      	movs	r3, #1
    34f8:	9a03      	ldr	r2, [sp, #12]
    34fa:	4013      	ands	r3, r2
    34fc:	005a      	lsls	r2, r3, #1
    34fe:	7cbb      	ldrb	r3, [r7, #18]
    3500:	2102      	movs	r1, #2
    3502:	438b      	bics	r3, r1
    3504:	4313      	orrs	r3, r2
    3506:	2204      	movs	r2, #4
    3508:	4393      	bics	r3, r2
    350a:	74bb      	strb	r3, [r7, #18]
    350c:	b26b      	sxtb	r3, r5
    350e:	2b00      	cmp	r3, #0
    3510:	db20      	blt.n	3554 <udd_ep_run+0xe4>
    3512:	9b01      	ldr	r3, [sp, #4]
    3514:	2b00      	cmp	r3, #0
    3516:	d06f      	beq.n	35f8 <udd_ep_run+0x188>
    3518:	b29c      	uxth	r4, r3
    351a:	4b44      	ldr	r3, [pc, #272]	; (362c <udd_ep_run+0x1bc>)
    351c:	429c      	cmp	r4, r3
    351e:	d95a      	bls.n	35d6 <udd_ep_run+0x166>
    3520:	8a39      	ldrh	r1, [r7, #16]
    3522:	001c      	movs	r4, r3
    3524:	0018      	movs	r0, r3
    3526:	4b42      	ldr	r3, [pc, #264]	; (3630 <udd_ep_run+0x1c0>)
    3528:	4798      	blx	r3
    352a:	1a63      	subs	r3, r4, r1
    352c:	b29a      	uxth	r2, r3
    352e:	8a3b      	ldrh	r3, [r7, #16]
    3530:	429a      	cmp	r2, r3
    3532:	d257      	bcs.n	35e4 <udd_ep_run+0x174>
    3534:	7cba      	ldrb	r2, [r7, #18]
    3536:	2104      	movs	r1, #4
    3538:	430a      	orrs	r2, r1
    353a:	74ba      	strb	r2, [r7, #18]
    353c:	1e72      	subs	r2, r6, #1
    353e:	0192      	lsls	r2, r2, #6
    3540:	493c      	ldr	r1, [pc, #240]	; (3634 <udd_ep_run+0x1c4>)
    3542:	1852      	adds	r2, r2, r1
    3544:	0031      	movs	r1, r6
    3546:	483c      	ldr	r0, [pc, #240]	; (3638 <udd_ep_run+0x1c8>)
    3548:	4c3c      	ldr	r4, [pc, #240]	; (363c <udd_ep_run+0x1cc>)
    354a:	47a0      	blx	r4
    354c:	4244      	negs	r4, r0
    354e:	4144      	adcs	r4, r0
    3550:	b2e4      	uxtb	r4, r4
    3552:	e798      	b.n	3486 <udd_ep_run+0x16>
    3554:	9b01      	ldr	r3, [sp, #4]
    3556:	2b00      	cmp	r3, #0
    3558:	d027      	beq.n	35aa <udd_ep_run+0x13a>
    355a:	b29d      	uxth	r5, r3
    355c:	4b33      	ldr	r3, [pc, #204]	; (362c <udd_ep_run+0x1bc>)
    355e:	429d      	cmp	r5, r3
    3560:	d906      	bls.n	3570 <udd_ep_run+0x100>
    3562:	8a39      	ldrh	r1, [r7, #16]
    3564:	001d      	movs	r5, r3
    3566:	0018      	movs	r0, r3
    3568:	4b31      	ldr	r3, [pc, #196]	; (3630 <udd_ep_run+0x1c0>)
    356a:	4798      	blx	r3
    356c:	1a6b      	subs	r3, r5, r1
    356e:	b29d      	uxth	r5, r3
    3570:	7cbb      	ldrb	r3, [r7, #18]
    3572:	079b      	lsls	r3, r3, #30
    3574:	d507      	bpl.n	3586 <udd_ep_run+0x116>
    3576:	8a39      	ldrh	r1, [r7, #16]
    3578:	0028      	movs	r0, r5
    357a:	4b31      	ldr	r3, [pc, #196]	; (3640 <udd_ep_run+0x1d0>)
    357c:	4798      	blx	r3
    357e:	b289      	uxth	r1, r1
    3580:	424c      	negs	r4, r1
    3582:	414c      	adcs	r4, r1
    3584:	b2e4      	uxtb	r4, r4
    3586:	2001      	movs	r0, #1
    3588:	4020      	ands	r0, r4
    358a:	0040      	lsls	r0, r0, #1
    358c:	7cbc      	ldrb	r4, [r7, #18]
    358e:	2302      	movs	r3, #2
    3590:	439c      	bics	r4, r3
    3592:	4304      	orrs	r4, r0
    3594:	74bc      	strb	r4, [r7, #18]
    3596:	002b      	movs	r3, r5
    3598:	9a02      	ldr	r2, [sp, #8]
    359a:	0031      	movs	r1, r6
    359c:	4826      	ldr	r0, [pc, #152]	; (3638 <udd_ep_run+0x1c8>)
    359e:	4c29      	ldr	r4, [pc, #164]	; (3644 <udd_ep_run+0x1d4>)
    35a0:	47a0      	blx	r4
    35a2:	4244      	negs	r4, r0
    35a4:	4144      	adcs	r4, r0
    35a6:	b2e4      	uxtb	r4, r4
    35a8:	e76d      	b.n	3486 <udd_ep_run+0x16>
    35aa:	7cbb      	ldrb	r3, [r7, #18]
    35ac:	079b      	lsls	r3, r3, #30
    35ae:	d505      	bpl.n	35bc <udd_ep_run+0x14c>
    35b0:	7cbb      	ldrb	r3, [r7, #18]
    35b2:	2202      	movs	r2, #2
    35b4:	4393      	bics	r3, r2
    35b6:	74bb      	strb	r3, [r7, #18]
    35b8:	2500      	movs	r5, #0
    35ba:	e7ec      	b.n	3596 <udd_ep_run+0x126>
    35bc:	7cbb      	ldrb	r3, [r7, #18]
    35be:	2201      	movs	r2, #1
    35c0:	4393      	bics	r3, r2
    35c2:	74bb      	strb	r3, [r7, #18]
    35c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35c6:	2b00      	cmp	r3, #0
    35c8:	d025      	beq.n	3616 <udd_ep_run+0x1a6>
    35ca:	002a      	movs	r2, r5
    35cc:	2100      	movs	r1, #0
    35ce:	2000      	movs	r0, #0
    35d0:	4798      	blx	r3
    35d2:	2401      	movs	r4, #1
    35d4:	e757      	b.n	3486 <udd_ep_run+0x16>
    35d6:	8a39      	ldrh	r1, [r7, #16]
    35d8:	0020      	movs	r0, r4
    35da:	4b19      	ldr	r3, [pc, #100]	; (3640 <udd_ep_run+0x1d0>)
    35dc:	4798      	blx	r3
    35de:	1a63      	subs	r3, r4, r1
    35e0:	b29a      	uxth	r2, r3
    35e2:	e7a4      	b.n	352e <udd_ep_run+0xbe>
    35e4:	0013      	movs	r3, r2
    35e6:	9a02      	ldr	r2, [sp, #8]
    35e8:	0031      	movs	r1, r6
    35ea:	4813      	ldr	r0, [pc, #76]	; (3638 <udd_ep_run+0x1c8>)
    35ec:	4c13      	ldr	r4, [pc, #76]	; (363c <udd_ep_run+0x1cc>)
    35ee:	47a0      	blx	r4
    35f0:	4244      	negs	r4, r0
    35f2:	4144      	adcs	r4, r0
    35f4:	b2e4      	uxtb	r4, r4
    35f6:	e746      	b.n	3486 <udd_ep_run+0x16>
    35f8:	7cbb      	ldrb	r3, [r7, #18]
    35fa:	2201      	movs	r2, #1
    35fc:	4393      	bics	r3, r2
    35fe:	74bb      	strb	r3, [r7, #18]
    3600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3602:	2b00      	cmp	r3, #0
    3604:	d009      	beq.n	361a <udd_ep_run+0x1aa>
    3606:	002a      	movs	r2, r5
    3608:	2100      	movs	r1, #0
    360a:	2000      	movs	r0, #0
    360c:	4798      	blx	r3
    360e:	2401      	movs	r4, #1
    3610:	e739      	b.n	3486 <udd_ep_run+0x16>
    3612:	2400      	movs	r4, #0
    3614:	e737      	b.n	3486 <udd_ep_run+0x16>
    3616:	2401      	movs	r4, #1
    3618:	e735      	b.n	3486 <udd_ep_run+0x16>
    361a:	2401      	movs	r4, #1
    361c:	e733      	b.n	3486 <udd_ep_run+0x16>
    361e:	46c0      	nop			; (mov r8, r8)
    3620:	000032e9 	.word	0x000032e9
    3624:	00002b85 	.word	0x00002b85
    3628:	200000f4 	.word	0x200000f4
    362c:	00001fff 	.word	0x00001fff
    3630:	00007e89 	.word	0x00007e89
    3634:	2000089c 	.word	0x2000089c
    3638:	2000095c 	.word	0x2000095c
    363c:	00003d99 	.word	0x00003d99
    3640:	00007cb5 	.word	0x00007cb5
    3644:	00003d45 	.word	0x00003d45

00003648 <udd_set_address>:
    3648:	4b02      	ldr	r3, [pc, #8]	; (3654 <udd_set_address+0xc>)
    364a:	681b      	ldr	r3, [r3, #0]
    364c:	2280      	movs	r2, #128	; 0x80
    364e:	4310      	orrs	r0, r2
    3650:	7298      	strb	r0, [r3, #10]
    3652:	4770      	bx	lr
    3654:	2000095c 	.word	0x2000095c

00003658 <udd_getaddress>:
    3658:	4b02      	ldr	r3, [pc, #8]	; (3664 <udd_getaddress+0xc>)
    365a:	681b      	ldr	r3, [r3, #0]
    365c:	7a98      	ldrb	r0, [r3, #10]
    365e:	0640      	lsls	r0, r0, #25
    3660:	0e40      	lsrs	r0, r0, #25
    3662:	4770      	bx	lr
    3664:	2000095c 	.word	0x2000095c

00003668 <udd_set_setup_payload>:
    3668:	4b01      	ldr	r3, [pc, #4]	; (3670 <udd_set_setup_payload+0x8>)
    366a:	6098      	str	r0, [r3, #8]
    366c:	8199      	strh	r1, [r3, #12]
    366e:	4770      	bx	lr
    3670:	20000ac4 	.word	0x20000ac4

00003674 <udd_attach>:
    3674:	b570      	push	{r4, r5, r6, lr}
    3676:	2003      	movs	r0, #3
    3678:	4b16      	ldr	r3, [pc, #88]	; (36d4 <udd_attach+0x60>)
    367a:	4798      	blx	r3
    367c:	4c16      	ldr	r4, [pc, #88]	; (36d8 <udd_attach+0x64>)
    367e:	6822      	ldr	r2, [r4, #0]
    3680:	8913      	ldrh	r3, [r2, #8]
    3682:	2101      	movs	r1, #1
    3684:	438b      	bics	r3, r1
    3686:	8113      	strh	r3, [r2, #8]
    3688:	4a14      	ldr	r2, [pc, #80]	; (36dc <udd_attach+0x68>)
    368a:	3103      	adds	r1, #3
    368c:	0020      	movs	r0, r4
    368e:	4e14      	ldr	r6, [pc, #80]	; (36e0 <udd_attach+0x6c>)
    3690:	47b0      	blx	r6
    3692:	4a14      	ldr	r2, [pc, #80]	; (36e4 <udd_attach+0x70>)
    3694:	2100      	movs	r1, #0
    3696:	0020      	movs	r0, r4
    3698:	47b0      	blx	r6
    369a:	4a13      	ldr	r2, [pc, #76]	; (36e8 <udd_attach+0x74>)
    369c:	2101      	movs	r1, #1
    369e:	0020      	movs	r0, r4
    36a0:	47b0      	blx	r6
    36a2:	4a12      	ldr	r2, [pc, #72]	; (36ec <udd_attach+0x78>)
    36a4:	2102      	movs	r1, #2
    36a6:	0020      	movs	r0, r4
    36a8:	47b0      	blx	r6
    36aa:	2104      	movs	r1, #4
    36ac:	0020      	movs	r0, r4
    36ae:	4d10      	ldr	r5, [pc, #64]	; (36f0 <udd_attach+0x7c>)
    36b0:	47a8      	blx	r5
    36b2:	2100      	movs	r1, #0
    36b4:	0020      	movs	r0, r4
    36b6:	47a8      	blx	r5
    36b8:	2101      	movs	r1, #1
    36ba:	0020      	movs	r0, r4
    36bc:	47a8      	blx	r5
    36be:	2102      	movs	r1, #2
    36c0:	0020      	movs	r0, r4
    36c2:	47a8      	blx	r5
    36c4:	4a0b      	ldr	r2, [pc, #44]	; (36f4 <udd_attach+0x80>)
    36c6:	2106      	movs	r1, #6
    36c8:	0020      	movs	r0, r4
    36ca:	47b0      	blx	r6
    36cc:	2106      	movs	r1, #6
    36ce:	0020      	movs	r0, r4
    36d0:	47a8      	blx	r5
    36d2:	bd70      	pop	{r4, r5, r6, pc}
    36d4:	00002ac5 	.word	0x00002ac5
    36d8:	2000095c 	.word	0x2000095c
    36dc:	00002e25 	.word	0x00002e25
    36e0:	00003795 	.word	0x00003795
    36e4:	0000311d 	.word	0x0000311d
    36e8:	00002e51 	.word	0x00002e51
    36ec:	00002dbd 	.word	0x00002dbd
    36f0:	000037b9 	.word	0x000037b9
    36f4:	00002d89 	.word	0x00002d89

000036f8 <udd_enable>:
    36f8:	b570      	push	{r4, r5, r6, lr}
    36fa:	b082      	sub	sp, #8
    36fc:	f3ef 8310 	mrs	r3, PRIMASK
    3700:	425a      	negs	r2, r3
    3702:	4153      	adcs	r3, r2
    3704:	9300      	str	r3, [sp, #0]
    3706:	b672      	cpsid	i
    3708:	f3bf 8f5f 	dmb	sy
    370c:	2600      	movs	r6, #0
    370e:	4b18      	ldr	r3, [pc, #96]	; (3770 <udd_enable+0x78>)
    3710:	701e      	strb	r6, [r3, #0]
    3712:	9c00      	ldr	r4, [sp, #0]
    3714:	ad01      	add	r5, sp, #4
    3716:	0028      	movs	r0, r5
    3718:	4b16      	ldr	r3, [pc, #88]	; (3774 <udd_enable+0x7c>)
    371a:	4798      	blx	r3
    371c:	70ae      	strb	r6, [r5, #2]
    371e:	4e16      	ldr	r6, [pc, #88]	; (3778 <udd_enable+0x80>)
    3720:	002a      	movs	r2, r5
    3722:	4916      	ldr	r1, [pc, #88]	; (377c <udd_enable+0x84>)
    3724:	0030      	movs	r0, r6
    3726:	4b16      	ldr	r3, [pc, #88]	; (3780 <udd_enable+0x88>)
    3728:	4798      	blx	r3
    372a:	0030      	movs	r0, r6
    372c:	4b15      	ldr	r3, [pc, #84]	; (3784 <udd_enable+0x8c>)
    372e:	4798      	blx	r3
    3730:	4b15      	ldr	r3, [pc, #84]	; (3788 <udd_enable+0x90>)
    3732:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3734:	069b      	lsls	r3, r3, #26
    3736:	d414      	bmi.n	3762 <udd_enable+0x6a>
    3738:	4913      	ldr	r1, [pc, #76]	; (3788 <udd_enable+0x90>)
    373a:	22d0      	movs	r2, #208	; 0xd0
    373c:	68cb      	ldr	r3, [r1, #12]
    373e:	4013      	ands	r3, r2
    3740:	2bd0      	cmp	r3, #208	; 0xd0
    3742:	d1fb      	bne.n	373c <udd_enable+0x44>
    3744:	2001      	movs	r0, #1
    3746:	4b11      	ldr	r3, [pc, #68]	; (378c <udd_enable+0x94>)
    3748:	4798      	blx	r3
    374a:	4b11      	ldr	r3, [pc, #68]	; (3790 <udd_enable+0x98>)
    374c:	4798      	blx	r3
    374e:	2c00      	cmp	r4, #0
    3750:	d005      	beq.n	375e <udd_enable+0x66>
    3752:	2201      	movs	r2, #1
    3754:	4b06      	ldr	r3, [pc, #24]	; (3770 <udd_enable+0x78>)
    3756:	701a      	strb	r2, [r3, #0]
    3758:	f3bf 8f5f 	dmb	sy
    375c:	b662      	cpsie	i
    375e:	b002      	add	sp, #8
    3760:	bd70      	pop	{r4, r5, r6, pc}
    3762:	4909      	ldr	r1, [pc, #36]	; (3788 <udd_enable+0x90>)
    3764:	2210      	movs	r2, #16
    3766:	68cb      	ldr	r3, [r1, #12]
    3768:	421a      	tst	r2, r3
    376a:	d0fc      	beq.n	3766 <udd_enable+0x6e>
    376c:	e7ea      	b.n	3744 <udd_enable+0x4c>
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	200000f4 	.word	0x200000f4
    3774:	0000450d 	.word	0x0000450d
    3778:	2000095c 	.word	0x2000095c
    377c:	41005000 	.word	0x41005000
    3780:	0000451d 	.word	0x0000451d
    3784:	00003e19 	.word	0x00003e19
    3788:	40000800 	.word	0x40000800
    378c:	00002ac5 	.word	0x00002ac5
    3790:	00003675 	.word	0x00003675

00003794 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3794:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3796:	000b      	movs	r3, r1
    3798:	332e      	adds	r3, #46	; 0x2e
    379a:	009b      	lsls	r3, r3, #2
    379c:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    379e:	22aa      	movs	r2, #170	; 0xaa
    37a0:	0052      	lsls	r2, r2, #1
    37a2:	0049      	lsls	r1, r1, #1
    37a4:	5a83      	ldrh	r3, [r0, r2]
    37a6:	4c03      	ldr	r4, [pc, #12]	; (37b4 <usb_device_register_callback+0x20>)
    37a8:	5b09      	ldrh	r1, [r1, r4]
    37aa:	430b      	orrs	r3, r1
    37ac:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    37ae:	2000      	movs	r0, #0
    37b0:	bd10      	pop	{r4, pc}
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	0000bac4 	.word	0x0000bac4

000037b8 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    37b8:	0049      	lsls	r1, r1, #1
    37ba:	4b06      	ldr	r3, [pc, #24]	; (37d4 <usb_device_enable_callback+0x1c>)
    37bc:	5acb      	ldrh	r3, [r1, r3]
    37be:	6802      	ldr	r2, [r0, #0]
    37c0:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    37c2:	21ab      	movs	r1, #171	; 0xab
    37c4:	0049      	lsls	r1, r1, #1
    37c6:	5a42      	ldrh	r2, [r0, r1]
    37c8:	431a      	orrs	r2, r3
    37ca:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    37cc:	6802      	ldr	r2, [r0, #0]
    37ce:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    37d0:	2000      	movs	r0, #0
    37d2:	4770      	bx	lr
    37d4:	0000bac4 	.word	0x0000bac4

000037d8 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    37d8:	0049      	lsls	r1, r1, #1
    37da:	4b05      	ldr	r3, [pc, #20]	; (37f0 <usb_device_disable_callback+0x18>)
    37dc:	5aca      	ldrh	r2, [r1, r3]
    37de:	21ab      	movs	r1, #171	; 0xab
    37e0:	0049      	lsls	r1, r1, #1
    37e2:	5a43      	ldrh	r3, [r0, r1]
    37e4:	4393      	bics	r3, r2
    37e6:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    37e8:	6803      	ldr	r3, [r0, #0]
    37ea:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    37ec:	2000      	movs	r0, #0
    37ee:	4770      	bx	lr
    37f0:	0000bac4 	.word	0x0000bac4

000037f4 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    37f4:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    37f6:	008c      	lsls	r4, r1, #2
    37f8:	18a4      	adds	r4, r4, r2
    37fa:	3434      	adds	r4, #52	; 0x34
    37fc:	00a4      	lsls	r4, r4, #2
    37fe:	1904      	adds	r4, r0, r4
    3800:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3802:	1840      	adds	r0, r0, r1
    3804:	3059      	adds	r0, #89	; 0x59
    3806:	30ff      	adds	r0, #255	; 0xff
    3808:	7803      	ldrb	r3, [r0, #0]
    380a:	4903      	ldr	r1, [pc, #12]	; (3818 <usb_device_endpoint_register_callback+0x24>)
    380c:	5c8a      	ldrb	r2, [r1, r2]
    380e:	4313      	orrs	r3, r2
    3810:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3812:	2000      	movs	r0, #0
    3814:	bd10      	pop	{r4, pc}
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	0000bad4 	.word	0x0000bad4

0000381c <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    381c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    381e:	008b      	lsls	r3, r1, #2
    3820:	189b      	adds	r3, r3, r2
    3822:	3334      	adds	r3, #52	; 0x34
    3824:	009b      	lsls	r3, r3, #2
    3826:	18c3      	adds	r3, r0, r3
    3828:	2400      	movs	r4, #0
    382a:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    382c:	1840      	adds	r0, r0, r1
    382e:	3059      	adds	r0, #89	; 0x59
    3830:	30ff      	adds	r0, #255	; 0xff
    3832:	4b03      	ldr	r3, [pc, #12]	; (3840 <usb_device_endpoint_unregister_callback+0x24>)
    3834:	5c9a      	ldrb	r2, [r3, r2]
    3836:	7803      	ldrb	r3, [r0, #0]
    3838:	4393      	bics	r3, r2
    383a:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    383c:	2000      	movs	r0, #0
    383e:	bd10      	pop	{r4, pc}
    3840:	0000bad4 	.word	0x0000bad4

00003844 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3844:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3846:	230f      	movs	r3, #15
    3848:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    384a:	18c4      	adds	r4, r0, r3
    384c:	3461      	adds	r4, #97	; 0x61
    384e:	34ff      	adds	r4, #255	; 0xff
    3850:	7825      	ldrb	r5, [r4, #0]
    3852:	4e2f      	ldr	r6, [pc, #188]	; (3910 <usb_device_endpoint_enable_callback+0xcc>)
    3854:	5cb6      	ldrb	r6, [r6, r2]
    3856:	4335      	orrs	r5, r6
    3858:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    385a:	2a00      	cmp	r2, #0
    385c:	d129      	bne.n	38b2 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    385e:	2b00      	cmp	r3, #0
    3860:	d112      	bne.n	3888 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3862:	2503      	movs	r5, #3
    3864:	240a      	movs	r4, #10
    3866:	34ff      	adds	r4, #255	; 0xff
    3868:	6806      	ldr	r6, [r0, #0]
    386a:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    386c:	2a03      	cmp	r2, #3
    386e:	d109      	bne.n	3884 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3870:	b249      	sxtb	r1, r1
    3872:	2900      	cmp	r1, #0
    3874:	db44      	blt.n	3900 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3876:	6802      	ldr	r2, [r0, #0]
    3878:	015b      	lsls	r3, r3, #5
    387a:	18d3      	adds	r3, r2, r3
    387c:	330a      	adds	r3, #10
    387e:	33ff      	adds	r3, #255	; 0xff
    3880:	2220      	movs	r2, #32
    3882:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3884:	2000      	movs	r0, #0
    3886:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3888:	b24c      	sxtb	r4, r1
    388a:	2c00      	cmp	r4, #0
    388c:	db08      	blt.n	38a0 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    388e:	015c      	lsls	r4, r3, #5
    3890:	6805      	ldr	r5, [r0, #0]
    3892:	46ac      	mov	ip, r5
    3894:	4464      	add	r4, ip
    3896:	340a      	adds	r4, #10
    3898:	34ff      	adds	r4, #255	; 0xff
    389a:	2501      	movs	r5, #1
    389c:	7025      	strb	r5, [r4, #0]
    389e:	e7e5      	b.n	386c <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    38a0:	015c      	lsls	r4, r3, #5
    38a2:	6805      	ldr	r5, [r0, #0]
    38a4:	46ac      	mov	ip, r5
    38a6:	4464      	add	r4, ip
    38a8:	340a      	adds	r4, #10
    38aa:	34ff      	adds	r4, #255	; 0xff
    38ac:	2502      	movs	r5, #2
    38ae:	7025      	strb	r5, [r4, #0]
    38b0:	e7dc      	b.n	386c <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    38b2:	2a01      	cmp	r2, #1
    38b4:	d11a      	bne.n	38ec <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    38b6:	2b00      	cmp	r3, #0
    38b8:	d105      	bne.n	38c6 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    38ba:	6802      	ldr	r2, [r0, #0]
    38bc:	210c      	movs	r1, #12
    38be:	230a      	movs	r3, #10
    38c0:	33ff      	adds	r3, #255	; 0xff
    38c2:	54d1      	strb	r1, [r2, r3]
    38c4:	e7de      	b.n	3884 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    38c6:	b249      	sxtb	r1, r1
    38c8:	2900      	cmp	r1, #0
    38ca:	db07      	blt.n	38dc <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    38cc:	6802      	ldr	r2, [r0, #0]
    38ce:	015b      	lsls	r3, r3, #5
    38d0:	18d3      	adds	r3, r2, r3
    38d2:	330a      	adds	r3, #10
    38d4:	33ff      	adds	r3, #255	; 0xff
    38d6:	2204      	movs	r2, #4
    38d8:	701a      	strb	r2, [r3, #0]
    38da:	e7d3      	b.n	3884 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    38dc:	6802      	ldr	r2, [r0, #0]
    38de:	015b      	lsls	r3, r3, #5
    38e0:	18d3      	adds	r3, r2, r3
    38e2:	330a      	adds	r3, #10
    38e4:	33ff      	adds	r3, #255	; 0xff
    38e6:	2208      	movs	r2, #8
    38e8:	701a      	strb	r2, [r3, #0]
    38ea:	e7cb      	b.n	3884 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    38ec:	2a02      	cmp	r2, #2
    38ee:	d1bd      	bne.n	386c <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    38f0:	6802      	ldr	r2, [r0, #0]
    38f2:	015b      	lsls	r3, r3, #5
    38f4:	18d3      	adds	r3, r2, r3
    38f6:	330a      	adds	r3, #10
    38f8:	33ff      	adds	r3, #255	; 0xff
    38fa:	2210      	movs	r2, #16
    38fc:	701a      	strb	r2, [r3, #0]
    38fe:	e7c1      	b.n	3884 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3900:	6802      	ldr	r2, [r0, #0]
    3902:	015b      	lsls	r3, r3, #5
    3904:	18d3      	adds	r3, r2, r3
    3906:	330a      	adds	r3, #10
    3908:	33ff      	adds	r3, #255	; 0xff
    390a:	2240      	movs	r2, #64	; 0x40
    390c:	701a      	strb	r2, [r3, #0]
    390e:	e7b9      	b.n	3884 <usb_device_endpoint_enable_callback+0x40>
    3910:	0000bad4 	.word	0x0000bad4

00003914 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3914:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3916:	230f      	movs	r3, #15
    3918:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    391a:	18c4      	adds	r4, r0, r3
    391c:	3461      	adds	r4, #97	; 0x61
    391e:	34ff      	adds	r4, #255	; 0xff
    3920:	4d2f      	ldr	r5, [pc, #188]	; (39e0 <usb_device_endpoint_disable_callback+0xcc>)
    3922:	5cae      	ldrb	r6, [r5, r2]
    3924:	7825      	ldrb	r5, [r4, #0]
    3926:	43b5      	bics	r5, r6
    3928:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    392a:	2a00      	cmp	r2, #0
    392c:	d129      	bne.n	3982 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    392e:	2b00      	cmp	r3, #0
    3930:	d112      	bne.n	3958 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3932:	2503      	movs	r5, #3
    3934:	2484      	movs	r4, #132	; 0x84
    3936:	0064      	lsls	r4, r4, #1
    3938:	6806      	ldr	r6, [r0, #0]
    393a:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    393c:	2a03      	cmp	r2, #3
    393e:	d109      	bne.n	3954 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3940:	b249      	sxtb	r1, r1
    3942:	2900      	cmp	r1, #0
    3944:	db44      	blt.n	39d0 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3946:	6802      	ldr	r2, [r0, #0]
    3948:	015b      	lsls	r3, r3, #5
    394a:	18d3      	adds	r3, r2, r3
    394c:	3309      	adds	r3, #9
    394e:	33ff      	adds	r3, #255	; 0xff
    3950:	2220      	movs	r2, #32
    3952:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3954:	2000      	movs	r0, #0
    3956:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3958:	b24c      	sxtb	r4, r1
    395a:	2c00      	cmp	r4, #0
    395c:	db08      	blt.n	3970 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    395e:	015c      	lsls	r4, r3, #5
    3960:	6805      	ldr	r5, [r0, #0]
    3962:	46ac      	mov	ip, r5
    3964:	4464      	add	r4, ip
    3966:	3409      	adds	r4, #9
    3968:	34ff      	adds	r4, #255	; 0xff
    396a:	2501      	movs	r5, #1
    396c:	7025      	strb	r5, [r4, #0]
    396e:	e7e5      	b.n	393c <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3970:	015c      	lsls	r4, r3, #5
    3972:	6805      	ldr	r5, [r0, #0]
    3974:	46ac      	mov	ip, r5
    3976:	4464      	add	r4, ip
    3978:	3409      	adds	r4, #9
    397a:	34ff      	adds	r4, #255	; 0xff
    397c:	2502      	movs	r5, #2
    397e:	7025      	strb	r5, [r4, #0]
    3980:	e7dc      	b.n	393c <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3982:	2a01      	cmp	r2, #1
    3984:	d11a      	bne.n	39bc <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3986:	2b00      	cmp	r3, #0
    3988:	d105      	bne.n	3996 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    398a:	6802      	ldr	r2, [r0, #0]
    398c:	210c      	movs	r1, #12
    398e:	3309      	adds	r3, #9
    3990:	33ff      	adds	r3, #255	; 0xff
    3992:	54d1      	strb	r1, [r2, r3]
    3994:	e7de      	b.n	3954 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3996:	b249      	sxtb	r1, r1
    3998:	2900      	cmp	r1, #0
    399a:	db07      	blt.n	39ac <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    399c:	6802      	ldr	r2, [r0, #0]
    399e:	015b      	lsls	r3, r3, #5
    39a0:	18d3      	adds	r3, r2, r3
    39a2:	3309      	adds	r3, #9
    39a4:	33ff      	adds	r3, #255	; 0xff
    39a6:	2204      	movs	r2, #4
    39a8:	701a      	strb	r2, [r3, #0]
    39aa:	e7d3      	b.n	3954 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    39ac:	6802      	ldr	r2, [r0, #0]
    39ae:	015b      	lsls	r3, r3, #5
    39b0:	18d3      	adds	r3, r2, r3
    39b2:	3309      	adds	r3, #9
    39b4:	33ff      	adds	r3, #255	; 0xff
    39b6:	2208      	movs	r2, #8
    39b8:	701a      	strb	r2, [r3, #0]
    39ba:	e7cb      	b.n	3954 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    39bc:	2a02      	cmp	r2, #2
    39be:	d1bd      	bne.n	393c <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    39c0:	6802      	ldr	r2, [r0, #0]
    39c2:	015b      	lsls	r3, r3, #5
    39c4:	18d3      	adds	r3, r2, r3
    39c6:	3309      	adds	r3, #9
    39c8:	33ff      	adds	r3, #255	; 0xff
    39ca:	2210      	movs	r2, #16
    39cc:	701a      	strb	r2, [r3, #0]
    39ce:	e7c1      	b.n	3954 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    39d0:	6802      	ldr	r2, [r0, #0]
    39d2:	015b      	lsls	r3, r3, #5
    39d4:	18d3      	adds	r3, r2, r3
    39d6:	3309      	adds	r3, #9
    39d8:	33ff      	adds	r3, #255	; 0xff
    39da:	2240      	movs	r2, #64	; 0x40
    39dc:	701a      	strb	r2, [r3, #0]
    39de:	e7b9      	b.n	3954 <usb_device_endpoint_disable_callback+0x40>
    39e0:	0000bad4 	.word	0x0000bad4

000039e4 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    39e4:	2300      	movs	r3, #0
    39e6:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    39e8:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    39ea:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    39ec:	3301      	adds	r3, #1
    39ee:	70c3      	strb	r3, [r0, #3]
}
    39f0:	4770      	bx	lr
	...

000039f4 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    39f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    39f6:	780c      	ldrb	r4, [r1, #0]
    39f8:	230f      	movs	r3, #15
    39fa:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    39fc:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    39fe:	78ca      	ldrb	r2, [r1, #3]
    3a00:	2a04      	cmp	r2, #4
    3a02:	d870      	bhi.n	3ae6 <usb_device_endpoint_set_config+0xf2>
    3a04:	0092      	lsls	r2, r2, #2
    3a06:	4d89      	ldr	r5, [pc, #548]	; (3c2c <usb_device_endpoint_set_config+0x238>)
    3a08:	58aa      	ldr	r2, [r5, r2]
    3a0a:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3a0c:	6802      	ldr	r2, [r0, #0]
    3a0e:	3308      	adds	r3, #8
    3a10:	015b      	lsls	r3, r3, #5
    3a12:	2100      	movs	r1, #0
    3a14:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    3a16:	2200      	movs	r2, #0
    3a18:	e082      	b.n	3b20 <usb_device_endpoint_set_config+0x12c>
    3a1a:	015c      	lsls	r4, r3, #5
    3a1c:	6802      	ldr	r2, [r0, #0]
    3a1e:	4694      	mov	ip, r2
    3a20:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3a22:	2280      	movs	r2, #128	; 0x80
    3a24:	0052      	lsls	r2, r2, #1
    3a26:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3a28:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3a2a:	076d      	lsls	r5, r5, #29
    3a2c:	d178      	bne.n	3b20 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3a2e:	32e4      	adds	r2, #228	; 0xe4
    3a30:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3a32:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3a34:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3a36:	422e      	tst	r6, r5
    3a38:	d172      	bne.n	3b20 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3a3a:	3d5f      	subs	r5, #95	; 0x5f
    3a3c:	32e4      	adds	r2, #228	; 0xe4
    3a3e:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3a40:	001a      	movs	r2, r3
    3a42:	3208      	adds	r2, #8
    3a44:	0152      	lsls	r2, r2, #5
    3a46:	6804      	ldr	r4, [r0, #0]
    3a48:	18a4      	adds	r4, r4, r2
    3a4a:	352f      	adds	r5, #47	; 0x2f
    3a4c:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3a4e:	6800      	ldr	r0, [r0, #0]
    3a50:	1882      	adds	r2, r0, r2
    3a52:	2080      	movs	r0, #128	; 0x80
    3a54:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    3a56:	788a      	ldrb	r2, [r1, #2]
    3a58:	2a00      	cmp	r2, #0
    3a5a:	d01f      	beq.n	3a9c <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a5c:	0158      	lsls	r0, r3, #5
    3a5e:	4a74      	ldr	r2, [pc, #464]	; (3c30 <usb_device_endpoint_set_config+0x23c>)
    3a60:	1812      	adds	r2, r2, r0
    3a62:	6854      	ldr	r4, [r2, #4]
    3a64:	2080      	movs	r0, #128	; 0x80
    3a66:	0600      	lsls	r0, r0, #24
    3a68:	4304      	orrs	r4, r0
    3a6a:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a6c:	6954      	ldr	r4, [r2, #20]
    3a6e:	4320      	orrs	r0, r4
    3a70:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3a72:	2507      	movs	r5, #7
    3a74:	784c      	ldrb	r4, [r1, #1]
    3a76:	015a      	lsls	r2, r3, #5
    3a78:	4b6d      	ldr	r3, [pc, #436]	; (3c30 <usb_device_endpoint_set_config+0x23c>)
    3a7a:	189b      	adds	r3, r3, r2
    3a7c:	6858      	ldr	r0, [r3, #4]
    3a7e:	402c      	ands	r4, r5
    3a80:	0724      	lsls	r4, r4, #28
    3a82:	4e6c      	ldr	r6, [pc, #432]	; (3c34 <usb_device_endpoint_set_config+0x240>)
    3a84:	4030      	ands	r0, r6
    3a86:	4320      	orrs	r0, r4
    3a88:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3a8a:	7849      	ldrb	r1, [r1, #1]
    3a8c:	695a      	ldr	r2, [r3, #20]
    3a8e:	4029      	ands	r1, r5
    3a90:	0709      	lsls	r1, r1, #28
    3a92:	4032      	ands	r2, r6
    3a94:	430a      	orrs	r2, r1
    3a96:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    3a98:	2200      	movs	r2, #0
    3a9a:	e041      	b.n	3b20 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3a9c:	0158      	lsls	r0, r3, #5
    3a9e:	4a64      	ldr	r2, [pc, #400]	; (3c30 <usb_device_endpoint_set_config+0x23c>)
    3aa0:	1812      	adds	r2, r2, r0
    3aa2:	6850      	ldr	r0, [r2, #4]
    3aa4:	0040      	lsls	r0, r0, #1
    3aa6:	0840      	lsrs	r0, r0, #1
    3aa8:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3aaa:	6950      	ldr	r0, [r2, #20]
    3aac:	0040      	lsls	r0, r0, #1
    3aae:	0840      	lsrs	r0, r0, #1
    3ab0:	6150      	str	r0, [r2, #20]
    3ab2:	e7de      	b.n	3a72 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3ab4:	2c00      	cmp	r4, #0
    3ab6:	db35      	blt.n	3b24 <usb_device_endpoint_set_config+0x130>
    3ab8:	015d      	lsls	r5, r3, #5
    3aba:	6802      	ldr	r2, [r0, #0]
    3abc:	4694      	mov	ip, r2
    3abe:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3ac0:	2280      	movs	r2, #128	; 0x80
    3ac2:	0052      	lsls	r2, r2, #1
    3ac4:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    3ac6:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3ac8:	0776      	lsls	r6, r6, #29
    3aca:	d129      	bne.n	3b20 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3acc:	2680      	movs	r6, #128	; 0x80
    3ace:	0076      	lsls	r6, r6, #1
    3ad0:	5daa      	ldrb	r2, [r5, r6]
    3ad2:	2702      	movs	r7, #2
    3ad4:	433a      	orrs	r2, r7
    3ad6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3ad8:	6802      	ldr	r2, [r0, #0]
    3ada:	0018      	movs	r0, r3
    3adc:	3008      	adds	r0, #8
    3ade:	0140      	lsls	r0, r0, #5
    3ae0:	1812      	adds	r2, r2, r0
    3ae2:	2040      	movs	r0, #64	; 0x40
    3ae4:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3ae6:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3ae8:	784f      	ldrb	r7, [r1, #1]
    3aea:	005d      	lsls	r5, r3, #1
    3aec:	18ad      	adds	r5, r5, r2
    3aee:	012d      	lsls	r5, r5, #4
    3af0:	4e4f      	ldr	r6, [pc, #316]	; (3c30 <usb_device_endpoint_set_config+0x23c>)
    3af2:	1975      	adds	r5, r6, r5
    3af4:	6868      	ldr	r0, [r5, #4]
    3af6:	2407      	movs	r4, #7
    3af8:	403c      	ands	r4, r7
    3afa:	0724      	lsls	r4, r4, #28
    3afc:	4e4d      	ldr	r6, [pc, #308]	; (3c34 <usb_device_endpoint_set_config+0x240>)
    3afe:	4030      	ands	r0, r6
    3b00:	4320      	orrs	r0, r4
    3b02:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    3b04:	7889      	ldrb	r1, [r1, #2]
    3b06:	2900      	cmp	r1, #0
    3b08:	d000      	beq.n	3b0c <usb_device_endpoint_set_config+0x118>
    3b0a:	e088      	b.n	3c1e <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3b0c:	005b      	lsls	r3, r3, #1
    3b0e:	189b      	adds	r3, r3, r2
    3b10:	011b      	lsls	r3, r3, #4
    3b12:	4a47      	ldr	r2, [pc, #284]	; (3c30 <usb_device_endpoint_set_config+0x23c>)
    3b14:	18d3      	adds	r3, r2, r3
    3b16:	685a      	ldr	r2, [r3, #4]
    3b18:	0052      	lsls	r2, r2, #1
    3b1a:	0852      	lsrs	r2, r2, #1
    3b1c:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3b1e:	2200      	movs	r2, #0
}
    3b20:	0010      	movs	r0, r2
    3b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b24:	015d      	lsls	r5, r3, #5
    3b26:	6802      	ldr	r2, [r0, #0]
    3b28:	4694      	mov	ip, r2
    3b2a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b2c:	2280      	movs	r2, #128	; 0x80
    3b2e:	0052      	lsls	r2, r2, #1
    3b30:	5caf      	ldrb	r7, [r5, r2]
    3b32:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3b34:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b36:	4237      	tst	r7, r6
    3b38:	d1f2      	bne.n	3b20 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3b3a:	3690      	adds	r6, #144	; 0x90
    3b3c:	5daa      	ldrb	r2, [r5, r6]
    3b3e:	2720      	movs	r7, #32
    3b40:	433a      	orrs	r2, r7
    3b42:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3b44:	6802      	ldr	r2, [r0, #0]
    3b46:	0018      	movs	r0, r3
    3b48:	3008      	adds	r0, #8
    3b4a:	0140      	lsls	r0, r0, #5
    3b4c:	1812      	adds	r2, r2, r0
    3b4e:	2080      	movs	r0, #128	; 0x80
    3b50:	7110      	strb	r0, [r2, #4]
    3b52:	e7c8      	b.n	3ae6 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3b54:	2c00      	cmp	r4, #0
    3b56:	db17      	blt.n	3b88 <usb_device_endpoint_set_config+0x194>
    3b58:	015d      	lsls	r5, r3, #5
    3b5a:	6802      	ldr	r2, [r0, #0]
    3b5c:	4694      	mov	ip, r2
    3b5e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3b60:	2280      	movs	r2, #128	; 0x80
    3b62:	0052      	lsls	r2, r2, #1
    3b64:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3b66:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3b68:	0776      	lsls	r6, r6, #29
    3b6a:	d1d9      	bne.n	3b20 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3b6c:	2680      	movs	r6, #128	; 0x80
    3b6e:	0076      	lsls	r6, r6, #1
    3b70:	5daa      	ldrb	r2, [r5, r6]
    3b72:	2703      	movs	r7, #3
    3b74:	433a      	orrs	r2, r7
    3b76:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3b78:	6802      	ldr	r2, [r0, #0]
    3b7a:	0018      	movs	r0, r3
    3b7c:	3008      	adds	r0, #8
    3b7e:	0140      	lsls	r0, r0, #5
    3b80:	1812      	adds	r2, r2, r0
    3b82:	2040      	movs	r0, #64	; 0x40
    3b84:	7150      	strb	r0, [r2, #5]
    3b86:	e7ae      	b.n	3ae6 <usb_device_endpoint_set_config+0xf2>
    3b88:	015d      	lsls	r5, r3, #5
    3b8a:	6802      	ldr	r2, [r0, #0]
    3b8c:	4694      	mov	ip, r2
    3b8e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b90:	2280      	movs	r2, #128	; 0x80
    3b92:	0052      	lsls	r2, r2, #1
    3b94:	5caf      	ldrb	r7, [r5, r2]
    3b96:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3b98:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3b9a:	4237      	tst	r7, r6
    3b9c:	d1c0      	bne.n	3b20 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3b9e:	3690      	adds	r6, #144	; 0x90
    3ba0:	5daa      	ldrb	r2, [r5, r6]
    3ba2:	2730      	movs	r7, #48	; 0x30
    3ba4:	433a      	orrs	r2, r7
    3ba6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3ba8:	6802      	ldr	r2, [r0, #0]
    3baa:	0018      	movs	r0, r3
    3bac:	3008      	adds	r0, #8
    3bae:	0140      	lsls	r0, r0, #5
    3bb0:	1812      	adds	r2, r2, r0
    3bb2:	2080      	movs	r0, #128	; 0x80
    3bb4:	7110      	strb	r0, [r2, #4]
    3bb6:	e796      	b.n	3ae6 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3bb8:	2c00      	cmp	r4, #0
    3bba:	db17      	blt.n	3bec <usb_device_endpoint_set_config+0x1f8>
    3bbc:	015d      	lsls	r5, r3, #5
    3bbe:	6802      	ldr	r2, [r0, #0]
    3bc0:	4694      	mov	ip, r2
    3bc2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3bc4:	2280      	movs	r2, #128	; 0x80
    3bc6:	0052      	lsls	r2, r2, #1
    3bc8:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3bca:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3bcc:	0776      	lsls	r6, r6, #29
    3bce:	d1a7      	bne.n	3b20 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    3bd0:	2680      	movs	r6, #128	; 0x80
    3bd2:	0076      	lsls	r6, r6, #1
    3bd4:	5daa      	ldrb	r2, [r5, r6]
    3bd6:	2704      	movs	r7, #4
    3bd8:	433a      	orrs	r2, r7
    3bda:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3bdc:	6802      	ldr	r2, [r0, #0]
    3bde:	0018      	movs	r0, r3
    3be0:	3008      	adds	r0, #8
    3be2:	0140      	lsls	r0, r0, #5
    3be4:	1812      	adds	r2, r2, r0
    3be6:	2040      	movs	r0, #64	; 0x40
    3be8:	7150      	strb	r0, [r2, #5]
    3bea:	e77c      	b.n	3ae6 <usb_device_endpoint_set_config+0xf2>
    3bec:	015d      	lsls	r5, r3, #5
    3bee:	6802      	ldr	r2, [r0, #0]
    3bf0:	4694      	mov	ip, r2
    3bf2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3bf4:	2280      	movs	r2, #128	; 0x80
    3bf6:	0052      	lsls	r2, r2, #1
    3bf8:	5caf      	ldrb	r7, [r5, r2]
    3bfa:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3bfc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3bfe:	4237      	tst	r7, r6
    3c00:	d000      	beq.n	3c04 <usb_device_endpoint_set_config+0x210>
    3c02:	e78d      	b.n	3b20 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    3c04:	3690      	adds	r6, #144	; 0x90
    3c06:	5daa      	ldrb	r2, [r5, r6]
    3c08:	2740      	movs	r7, #64	; 0x40
    3c0a:	433a      	orrs	r2, r7
    3c0c:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3c0e:	6802      	ldr	r2, [r0, #0]
    3c10:	0018      	movs	r0, r3
    3c12:	3008      	adds	r0, #8
    3c14:	0140      	lsls	r0, r0, #5
    3c16:	1812      	adds	r2, r2, r0
    3c18:	2080      	movs	r0, #128	; 0x80
    3c1a:	7110      	strb	r0, [r2, #4]
    3c1c:	e763      	b.n	3ae6 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3c1e:	6869      	ldr	r1, [r5, #4]
    3c20:	2380      	movs	r3, #128	; 0x80
    3c22:	061b      	lsls	r3, r3, #24
    3c24:	430b      	orrs	r3, r1
    3c26:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    3c28:	2200      	movs	r2, #0
    3c2a:	e779      	b.n	3b20 <usb_device_endpoint_set_config+0x12c>
    3c2c:	0000bab0 	.word	0x0000bab0
    3c30:	20000b1c 	.word	0x20000b1c
    3c34:	8fffffff 	.word	0x8fffffff

00003c38 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    3c38:	230f      	movs	r3, #15
    3c3a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    3c3c:	b249      	sxtb	r1, r1
    3c3e:	2900      	cmp	r1, #0
    3c40:	db0a      	blt.n	3c58 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3c42:	3308      	adds	r3, #8
    3c44:	015b      	lsls	r3, r3, #5
    3c46:	6802      	ldr	r2, [r0, #0]
    3c48:	18d2      	adds	r2, r2, r3
    3c4a:	2140      	movs	r1, #64	; 0x40
    3c4c:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3c4e:	6802      	ldr	r2, [r0, #0]
    3c50:	18d3      	adds	r3, r2, r3
    3c52:	2201      	movs	r2, #1
    3c54:	71da      	strb	r2, [r3, #7]
	}
}
    3c56:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3c58:	3308      	adds	r3, #8
    3c5a:	015b      	lsls	r3, r3, #5
    3c5c:	6802      	ldr	r2, [r0, #0]
    3c5e:	18d2      	adds	r2, r2, r3
    3c60:	2180      	movs	r1, #128	; 0x80
    3c62:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3c64:	6802      	ldr	r2, [r0, #0]
    3c66:	18d3      	adds	r3, r2, r3
    3c68:	2202      	movs	r2, #2
    3c6a:	71da      	strb	r2, [r3, #7]
    3c6c:	e7f3      	b.n	3c56 <usb_device_endpoint_abort_job+0x1e>

00003c6e <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c6e:	230f      	movs	r3, #15
    3c70:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3c72:	b249      	sxtb	r1, r1
    3c74:	2900      	cmp	r1, #0
    3c76:	db07      	blt.n	3c88 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    3c78:	6802      	ldr	r2, [r0, #0]
    3c7a:	3308      	adds	r3, #8
    3c7c:	015b      	lsls	r3, r3, #5
    3c7e:	18d3      	adds	r3, r2, r3
    3c80:	7998      	ldrb	r0, [r3, #6]
    3c82:	06c0      	lsls	r0, r0, #27
    3c84:	0fc0      	lsrs	r0, r0, #31
	}
}
    3c86:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    3c88:	6802      	ldr	r2, [r0, #0]
    3c8a:	3308      	adds	r3, #8
    3c8c:	015b      	lsls	r3, r3, #5
    3c8e:	18d3      	adds	r3, r2, r3
    3c90:	7998      	ldrb	r0, [r3, #6]
    3c92:	0680      	lsls	r0, r0, #26
    3c94:	0fc0      	lsrs	r0, r0, #31
    3c96:	e7f6      	b.n	3c86 <usb_device_endpoint_is_halted+0x18>

00003c98 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c98:	230f      	movs	r3, #15
    3c9a:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3c9c:	b249      	sxtb	r1, r1
    3c9e:	2900      	cmp	r1, #0
    3ca0:	db06      	blt.n	3cb0 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    3ca2:	6802      	ldr	r2, [r0, #0]
    3ca4:	3308      	adds	r3, #8
    3ca6:	015b      	lsls	r3, r3, #5
    3ca8:	18d3      	adds	r3, r2, r3
    3caa:	2210      	movs	r2, #16
    3cac:	715a      	strb	r2, [r3, #5]
	}
}
    3cae:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3cb0:	6802      	ldr	r2, [r0, #0]
    3cb2:	3308      	adds	r3, #8
    3cb4:	015b      	lsls	r3, r3, #5
    3cb6:	18d3      	adds	r3, r2, r3
    3cb8:	2220      	movs	r2, #32
    3cba:	715a      	strb	r2, [r3, #5]
    3cbc:	e7f7      	b.n	3cae <usb_device_endpoint_set_halt+0x16>

00003cbe <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    3cbe:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3cc0:	230f      	movs	r3, #15
    3cc2:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3cc4:	b249      	sxtb	r1, r1
    3cc6:	2900      	cmp	r1, #0
    3cc8:	db1d      	blt.n	3d06 <usb_device_endpoint_clear_halt+0x48>
    3cca:	0159      	lsls	r1, r3, #5
    3ccc:	6802      	ldr	r2, [r0, #0]
    3cce:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    3cd0:	2483      	movs	r4, #131	; 0x83
    3cd2:	0064      	lsls	r4, r4, #1
    3cd4:	5d14      	ldrb	r4, [r2, r4]
    3cd6:	06e4      	lsls	r4, r4, #27
    3cd8:	d514      	bpl.n	3d04 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    3cda:	2510      	movs	r5, #16
    3cdc:	2482      	movs	r4, #130	; 0x82
    3cde:	0064      	lsls	r4, r4, #1
    3ce0:	5515      	strb	r5, [r2, r4]
    3ce2:	6802      	ldr	r2, [r0, #0]
    3ce4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3ce6:	2108      	movs	r1, #8
    3ce8:	31ff      	adds	r1, #255	; 0xff
    3cea:	5c51      	ldrb	r1, [r2, r1]
    3cec:	0689      	lsls	r1, r1, #26
    3cee:	d509      	bpl.n	3d04 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3cf0:	3ce4      	subs	r4, #228	; 0xe4
    3cf2:	2108      	movs	r1, #8
    3cf4:	31ff      	adds	r1, #255	; 0xff
    3cf6:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    3cf8:	6802      	ldr	r2, [r0, #0]
    3cfa:	3308      	adds	r3, #8
    3cfc:	015b      	lsls	r3, r3, #5
    3cfe:	18d3      	adds	r3, r2, r3
    3d00:	2201      	movs	r2, #1
    3d02:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    3d04:	bd30      	pop	{r4, r5, pc}
    3d06:	0159      	lsls	r1, r3, #5
    3d08:	6802      	ldr	r2, [r0, #0]
    3d0a:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    3d0c:	2483      	movs	r4, #131	; 0x83
    3d0e:	0064      	lsls	r4, r4, #1
    3d10:	5d14      	ldrb	r4, [r2, r4]
    3d12:	06a4      	lsls	r4, r4, #26
    3d14:	d5f6      	bpl.n	3d04 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    3d16:	2520      	movs	r5, #32
    3d18:	2482      	movs	r4, #130	; 0x82
    3d1a:	0064      	lsls	r4, r4, #1
    3d1c:	5515      	strb	r5, [r2, r4]
    3d1e:	6802      	ldr	r2, [r0, #0]
    3d20:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3d22:	2108      	movs	r1, #8
    3d24:	31ff      	adds	r1, #255	; 0xff
    3d26:	5c51      	ldrb	r1, [r2, r1]
    3d28:	0649      	lsls	r1, r1, #25
    3d2a:	d5eb      	bpl.n	3d04 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3d2c:	3cc4      	subs	r4, #196	; 0xc4
    3d2e:	2108      	movs	r1, #8
    3d30:	31ff      	adds	r1, #255	; 0xff
    3d32:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    3d34:	6802      	ldr	r2, [r0, #0]
    3d36:	3308      	adds	r3, #8
    3d38:	015b      	lsls	r3, r3, #5
    3d3a:	18d3      	adds	r3, r2, r3
    3d3c:	2202      	movs	r2, #2
    3d3e:	711a      	strb	r2, [r3, #4]
    3d40:	e7e0      	b.n	3d04 <usb_device_endpoint_clear_halt+0x46>
	...

00003d44 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3d44:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    3d46:	000c      	movs	r4, r1
    3d48:	3408      	adds	r4, #8
    3d4a:	0164      	lsls	r4, r4, #5
    3d4c:	6805      	ldr	r5, [r0, #0]
    3d4e:	5d64      	ldrb	r4, [r4, r5]
    3d50:	0664      	lsls	r4, r4, #25
    3d52:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3d54:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3d56:	2c00      	cmp	r4, #0
    3d58:	d101      	bne.n	3d5e <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    3d5a:	0028      	movs	r0, r5
    3d5c:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    3d5e:	014c      	lsls	r4, r1, #5
    3d60:	4d0b      	ldr	r5, [pc, #44]	; (3d90 <usb_device_endpoint_write_buffer_job+0x4c>)
    3d62:	192d      	adds	r5, r5, r4
    3d64:	002c      	movs	r4, r5
    3d66:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3d68:	696a      	ldr	r2, [r5, #20]
    3d6a:	4d0a      	ldr	r5, [pc, #40]	; (3d94 <usb_device_endpoint_write_buffer_job+0x50>)
    3d6c:	402a      	ands	r2, r5
    3d6e:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    3d70:	6962      	ldr	r2, [r4, #20]
    3d72:	049b      	lsls	r3, r3, #18
    3d74:	0c9b      	lsrs	r3, r3, #18
    3d76:	0b92      	lsrs	r2, r2, #14
    3d78:	0392      	lsls	r2, r2, #14
    3d7a:	4313      	orrs	r3, r2
    3d7c:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    3d7e:	6803      	ldr	r3, [r0, #0]
    3d80:	3108      	adds	r1, #8
    3d82:	0149      	lsls	r1, r1, #5
    3d84:	1859      	adds	r1, r3, r1
    3d86:	2380      	movs	r3, #128	; 0x80
    3d88:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    3d8a:	2500      	movs	r5, #0
    3d8c:	e7e5      	b.n	3d5a <usb_device_endpoint_write_buffer_job+0x16>
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	20000b1c 	.word	0x20000b1c
    3d94:	f0003fff 	.word	0xf0003fff

00003d98 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3d98:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    3d9a:	000c      	movs	r4, r1
    3d9c:	3408      	adds	r4, #8
    3d9e:	0164      	lsls	r4, r4, #5
    3da0:	6805      	ldr	r5, [r0, #0]
    3da2:	5d64      	ldrb	r4, [r4, r5]
    3da4:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3da6:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    3da8:	2c00      	cmp	r4, #0
    3daa:	d101      	bne.n	3db0 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    3dac:	0028      	movs	r0, r5
    3dae:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3db0:	4c0b      	ldr	r4, [pc, #44]	; (3de0 <usb_device_endpoint_read_buffer_job+0x48>)
    3db2:	014d      	lsls	r5, r1, #5
    3db4:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    3db6:	1962      	adds	r2, r4, r5
    3db8:	6854      	ldr	r4, [r2, #4]
    3dba:	049b      	lsls	r3, r3, #18
    3dbc:	091b      	lsrs	r3, r3, #4
    3dbe:	4d09      	ldr	r5, [pc, #36]	; (3de4 <usb_device_endpoint_read_buffer_job+0x4c>)
    3dc0:	402c      	ands	r4, r5
    3dc2:	4323      	orrs	r3, r4
    3dc4:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3dc6:	6853      	ldr	r3, [r2, #4]
    3dc8:	0b9b      	lsrs	r3, r3, #14
    3dca:	039b      	lsls	r3, r3, #14
    3dcc:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3dce:	6803      	ldr	r3, [r0, #0]
    3dd0:	3108      	adds	r1, #8
    3dd2:	0149      	lsls	r1, r1, #5
    3dd4:	1859      	adds	r1, r3, r1
    3dd6:	2340      	movs	r3, #64	; 0x40
    3dd8:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    3dda:	2500      	movs	r5, #0
    3ddc:	e7e6      	b.n	3dac <usb_device_endpoint_read_buffer_job+0x14>
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	20000b1c 	.word	0x20000b1c
    3de4:	f0003fff 	.word	0xf0003fff

00003de8 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3de8:	4b09      	ldr	r3, [pc, #36]	; (3e10 <usb_device_endpoint_setup_buffer_job+0x28>)
    3dea:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    3dec:	685a      	ldr	r2, [r3, #4]
    3dee:	4909      	ldr	r1, [pc, #36]	; (3e14 <usb_device_endpoint_setup_buffer_job+0x2c>)
    3df0:	4011      	ands	r1, r2
    3df2:	2280      	movs	r2, #128	; 0x80
    3df4:	0292      	lsls	r2, r2, #10
    3df6:	430a      	orrs	r2, r1
    3df8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3dfa:	685a      	ldr	r2, [r3, #4]
    3dfc:	0b92      	lsrs	r2, r2, #14
    3dfe:	0392      	lsls	r2, r2, #14
    3e00:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    3e02:	6802      	ldr	r2, [r0, #0]
    3e04:	2140      	movs	r1, #64	; 0x40
    3e06:	2382      	movs	r3, #130	; 0x82
    3e08:	005b      	lsls	r3, r3, #1
    3e0a:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    3e0c:	2000      	movs	r0, #0
    3e0e:	4770      	bx	lr
    3e10:	20000b1c 	.word	0x20000b1c
    3e14:	f0003fff 	.word	0xf0003fff

00003e18 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    3e18:	6802      	ldr	r2, [r0, #0]
    3e1a:	7813      	ldrb	r3, [r2, #0]
    3e1c:	2102      	movs	r1, #2
    3e1e:	430b      	orrs	r3, r1
    3e20:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3e22:	6802      	ldr	r2, [r0, #0]
    3e24:	7893      	ldrb	r3, [r2, #2]
    3e26:	2b02      	cmp	r3, #2
    3e28:	d0fc      	beq.n	3e24 <usb_enable+0xc>
}
    3e2a:	4770      	bx	lr

00003e2c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e2e:	46de      	mov	lr, fp
    3e30:	4657      	mov	r7, sl
    3e32:	464e      	mov	r6, r9
    3e34:	4645      	mov	r5, r8
    3e36:	b5e0      	push	{r5, r6, r7, lr}
    3e38:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3e3a:	4bc4      	ldr	r3, [pc, #784]	; (414c <USB_Handler+0x320>)
    3e3c:	681f      	ldr	r7, [r3, #0]
    3e3e:	683d      	ldr	r5, [r7, #0]
    3e40:	782b      	ldrb	r3, [r5, #0]
    3e42:	09db      	lsrs	r3, r3, #7
    3e44:	d114      	bne.n	3e70 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3e46:	8c2e      	ldrh	r6, [r5, #32]
    3e48:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    3e4a:	2e00      	cmp	r6, #0
    3e4c:	d000      	beq.n	3e50 <USB_Handler+0x24>
    3e4e:	e22d      	b.n	42ac <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3e50:	8bae      	ldrh	r6, [r5, #28]
    3e52:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    3e54:	23ab      	movs	r3, #171	; 0xab
    3e56:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3e58:	5afb      	ldrh	r3, [r7, r3]
    3e5a:	22aa      	movs	r2, #170	; 0xaa
    3e5c:	0052      	lsls	r2, r2, #1
    3e5e:	5abd      	ldrh	r5, [r7, r2]
    3e60:	401d      	ands	r5, r3
    3e62:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3e64:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    3e66:	4fba      	ldr	r7, [pc, #744]	; (4150 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3e68:	4bb8      	ldr	r3, [pc, #736]	; (414c <USB_Handler+0x320>)
    3e6a:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3e6c:	4698      	mov	r8, r3
    3e6e:	e208      	b.n	4282 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3e70:	8c2b      	ldrh	r3, [r5, #32]
    3e72:	b29b      	uxth	r3, r3
    3e74:	2b00      	cmp	r3, #0
    3e76:	d100      	bne.n	3e7a <USB_Handler+0x4e>
    3e78:	e13d      	b.n	40f6 <USB_Handler+0x2ca>
    3e7a:	8c28      	ldrh	r0, [r5, #32]
    3e7c:	b280      	uxth	r0, r0
    3e7e:	4bb5      	ldr	r3, [pc, #724]	; (4154 <USB_Handler+0x328>)
    3e80:	4798      	blx	r3
    3e82:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    3e84:	281f      	cmp	r0, #31
    3e86:	d900      	bls.n	3e8a <USB_Handler+0x5e>
    3e88:	e135      	b.n	40f6 <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3e8a:	0003      	movs	r3, r0
    3e8c:	3308      	adds	r3, #8
    3e8e:	015b      	lsls	r3, r3, #5
    3e90:	18ed      	adds	r5, r5, r3
    3e92:	79ed      	ldrb	r5, [r5, #7]
    3e94:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3e96:	07ab      	lsls	r3, r5, #30
    3e98:	d041      	beq.n	3f1e <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3e9a:	4aaf      	ldr	r2, [pc, #700]	; (4158 <USB_Handler+0x32c>)
    3e9c:	2301      	movs	r3, #1
    3e9e:	4083      	lsls	r3, r0
    3ea0:	6811      	ldr	r1, [r2, #0]
    3ea2:	4399      	bics	r1, r3
    3ea4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3ea6:	0003      	movs	r3, r0
    3ea8:	3308      	adds	r3, #8
    3eaa:	015b      	lsls	r3, r3, #5
    3eac:	683a      	ldr	r2, [r7, #0]
    3eae:	4694      	mov	ip, r2
    3eb0:	4463      	add	r3, ip
    3eb2:	2203      	movs	r2, #3
    3eb4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3eb6:	183b      	adds	r3, r7, r0
    3eb8:	33ae      	adds	r3, #174	; 0xae
    3eba:	781b      	ldrb	r3, [r3, #0]
    3ebc:	07db      	lsls	r3, r3, #31
    3ebe:	d52e      	bpl.n	3f1e <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    3ec0:	4ba6      	ldr	r3, [pc, #664]	; (415c <USB_Handler+0x330>)
    3ec2:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    3ec4:	683a      	ldr	r2, [r7, #0]
    3ec6:	0003      	movs	r3, r0
    3ec8:	3308      	adds	r3, #8
    3eca:	015b      	lsls	r3, r3, #5
    3ecc:	5c9b      	ldrb	r3, [r3, r2]
    3ece:	079b      	lsls	r3, r3, #30
    3ed0:	0f9b      	lsrs	r3, r3, #30
    3ed2:	2b01      	cmp	r3, #1
    3ed4:	d100      	bne.n	3ed8 <USB_Handler+0xac>
    3ed6:	e094      	b.n	4002 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3ed8:	0142      	lsls	r2, r0, #5
    3eda:	4ba1      	ldr	r3, [pc, #644]	; (4160 <USB_Handler+0x334>)
    3edc:	189b      	adds	r3, r3, r2
    3ede:	685a      	ldr	r2, [r3, #4]
    3ee0:	0112      	lsls	r2, r2, #4
    3ee2:	0c92      	lsrs	r2, r2, #18
    3ee4:	b290      	uxth	r0, r2
    3ee6:	499d      	ldr	r1, [pc, #628]	; (415c <USB_Handler+0x330>)
    3ee8:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3eea:	685a      	ldr	r2, [r3, #4]
    3eec:	0492      	lsls	r2, r2, #18
    3eee:	0c92      	lsrs	r2, r2, #18
    3ef0:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3ef2:	685a      	ldr	r2, [r3, #4]
    3ef4:	499b      	ldr	r1, [pc, #620]	; (4164 <USB_Handler+0x338>)
    3ef6:	400a      	ands	r2, r1
    3ef8:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3efa:	2800      	cmp	r0, #0
    3efc:	d107      	bne.n	3f0e <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3efe:	0162      	lsls	r2, r4, #5
    3f00:	4b97      	ldr	r3, [pc, #604]	; (4160 <USB_Handler+0x334>)
    3f02:	189b      	adds	r3, r3, r2
    3f04:	685b      	ldr	r3, [r3, #4]
    3f06:	049b      	lsls	r3, r3, #18
    3f08:	0c9b      	lsrs	r3, r3, #18
    3f0a:	4a94      	ldr	r2, [pc, #592]	; (415c <USB_Handler+0x330>)
    3f0c:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    3f0e:	4b8f      	ldr	r3, [pc, #572]	; (414c <USB_Handler+0x320>)
    3f10:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3f12:	1ca3      	adds	r3, r4, #2
    3f14:	011b      	lsls	r3, r3, #4
    3f16:	18c3      	adds	r3, r0, r3
    3f18:	685b      	ldr	r3, [r3, #4]
    3f1a:	4990      	ldr	r1, [pc, #576]	; (415c <USB_Handler+0x330>)
    3f1c:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3f1e:	076b      	lsls	r3, r5, #29
    3f20:	d51f      	bpl.n	3f62 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3f22:	4b8a      	ldr	r3, [pc, #552]	; (414c <USB_Handler+0x320>)
    3f24:	6818      	ldr	r0, [r3, #0]
    3f26:	6802      	ldr	r2, [r0, #0]
    3f28:	0023      	movs	r3, r4
    3f2a:	3308      	adds	r3, #8
    3f2c:	015b      	lsls	r3, r3, #5
    3f2e:	5c9b      	ldrb	r3, [r3, r2]
    3f30:	069b      	lsls	r3, r3, #26
    3f32:	0f5b      	lsrs	r3, r3, #29
    3f34:	2b02      	cmp	r3, #2
    3f36:	d075      	beq.n	4024 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3f38:	0023      	movs	r3, r4
    3f3a:	3308      	adds	r3, #8
    3f3c:	015b      	lsls	r3, r3, #5
    3f3e:	5c9b      	ldrb	r3, [r3, r2]
    3f40:	069b      	lsls	r3, r3, #26
    3f42:	0f5b      	lsrs	r3, r3, #29
    3f44:	2b03      	cmp	r3, #3
    3f46:	d100      	bne.n	3f4a <USB_Handler+0x11e>
    3f48:	e09e      	b.n	4088 <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3f4a:	0162      	lsls	r2, r4, #5
    3f4c:	4b84      	ldr	r3, [pc, #528]	; (4160 <USB_Handler+0x334>)
    3f4e:	189b      	adds	r3, r3, r2
    3f50:	2200      	movs	r2, #0
    3f52:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3f54:	6803      	ldr	r3, [r0, #0]
    3f56:	0022      	movs	r2, r4
    3f58:	3208      	adds	r2, #8
    3f5a:	0152      	lsls	r2, r2, #5
    3f5c:	189b      	adds	r3, r3, r2
    3f5e:	2204      	movs	r2, #4
    3f60:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3f62:	072b      	lsls	r3, r5, #28
    3f64:	d515      	bpl.n	3f92 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3f66:	4a7c      	ldr	r2, [pc, #496]	; (4158 <USB_Handler+0x32c>)
    3f68:	2301      	movs	r3, #1
    3f6a:	40a3      	lsls	r3, r4
    3f6c:	6811      	ldr	r1, [r2, #0]
    3f6e:	4399      	bics	r1, r3
    3f70:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3f72:	4b76      	ldr	r3, [pc, #472]	; (414c <USB_Handler+0x320>)
    3f74:	6818      	ldr	r0, [r3, #0]
    3f76:	0023      	movs	r3, r4
    3f78:	3308      	adds	r3, #8
    3f7a:	015b      	lsls	r3, r3, #5
    3f7c:	6802      	ldr	r2, [r0, #0]
    3f7e:	4694      	mov	ip, r2
    3f80:	4463      	add	r3, ip
    3f82:	2208      	movs	r2, #8
    3f84:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3f86:	1903      	adds	r3, r0, r4
    3f88:	33ae      	adds	r3, #174	; 0xae
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	079b      	lsls	r3, r3, #30
    3f8e:	d500      	bpl.n	3f92 <USB_Handler+0x166>
    3f90:	e094      	b.n	40bc <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3f92:	06eb      	lsls	r3, r5, #27
    3f94:	d515      	bpl.n	3fc2 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3f96:	4a70      	ldr	r2, [pc, #448]	; (4158 <USB_Handler+0x32c>)
    3f98:	2301      	movs	r3, #1
    3f9a:	40a3      	lsls	r3, r4
    3f9c:	6811      	ldr	r1, [r2, #0]
    3f9e:	4399      	bics	r1, r3
    3fa0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3fa2:	4b6a      	ldr	r3, [pc, #424]	; (414c <USB_Handler+0x320>)
    3fa4:	6818      	ldr	r0, [r3, #0]
    3fa6:	0023      	movs	r3, r4
    3fa8:	3308      	adds	r3, #8
    3faa:	015b      	lsls	r3, r3, #5
    3fac:	6802      	ldr	r2, [r0, #0]
    3fae:	4694      	mov	ip, r2
    3fb0:	4463      	add	r3, ip
    3fb2:	2210      	movs	r2, #16
    3fb4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3fb6:	1903      	adds	r3, r0, r4
    3fb8:	33ae      	adds	r3, #174	; 0xae
    3fba:	781b      	ldrb	r3, [r3, #0]
    3fbc:	075b      	lsls	r3, r3, #29
    3fbe:	d500      	bpl.n	3fc2 <USB_Handler+0x196>
    3fc0:	e08a      	b.n	40d8 <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3fc2:	06ab      	lsls	r3, r5, #26
    3fc4:	d400      	bmi.n	3fc8 <USB_Handler+0x19c>
    3fc6:	e12f      	b.n	4228 <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3fc8:	4a63      	ldr	r2, [pc, #396]	; (4158 <USB_Handler+0x32c>)
    3fca:	2301      	movs	r3, #1
    3fcc:	40a3      	lsls	r3, r4
    3fce:	6811      	ldr	r1, [r2, #0]
    3fd0:	4399      	bics	r1, r3
    3fd2:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3fd4:	4b5d      	ldr	r3, [pc, #372]	; (414c <USB_Handler+0x320>)
    3fd6:	6818      	ldr	r0, [r3, #0]
    3fd8:	0023      	movs	r3, r4
    3fda:	3308      	adds	r3, #8
    3fdc:	015b      	lsls	r3, r3, #5
    3fde:	6802      	ldr	r2, [r0, #0]
    3fe0:	4694      	mov	ip, r2
    3fe2:	4463      	add	r3, ip
    3fe4:	2220      	movs	r2, #32
    3fe6:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3fe8:	1903      	adds	r3, r0, r4
    3fea:	33ae      	adds	r3, #174	; 0xae
    3fec:	781b      	ldrb	r3, [r3, #0]
    3fee:	071b      	lsls	r3, r3, #28
    3ff0:	d400      	bmi.n	3ff4 <USB_Handler+0x1c8>
    3ff2:	e119      	b.n	4228 <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    3ff4:	4959      	ldr	r1, [pc, #356]	; (415c <USB_Handler+0x330>)
    3ff6:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3ff8:	0124      	lsls	r4, r4, #4
    3ffa:	1904      	adds	r4, r0, r4
    3ffc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3ffe:	4798      	blx	r3
    4000:	e112      	b.n	4228 <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4002:	0142      	lsls	r2, r0, #5
    4004:	4b56      	ldr	r3, [pc, #344]	; (4160 <USB_Handler+0x334>)
    4006:	189b      	adds	r3, r3, r2
    4008:	685a      	ldr	r2, [r3, #4]
    400a:	0492      	lsls	r2, r2, #18
    400c:	0c92      	lsrs	r2, r2, #18
    400e:	4953      	ldr	r1, [pc, #332]	; (415c <USB_Handler+0x330>)
    4010:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4012:	685a      	ldr	r2, [r3, #4]
    4014:	0112      	lsls	r2, r2, #4
    4016:	0c92      	lsrs	r2, r2, #18
    4018:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    401a:	685a      	ldr	r2, [r3, #4]
    401c:	0b92      	lsrs	r2, r2, #14
    401e:	0392      	lsls	r2, r2, #14
    4020:	605a      	str	r2, [r3, #4]
    4022:	e774      	b.n	3f0e <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    4024:	0023      	movs	r3, r4
    4026:	3308      	adds	r3, #8
    4028:	015b      	lsls	r3, r3, #5
    402a:	5c9b      	ldrb	r3, [r3, r2]
    402c:	079b      	lsls	r3, r3, #30
    402e:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    4030:	2b01      	cmp	r3, #1
    4032:	d181      	bne.n	3f38 <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    4034:	0161      	lsls	r1, r4, #5
    4036:	4b4a      	ldr	r3, [pc, #296]	; (4160 <USB_Handler+0x334>)
    4038:	185b      	adds	r3, r3, r1
    403a:	3308      	adds	r3, #8
    403c:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    403e:	07db      	lsls	r3, r3, #31
    4040:	d400      	bmi.n	4044 <USB_Handler+0x218>
    4042:	e779      	b.n	3f38 <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    4044:	4a44      	ldr	r2, [pc, #272]	; (4158 <USB_Handler+0x32c>)
    4046:	2301      	movs	r3, #1
    4048:	40a3      	lsls	r3, r4
    404a:	6811      	ldr	r1, [r2, #0]
    404c:	4399      	bics	r1, r3
    404e:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    4050:	0162      	lsls	r2, r4, #5
    4052:	4b43      	ldr	r3, [pc, #268]	; (4160 <USB_Handler+0x334>)
    4054:	189b      	adds	r3, r3, r2
    4056:	2200      	movs	r2, #0
    4058:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    405a:	0023      	movs	r3, r4
    405c:	3308      	adds	r3, #8
    405e:	015b      	lsls	r3, r3, #5
    4060:	6802      	ldr	r2, [r0, #0]
    4062:	4694      	mov	ip, r2
    4064:	4463      	add	r3, ip
    4066:	2204      	movs	r2, #4
    4068:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    406a:	1903      	adds	r3, r0, r4
    406c:	33ae      	adds	r3, #174	; 0xae
    406e:	781b      	ldrb	r3, [r3, #0]
    4070:	079b      	lsls	r3, r3, #30
    4072:	d400      	bmi.n	4076 <USB_Handler+0x24a>
    4074:	e775      	b.n	3f62 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    4076:	4939      	ldr	r1, [pc, #228]	; (415c <USB_Handler+0x330>)
    4078:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    407a:	2310      	movs	r3, #16
    407c:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    407e:	0123      	lsls	r3, r4, #4
    4080:	18c3      	adds	r3, r0, r3
    4082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4084:	4798      	blx	r3
    4086:	e76c      	b.n	3f62 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    4088:	0023      	movs	r3, r4
    408a:	3308      	adds	r3, #8
    408c:	015b      	lsls	r3, r3, #5
    408e:	5c9b      	ldrb	r3, [r3, r2]
    4090:	079b      	lsls	r3, r3, #30
    4092:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    4094:	2b01      	cmp	r3, #1
    4096:	d000      	beq.n	409a <USB_Handler+0x26e>
    4098:	e757      	b.n	3f4a <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    409a:	0162      	lsls	r2, r4, #5
    409c:	4b30      	ldr	r3, [pc, #192]	; (4160 <USB_Handler+0x334>)
    409e:	189b      	adds	r3, r3, r2
    40a0:	2200      	movs	r2, #0
    40a2:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    40a4:	0023      	movs	r3, r4
    40a6:	3308      	adds	r3, #8
    40a8:	015b      	lsls	r3, r3, #5
    40aa:	6802      	ldr	r2, [r0, #0]
    40ac:	18d2      	adds	r2, r2, r3
    40ae:	2104      	movs	r1, #4
    40b0:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    40b2:	6802      	ldr	r2, [r0, #0]
    40b4:	18d3      	adds	r3, r2, r3
    40b6:	2210      	movs	r2, #16
    40b8:	715a      	strb	r2, [r3, #5]
    40ba:	e752      	b.n	3f62 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    40bc:	4927      	ldr	r1, [pc, #156]	; (415c <USB_Handler+0x330>)
    40be:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    40c0:	0162      	lsls	r2, r4, #5
    40c2:	4b27      	ldr	r3, [pc, #156]	; (4160 <USB_Handler+0x334>)
    40c4:	189b      	adds	r3, r3, r2
    40c6:	89db      	ldrh	r3, [r3, #14]
    40c8:	221f      	movs	r2, #31
    40ca:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    40cc:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    40ce:	0123      	lsls	r3, r4, #4
    40d0:	18c3      	adds	r3, r0, r3
    40d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40d4:	4798      	blx	r3
    40d6:	e75c      	b.n	3f92 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    40d8:	4920      	ldr	r1, [pc, #128]	; (415c <USB_Handler+0x330>)
    40da:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    40dc:	0162      	lsls	r2, r4, #5
    40de:	4b20      	ldr	r3, [pc, #128]	; (4160 <USB_Handler+0x334>)
    40e0:	189b      	adds	r3, r3, r2
    40e2:	685b      	ldr	r3, [r3, #4]
    40e4:	011b      	lsls	r3, r3, #4
    40e6:	0c9b      	lsrs	r3, r3, #18
    40e8:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    40ea:	0123      	lsls	r3, r4, #4
    40ec:	18c3      	adds	r3, r0, r3
    40ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    40f0:	2100      	movs	r1, #0
    40f2:	4798      	blx	r3
    40f4:	e765      	b.n	3fc2 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    40f6:	8bac      	ldrh	r4, [r5, #28]
    40f8:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    40fa:	0763      	lsls	r3, r4, #29
    40fc:	d538      	bpl.n	4170 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    40fe:	2304      	movs	r3, #4
    4100:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    4102:	4b15      	ldr	r3, [pc, #84]	; (4158 <USB_Handler+0x32c>)
    4104:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    4106:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    4108:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    410a:	2610      	movs	r6, #16
    410c:	e002      	b.n	4114 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    410e:	3301      	adds	r3, #1
    4110:	2b08      	cmp	r3, #8
    4112:	d029      	beq.n	4168 <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    4114:	0002      	movs	r2, r0
    4116:	409a      	lsls	r2, r3
    4118:	4215      	tst	r5, r2
    411a:	d0f8      	beq.n	410e <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    411c:	6839      	ldr	r1, [r7, #0]
    411e:	001a      	movs	r2, r3
    4120:	3208      	adds	r2, #8
    4122:	0152      	lsls	r2, r2, #5
    4124:	5c52      	ldrb	r2, [r2, r1]
    4126:	0692      	lsls	r2, r2, #26
    4128:	0f52      	lsrs	r2, r2, #29
    412a:	2a03      	cmp	r2, #3
    412c:	d1ef      	bne.n	410e <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    412e:	001a      	movs	r2, r3
    4130:	3208      	adds	r2, #8
    4132:	0152      	lsls	r2, r2, #5
    4134:	5c52      	ldrb	r2, [r2, r1]
    4136:	0792      	lsls	r2, r2, #30
    4138:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    413a:	2a01      	cmp	r2, #1
    413c:	d1e7      	bne.n	410e <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    413e:	001a      	movs	r2, r3
    4140:	3208      	adds	r2, #8
    4142:	0152      	lsls	r2, r2, #5
    4144:	1889      	adds	r1, r1, r2
    4146:	710e      	strb	r6, [r1, #4]
    4148:	e7e1      	b.n	410e <USB_Handler+0x2e2>
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	20000818 	.word	0x20000818
    4150:	0000bac4 	.word	0x0000bac4
    4154:	00007f4d 	.word	0x00007f4d
    4158:	20000828 	.word	0x20000828
    415c:	2000082c 	.word	0x2000082c
    4160:	20000b1c 	.word	0x20000b1c
    4164:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4168:	339d      	adds	r3, #157	; 0x9d
    416a:	5cfb      	ldrb	r3, [r7, r3]
    416c:	07db      	lsls	r3, r3, #31
    416e:	d462      	bmi.n	4236 <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    4170:	0723      	lsls	r3, r4, #28
    4172:	d50b      	bpl.n	418c <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    4174:	2200      	movs	r2, #0
    4176:	4baf      	ldr	r3, [pc, #700]	; (4434 <USB_Handler+0x608>)
    4178:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    417a:	4baf      	ldr	r3, [pc, #700]	; (4438 <USB_Handler+0x60c>)
    417c:	6818      	ldr	r0, [r3, #0]
    417e:	2308      	movs	r3, #8
    4180:	6802      	ldr	r2, [r0, #0]
    4182:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4184:	339d      	adds	r3, #157	; 0x9d
    4186:	5cc3      	ldrb	r3, [r0, r3]
    4188:	079b      	lsls	r3, r3, #30
    418a:	d458      	bmi.n	423e <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    418c:	0663      	lsls	r3, r4, #25
    418e:	d508      	bpl.n	41a2 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4190:	4ba9      	ldr	r3, [pc, #676]	; (4438 <USB_Handler+0x60c>)
    4192:	6818      	ldr	r0, [r3, #0]
    4194:	2340      	movs	r3, #64	; 0x40
    4196:	6802      	ldr	r2, [r0, #0]
    4198:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    419a:	3365      	adds	r3, #101	; 0x65
    419c:	5cc3      	ldrb	r3, [r0, r3]
    419e:	06db      	lsls	r3, r3, #27
    41a0:	d450      	bmi.n	4244 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    41a2:	06a3      	lsls	r3, r4, #26
    41a4:	d508      	bpl.n	41b8 <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    41a6:	4ba4      	ldr	r3, [pc, #656]	; (4438 <USB_Handler+0x60c>)
    41a8:	6818      	ldr	r0, [r3, #0]
    41aa:	2320      	movs	r3, #32
    41ac:	6802      	ldr	r2, [r0, #0]
    41ae:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    41b0:	3385      	adds	r3, #133	; 0x85
    41b2:	5cc3      	ldrb	r3, [r0, r3]
    41b4:	071b      	lsls	r3, r3, #28
    41b6:	d448      	bmi.n	424a <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    41b8:	06e3      	lsls	r3, r4, #27
    41ba:	d508      	bpl.n	41ce <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    41bc:	4b9e      	ldr	r3, [pc, #632]	; (4438 <USB_Handler+0x60c>)
    41be:	6818      	ldr	r0, [r3, #0]
    41c0:	2310      	movs	r3, #16
    41c2:	6802      	ldr	r2, [r0, #0]
    41c4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    41c6:	3395      	adds	r3, #149	; 0x95
    41c8:	5cc3      	ldrb	r3, [r0, r3]
    41ca:	075b      	lsls	r3, r3, #29
    41cc:	d440      	bmi.n	4250 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    41ce:	0623      	lsls	r3, r4, #24
    41d0:	d50b      	bpl.n	41ea <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    41d2:	2200      	movs	r2, #0
    41d4:	4b97      	ldr	r3, [pc, #604]	; (4434 <USB_Handler+0x608>)
    41d6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    41d8:	4b97      	ldr	r3, [pc, #604]	; (4438 <USB_Handler+0x60c>)
    41da:	6818      	ldr	r0, [r3, #0]
    41dc:	2380      	movs	r3, #128	; 0x80
    41de:	6802      	ldr	r2, [r0, #0]
    41e0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    41e2:	3325      	adds	r3, #37	; 0x25
    41e4:	5cc3      	ldrb	r3, [r0, r3]
    41e6:	069b      	lsls	r3, r3, #26
    41e8:	d435      	bmi.n	4256 <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    41ea:	05e3      	lsls	r3, r4, #23
    41ec:	d50c      	bpl.n	4208 <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    41ee:	2200      	movs	r2, #0
    41f0:	4b90      	ldr	r3, [pc, #576]	; (4434 <USB_Handler+0x608>)
    41f2:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    41f4:	4b90      	ldr	r3, [pc, #576]	; (4438 <USB_Handler+0x60c>)
    41f6:	6818      	ldr	r0, [r3, #0]
    41f8:	2380      	movs	r3, #128	; 0x80
    41fa:	005b      	lsls	r3, r3, #1
    41fc:	6802      	ldr	r2, [r0, #0]
    41fe:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4200:	3b5b      	subs	r3, #91	; 0x5b
    4202:	5cc3      	ldrb	r3, [r0, r3]
    4204:	065b      	lsls	r3, r3, #25
    4206:	d429      	bmi.n	425c <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4208:	05a3      	lsls	r3, r4, #22
    420a:	d50d      	bpl.n	4228 <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    420c:	2200      	movs	r2, #0
    420e:	4b89      	ldr	r3, [pc, #548]	; (4434 <USB_Handler+0x608>)
    4210:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4212:	4b89      	ldr	r3, [pc, #548]	; (4438 <USB_Handler+0x60c>)
    4214:	6818      	ldr	r0, [r3, #0]
    4216:	2380      	movs	r3, #128	; 0x80
    4218:	009b      	lsls	r3, r3, #2
    421a:	6802      	ldr	r2, [r0, #0]
    421c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    421e:	3b5c      	subs	r3, #92	; 0x5c
    4220:	3bff      	subs	r3, #255	; 0xff
    4222:	5cc3      	ldrb	r3, [r0, r3]
    4224:	2b7f      	cmp	r3, #127	; 0x7f
    4226:	d81c      	bhi.n	4262 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4228:	b003      	add	sp, #12
    422a:	bc3c      	pop	{r2, r3, r4, r5}
    422c:	4690      	mov	r8, r2
    422e:	4699      	mov	r9, r3
    4230:	46a2      	mov	sl, r4
    4232:	46ab      	mov	fp, r5
    4234:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	0038      	movs	r0, r7
    423a:	4798      	blx	r3
    423c:	e798      	b.n	4170 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    423e:	6883      	ldr	r3, [r0, #8]
    4240:	4798      	blx	r3
    4242:	e7a3      	b.n	418c <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4244:	6943      	ldr	r3, [r0, #20]
    4246:	4798      	blx	r3
    4248:	e7ab      	b.n	41a2 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    424a:	6903      	ldr	r3, [r0, #16]
    424c:	4798      	blx	r3
    424e:	e7b3      	b.n	41b8 <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4250:	68c3      	ldr	r3, [r0, #12]
    4252:	4798      	blx	r3
    4254:	e7bb      	b.n	41ce <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    4256:	6983      	ldr	r3, [r0, #24]
    4258:	4798      	blx	r3
    425a:	e7c6      	b.n	41ea <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    425c:	69c3      	ldr	r3, [r0, #28]
    425e:	4798      	blx	r3
    4260:	e7d2      	b.n	4208 <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4262:	6a03      	ldr	r3, [r0, #32]
    4264:	4798      	blx	r3
    4266:	e7df      	b.n	4228 <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4268:	0023      	movs	r3, r4
    426a:	332e      	adds	r3, #46	; 0x2e
    426c:	009b      	lsls	r3, r3, #2
    426e:	4642      	mov	r2, r8
    4270:	6812      	ldr	r2, [r2, #0]
    4272:	589b      	ldr	r3, [r3, r2]
    4274:	4971      	ldr	r1, [pc, #452]	; (443c <USB_Handler+0x610>)
    4276:	4642      	mov	r2, r8
    4278:	6810      	ldr	r0, [r2, #0]
    427a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    427c:	3401      	adds	r4, #1
    427e:	2c07      	cmp	r4, #7
    4280:	d0d2      	beq.n	4228 <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    4282:	0063      	lsls	r3, r4, #1
    4284:	5bdb      	ldrh	r3, [r3, r7]
    4286:	4233      	tst	r3, r6
    4288:	d003      	beq.n	4292 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    428a:	464a      	mov	r2, r9
    428c:	6812      	ldr	r2, [r2, #0]
    428e:	6812      	ldr	r2, [r2, #0]
    4290:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    4292:	422b      	tst	r3, r5
    4294:	d0f2      	beq.n	427c <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4296:	2c06      	cmp	r4, #6
    4298:	d1e6      	bne.n	4268 <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    429a:	4b69      	ldr	r3, [pc, #420]	; (4440 <USB_Handler+0x614>)
    429c:	891b      	ldrh	r3, [r3, #8]
    429e:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    42a0:	2280      	movs	r2, #128	; 0x80
    42a2:	0052      	lsls	r2, r2, #1
    42a4:	4013      	ands	r3, r2
    42a6:	4a65      	ldr	r2, [pc, #404]	; (443c <USB_Handler+0x610>)
    42a8:	6013      	str	r3, [r2, #0]
    42aa:	e7dd      	b.n	4268 <USB_Handler+0x43c>
    42ac:	003c      	movs	r4, r7
    42ae:	3459      	adds	r4, #89	; 0x59
    42b0:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    42b2:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    42b4:	2201      	movs	r2, #1
    42b6:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    42b8:	325f      	adds	r2, #95	; 0x5f
    42ba:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    42bc:	3a50      	subs	r2, #80	; 0x50
    42be:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    42c0:	3a0d      	subs	r2, #13
    42c2:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    42c4:	46b8      	mov	r8, r7
    42c6:	002f      	movs	r7, r5
    42c8:	e0c3      	b.n	4452 <USB_Handler+0x626>
    42ca:	002a      	movs	r2, r5
    42cc:	003d      	movs	r5, r7
    42ce:	4647      	mov	r7, r8
    42d0:	4690      	mov	r8, r2
    42d2:	015b      	lsls	r3, r3, #5
    42d4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    42d6:	2308      	movs	r3, #8
    42d8:	33ff      	adds	r3, #255	; 0xff
    42da:	5ceb      	ldrb	r3, [r5, r3]
    42dc:	065b      	lsls	r3, r3, #25
    42de:	d515      	bpl.n	430c <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    42e0:	2240      	movs	r2, #64	; 0x40
    42e2:	2308      	movs	r3, #8
    42e4:	33ff      	adds	r3, #255	; 0xff
    42e6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    42e8:	3b88      	subs	r3, #136	; 0x88
    42ea:	3bff      	subs	r3, #255	; 0xff
    42ec:	4642      	mov	r2, r8
    42ee:	4313      	orrs	r3, r2
    42f0:	4a54      	ldr	r2, [pc, #336]	; (4444 <USB_Handler+0x618>)
    42f2:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    42f4:	2360      	movs	r3, #96	; 0x60
    42f6:	420b      	tst	r3, r1
    42f8:	d096      	beq.n	4228 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    42fa:	9b01      	ldr	r3, [sp, #4]
    42fc:	011b      	lsls	r3, r3, #4
    42fe:	18fb      	adds	r3, r7, r3
    4300:	33e0      	adds	r3, #224	; 0xe0
    4302:	681b      	ldr	r3, [r3, #0]
    4304:	494f      	ldr	r1, [pc, #316]	; (4444 <USB_Handler+0x618>)
    4306:	0038      	movs	r0, r7
    4308:	4798      	blx	r3
    430a:	e78d      	b.n	4228 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    430c:	2308      	movs	r3, #8
    430e:	33ff      	adds	r3, #255	; 0xff
    4310:	5ceb      	ldrb	r3, [r5, r3]
    4312:	069b      	lsls	r3, r3, #26
    4314:	d5ee      	bpl.n	42f4 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4316:	2220      	movs	r2, #32
    4318:	2308      	movs	r3, #8
    431a:	33ff      	adds	r3, #255	; 0xff
    431c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    431e:	4b49      	ldr	r3, [pc, #292]	; (4444 <USB_Handler+0x618>)
    4320:	4642      	mov	r2, r8
    4322:	719a      	strb	r2, [r3, #6]
    4324:	e7e6      	b.n	42f4 <USB_Handler+0x4c8>
    4326:	003d      	movs	r5, r7
    4328:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    432a:	9a01      	ldr	r2, [sp, #4]
    432c:	0013      	movs	r3, r2
    432e:	3308      	adds	r3, #8
    4330:	015b      	lsls	r3, r3, #5
    4332:	18ed      	adds	r5, r5, r3
    4334:	2310      	movs	r3, #16
    4336:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4338:	18bb      	adds	r3, r7, r2
    433a:	3361      	adds	r3, #97	; 0x61
    433c:	33ff      	adds	r3, #255	; 0xff
    433e:	781b      	ldrb	r3, [r3, #0]
    4340:	06db      	lsls	r3, r3, #27
    4342:	d400      	bmi.n	4346 <USB_Handler+0x51a>
    4344:	e770      	b.n	4228 <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4346:	0010      	movs	r0, r2
    4348:	0152      	lsls	r2, r2, #5
    434a:	4b3d      	ldr	r3, [pc, #244]	; (4440 <USB_Handler+0x614>)
    434c:	189b      	adds	r3, r3, r2
    434e:	685b      	ldr	r3, [r3, #4]
    4350:	049b      	lsls	r3, r3, #18
    4352:	0c9b      	lsrs	r3, r3, #18
    4354:	493b      	ldr	r1, [pc, #236]	; (4444 <USB_Handler+0x618>)
    4356:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4358:	0103      	lsls	r3, r0, #4
    435a:	18fb      	adds	r3, r7, r3
    435c:	33dc      	adds	r3, #220	; 0xdc
    435e:	681b      	ldr	r3, [r3, #0]
    4360:	4640      	mov	r0, r8
    4362:	4798      	blx	r3
    4364:	e760      	b.n	4228 <USB_Handler+0x3fc>
    4366:	002a      	movs	r2, r5
    4368:	003d      	movs	r5, r7
    436a:	4647      	mov	r7, r8
    436c:	4690      	mov	r8, r2
    436e:	015b      	lsls	r3, r3, #5
    4370:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4372:	2308      	movs	r3, #8
    4374:	33ff      	adds	r3, #255	; 0xff
    4376:	5ceb      	ldrb	r3, [r5, r3]
    4378:	079b      	lsls	r3, r3, #30
    437a:	d51e      	bpl.n	43ba <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    437c:	2202      	movs	r2, #2
    437e:	2308      	movs	r3, #8
    4380:	33ff      	adds	r3, #255	; 0xff
    4382:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4384:	482f      	ldr	r0, [pc, #188]	; (4444 <USB_Handler+0x618>)
    4386:	3b88      	subs	r3, #136	; 0x88
    4388:	3bff      	subs	r3, #255	; 0xff
    438a:	4642      	mov	r2, r8
    438c:	4313      	orrs	r3, r2
    438e:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4390:	9b01      	ldr	r3, [sp, #4]
    4392:	015a      	lsls	r2, r3, #5
    4394:	4b2a      	ldr	r3, [pc, #168]	; (4440 <USB_Handler+0x614>)
    4396:	189b      	adds	r3, r3, r2
    4398:	3310      	adds	r3, #16
    439a:	685b      	ldr	r3, [r3, #4]
    439c:	049b      	lsls	r3, r3, #18
    439e:	0c9b      	lsrs	r3, r3, #18
    43a0:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    43a2:	078b      	lsls	r3, r1, #30
    43a4:	d100      	bne.n	43a8 <USB_Handler+0x57c>
    43a6:	e73f      	b.n	4228 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    43a8:	9b01      	ldr	r3, [sp, #4]
    43aa:	330d      	adds	r3, #13
    43ac:	011b      	lsls	r3, r3, #4
    43ae:	18fb      	adds	r3, r7, r3
    43b0:	685b      	ldr	r3, [r3, #4]
    43b2:	4924      	ldr	r1, [pc, #144]	; (4444 <USB_Handler+0x618>)
    43b4:	0038      	movs	r0, r7
    43b6:	4798      	blx	r3
    43b8:	e736      	b.n	4228 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    43ba:	2308      	movs	r3, #8
    43bc:	33ff      	adds	r3, #255	; 0xff
    43be:	5ceb      	ldrb	r3, [r5, r3]
    43c0:	07db      	lsls	r3, r3, #31
    43c2:	d5ee      	bpl.n	43a2 <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    43c4:	2201      	movs	r2, #1
    43c6:	2308      	movs	r3, #8
    43c8:	33ff      	adds	r3, #255	; 0xff
    43ca:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    43cc:	481d      	ldr	r0, [pc, #116]	; (4444 <USB_Handler+0x618>)
    43ce:	4643      	mov	r3, r8
    43d0:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    43d2:	9b01      	ldr	r3, [sp, #4]
    43d4:	015b      	lsls	r3, r3, #5
    43d6:	4a1a      	ldr	r2, [pc, #104]	; (4440 <USB_Handler+0x614>)
    43d8:	18d2      	adds	r2, r2, r3
    43da:	6853      	ldr	r3, [r2, #4]
    43dc:	049b      	lsls	r3, r3, #18
    43de:	0c9b      	lsrs	r3, r3, #18
    43e0:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    43e2:	6853      	ldr	r3, [r2, #4]
    43e4:	011b      	lsls	r3, r3, #4
    43e6:	0c9b      	lsrs	r3, r3, #18
    43e8:	8083      	strh	r3, [r0, #4]
    43ea:	e7da      	b.n	43a2 <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    43ec:	2208      	movs	r2, #8
    43ee:	32ff      	adds	r2, #255	; 0xff
    43f0:	5c9a      	ldrb	r2, [r3, r2]
    43f2:	0752      	lsls	r2, r2, #29
    43f4:	d579      	bpl.n	44ea <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    43f6:	2004      	movs	r0, #4
    43f8:	2208      	movs	r2, #8
    43fa:	32ff      	adds	r2, #255	; 0xff
    43fc:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    43fe:	9801      	ldr	r0, [sp, #4]
    4400:	0142      	lsls	r2, r0, #5
    4402:	4b0f      	ldr	r3, [pc, #60]	; (4440 <USB_Handler+0x614>)
    4404:	189b      	adds	r3, r3, r2
    4406:	7a9b      	ldrb	r3, [r3, #10]
    4408:	079b      	lsls	r3, r3, #30
    440a:	d505      	bpl.n	4418 <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    440c:	4b0c      	ldr	r3, [pc, #48]	; (4440 <USB_Handler+0x614>)
    440e:	189b      	adds	r3, r3, r2
    4410:	7a9a      	ldrb	r2, [r3, #10]
    4412:	2002      	movs	r0, #2
    4414:	4382      	bics	r2, r0
    4416:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4418:	4b0a      	ldr	r3, [pc, #40]	; (4444 <USB_Handler+0x618>)
    441a:	4642      	mov	r2, r8
    441c:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    441e:	9b01      	ldr	r3, [sp, #4]
    4420:	3308      	adds	r3, #8
    4422:	015b      	lsls	r3, r3, #5
    4424:	683a      	ldr	r2, [r7, #0]
    4426:	4694      	mov	ip, r2
    4428:	4463      	add	r3, ip
    442a:	79db      	ldrb	r3, [r3, #7]
    442c:	07db      	lsls	r3, r3, #31
    442e:	d55c      	bpl.n	44ea <USB_Handler+0x6be>
    4430:	e6fa      	b.n	4228 <USB_Handler+0x3fc>
    4432:	46c0      	nop			; (mov r8, r8)
    4434:	20000828 	.word	0x20000828
    4438:	20000818 	.word	0x20000818
    443c:	2000081c 	.word	0x2000081c
    4440:	20000b1c 	.word	0x20000b1c
    4444:	20000820 	.word	0x20000820
    4448:	3301      	adds	r3, #1
    444a:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    444c:	2b08      	cmp	r3, #8
    444e:	d100      	bne.n	4452 <USB_Handler+0x626>
    4450:	e6ea      	b.n	4228 <USB_Handler+0x3fc>
    4452:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4454:	9301      	str	r3, [sp, #4]
    4456:	0032      	movs	r2, r6
    4458:	411a      	asrs	r2, r3
    445a:	4661      	mov	r1, ip
    445c:	4211      	tst	r1, r2
    445e:	d0f3      	beq.n	4448 <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4460:	001a      	movs	r2, r3
    4462:	3208      	adds	r2, #8
    4464:	0152      	lsls	r2, r2, #5
    4466:	18ba      	adds	r2, r7, r2
    4468:	79d2      	ldrb	r2, [r2, #7]
    446a:	b2d2      	uxtb	r2, r2
    446c:	7a21      	ldrb	r1, [r4, #8]
    446e:	4011      	ands	r1, r2
    4470:	7820      	ldrb	r0, [r4, #0]
    4472:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4474:	4648      	mov	r0, r9
    4476:	4210      	tst	r0, r2
    4478:	d000      	beq.n	447c <USB_Handler+0x650>
    447a:	e726      	b.n	42ca <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    447c:	4650      	mov	r0, sl
    447e:	4210      	tst	r0, r2
    4480:	d000      	beq.n	4484 <USB_Handler+0x658>
    4482:	e750      	b.n	4326 <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4484:	4658      	mov	r0, fp
    4486:	4210      	tst	r0, r2
    4488:	d000      	beq.n	448c <USB_Handler+0x660>
    448a:	e76c      	b.n	4366 <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    448c:	200c      	movs	r0, #12
    448e:	4210      	tst	r0, r2
    4490:	d0da      	beq.n	4448 <USB_Handler+0x61c>
    4492:	002a      	movs	r2, r5
    4494:	003d      	movs	r5, r7
    4496:	4647      	mov	r7, r8
    4498:	4690      	mov	r8, r2
    449a:	015b      	lsls	r3, r3, #5
    449c:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    449e:	2208      	movs	r2, #8
    44a0:	32ff      	adds	r2, #255	; 0xff
    44a2:	5c9a      	ldrb	r2, [r3, r2]
    44a4:	0712      	lsls	r2, r2, #28
    44a6:	d5a1      	bpl.n	43ec <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    44a8:	3804      	subs	r0, #4
    44aa:	2208      	movs	r2, #8
    44ac:	32ff      	adds	r2, #255	; 0xff
    44ae:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    44b0:	9801      	ldr	r0, [sp, #4]
    44b2:	0142      	lsls	r2, r0, #5
    44b4:	4b13      	ldr	r3, [pc, #76]	; (4504 <USB_Handler+0x6d8>)
    44b6:	189b      	adds	r3, r3, r2
    44b8:	7e9b      	ldrb	r3, [r3, #26]
    44ba:	079b      	lsls	r3, r3, #30
    44bc:	d505      	bpl.n	44ca <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    44be:	4b11      	ldr	r3, [pc, #68]	; (4504 <USB_Handler+0x6d8>)
    44c0:	189b      	adds	r3, r3, r2
    44c2:	7e9a      	ldrb	r2, [r3, #26]
    44c4:	2002      	movs	r0, #2
    44c6:	4382      	bics	r2, r0
    44c8:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    44ca:	2380      	movs	r3, #128	; 0x80
    44cc:	425b      	negs	r3, r3
    44ce:	4642      	mov	r2, r8
    44d0:	4313      	orrs	r3, r2
    44d2:	4a0d      	ldr	r2, [pc, #52]	; (4508 <USB_Handler+0x6dc>)
    44d4:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    44d6:	9b01      	ldr	r3, [sp, #4]
    44d8:	3308      	adds	r3, #8
    44da:	015b      	lsls	r3, r3, #5
    44dc:	683a      	ldr	r2, [r7, #0]
    44de:	4694      	mov	ip, r2
    44e0:	4463      	add	r3, ip
    44e2:	79db      	ldrb	r3, [r3, #7]
    44e4:	079b      	lsls	r3, r3, #30
    44e6:	d500      	bpl.n	44ea <USB_Handler+0x6be>
    44e8:	e69e      	b.n	4228 <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    44ea:	230c      	movs	r3, #12
    44ec:	420b      	tst	r3, r1
    44ee:	d100      	bne.n	44f2 <USB_Handler+0x6c6>
    44f0:	e69a      	b.n	4228 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    44f2:	9b01      	ldr	r3, [sp, #4]
    44f4:	011b      	lsls	r3, r3, #4
    44f6:	18fb      	adds	r3, r7, r3
    44f8:	33d8      	adds	r3, #216	; 0xd8
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	4902      	ldr	r1, [pc, #8]	; (4508 <USB_Handler+0x6dc>)
    44fe:	0038      	movs	r0, r7
    4500:	4798      	blx	r3
    4502:	e691      	b.n	4228 <USB_Handler+0x3fc>
    4504:	20000b1c 	.word	0x20000b1c
    4508:	20000820 	.word	0x20000820

0000450c <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    450c:	2200      	movs	r2, #0
    450e:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4510:	2301      	movs	r3, #1
    4512:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4514:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4516:	70c3      	strb	r3, [r0, #3]
}
    4518:	4770      	bx	lr
	...

0000451c <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    451c:	b5f0      	push	{r4, r5, r6, r7, lr}
    451e:	46ce      	mov	lr, r9
    4520:	4647      	mov	r7, r8
    4522:	b580      	push	{r7, lr}
    4524:	b083      	sub	sp, #12
    4526:	0004      	movs	r4, r0
    4528:	000d      	movs	r5, r1
    452a:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    452c:	2300      	movs	r3, #0
    452e:	4a6e      	ldr	r2, [pc, #440]	; (46e8 <usb_init+0x1cc>)
    4530:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4532:	4a6e      	ldr	r2, [pc, #440]	; (46ec <usb_init+0x1d0>)
    4534:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4536:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    4538:	496d      	ldr	r1, [pc, #436]	; (46f0 <usb_init+0x1d4>)
    453a:	69ca      	ldr	r2, [r1, #28]
    453c:	2020      	movs	r0, #32
    453e:	4302      	orrs	r2, r0
    4540:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4542:	af01      	add	r7, sp, #4
    4544:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4546:	2201      	movs	r2, #1
    4548:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    454a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    454c:	3306      	adds	r3, #6
    454e:	4699      	mov	r9, r3
    4550:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4552:	0039      	movs	r1, r7
    4554:	3808      	subs	r0, #8
    4556:	4b67      	ldr	r3, [pc, #412]	; (46f4 <usb_init+0x1d8>)
    4558:	4698      	mov	r8, r3
    455a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    455c:	464b      	mov	r3, r9
    455e:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4560:	0039      	movs	r1, r7
    4562:	2019      	movs	r0, #25
    4564:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4566:	78b3      	ldrb	r3, [r6, #2]
    4568:	466a      	mov	r2, sp
    456a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    456c:	4669      	mov	r1, sp
    456e:	2006      	movs	r0, #6
    4570:	4b61      	ldr	r3, [pc, #388]	; (46f8 <usb_init+0x1dc>)
    4572:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4574:	2006      	movs	r0, #6
    4576:	4b61      	ldr	r3, [pc, #388]	; (46fc <usb_init+0x1e0>)
    4578:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    457a:	782b      	ldrb	r3, [r5, #0]
    457c:	2201      	movs	r2, #1
    457e:	4313      	orrs	r3, r2
    4580:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4582:	78ab      	ldrb	r3, [r5, #2]
    4584:	07db      	lsls	r3, r3, #31
    4586:	d4fc      	bmi.n	4582 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4588:	4a5d      	ldr	r2, [pc, #372]	; (4700 <usb_init+0x1e4>)
    458a:	78d3      	ldrb	r3, [r2, #3]
    458c:	2103      	movs	r1, #3
    458e:	438b      	bics	r3, r1
    4590:	2102      	movs	r1, #2
    4592:	430b      	orrs	r3, r1
    4594:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4596:	78d3      	ldrb	r3, [r2, #3]
    4598:	210c      	movs	r1, #12
    459a:	438b      	bics	r3, r1
    459c:	2108      	movs	r1, #8
    459e:	430b      	orrs	r3, r1
    45a0:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    45a2:	4b58      	ldr	r3, [pc, #352]	; (4704 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    45a4:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    45a6:	039b      	lsls	r3, r3, #14
    45a8:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    45aa:	2b1f      	cmp	r3, #31
    45ac:	d100      	bne.n	45b0 <usb_init+0x94>
    45ae:	e08f      	b.n	46d0 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    45b0:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    45b2:	019b      	lsls	r3, r3, #6
    45b4:	4954      	ldr	r1, [pc, #336]	; (4708 <usb_init+0x1ec>)
    45b6:	400a      	ands	r2, r1
    45b8:	4313      	orrs	r3, r2
    45ba:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    45bc:	4b51      	ldr	r3, [pc, #324]	; (4704 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    45be:	681b      	ldr	r3, [r3, #0]
    45c0:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    45c2:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    45c4:	2b1f      	cmp	r3, #31
    45c6:	d100      	bne.n	45ca <usb_init+0xae>
    45c8:	e084      	b.n	46d4 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    45ca:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    45cc:	211f      	movs	r1, #31
    45ce:	438a      	bics	r2, r1
    45d0:	4313      	orrs	r3, r2
    45d2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    45d4:	4b4b      	ldr	r3, [pc, #300]	; (4704 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    45d6:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    45d8:	019b      	lsls	r3, r3, #6
    45da:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    45dc:	2b07      	cmp	r3, #7
    45de:	d100      	bne.n	45e2 <usb_init+0xc6>
    45e0:	e07a      	b.n	46d8 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    45e2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    45e4:	031b      	lsls	r3, r3, #12
    45e6:	4949      	ldr	r1, [pc, #292]	; (470c <usb_init+0x1f0>)
    45e8:	400a      	ands	r2, r1
    45ea:	4313      	orrs	r3, r2
    45ec:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    45ee:	7832      	ldrb	r2, [r6, #0]
    45f0:	7829      	ldrb	r1, [r5, #0]
    45f2:	01d2      	lsls	r2, r2, #7
    45f4:	237f      	movs	r3, #127	; 0x7f
    45f6:	400b      	ands	r3, r1
    45f8:	4313      	orrs	r3, r2
    45fa:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    45fc:	7871      	ldrb	r1, [r6, #1]
    45fe:	782b      	ldrb	r3, [r5, #0]
    4600:	2201      	movs	r2, #1
    4602:	400a      	ands	r2, r1
    4604:	0092      	lsls	r2, r2, #2
    4606:	2104      	movs	r1, #4
    4608:	438b      	bics	r3, r1
    460a:	4313      	orrs	r3, r2
    460c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    460e:	4b40      	ldr	r3, [pc, #256]	; (4710 <usb_init+0x1f4>)
    4610:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4612:	78f3      	ldrb	r3, [r6, #3]
    4614:	2b01      	cmp	r3, #1
    4616:	d061      	beq.n	46dc <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4618:	2b00      	cmp	r3, #0
    461a:	d106      	bne.n	462a <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    461c:	6822      	ldr	r2, [r4, #0]
    461e:	8913      	ldrh	r3, [r2, #8]
    4620:	210c      	movs	r1, #12
    4622:	438b      	bics	r3, r1
    4624:	2104      	movs	r1, #4
    4626:	430b      	orrs	r3, r1
    4628:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    462a:	2280      	movs	r2, #128	; 0x80
    462c:	0052      	lsls	r2, r2, #1
    462e:	2100      	movs	r1, #0
    4630:	4837      	ldr	r0, [pc, #220]	; (4710 <usb_init+0x1f4>)
    4632:	4b38      	ldr	r3, [pc, #224]	; (4714 <usb_init+0x1f8>)
    4634:	4798      	blx	r3
    4636:	1d23      	adds	r3, r4, #4
    4638:	0021      	movs	r1, r4
    463a:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    463c:	2200      	movs	r2, #0
    463e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4640:	428b      	cmp	r3, r1
    4642:	d1fc      	bne.n	463e <usb_init+0x122>
    4644:	0021      	movs	r1, r4
    4646:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4648:	2200      	movs	r2, #0
    464a:	601a      	str	r2, [r3, #0]
    464c:	605a      	str	r2, [r3, #4]
    464e:	609a      	str	r2, [r3, #8]
    4650:	60da      	str	r2, [r3, #12]
    4652:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4654:	428b      	cmp	r3, r1
    4656:	d1f8      	bne.n	464a <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4658:	2300      	movs	r3, #0
    465a:	22a4      	movs	r2, #164	; 0xa4
    465c:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    465e:	3201      	adds	r2, #1
    4660:	54a3      	strb	r3, [r4, r2]
    4662:	0023      	movs	r3, r4
    4664:	33a6      	adds	r3, #166	; 0xa6
    4666:	0021      	movs	r1, r4
    4668:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    466a:	2200      	movs	r2, #0
    466c:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    466e:	721a      	strb	r2, [r3, #8]
    4670:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4672:	4299      	cmp	r1, r3
    4674:	d1fa      	bne.n	466c <usb_init+0x150>
    4676:	0023      	movs	r3, r4
    4678:	33b8      	adds	r3, #184	; 0xb8
    467a:	0021      	movs	r1, r4
    467c:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    467e:	2200      	movs	r2, #0
    4680:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4682:	428b      	cmp	r3, r1
    4684:	d1fc      	bne.n	4680 <usb_init+0x164>
    4686:	0021      	movs	r1, r4
    4688:	3155      	adds	r1, #85	; 0x55
    468a:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    468c:	2200      	movs	r2, #0
    468e:	601a      	str	r2, [r3, #0]
    4690:	605a      	str	r2, [r3, #4]
    4692:	609a      	str	r2, [r3, #8]
    4694:	60da      	str	r2, [r3, #12]
    4696:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4698:	428b      	cmp	r3, r1
    469a:	d1f8      	bne.n	468e <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    469c:	2300      	movs	r3, #0
    469e:	22aa      	movs	r2, #170	; 0xaa
    46a0:	0052      	lsls	r2, r2, #1
    46a2:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    46a4:	3202      	adds	r2, #2
    46a6:	52a3      	strh	r3, [r4, r2]
    46a8:	0023      	movs	r3, r4
    46aa:	3359      	adds	r3, #89	; 0x59
    46ac:	33ff      	adds	r3, #255	; 0xff
    46ae:	3461      	adds	r4, #97	; 0x61
    46b0:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    46b2:	2200      	movs	r2, #0
    46b4:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    46b6:	721a      	strb	r2, [r3, #8]
    46b8:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    46ba:	42a3      	cmp	r3, r4
    46bc:	d1fa      	bne.n	46b4 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    46be:	2280      	movs	r2, #128	; 0x80
    46c0:	4b15      	ldr	r3, [pc, #84]	; (4718 <usb_init+0x1fc>)
    46c2:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    46c4:	2000      	movs	r0, #0
    46c6:	b003      	add	sp, #12
    46c8:	bc0c      	pop	{r2, r3}
    46ca:	4690      	mov	r8, r2
    46cc:	4699      	mov	r9, r3
    46ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    46d0:	3b1a      	subs	r3, #26
    46d2:	e76d      	b.n	45b0 <usb_init+0x94>
		pad_transp = 29;
    46d4:	3b02      	subs	r3, #2
    46d6:	e778      	b.n	45ca <usb_init+0xae>
		pad_trim = 3;
    46d8:	3b04      	subs	r3, #4
    46da:	e782      	b.n	45e2 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    46dc:	6822      	ldr	r2, [r4, #0]
    46de:	8913      	ldrh	r3, [r2, #8]
    46e0:	3108      	adds	r1, #8
    46e2:	438b      	bics	r3, r1
    46e4:	8113      	strh	r3, [r2, #8]
    46e6:	e7a0      	b.n	462a <usb_init+0x10e>
    46e8:	20000828 	.word	0x20000828
    46ec:	20000818 	.word	0x20000818
    46f0:	40000400 	.word	0x40000400
    46f4:	00002a65 	.word	0x00002a65
    46f8:	0000296d 	.word	0x0000296d
    46fc:	000028e1 	.word	0x000028e1
    4700:	41005000 	.word	0x41005000
    4704:	00806024 	.word	0x00806024
    4708:	fffff83f 	.word	0xfffff83f
    470c:	ffff8fff 	.word	0xffff8fff
    4710:	20000b1c 	.word	0x20000b1c
    4714:	0000a5a7 	.word	0x0000a5a7
    4718:	e000e100 	.word	0xe000e100

0000471c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    471c:	e7fe      	b.n	471c <Dummy_Handler>
	...

00004720 <Reset_Handler>:
{
    4720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4722:	4a2a      	ldr	r2, [pc, #168]	; (47cc <Reset_Handler+0xac>)
    4724:	4b2a      	ldr	r3, [pc, #168]	; (47d0 <Reset_Handler+0xb0>)
    4726:	429a      	cmp	r2, r3
    4728:	d011      	beq.n	474e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    472a:	001a      	movs	r2, r3
    472c:	4b29      	ldr	r3, [pc, #164]	; (47d4 <Reset_Handler+0xb4>)
    472e:	429a      	cmp	r2, r3
    4730:	d20d      	bcs.n	474e <Reset_Handler+0x2e>
    4732:	4a29      	ldr	r2, [pc, #164]	; (47d8 <Reset_Handler+0xb8>)
    4734:	3303      	adds	r3, #3
    4736:	1a9b      	subs	r3, r3, r2
    4738:	089b      	lsrs	r3, r3, #2
    473a:	3301      	adds	r3, #1
    473c:	009b      	lsls	r3, r3, #2
    473e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4740:	4823      	ldr	r0, [pc, #140]	; (47d0 <Reset_Handler+0xb0>)
    4742:	4922      	ldr	r1, [pc, #136]	; (47cc <Reset_Handler+0xac>)
    4744:	588c      	ldr	r4, [r1, r2]
    4746:	5084      	str	r4, [r0, r2]
    4748:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    474a:	429a      	cmp	r2, r3
    474c:	d1fa      	bne.n	4744 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    474e:	4a23      	ldr	r2, [pc, #140]	; (47dc <Reset_Handler+0xbc>)
    4750:	4b23      	ldr	r3, [pc, #140]	; (47e0 <Reset_Handler+0xc0>)
    4752:	429a      	cmp	r2, r3
    4754:	d20a      	bcs.n	476c <Reset_Handler+0x4c>
    4756:	43d3      	mvns	r3, r2
    4758:	4921      	ldr	r1, [pc, #132]	; (47e0 <Reset_Handler+0xc0>)
    475a:	185b      	adds	r3, r3, r1
    475c:	2103      	movs	r1, #3
    475e:	438b      	bics	r3, r1
    4760:	3304      	adds	r3, #4
    4762:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4764:	2100      	movs	r1, #0
    4766:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4768:	4293      	cmp	r3, r2
    476a:	d1fc      	bne.n	4766 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    476c:	4a1d      	ldr	r2, [pc, #116]	; (47e4 <Reset_Handler+0xc4>)
    476e:	21ff      	movs	r1, #255	; 0xff
    4770:	4b1d      	ldr	r3, [pc, #116]	; (47e8 <Reset_Handler+0xc8>)
    4772:	438b      	bics	r3, r1
    4774:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4776:	39fd      	subs	r1, #253	; 0xfd
    4778:	2390      	movs	r3, #144	; 0x90
    477a:	005b      	lsls	r3, r3, #1
    477c:	4a1b      	ldr	r2, [pc, #108]	; (47ec <Reset_Handler+0xcc>)
    477e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4780:	4a1b      	ldr	r2, [pc, #108]	; (47f0 <Reset_Handler+0xd0>)
    4782:	78d3      	ldrb	r3, [r2, #3]
    4784:	2503      	movs	r5, #3
    4786:	43ab      	bics	r3, r5
    4788:	2402      	movs	r4, #2
    478a:	4323      	orrs	r3, r4
    478c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    478e:	78d3      	ldrb	r3, [r2, #3]
    4790:	270c      	movs	r7, #12
    4792:	43bb      	bics	r3, r7
    4794:	2608      	movs	r6, #8
    4796:	4333      	orrs	r3, r6
    4798:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    479a:	4b16      	ldr	r3, [pc, #88]	; (47f4 <Reset_Handler+0xd4>)
    479c:	7b98      	ldrb	r0, [r3, #14]
    479e:	2230      	movs	r2, #48	; 0x30
    47a0:	4390      	bics	r0, r2
    47a2:	2220      	movs	r2, #32
    47a4:	4310      	orrs	r0, r2
    47a6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    47a8:	7b99      	ldrb	r1, [r3, #14]
    47aa:	43b9      	bics	r1, r7
    47ac:	4331      	orrs	r1, r6
    47ae:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    47b0:	7b9a      	ldrb	r2, [r3, #14]
    47b2:	43aa      	bics	r2, r5
    47b4:	4322      	orrs	r2, r4
    47b6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    47b8:	4a0f      	ldr	r2, [pc, #60]	; (47f8 <Reset_Handler+0xd8>)
    47ba:	6853      	ldr	r3, [r2, #4]
    47bc:	2180      	movs	r1, #128	; 0x80
    47be:	430b      	orrs	r3, r1
    47c0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    47c2:	4b0e      	ldr	r3, [pc, #56]	; (47fc <Reset_Handler+0xdc>)
    47c4:	4798      	blx	r3
        main();
    47c6:	4b0e      	ldr	r3, [pc, #56]	; (4800 <Reset_Handler+0xe0>)
    47c8:	4798      	blx	r3
    47ca:	e7fe      	b.n	47ca <Reset_Handler+0xaa>
    47cc:	0000c2a8 	.word	0x0000c2a8
    47d0:	20000000 	.word	0x20000000
    47d4:	200005e0 	.word	0x200005e0
    47d8:	20000004 	.word	0x20000004
    47dc:	200005e0 	.word	0x200005e0
    47e0:	20000d18 	.word	0x20000d18
    47e4:	e000ed00 	.word	0xe000ed00
    47e8:	00000000 	.word	0x00000000
    47ec:	41007000 	.word	0x41007000
    47f0:	41005000 	.word	0x41005000
    47f4:	41004800 	.word	0x41004800
    47f8:	41004000 	.word	0x41004000
    47fc:	0000a54d 	.word	0x0000a54d
    4800:	00005e85 	.word	0x00005e85

00004804 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4804:	b5f0      	push	{r4, r5, r6, r7, lr}
    4806:	46c6      	mov	lr, r8
    4808:	b500      	push	{lr}
    480a:	000c      	movs	r4, r1
    480c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    480e:	2800      	cmp	r0, #0
    4810:	d10f      	bne.n	4832 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    4812:	2a00      	cmp	r2, #0
    4814:	dd11      	ble.n	483a <_read+0x36>
    4816:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4818:	4e09      	ldr	r6, [pc, #36]	; (4840 <_read+0x3c>)
    481a:	4d0a      	ldr	r5, [pc, #40]	; (4844 <_read+0x40>)
    481c:	6830      	ldr	r0, [r6, #0]
    481e:	0021      	movs	r1, r4
    4820:	682b      	ldr	r3, [r5, #0]
    4822:	4798      	blx	r3
		ptr++;
    4824:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    4826:	42bc      	cmp	r4, r7
    4828:	d1f8      	bne.n	481c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    482a:	4640      	mov	r0, r8
    482c:	bc04      	pop	{r2}
    482e:	4690      	mov	r8, r2
    4830:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    4832:	2301      	movs	r3, #1
    4834:	425b      	negs	r3, r3
    4836:	4698      	mov	r8, r3
    4838:	e7f7      	b.n	482a <_read+0x26>
	for (; len > 0; --len) {
    483a:	4680      	mov	r8, r0
    483c:	e7f5      	b.n	482a <_read+0x26>
    483e:	46c0      	nop			; (mov r8, r8)
    4840:	20000c24 	.word	0x20000c24
    4844:	20000c1c 	.word	0x20000c1c

00004848 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4848:	b5f0      	push	{r4, r5, r6, r7, lr}
    484a:	46c6      	mov	lr, r8
    484c:	b500      	push	{lr}
    484e:	000e      	movs	r6, r1
    4850:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4852:	3801      	subs	r0, #1
    4854:	2802      	cmp	r0, #2
    4856:	d810      	bhi.n	487a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    4858:	2a00      	cmp	r2, #0
    485a:	d011      	beq.n	4880 <_write+0x38>
    485c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    485e:	4b0c      	ldr	r3, [pc, #48]	; (4890 <_write+0x48>)
    4860:	4698      	mov	r8, r3
    4862:	4f0c      	ldr	r7, [pc, #48]	; (4894 <_write+0x4c>)
    4864:	4643      	mov	r3, r8
    4866:	6818      	ldr	r0, [r3, #0]
    4868:	5d31      	ldrb	r1, [r6, r4]
    486a:	683b      	ldr	r3, [r7, #0]
    486c:	4798      	blx	r3
    486e:	2800      	cmp	r0, #0
    4870:	db08      	blt.n	4884 <_write+0x3c>
			return -1;
		}
		++nChars;
    4872:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    4874:	42a5      	cmp	r5, r4
    4876:	d1f5      	bne.n	4864 <_write+0x1c>
    4878:	e006      	b.n	4888 <_write+0x40>
		return -1;
    487a:	2401      	movs	r4, #1
    487c:	4264      	negs	r4, r4
    487e:	e003      	b.n	4888 <_write+0x40>
	for (; len != 0; --len) {
    4880:	0014      	movs	r4, r2
    4882:	e001      	b.n	4888 <_write+0x40>
			return -1;
    4884:	2401      	movs	r4, #1
    4886:	4264      	negs	r4, r4
	}
	return nChars;
}
    4888:	0020      	movs	r0, r4
    488a:	bc04      	pop	{r2}
    488c:	4690      	mov	r8, r2
    488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4890:	20000c24 	.word	0x20000c24
    4894:	20000c20 	.word	0x20000c20

00004898 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4898:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    489a:	4a06      	ldr	r2, [pc, #24]	; (48b4 <_sbrk+0x1c>)
    489c:	6812      	ldr	r2, [r2, #0]
    489e:	2a00      	cmp	r2, #0
    48a0:	d004      	beq.n	48ac <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    48a2:	4a04      	ldr	r2, [pc, #16]	; (48b4 <_sbrk+0x1c>)
    48a4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    48a6:	18c3      	adds	r3, r0, r3
    48a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    48aa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    48ac:	4902      	ldr	r1, [pc, #8]	; (48b8 <_sbrk+0x20>)
    48ae:	4a01      	ldr	r2, [pc, #4]	; (48b4 <_sbrk+0x1c>)
    48b0:	6011      	str	r1, [r2, #0]
    48b2:	e7f6      	b.n	48a2 <_sbrk+0xa>
    48b4:	20000834 	.word	0x20000834
    48b8:	20002d18 	.word	0x20002d18

000048bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    48bc:	2001      	movs	r0, #1
    48be:	4240      	negs	r0, r0
    48c0:	4770      	bx	lr

000048c2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    48c2:	2380      	movs	r3, #128	; 0x80
    48c4:	019b      	lsls	r3, r3, #6
    48c6:	604b      	str	r3, [r1, #4]

	return 0;
}
    48c8:	2000      	movs	r0, #0
    48ca:	4770      	bx	lr

000048cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    48cc:	2001      	movs	r0, #1
    48ce:	4770      	bx	lr

000048d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    48d0:	2000      	movs	r0, #0
    48d2:	4770      	bx	lr

000048d4 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
    48d4:	2800      	cmp	r0, #0
    48d6:	d00a      	beq.n	48ee <null_ptr_check+0x1a>
    48d8:	69c3      	ldr	r3, [r0, #28]
    48da:	2b00      	cmp	r3, #0
    48dc:	d00a      	beq.n	48f4 <null_ptr_check+0x20>
    48de:	6a03      	ldr	r3, [r0, #32]
    48e0:	2b00      	cmp	r3, #0
    48e2:	d00a      	beq.n	48fa <null_ptr_check+0x26>
    48e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    48e6:	4258      	negs	r0, r3
    48e8:	4158      	adcs	r0, r3
    48ea:	4240      	negs	r0, r0
        /* Device structure is fine */
        rslt = BMI160_OK;
    }

    return rslt;
}
    48ec:	4770      	bx	lr
        rslt = BMI160_E_NULL_PTR;
    48ee:	2001      	movs	r0, #1
    48f0:	4240      	negs	r0, r0
    48f2:	e7fb      	b.n	48ec <null_ptr_check+0x18>
    48f4:	2001      	movs	r0, #1
    48f6:	4240      	negs	r0, r0
    48f8:	e7f8      	b.n	48ec <null_ptr_check+0x18>
    48fa:	2001      	movs	r0, #1
    48fc:	4240      	negs	r0, r0
    48fe:	e7f5      	b.n	48ec <null_ptr_check+0x18>

00004900 <bmi160_get_regs>:
{
    4900:	b5f0      	push	{r4, r5, r6, r7, lr}
    4902:	46c6      	mov	lr, r8
    4904:	b500      	push	{lr}
    4906:	b082      	sub	sp, #8
    4908:	af00      	add	r7, sp, #0
    490a:	6078      	str	r0, [r7, #4]
    490c:	000e      	movs	r6, r1
    490e:	0014      	movs	r4, r2
    uint16_t temp_len = len + dev->dummy_byte;
    4910:	222a      	movs	r2, #42	; 0x2a
    4912:	5c9a      	ldrb	r2, [r3, r2]
    4914:	18a2      	adds	r2, r4, r2
    4916:	b292      	uxth	r2, r2
    uint8_t temp_buf[temp_len];
    4918:	1dd1      	adds	r1, r2, #7
    491a:	08c9      	lsrs	r1, r1, #3
    491c:	00c9      	lsls	r1, r1, #3
    491e:	4668      	mov	r0, sp
    4920:	1a41      	subs	r1, r0, r1
    4922:	468d      	mov	sp, r1
    4924:	466d      	mov	r5, sp
    if ((dev == NULL) || (dev->read == NULL))
    4926:	2b00      	cmp	r3, #0
    4928:	d020      	beq.n	496c <bmi160_get_regs+0x6c>
    492a:	69d9      	ldr	r1, [r3, #28]
    492c:	4688      	mov	r8, r1
    492e:	2900      	cmp	r1, #0
    4930:	d01f      	beq.n	4972 <bmi160_get_regs+0x72>
    else if (len == 0)
    4932:	2c00      	cmp	r4, #0
    4934:	d020      	beq.n	4978 <bmi160_get_regs+0x78>
        if (dev->interface == BMI160_SPI_INTF)
    4936:	7899      	ldrb	r1, [r3, #2]
    4938:	2901      	cmp	r1, #1
    493a:	d012      	beq.n	4962 <bmi160_get_regs+0x62>
        rslt = dev->read(dev->id, reg_addr, temp_buf, temp_len);
    493c:	7858      	ldrb	r0, [r3, #1]
    493e:	0013      	movs	r3, r2
    4940:	002a      	movs	r2, r5
    4942:	6879      	ldr	r1, [r7, #4]
    4944:	47c0      	blx	r8
        if (rslt == BMI160_OK)
    4946:	2800      	cmp	r0, #0
    4948:	d119      	bne.n	497e <bmi160_get_regs+0x7e>
    494a:	2300      	movs	r3, #0
                data[indx] = temp_buf[indx];
    494c:	5cea      	ldrb	r2, [r5, r3]
    494e:	54f2      	strb	r2, [r6, r3]
    4950:	3301      	adds	r3, #1
            while (indx < len)
    4952:	b29a      	uxth	r2, r3
    4954:	4294      	cmp	r4, r2
    4956:	d8f9      	bhi.n	494c <bmi160_get_regs+0x4c>
}
    4958:	46bd      	mov	sp, r7
    495a:	b002      	add	sp, #8
    495c:	bc04      	pop	{r2}
    495e:	4690      	mov	r8, r2
    4960:	bdf0      	pop	{r4, r5, r6, r7, pc}
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
    4962:	317f      	adds	r1, #127	; 0x7f
    4964:	6878      	ldr	r0, [r7, #4]
    4966:	4308      	orrs	r0, r1
    4968:	6078      	str	r0, [r7, #4]
    496a:	e7e7      	b.n	493c <bmi160_get_regs+0x3c>
        rslt = BMI160_E_NULL_PTR;
    496c:	2001      	movs	r0, #1
    496e:	4240      	negs	r0, r0
    4970:	e7f2      	b.n	4958 <bmi160_get_regs+0x58>
    4972:	2001      	movs	r0, #1
    4974:	4240      	negs	r0, r0
    4976:	e7ef      	b.n	4958 <bmi160_get_regs+0x58>
        rslt = BMI160_READ_WRITE_LENGHT_INVALID;
    4978:	200c      	movs	r0, #12
    497a:	4240      	negs	r0, r0
    497c:	e7ec      	b.n	4958 <bmi160_get_regs+0x58>
            rslt = BMI160_E_COM_FAIL;
    497e:	2002      	movs	r0, #2
    4980:	4240      	negs	r0, r0
    4982:	e7e9      	b.n	4958 <bmi160_get_regs+0x58>

00004984 <bmi160_set_regs>:
{
    4984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4986:	46ce      	mov	lr, r9
    4988:	4647      	mov	r7, r8
    498a:	b580      	push	{r7, lr}
    498c:	4680      	mov	r8, r0
    498e:	4689      	mov	r9, r1
    4990:	0017      	movs	r7, r2
    4992:	1e1d      	subs	r5, r3, #0
    if ((dev == NULL) || (dev->write == NULL))
    4994:	d039      	beq.n	4a0a <bmi160_set_regs+0x86>
    4996:	6a1e      	ldr	r6, [r3, #32]
    4998:	2e00      	cmp	r6, #0
    499a:	d039      	beq.n	4a10 <bmi160_set_regs+0x8c>
    else if (len == 0)
    499c:	2a00      	cmp	r2, #0
    499e:	d03a      	beq.n	4a16 <bmi160_set_regs+0x92>
        if (dev->interface == BMI160_SPI_INTF)
    49a0:	789b      	ldrb	r3, [r3, #2]
    49a2:	2b01      	cmp	r3, #1
    49a4:	d01f      	beq.n	49e6 <bmi160_set_regs+0x62>
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
    49a6:	7a2b      	ldrb	r3, [r5, #8]
    49a8:	2b11      	cmp	r3, #17
    49aa:	d021      	beq.n	49f0 <bmi160_set_regs+0x6c>
    49ac:	7c2b      	ldrb	r3, [r5, #16]
    49ae:	2400      	movs	r4, #0
    49b0:	2b15      	cmp	r3, #21
    49b2:	d01d      	beq.n	49f0 <bmi160_set_regs+0x6c>
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
    49b4:	464b      	mov	r3, r9
    49b6:	191a      	adds	r2, r3, r4
    49b8:	4643      	mov	r3, r8
    49ba:	1919      	adds	r1, r3, r4
    49bc:	b2c9      	uxtb	r1, r1
    49be:	7868      	ldrb	r0, [r5, #1]
    49c0:	2301      	movs	r3, #1
    49c2:	6a2e      	ldr	r6, [r5, #32]
    49c4:	47b0      	blx	r6
    49c6:	0006      	movs	r6, r0
                dev->delay_ms(1);
    49c8:	2001      	movs	r0, #1
    49ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    49cc:	4798      	blx	r3
            for (; count < len; count++)
    49ce:	3401      	adds	r4, #1
    49d0:	b2e4      	uxtb	r4, r4
    49d2:	b2a3      	uxth	r3, r4
    49d4:	429f      	cmp	r7, r3
    49d6:	d8ed      	bhi.n	49b4 <bmi160_set_regs+0x30>
        if (rslt != BMI160_OK)
    49d8:	2e00      	cmp	r6, #0
    49da:	d113      	bne.n	4a04 <bmi160_set_regs+0x80>
}
    49dc:	0030      	movs	r0, r6
    49de:	bc0c      	pop	{r2, r3}
    49e0:	4690      	mov	r8, r2
    49e2:	4699      	mov	r9, r3
    49e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
    49e6:	337e      	adds	r3, #126	; 0x7e
    49e8:	0002      	movs	r2, r0
    49ea:	401a      	ands	r2, r3
    49ec:	4690      	mov	r8, r2
    49ee:	e7da      	b.n	49a6 <bmi160_set_regs+0x22>
            rslt = dev->write(dev->id, reg_addr, data, len);
    49f0:	7868      	ldrb	r0, [r5, #1]
    49f2:	003b      	movs	r3, r7
    49f4:	464a      	mov	r2, r9
    49f6:	4641      	mov	r1, r8
    49f8:	47b0      	blx	r6
    49fa:	0006      	movs	r6, r0
            dev->delay_ms(1);
    49fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    49fe:	2001      	movs	r0, #1
    4a00:	4798      	blx	r3
    4a02:	e7e9      	b.n	49d8 <bmi160_set_regs+0x54>
            rslt = BMI160_E_COM_FAIL;
    4a04:	2602      	movs	r6, #2
    4a06:	4276      	negs	r6, r6
    4a08:	e7e8      	b.n	49dc <bmi160_set_regs+0x58>
        rslt = BMI160_E_NULL_PTR;
    4a0a:	2601      	movs	r6, #1
    4a0c:	4276      	negs	r6, r6
    4a0e:	e7e5      	b.n	49dc <bmi160_set_regs+0x58>
    4a10:	2601      	movs	r6, #1
    4a12:	4276      	negs	r6, r6
    4a14:	e7e2      	b.n	49dc <bmi160_set_regs+0x58>
        rslt = BMI160_READ_WRITE_LENGHT_INVALID;
    4a16:	260c      	movs	r6, #12
    4a18:	4276      	negs	r6, r6
    4a1a:	e7df      	b.n	49dc <bmi160_set_regs+0x58>

00004a1c <bmi160_soft_reset>:
{
    4a1c:	b570      	push	{r4, r5, r6, lr}
    4a1e:	b082      	sub	sp, #8
    4a20:	0004      	movs	r4, r0
    uint8_t data = BMI160_SOFT_RESET_CMD;
    4a22:	22b6      	movs	r2, #182	; 0xb6
    4a24:	466b      	mov	r3, sp
    4a26:	71da      	strb	r2, [r3, #7]
    if ((dev == NULL) || (dev->delay_ms == NULL))
    4a28:	2800      	cmp	r0, #0
    4a2a:	d032      	beq.n	4a92 <bmi160_soft_reset+0x76>
    4a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d032      	beq.n	4a98 <bmi160_soft_reset+0x7c>
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
    4a32:	0003      	movs	r3, r0
    4a34:	3ab5      	subs	r2, #181	; 0xb5
    4a36:	4669      	mov	r1, sp
    4a38:	3107      	adds	r1, #7
    4a3a:	207e      	movs	r0, #126	; 0x7e
    4a3c:	4d18      	ldr	r5, [pc, #96]	; (4aa0 <bmi160_soft_reset+0x84>)
    4a3e:	47a8      	blx	r5
    4a40:	0005      	movs	r5, r0
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
    4a42:	2001      	movs	r0, #1
    4a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a46:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
    4a48:	2d00      	cmp	r5, #0
    4a4a:	d114      	bne.n	4a76 <bmi160_soft_reset+0x5a>
    4a4c:	78a3      	ldrb	r3, [r4, #2]
    4a4e:	2b01      	cmp	r3, #1
    4a50:	d014      	beq.n	4a7c <bmi160_soft_reset+0x60>
 */
static void default_param_settg(struct bmi160_dev *dev)
{
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
    4a52:	2202      	movs	r2, #2
    4a54:	71e2      	strb	r2, [r4, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
    4a56:	2308      	movs	r3, #8
    4a58:	7163      	strb	r3, [r4, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
    4a5a:	2110      	movs	r1, #16
    4a5c:	7121      	strb	r1, [r4, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
    4a5e:	390d      	subs	r1, #13
    4a60:	71a1      	strb	r1, [r4, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
    4a62:	73e2      	strb	r2, [r4, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
    4a64:	7363      	strb	r3, [r4, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
    4a66:	330c      	adds	r3, #12
    4a68:	7323      	strb	r3, [r4, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
    4a6a:	2300      	movs	r3, #0
    4a6c:	73a3      	strb	r3, [r4, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
    4a6e:	6863      	ldr	r3, [r4, #4]
    4a70:	60a3      	str	r3, [r4, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
    4a72:	68e3      	ldr	r3, [r4, #12]
    4a74:	6123      	str	r3, [r4, #16]
}
    4a76:	0028      	movs	r0, r5
    4a78:	b002      	add	sp, #8
    4a7a:	bd70      	pop	{r4, r5, r6, pc}
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
    4a7c:	0023      	movs	r3, r4
    4a7e:	2201      	movs	r2, #1
    4a80:	4669      	mov	r1, sp
    4a82:	3107      	adds	r1, #7
    4a84:	207f      	movs	r0, #127	; 0x7f
    4a86:	4e07      	ldr	r6, [pc, #28]	; (4aa4 <bmi160_soft_reset+0x88>)
    4a88:	47b0      	blx	r6
        if (rslt == BMI160_OK)
    4a8a:	2800      	cmp	r0, #0
    4a8c:	d0e1      	beq.n	4a52 <bmi160_soft_reset+0x36>
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
    4a8e:	0005      	movs	r5, r0
    4a90:	e7f1      	b.n	4a76 <bmi160_soft_reset+0x5a>
        rslt = BMI160_E_NULL_PTR;
    4a92:	2501      	movs	r5, #1
    4a94:	426d      	negs	r5, r5
    4a96:	e7ee      	b.n	4a76 <bmi160_soft_reset+0x5a>
    4a98:	2501      	movs	r5, #1
    4a9a:	426d      	negs	r5, r5
    4a9c:	e7eb      	b.n	4a76 <bmi160_soft_reset+0x5a>
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	00004985 	.word	0x00004985
    4aa4:	00004901 	.word	0x00004901

00004aa8 <bmi160_init>:
{
    4aa8:	b530      	push	{r4, r5, lr}
    4aaa:	b083      	sub	sp, #12
    4aac:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
    4aae:	4b25      	ldr	r3, [pc, #148]	; (4b44 <bmi160_init+0x9c>)
    4ab0:	4798      	blx	r3
    if (dev->interface == BMI160_SPI_INTF)
    4ab2:	78a3      	ldrb	r3, [r4, #2]
    4ab4:	2b01      	cmp	r3, #1
    4ab6:	d02a      	beq.n	4b0e <bmi160_init+0x66>
        dev->dummy_byte = 0;
    4ab8:	2200      	movs	r2, #0
    4aba:	232a      	movs	r3, #42	; 0x2a
    4abc:	54e2      	strb	r2, [r4, r3]
    if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
    4abe:	2800      	cmp	r0, #0
    4ac0:	d123      	bne.n	4b0a <bmi160_init+0x62>
        dev->chip_id = 0;
    4ac2:	2300      	movs	r3, #0
    4ac4:	7023      	strb	r3, [r4, #0]
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
    4ac6:	0023      	movs	r3, r4
    4ac8:	2201      	movs	r2, #1
    4aca:	0021      	movs	r1, r4
    4acc:	2000      	movs	r0, #0
    4ace:	4d1e      	ldr	r5, [pc, #120]	; (4b48 <bmi160_init+0xa0>)
    4ad0:	47a8      	blx	r5
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
    4ad2:	7823      	ldrb	r3, [r4, #0]
    4ad4:	2bd1      	cmp	r3, #209	; 0xd1
    4ad6:	d02f      	beq.n	4b38 <bmi160_init+0x90>
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
    4ad8:	0023      	movs	r3, r4
    4ada:	2201      	movs	r2, #1
    4adc:	0021      	movs	r1, r4
    4ade:	2000      	movs	r0, #0
    4ae0:	4d19      	ldr	r5, [pc, #100]	; (4b48 <bmi160_init+0xa0>)
    4ae2:	47a8      	blx	r5
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
    4ae4:	7823      	ldrb	r3, [r4, #0]
    4ae6:	2bd1      	cmp	r3, #209	; 0xd1
    4ae8:	d026      	beq.n	4b38 <bmi160_init+0x90>
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
    4aea:	0023      	movs	r3, r4
    4aec:	2201      	movs	r2, #1
    4aee:	0021      	movs	r1, r4
    4af0:	2000      	movs	r0, #0
    4af2:	4d15      	ldr	r5, [pc, #84]	; (4b48 <bmi160_init+0xa0>)
    4af4:	47a8      	blx	r5
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
    4af6:	2800      	cmp	r0, #0
    4af8:	d118      	bne.n	4b2c <bmi160_init+0x84>
    4afa:	7823      	ldrb	r3, [r4, #0]
    4afc:	2bd1      	cmp	r3, #209	; 0xd1
    4afe:	d118      	bne.n	4b32 <bmi160_init+0x8a>
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
    4b00:	23ff      	movs	r3, #255	; 0xff
    4b02:	70e3      	strb	r3, [r4, #3]
            rslt = bmi160_soft_reset(dev);
    4b04:	0020      	movs	r0, r4
    4b06:	4b11      	ldr	r3, [pc, #68]	; (4b4c <bmi160_init+0xa4>)
    4b08:	4798      	blx	r3
}
    4b0a:	b003      	add	sp, #12
    4b0c:	bd30      	pop	{r4, r5, pc}
        dev->dummy_byte = 1;
    4b0e:	2201      	movs	r2, #1
    4b10:	3329      	adds	r3, #41	; 0x29
    4b12:	54e2      	strb	r2, [r4, r3]
    if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
    4b14:	2800      	cmp	r0, #0
    4b16:	d1f8      	bne.n	4b0a <bmi160_init+0x62>
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
    4b18:	0023      	movs	r3, r4
    4b1a:	2201      	movs	r2, #1
    4b1c:	4669      	mov	r1, sp
    4b1e:	3107      	adds	r1, #7
    4b20:	207f      	movs	r0, #127	; 0x7f
    4b22:	4d09      	ldr	r5, [pc, #36]	; (4b48 <bmi160_init+0xa0>)
    4b24:	47a8      	blx	r5
    if (rslt == BMI160_OK)
    4b26:	2800      	cmp	r0, #0
    4b28:	d0cb      	beq.n	4ac2 <bmi160_init+0x1a>
    4b2a:	e7ee      	b.n	4b0a <bmi160_init+0x62>
            rslt = BMI160_E_DEV_NOT_FOUND;
    4b2c:	2003      	movs	r0, #3
    4b2e:	4240      	negs	r0, r0
    4b30:	e7eb      	b.n	4b0a <bmi160_init+0x62>
    4b32:	2003      	movs	r0, #3
    4b34:	4240      	negs	r0, r0
    4b36:	e7e8      	b.n	4b0a <bmi160_init+0x62>
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
    4b38:	2800      	cmp	r0, #0
    4b3a:	d0e1      	beq.n	4b00 <bmi160_init+0x58>
            rslt = BMI160_E_DEV_NOT_FOUND;
    4b3c:	2003      	movs	r0, #3
    4b3e:	4240      	negs	r0, r0
    return rslt;
    4b40:	e7e3      	b.n	4b0a <bmi160_init+0x62>
    4b42:	46c0      	nop			; (mov r8, r8)
    4b44:	000048d5 	.word	0x000048d5
    4b48:	00004901 	.word	0x00004901
    4b4c:	00004a1d 	.word	0x00004a1d

00004b50 <bmi160_set_power_mode>:
{
    4b50:	b530      	push	{r4, r5, lr}
    4b52:	b083      	sub	sp, #12
    4b54:	1e04      	subs	r4, r0, #0
    if ((dev == NULL) || (dev->delay_ms == NULL))
    4b56:	d100      	bne.n	4b5a <bmi160_set_power_mode+0xa>
    4b58:	e085      	b.n	4c66 <bmi160_set_power_mode+0x116>
    4b5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	d100      	bne.n	4b62 <bmi160_set_power_mode+0x12>
    4b60:	e084      	b.n	4c6c <bmi160_set_power_mode+0x11c>
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
    int8_t rslt = 0;
    uint8_t data = 0;
    4b62:	2200      	movs	r2, #0
    4b64:	466b      	mov	r3, sp
    4b66:	719a      	strb	r2, [r3, #6]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
    4b68:	7903      	ldrb	r3, [r0, #4]
    4b6a:	001a      	movs	r2, r3
    4b6c:	3a10      	subs	r2, #16
    4b6e:	2a02      	cmp	r2, #2
    4b70:	d900      	bls.n	4b74 <bmi160_set_power_mode+0x24>
    4b72:	e081      	b.n	4c78 <bmi160_set_power_mode+0x128>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
    4b74:	7a02      	ldrb	r2, [r0, #8]
    4b76:	429a      	cmp	r2, r3
    4b78:	d04f      	beq.n	4c1a <bmi160_set_power_mode+0xca>
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
    int8_t rslt;
    uint8_t temp = 0;
    uint8_t pre_filter = 0;
    4b7a:	2200      	movs	r2, #0
    4b7c:	466b      	mov	r3, sp
    4b7e:	71da      	strb	r2, [r3, #7]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
    4b80:	0003      	movs	r3, r0
    4b82:	3201      	adds	r2, #1
    4b84:	4669      	mov	r1, sp
    4b86:	3106      	adds	r1, #6
    4b88:	2040      	movs	r0, #64	; 0x40
    4b8a:	4d3d      	ldr	r5, [pc, #244]	; (4c80 <bmi160_set_power_mode+0x130>)
    4b8c:	47a8      	blx	r5
    4b8e:	1e05      	subs	r5, r0, #0
    if (rslt == BMI160_OK)
    4b90:	d114      	bne.n	4bbc <bmi160_set_power_mode+0x6c>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
    4b92:	7923      	ldrb	r3, [r4, #4]
    4b94:	2b12      	cmp	r3, #18
    4b96:	d016      	beq.n	4bc6 <bmi160_set_power_mode+0x76>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
    4b98:	466b      	mov	r3, sp
    4b9a:	3306      	adds	r3, #6
    4b9c:	781b      	ldrb	r3, [r3, #0]
    4b9e:	b25a      	sxtb	r2, r3
    4ba0:	2a00      	cmp	r2, #0
    4ba2:	db28      	blt.n	4bf6 <bmi160_set_power_mode+0xa6>
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
    4ba4:	1d21      	adds	r1, r4, #4
    4ba6:	0023      	movs	r3, r4
    4ba8:	2201      	movs	r2, #1
    4baa:	207e      	movs	r0, #126	; 0x7e
    4bac:	4d35      	ldr	r5, [pc, #212]	; (4c84 <bmi160_set_power_mode+0x134>)
    4bae:	47a8      	blx	r5
    4bb0:	0005      	movs	r5, r0
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
    4bb2:	7a23      	ldrb	r3, [r4, #8]
    4bb4:	2b10      	cmp	r3, #16
    4bb6:	d02c      	beq.n	4c12 <bmi160_set_power_mode+0xc2>
                dev->prev_accel_cfg.power = dev->accel_cfg.power;
    4bb8:	7923      	ldrb	r3, [r4, #4]
    4bba:	7223      	strb	r3, [r4, #8]
        if (rslt == BMI160_OK)
    4bbc:	2d00      	cmp	r5, #0
    4bbe:	d02c      	beq.n	4c1a <bmi160_set_power_mode+0xca>
}
    4bc0:	0028      	movs	r0, r5
    4bc2:	b003      	add	sp, #12
    4bc4:	bd30      	pop	{r4, r5, pc}
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
    4bc6:	466b      	mov	r3, sp
    4bc8:	1d99      	adds	r1, r3, #6
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
    4bca:	780a      	ldrb	r2, [r1, #0]
    4bcc:	237f      	movs	r3, #127	; 0x7f
    4bce:	401a      	ands	r2, r3
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
    4bd0:	3bff      	subs	r3, #255	; 0xff
    4bd2:	4313      	orrs	r3, r2
    4bd4:	700b      	strb	r3, [r1, #0]
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
    4bd6:	0023      	movs	r3, r4
    4bd8:	2201      	movs	r2, #1
    4bda:	2040      	movs	r0, #64	; 0x40
    4bdc:	4d29      	ldr	r5, [pc, #164]	; (4c84 <bmi160_set_power_mode+0x134>)
    4bde:	47a8      	blx	r5
    4be0:	1e05      	subs	r5, r0, #0
            if (rslt == BMI160_OK)
    4be2:	d1eb      	bne.n	4bbc <bmi160_set_power_mode+0x6c>
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
    4be4:	0023      	movs	r3, r4
    4be6:	2202      	movs	r2, #2
    4be8:	4669      	mov	r1, sp
    4bea:	3107      	adds	r1, #7
    4bec:	2058      	movs	r0, #88	; 0x58
    4bee:	4d25      	ldr	r5, [pc, #148]	; (4c84 <bmi160_set_power_mode+0x134>)
    4bf0:	47a8      	blx	r5
    4bf2:	0005      	movs	r5, r0
    4bf4:	e00a      	b.n	4c0c <bmi160_set_power_mode+0xbc>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;

            /* disable under-sampling parameter
             * if already enabled */
            *data = temp;
    4bf6:	466a      	mov	r2, sp
    4bf8:	1d91      	adds	r1, r2, #6
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
    4bfa:	227f      	movs	r2, #127	; 0x7f
    4bfc:	4013      	ands	r3, r2
            *data = temp;
    4bfe:	700b      	strb	r3, [r1, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
    4c00:	0023      	movs	r3, r4
    4c02:	3a7e      	subs	r2, #126	; 0x7e
    4c04:	2040      	movs	r0, #64	; 0x40
    4c06:	4d1f      	ldr	r5, [pc, #124]	; (4c84 <bmi160_set_power_mode+0x134>)
    4c08:	47a8      	blx	r5
    4c0a:	0005      	movs	r5, r0
            if (rslt == BMI160_OK)
    4c0c:	2d00      	cmp	r5, #0
    4c0e:	d1d7      	bne.n	4bc0 <bmi160_set_power_mode+0x70>
    4c10:	e7c8      	b.n	4ba4 <bmi160_set_power_mode+0x54>
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
    4c12:	2005      	movs	r0, #5
    4c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c16:	4798      	blx	r3
    4c18:	e7ce      	b.n	4bb8 <bmi160_set_power_mode+0x68>
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
    int8_t rslt = 0;

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
    4c1a:	7b23      	ldrb	r3, [r4, #12]
    4c1c:	001a      	movs	r2, r3
    4c1e:	3a14      	subs	r2, #20
    4c20:	2a01      	cmp	r2, #1
    4c22:	d901      	bls.n	4c28 <bmi160_set_power_mode+0xd8>
    4c24:	2b17      	cmp	r3, #23
    4c26:	d124      	bne.n	4c72 <bmi160_set_power_mode+0x122>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
    4c28:	7c22      	ldrb	r2, [r4, #16]
    int8_t rslt = 0;
    4c2a:	2500      	movs	r5, #0
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
    4c2c:	429a      	cmp	r2, r3
    4c2e:	d0c7      	beq.n	4bc0 <bmi160_set_power_mode+0x70>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
    4c30:	0021      	movs	r1, r4
    4c32:	310c      	adds	r1, #12
    4c34:	0023      	movs	r3, r4
    4c36:	2201      	movs	r2, #1
    4c38:	207e      	movs	r0, #126	; 0x7e
    4c3a:	4d12      	ldr	r5, [pc, #72]	; (4c84 <bmi160_set_power_mode+0x134>)
    4c3c:	47a8      	blx	r5
    4c3e:	0005      	movs	r5, r0
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
    4c40:	7c23      	ldrb	r3, [r4, #16]
    4c42:	2b14      	cmp	r3, #20
    4c44:	d004      	beq.n	4c50 <bmi160_set_power_mode+0x100>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
    4c46:	2b17      	cmp	r3, #23
    4c48:	d006      	beq.n	4c58 <bmi160_set_power_mode+0x108>
            }
            else
            {
                /* do nothing */
            }
            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
    4c4a:	7b23      	ldrb	r3, [r4, #12]
    4c4c:	7423      	strb	r3, [r4, #16]
    4c4e:	e7b7      	b.n	4bc0 <bmi160_set_power_mode+0x70>
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
    4c50:	2051      	movs	r0, #81	; 0x51
    4c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c54:	4798      	blx	r3
    4c56:	e7f8      	b.n	4c4a <bmi160_set_power_mode+0xfa>
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
    4c58:	7b23      	ldrb	r3, [r4, #12]
    4c5a:	2b15      	cmp	r3, #21
    4c5c:	d1f5      	bne.n	4c4a <bmi160_set_power_mode+0xfa>
                dev->delay_ms(10);
    4c5e:	200a      	movs	r0, #10
    4c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c62:	4798      	blx	r3
    4c64:	e7f1      	b.n	4c4a <bmi160_set_power_mode+0xfa>
        rslt = BMI160_E_NULL_PTR;
    4c66:	2501      	movs	r5, #1
    4c68:	426d      	negs	r5, r5
    4c6a:	e7a9      	b.n	4bc0 <bmi160_set_power_mode+0x70>
    4c6c:	2501      	movs	r5, #1
    4c6e:	426d      	negs	r5, r5
    4c70:	e7a6      	b.n	4bc0 <bmi160_set_power_mode+0x70>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
    4c72:	2504      	movs	r5, #4
    4c74:	426d      	negs	r5, r5
    4c76:	e7a3      	b.n	4bc0 <bmi160_set_power_mode+0x70>
        rslt = BMI160_E_OUT_OF_RANGE;
    4c78:	2504      	movs	r5, #4
    4c7a:	426d      	negs	r5, r5
    return rslt;
    4c7c:	e7a0      	b.n	4bc0 <bmi160_set_power_mode+0x70>
    4c7e:	46c0      	nop			; (mov r8, r8)
    4c80:	00004901 	.word	0x00004901
    4c84:	00004985 	.word	0x00004985

00004c88 <bmi160_set_sens_conf>:
{
    4c88:	b530      	push	{r4, r5, lr}
    4c8a:	b083      	sub	sp, #12
    4c8c:	1e04      	subs	r4, r0, #0
    if ((dev == NULL) || (dev->delay_ms == NULL))
    4c8e:	d100      	bne.n	4c92 <bmi160_set_sens_conf+0xa>
    4c90:	e0c5      	b.n	4e1e <bmi160_set_sens_conf+0x196>
    4c92:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4c94:	2b00      	cmp	r3, #0
    4c96:	d100      	bne.n	4c9a <bmi160_set_sens_conf+0x12>
    4c98:	e0c4      	b.n	4e24 <bmi160_set_sens_conf+0x19c>
    uint8_t data[2] = { 0 };
    4c9a:	a901      	add	r1, sp, #4
    4c9c:	2300      	movs	r3, #0
    4c9e:	800b      	strh	r3, [r1, #0]
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
    4ca0:	0003      	movs	r3, r0
    4ca2:	2202      	movs	r2, #2
    4ca4:	2040      	movs	r0, #64	; 0x40
    4ca6:	4d62      	ldr	r5, [pc, #392]	; (4e30 <bmi160_set_sens_conf+0x1a8>)
    4ca8:	47a8      	blx	r5
    if (rslt == BMI160_OK)
    4caa:	2800      	cmp	r0, #0
    4cac:	d001      	beq.n	4cb2 <bmi160_set_sens_conf+0x2a>
}
    4cae:	b003      	add	sp, #12
    4cb0:	bd30      	pop	{r4, r5, pc}
    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_MAX)
    4cb2:	7962      	ldrb	r2, [r4, #5]
    4cb4:	2a0f      	cmp	r2, #15
    4cb6:	d900      	bls.n	4cba <bmi160_set_sens_conf+0x32>
    4cb8:	e0a2      	b.n	4e00 <bmi160_set_sens_conf+0x178>
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
    4cba:	7a63      	ldrb	r3, [r4, #9]
    4cbc:	4293      	cmp	r3, r2
    4cbe:	d006      	beq.n	4cce <bmi160_set_sens_conf+0x46>
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
    4cc0:	a801      	add	r0, sp, #4
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
    4cc2:	7803      	ldrb	r3, [r0, #0]
    4cc4:	210f      	movs	r1, #15
    4cc6:	438b      	bics	r3, r1
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
    4cc8:	400a      	ands	r2, r1
    4cca:	4313      	orrs	r3, r2
    4ccc:	7003      	strb	r3, [r0, #0]
    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_MAX)
    4cce:	79e3      	ldrb	r3, [r4, #7]
    4cd0:	2b02      	cmp	r3, #2
    4cd2:	d900      	bls.n	4cd6 <bmi160_set_sens_conf+0x4e>
    4cd4:	e094      	b.n	4e00 <bmi160_set_sens_conf+0x178>
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
    4cd6:	7ae2      	ldrb	r2, [r4, #11]
    4cd8:	429a      	cmp	r2, r3
    4cda:	d004      	beq.n	4ce6 <bmi160_set_sens_conf+0x5e>
            *data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
    4cdc:	aa01      	add	r2, sp, #4
            temp = *data & ~BMI160_ACCEL_BW_MASK;
    4cde:	7813      	ldrb	r3, [r2, #0]
    4ce0:	2170      	movs	r1, #112	; 0x70
    4ce2:	438b      	bics	r3, r1
            *data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
    4ce4:	7013      	strb	r3, [r2, #0]
    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_MAX)
    4ce6:	79a3      	ldrb	r3, [r4, #6]
        rslt = BMI160_E_OUT_OF_RANGE;
    4ce8:	2004      	movs	r0, #4
    4cea:	4240      	negs	r0, r0
    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_MAX)
    4cec:	2b0c      	cmp	r3, #12
    4cee:	d8de      	bhi.n	4cae <bmi160_set_sens_conf+0x26>
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
    4cf0:	7aa2      	ldrb	r2, [r4, #10]
    4cf2:	429a      	cmp	r2, r3
    4cf4:	d006      	beq.n	4d04 <bmi160_set_sens_conf+0x7c>
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
    4cf6:	a801      	add	r0, sp, #4
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
    4cf8:	7842      	ldrb	r2, [r0, #1]
    4cfa:	210f      	movs	r1, #15
    4cfc:	438a      	bics	r2, r1
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
    4cfe:	400b      	ands	r3, r1
    4d00:	4313      	orrs	r3, r2
    4d02:	7043      	strb	r3, [r0, #1]
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
    4d04:	0023      	movs	r3, r4
    4d06:	2201      	movs	r2, #1
    4d08:	a901      	add	r1, sp, #4
    4d0a:	2040      	movs	r0, #64	; 0x40
    4d0c:	4d49      	ldr	r5, [pc, #292]	; (4e34 <bmi160_set_sens_conf+0x1ac>)
    4d0e:	47a8      	blx	r5
        if (rslt == BMI160_OK)
    4d10:	2800      	cmp	r0, #0
    4d12:	d1cc      	bne.n	4cae <bmi160_set_sens_conf+0x26>
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
    4d14:	7963      	ldrb	r3, [r4, #5]
    4d16:	7263      	strb	r3, [r4, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
    4d18:	79e3      	ldrb	r3, [r4, #7]
    4d1a:	72e3      	strb	r3, [r4, #11]
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
    4d1c:	0023      	movs	r3, r4
    4d1e:	2201      	movs	r2, #1
    4d20:	4669      	mov	r1, sp
    4d22:	3105      	adds	r1, #5
    4d24:	2041      	movs	r0, #65	; 0x41
    4d26:	4d43      	ldr	r5, [pc, #268]	; (4e34 <bmi160_set_sens_conf+0x1ac>)
    4d28:	47a8      	blx	r5
            if (rslt == BMI160_OK)
    4d2a:	2800      	cmp	r0, #0
    4d2c:	d1bf      	bne.n	4cae <bmi160_set_sens_conf+0x26>
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
    4d2e:	79a3      	ldrb	r3, [r4, #6]
    4d30:	72a3      	strb	r3, [r4, #10]
    uint8_t data[2] = { 0 };
    4d32:	a901      	add	r1, sp, #4
    4d34:	2300      	movs	r3, #0
    4d36:	800b      	strh	r3, [r1, #0]
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
    4d38:	0023      	movs	r3, r4
    4d3a:	2202      	movs	r2, #2
    4d3c:	3042      	adds	r0, #66	; 0x42
    4d3e:	4d3c      	ldr	r5, [pc, #240]	; (4e30 <bmi160_set_sens_conf+0x1a8>)
    4d40:	47a8      	blx	r5
    if (rslt == BMI160_OK)
    4d42:	2800      	cmp	r0, #0
    4d44:	d1b3      	bne.n	4cae <bmi160_set_sens_conf+0x26>
    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_MAX)
    4d46:	7b62      	ldrb	r2, [r4, #13]
    4d48:	2a0d      	cmp	r2, #13
    4d4a:	d85c      	bhi.n	4e06 <bmi160_set_sens_conf+0x17e>
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
    4d4c:	7c63      	ldrb	r3, [r4, #17]
    4d4e:	4293      	cmp	r3, r2
    4d50:	d006      	beq.n	4d60 <bmi160_set_sens_conf+0xd8>
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
    4d52:	a801      	add	r0, sp, #4
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
    4d54:	7803      	ldrb	r3, [r0, #0]
    4d56:	210f      	movs	r1, #15
    4d58:	438b      	bics	r3, r1
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
    4d5a:	400a      	ands	r2, r1
    4d5c:	4313      	orrs	r3, r2
    4d5e:	7003      	strb	r3, [r0, #0]
    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_MAX)
    4d60:	7be3      	ldrb	r3, [r4, #15]
    4d62:	2b02      	cmp	r3, #2
    4d64:	d84f      	bhi.n	4e06 <bmi160_set_sens_conf+0x17e>
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
    4d66:	a901      	add	r1, sp, #4
    4d68:	011b      	lsls	r3, r3, #4
    4d6a:	2230      	movs	r2, #48	; 0x30
    4d6c:	4013      	ands	r3, r2
        temp = *data & ~BMI160_GYRO_BW_MASK;
    4d6e:	780a      	ldrb	r2, [r1, #0]
    4d70:	2030      	movs	r0, #48	; 0x30
    4d72:	4382      	bics	r2, r0
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
    4d74:	4313      	orrs	r3, r2
    4d76:	700b      	strb	r3, [r1, #0]
    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_MAX)
    4d78:	7ba3      	ldrb	r3, [r4, #14]
    4d7a:	2b04      	cmp	r3, #4
    4d7c:	d855      	bhi.n	4e2a <bmi160_set_sens_conf+0x1a2>
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
    4d7e:	7ca2      	ldrb	r2, [r4, #18]
    4d80:	429a      	cmp	r2, r3
    4d82:	d006      	beq.n	4d92 <bmi160_set_sens_conf+0x10a>
            *data = temp | (range & BMI160_GYRO_RANGE_MSK);
    4d84:	0008      	movs	r0, r1
            temp = *data & ~BMI160_GYRO_RANGE_MSK;
    4d86:	784a      	ldrb	r2, [r1, #1]
    4d88:	2107      	movs	r1, #7
    4d8a:	438a      	bics	r2, r1
            *data = temp | (range & BMI160_GYRO_RANGE_MSK);
    4d8c:	400b      	ands	r3, r1
    4d8e:	4313      	orrs	r3, r2
    4d90:	7043      	strb	r3, [r0, #1]
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
    4d92:	0023      	movs	r3, r4
    4d94:	2201      	movs	r2, #1
    4d96:	a901      	add	r1, sp, #4
    4d98:	2042      	movs	r0, #66	; 0x42
    4d9a:	4d26      	ldr	r5, [pc, #152]	; (4e34 <bmi160_set_sens_conf+0x1ac>)
    4d9c:	47a8      	blx	r5
        if (rslt == BMI160_OK)
    4d9e:	2800      	cmp	r0, #0
    4da0:	d000      	beq.n	4da4 <bmi160_set_sens_conf+0x11c>
    4da2:	e784      	b.n	4cae <bmi160_set_sens_conf+0x26>
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
    4da4:	7b63      	ldrb	r3, [r4, #13]
    4da6:	7463      	strb	r3, [r4, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
    4da8:	7be3      	ldrb	r3, [r4, #15]
    4daa:	74e3      	strb	r3, [r4, #19]
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
    4dac:	0023      	movs	r3, r4
    4dae:	2201      	movs	r2, #1
    4db0:	4669      	mov	r1, sp
    4db2:	3105      	adds	r1, #5
    4db4:	2043      	movs	r0, #67	; 0x43
    4db6:	4d1f      	ldr	r5, [pc, #124]	; (4e34 <bmi160_set_sens_conf+0x1ac>)
    4db8:	47a8      	blx	r5
            if (rslt == BMI160_OK)
    4dba:	2800      	cmp	r0, #0
    4dbc:	d000      	beq.n	4dc0 <bmi160_set_sens_conf+0x138>
    4dbe:	e776      	b.n	4cae <bmi160_set_sens_conf+0x26>
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
    4dc0:	7ba3      	ldrb	r3, [r4, #14]
    4dc2:	74a3      	strb	r3, [r4, #18]
                rslt = bmi160_set_power_mode(dev);
    4dc4:	0020      	movs	r0, r4
    4dc6:	4b1c      	ldr	r3, [pc, #112]	; (4e38 <bmi160_set_sens_conf+0x1b0>)
    4dc8:	4798      	blx	r3
                if (rslt == BMI160_OK)
    4dca:	2800      	cmp	r0, #0
    4dcc:	d000      	beq.n	4dd0 <bmi160_set_sens_conf+0x148>
    4dce:	e76e      	b.n	4cae <bmi160_set_sens_conf+0x26>
    uint8_t data = 0;
    4dd0:	ad01      	add	r5, sp, #4
    4dd2:	2300      	movs	r3, #0
    4dd4:	702b      	strb	r3, [r5, #0]
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
    4dd6:	0023      	movs	r3, r4
    4dd8:	2201      	movs	r2, #1
    4dda:	0029      	movs	r1, r5
    4ddc:	3002      	adds	r0, #2
    4dde:	4c14      	ldr	r4, [pc, #80]	; (4e30 <bmi160_set_sens_conf+0x1a8>)
    4de0:	47a0      	blx	r4
    data = data >> 1;
    4de2:	782b      	ldrb	r3, [r5, #0]
    data = data & BMI160_ERR_REG_MASK;
    4de4:	06db      	lsls	r3, r3, #27
    4de6:	0f1b      	lsrs	r3, r3, #28
    if (data == 1)
    4de8:	2b01      	cmp	r3, #1
    4dea:	d00f      	beq.n	4e0c <bmi160_set_sens_conf+0x184>
    else if (data == 2)
    4dec:	2b02      	cmp	r3, #2
    4dee:	d010      	beq.n	4e12 <bmi160_set_sens_conf+0x18a>
    else if (data == 3)
    4df0:	2b03      	cmp	r3, #3
    4df2:	d011      	beq.n	4e18 <bmi160_set_sens_conf+0x190>
    else if (data == 7)
    4df4:	2b07      	cmp	r3, #7
    4df6:	d000      	beq.n	4dfa <bmi160_set_sens_conf+0x172>
    4df8:	e759      	b.n	4cae <bmi160_set_sens_conf+0x26>
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
    4dfa:	2009      	movs	r0, #9
    4dfc:	4240      	negs	r0, r0
    4dfe:	e756      	b.n	4cae <bmi160_set_sens_conf+0x26>
        rslt = BMI160_E_NULL_PTR;
    4e00:	2004      	movs	r0, #4
    4e02:	4240      	negs	r0, r0
    4e04:	e753      	b.n	4cae <bmi160_set_sens_conf+0x26>
    4e06:	2004      	movs	r0, #4
    4e08:	4240      	negs	r0, r0
    4e0a:	e750      	b.n	4cae <bmi160_set_sens_conf+0x26>
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
    4e0c:	2006      	movs	r0, #6
    4e0e:	4240      	negs	r0, r0
    4e10:	e74d      	b.n	4cae <bmi160_set_sens_conf+0x26>
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
    4e12:	2007      	movs	r0, #7
    4e14:	4240      	negs	r0, r0
    4e16:	e74a      	b.n	4cae <bmi160_set_sens_conf+0x26>
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
    4e18:	2008      	movs	r0, #8
    4e1a:	4240      	negs	r0, r0
    4e1c:	e747      	b.n	4cae <bmi160_set_sens_conf+0x26>
        rslt = BMI160_E_NULL_PTR;
    4e1e:	2001      	movs	r0, #1
    4e20:	4240      	negs	r0, r0
    4e22:	e744      	b.n	4cae <bmi160_set_sens_conf+0x26>
    4e24:	2001      	movs	r0, #1
    4e26:	4240      	negs	r0, r0
    4e28:	e741      	b.n	4cae <bmi160_set_sens_conf+0x26>
        rslt = BMI160_E_OUT_OF_RANGE;
    4e2a:	2004      	movs	r0, #4
    4e2c:	4240      	negs	r0, r0
    return rslt;
    4e2e:	e73e      	b.n	4cae <bmi160_set_sens_conf+0x26>
    4e30:	00004901 	.word	0x00004901
    4e34:	00004985 	.word	0x00004985
    4e38:	00004b51 	.word	0x00004b51

00004e3c <bmi160_get_sensor_data>:
{
    4e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e3e:	b085      	sub	sp, #20
    4e40:	000f      	movs	r7, r1
    4e42:	0016      	movs	r6, r2
    4e44:	001d      	movs	r5, r3
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
    4e46:	0744      	lsls	r4, r0, #29
    4e48:	0fe4      	lsrs	r4, r4, #31
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
    4e4a:	2303      	movs	r3, #3
    4e4c:	4018      	ands	r0, r3
    if (time_sel == 1)
    4e4e:	2c00      	cmp	r4, #0
    4e50:	d000      	beq.n	4e54 <bmi160_get_sensor_data+0x18>
        len = 3;
    4e52:	2403      	movs	r4, #3
    if (dev != NULL)
    4e54:	2d00      	cmp	r5, #0
    4e56:	d100      	bne.n	4e5a <bmi160_get_sensor_data+0x1e>
    4e58:	e0e0      	b.n	501c <bmi160_get_sensor_data+0x1e0>
        switch (sen_sel)
    4e5a:	2802      	cmp	r0, #2
    4e5c:	d03e      	beq.n	4edc <bmi160_get_sensor_data+0xa0>
    4e5e:	2803      	cmp	r0, #3
    4e60:	d100      	bne.n	4e64 <bmi160_get_sensor_data+0x28>
    4e62:	e08f      	b.n	4f84 <bmi160_get_sensor_data+0x148>
    4e64:	2801      	cmp	r0, #1
    4e66:	d003      	beq.n	4e70 <bmi160_get_sensor_data+0x34>
                rslt = BMI160_E_INVALID_INPUT;
    4e68:	2005      	movs	r0, #5
    4e6a:	4240      	negs	r0, r0
}
    4e6c:	b005      	add	sp, #20
    4e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (accel == NULL)
    4e70:	2f00      	cmp	r7, #0
    4e72:	d100      	bne.n	4e76 <bmi160_get_sensor_data+0x3a>
    4e74:	e0d5      	b.n	5022 <bmi160_get_sensor_data+0x1e6>
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
    int8_t rslt;
    uint8_t idx = 0;
    uint8_t data_array[9] = { 0 };
    4e76:	2209      	movs	r2, #9
    4e78:	2100      	movs	r1, #0
    4e7a:	4668      	mov	r0, sp
    4e7c:	4b6f      	ldr	r3, [pc, #444]	; (503c <bmi160_get_sensor_data+0x200>)
    4e7e:	4798      	blx	r3
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
    4e80:	1da2      	adds	r2, r4, #6
    4e82:	002b      	movs	r3, r5
    4e84:	4669      	mov	r1, sp
    4e86:	2012      	movs	r0, #18
    4e88:	4d6d      	ldr	r5, [pc, #436]	; (5040 <bmi160_get_sensor_data+0x204>)
    4e8a:	47a8      	blx	r5
    if (rslt == BMI160_OK)
    4e8c:	2800      	cmp	r0, #0
    4e8e:	d122      	bne.n	4ed6 <bmi160_get_sensor_data+0x9a>
    {
        /* Accel Data */
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4e90:	466b      	mov	r3, sp
    4e92:	785a      	ldrb	r2, [r3, #1]
    4e94:	0212      	lsls	r2, r2, #8
    4e96:	781b      	ldrb	r3, [r3, #0]
    4e98:	4313      	orrs	r3, r2
        accel->x = msblsb; /* Data in X axis */
    4e9a:	803b      	strh	r3, [r7, #0]
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4e9c:	466b      	mov	r3, sp
    4e9e:	78da      	ldrb	r2, [r3, #3]
    4ea0:	0212      	lsls	r2, r2, #8
    4ea2:	789b      	ldrb	r3, [r3, #2]
    4ea4:	4313      	orrs	r3, r2
        accel->y = msblsb; /* Data in Y axis */
    4ea6:	807b      	strh	r3, [r7, #2]
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4ea8:	466b      	mov	r3, sp
    4eaa:	795a      	ldrb	r2, [r3, #5]
    4eac:	0212      	lsls	r2, r2, #8
    4eae:	791b      	ldrb	r3, [r3, #4]
    4eb0:	4313      	orrs	r3, r2
        accel->z = msblsb; /* Data in Z axis */
    4eb2:	80bb      	strh	r3, [r7, #4]
        if (len == 3)
    4eb4:	2c03      	cmp	r4, #3
    4eb6:	d002      	beq.n	4ebe <bmi160_get_sensor_data+0x82>
            time_2 = (uint32_t)(data_array[idx++] << 16);
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
        }
        else
        {
            accel->sensortime = 0;
    4eb8:	2300      	movs	r3, #0
    4eba:	60bb      	str	r3, [r7, #8]
    4ebc:	e7d6      	b.n	4e6c <bmi160_get_sensor_data+0x30>
            time_2 = (uint32_t)(data_array[idx++] << 16);
    4ebe:	466b      	mov	r3, sp
    4ec0:	7a1b      	ldrb	r3, [r3, #8]
    4ec2:	041b      	lsls	r3, r3, #16
            time_1 = (uint16_t)(data_array[idx++] << 8);
    4ec4:	466a      	mov	r2, sp
    4ec6:	79d2      	ldrb	r2, [r2, #7]
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
    4ec8:	0212      	lsls	r2, r2, #8
    4eca:	4313      	orrs	r3, r2
    4ecc:	466a      	mov	r2, sp
    4ece:	7992      	ldrb	r2, [r2, #6]
    4ed0:	4313      	orrs	r3, r2
    4ed2:	60bb      	str	r3, [r7, #8]
    4ed4:	e7ca      	b.n	4e6c <bmi160_get_sensor_data+0x30>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
    4ed6:	2002      	movs	r0, #2
    4ed8:	4240      	negs	r0, r0
    4eda:	e7c7      	b.n	4e6c <bmi160_get_sensor_data+0x30>
                if (gyro == NULL)
    4edc:	2e00      	cmp	r6, #0
    4ede:	d100      	bne.n	4ee2 <bmi160_get_sensor_data+0xa6>
    4ee0:	e0a2      	b.n	5028 <bmi160_get_sensor_data+0x1ec>
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
    int8_t rslt;
    uint8_t idx = 0;
    uint8_t data_array[15] = { 0 };
    4ee2:	220f      	movs	r2, #15
    4ee4:	2100      	movs	r1, #0
    4ee6:	4668      	mov	r0, sp
    4ee8:	4b54      	ldr	r3, [pc, #336]	; (503c <bmi160_get_sensor_data+0x200>)
    4eea:	4798      	blx	r3
    uint32_t time_2 = 0;
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
    4eec:	2c00      	cmp	r4, #0
    4eee:	d11c      	bne.n	4f2a <bmi160_get_sensor_data+0xee>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
    4ef0:	002b      	movs	r3, r5
    4ef2:	2206      	movs	r2, #6
    4ef4:	4669      	mov	r1, sp
    4ef6:	200c      	movs	r0, #12
    4ef8:	4c51      	ldr	r4, [pc, #324]	; (5040 <bmi160_get_sensor_data+0x204>)
    4efa:	47a0      	blx	r4
        if (rslt == BMI160_OK)
    4efc:	2800      	cmp	r0, #0
    4efe:	d13b      	bne.n	4f78 <bmi160_get_sensor_data+0x13c>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
            msb = data_array[idx++];
            msblsb = (int16_t)((msb << 8) | lsb);
    4f00:	466b      	mov	r3, sp
    4f02:	785a      	ldrb	r2, [r3, #1]
    4f04:	0212      	lsls	r2, r2, #8
    4f06:	781b      	ldrb	r3, [r3, #0]
    4f08:	4313      	orrs	r3, r2
            gyro->x = msblsb; /* Data in X axis */
    4f0a:	8033      	strh	r3, [r6, #0]
            lsb = data_array[idx++];
            msb = data_array[idx++];
            msblsb = (int16_t)((msb << 8) | lsb);
    4f0c:	466b      	mov	r3, sp
    4f0e:	78da      	ldrb	r2, [r3, #3]
    4f10:	0212      	lsls	r2, r2, #8
    4f12:	789b      	ldrb	r3, [r3, #2]
    4f14:	4313      	orrs	r3, r2
            gyro->y = msblsb; /* Data in Y axis */
    4f16:	8073      	strh	r3, [r6, #2]
            lsb = data_array[idx++];
            msb = data_array[idx++];
            msblsb = (int16_t)((msb << 8) | lsb);
    4f18:	466b      	mov	r3, sp
    4f1a:	795a      	ldrb	r2, [r3, #5]
    4f1c:	0212      	lsls	r2, r2, #8
    4f1e:	791b      	ldrb	r3, [r3, #4]
    4f20:	4313      	orrs	r3, r2
            gyro->z = msblsb; /* Data in Z axis */
    4f22:	80b3      	strh	r3, [r6, #4]
            gyro->sensortime = 0;
    4f24:	2300      	movs	r3, #0
    4f26:	60b3      	str	r3, [r6, #8]
    4f28:	e7a0      	b.n	4e6c <bmi160_get_sensor_data+0x30>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
    4f2a:	0022      	movs	r2, r4
    4f2c:	320c      	adds	r2, #12
    4f2e:	002b      	movs	r3, r5
    4f30:	4669      	mov	r1, sp
    4f32:	200c      	movs	r0, #12
    4f34:	4c42      	ldr	r4, [pc, #264]	; (5040 <bmi160_get_sensor_data+0x204>)
    4f36:	47a0      	blx	r4
        if (rslt == BMI160_OK)
    4f38:	2800      	cmp	r0, #0
    4f3a:	d120      	bne.n	4f7e <bmi160_get_sensor_data+0x142>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
            msb = data_array[idx++];
            msblsb = (int16_t)((msb << 8) | lsb);
    4f3c:	466b      	mov	r3, sp
    4f3e:	785a      	ldrb	r2, [r3, #1]
    4f40:	0212      	lsls	r2, r2, #8
    4f42:	781b      	ldrb	r3, [r3, #0]
    4f44:	4313      	orrs	r3, r2
            gyro->x = msblsb; /* gyro X axis data */
    4f46:	8033      	strh	r3, [r6, #0]
            lsb = data_array[idx++];
            msb = data_array[idx++];
            msblsb = (int16_t)((msb << 8) | lsb);
    4f48:	466b      	mov	r3, sp
    4f4a:	78da      	ldrb	r2, [r3, #3]
    4f4c:	0212      	lsls	r2, r2, #8
    4f4e:	789b      	ldrb	r3, [r3, #2]
    4f50:	4313      	orrs	r3, r2
            gyro->y = msblsb; /* gyro Y axis data */
    4f52:	8073      	strh	r3, [r6, #2]
            lsb = data_array[idx++];
            msb = data_array[idx++];
            msblsb = (int16_t)((msb << 8) | lsb);
    4f54:	466b      	mov	r3, sp
    4f56:	795a      	ldrb	r2, [r3, #5]
    4f58:	0212      	lsls	r2, r2, #8
    4f5a:	791b      	ldrb	r3, [r3, #4]
    4f5c:	4313      	orrs	r3, r2
            gyro->z = msblsb; /* gyro Z axis data */
    4f5e:	80b3      	strh	r3, [r6, #4]
            idx = idx + 6;
            time_0 = data_array[idx++];
            time_1 = (uint16_t)(data_array[idx++] << 8);
            time_2 = (uint32_t)(data_array[idx++] << 16);
    4f60:	466b      	mov	r3, sp
    4f62:	7b9b      	ldrb	r3, [r3, #14]
    4f64:	041b      	lsls	r3, r3, #16
            time_1 = (uint16_t)(data_array[idx++] << 8);
    4f66:	466a      	mov	r2, sp
    4f68:	7b52      	ldrb	r2, [r2, #13]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
    4f6a:	0212      	lsls	r2, r2, #8
    4f6c:	4313      	orrs	r3, r2
    4f6e:	466a      	mov	r2, sp
    4f70:	7b12      	ldrb	r2, [r2, #12]
    4f72:	4313      	orrs	r3, r2
    4f74:	60b3      	str	r3, [r6, #8]
    4f76:	e779      	b.n	4e6c <bmi160_get_sensor_data+0x30>
            rslt = BMI160_E_COM_FAIL;
    4f78:	2002      	movs	r0, #2
    4f7a:	4240      	negs	r0, r0
    4f7c:	e776      	b.n	4e6c <bmi160_get_sensor_data+0x30>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
    4f7e:	2002      	movs	r0, #2
    4f80:	4240      	negs	r0, r0
    4f82:	e773      	b.n	4e6c <bmi160_get_sensor_data+0x30>
                if ((gyro == NULL) || (accel == NULL))
    4f84:	2e00      	cmp	r6, #0
    4f86:	d052      	beq.n	502e <bmi160_get_sensor_data+0x1f2>
    4f88:	2f00      	cmp	r7, #0
    4f8a:	d053      	beq.n	5034 <bmi160_get_sensor_data+0x1f8>
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
    int8_t rslt;
    uint8_t idx = 0;
    uint8_t data_array[15] = { 0 };
    4f8c:	220f      	movs	r2, #15
    4f8e:	2100      	movs	r1, #0
    4f90:	4668      	mov	r0, sp
    4f92:	4b2a      	ldr	r3, [pc, #168]	; (503c <bmi160_get_sensor_data+0x200>)
    4f94:	4798      	blx	r3
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
    4f96:	0022      	movs	r2, r4
    4f98:	320c      	adds	r2, #12
    4f9a:	002b      	movs	r3, r5
    4f9c:	4669      	mov	r1, sp
    4f9e:	200c      	movs	r0, #12
    4fa0:	4d27      	ldr	r5, [pc, #156]	; (5040 <bmi160_get_sensor_data+0x204>)
    4fa2:	47a8      	blx	r5
    if (rslt == BMI160_OK)
    4fa4:	2800      	cmp	r0, #0
    4fa6:	d136      	bne.n	5016 <bmi160_get_sensor_data+0x1da>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4fa8:	466b      	mov	r3, sp
    4faa:	785a      	ldrb	r2, [r3, #1]
    4fac:	0212      	lsls	r2, r2, #8
    4fae:	781b      	ldrb	r3, [r3, #0]
    4fb0:	4313      	orrs	r3, r2
        gyro->x = msblsb; /* gyro X axis data */
    4fb2:	8033      	strh	r3, [r6, #0]
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4fb4:	466b      	mov	r3, sp
    4fb6:	78da      	ldrb	r2, [r3, #3]
    4fb8:	0212      	lsls	r2, r2, #8
    4fba:	789b      	ldrb	r3, [r3, #2]
    4fbc:	4313      	orrs	r3, r2
        gyro->y = msblsb; /* gyro Y axis data */
    4fbe:	8073      	strh	r3, [r6, #2]
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4fc0:	466b      	mov	r3, sp
    4fc2:	795a      	ldrb	r2, [r3, #5]
    4fc4:	0212      	lsls	r2, r2, #8
    4fc6:	791b      	ldrb	r3, [r3, #4]
    4fc8:	4313      	orrs	r3, r2
        gyro->z = msblsb; /* gyro Z axis data */
    4fca:	80b3      	strh	r3, [r6, #4]
        /* Accel Data */
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4fcc:	466b      	mov	r3, sp
    4fce:	79da      	ldrb	r2, [r3, #7]
    4fd0:	0212      	lsls	r2, r2, #8
    4fd2:	799b      	ldrb	r3, [r3, #6]
    4fd4:	4313      	orrs	r3, r2
        accel->x = (int16_t)msblsb; /* accel X axis data */
    4fd6:	803b      	strh	r3, [r7, #0]
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4fd8:	466b      	mov	r3, sp
    4fda:	7a5a      	ldrb	r2, [r3, #9]
    4fdc:	0212      	lsls	r2, r2, #8
    4fde:	7a1b      	ldrb	r3, [r3, #8]
    4fe0:	4313      	orrs	r3, r2
        accel->y = (int16_t)msblsb; /* accel Y axis data */
    4fe2:	807b      	strh	r3, [r7, #2]
        lsb = data_array[idx++];
        msb = data_array[idx++];
        msblsb = (int16_t)((msb << 8) | lsb);
    4fe4:	466b      	mov	r3, sp
    4fe6:	7ada      	ldrb	r2, [r3, #11]
    4fe8:	0212      	lsls	r2, r2, #8
    4fea:	7a9b      	ldrb	r3, [r3, #10]
    4fec:	4313      	orrs	r3, r2
        accel->z = (int16_t)msblsb; /* accel Z axis data */
    4fee:	80bb      	strh	r3, [r7, #4]
        if (len == 3)
    4ff0:	2c03      	cmp	r4, #3
    4ff2:	d003      	beq.n	4ffc <bmi160_get_sensor_data+0x1c0>
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
        }
        else
        {
            accel->sensortime = 0;
    4ff4:	2300      	movs	r3, #0
    4ff6:	60bb      	str	r3, [r7, #8]
            gyro->sensortime = 0;
    4ff8:	60b3      	str	r3, [r6, #8]
    4ffa:	e737      	b.n	4e6c <bmi160_get_sensor_data+0x30>
            time_2 = (uint32_t)(data_array[idx++] << 16);
    4ffc:	466b      	mov	r3, sp
    4ffe:	7b9b      	ldrb	r3, [r3, #14]
    5000:	041b      	lsls	r3, r3, #16
            time_1 = (uint16_t)(data_array[idx++] << 8);
    5002:	466a      	mov	r2, sp
    5004:	7b52      	ldrb	r2, [r2, #13]
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
    5006:	0212      	lsls	r2, r2, #8
    5008:	4313      	orrs	r3, r2
    500a:	466a      	mov	r2, sp
    500c:	7b12      	ldrb	r2, [r2, #12]
    500e:	4313      	orrs	r3, r2
    5010:	60bb      	str	r3, [r7, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
    5012:	60b3      	str	r3, [r6, #8]
    5014:	e72a      	b.n	4e6c <bmi160_get_sensor_data+0x30>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
    5016:	2002      	movs	r0, #2
    5018:	4240      	negs	r0, r0
    501a:	e727      	b.n	4e6c <bmi160_get_sensor_data+0x30>
        rslt = BMI160_E_NULL_PTR;
    501c:	2001      	movs	r0, #1
    501e:	4240      	negs	r0, r0
    5020:	e724      	b.n	4e6c <bmi160_get_sensor_data+0x30>
                    rslt = BMI160_E_NULL_PTR;
    5022:	2001      	movs	r0, #1
    5024:	4240      	negs	r0, r0
    5026:	e721      	b.n	4e6c <bmi160_get_sensor_data+0x30>
                    rslt = BMI160_E_NULL_PTR;
    5028:	2001      	movs	r0, #1
    502a:	4240      	negs	r0, r0
    502c:	e71e      	b.n	4e6c <bmi160_get_sensor_data+0x30>
                    rslt = BMI160_E_NULL_PTR;
    502e:	2001      	movs	r0, #1
    5030:	4240      	negs	r0, r0
    5032:	e71b      	b.n	4e6c <bmi160_get_sensor_data+0x30>
    5034:	2001      	movs	r0, #1
    5036:	4240      	negs	r0, r0
    5038:	e718      	b.n	4e6c <bmi160_get_sensor_data+0x30>
    503a:	46c0      	nop			; (mov r8, r8)
    503c:	0000a5a7 	.word	0x0000a5a7
    5040:	00004901 	.word	0x00004901

00005044 <configure_i2c_master>:
    5044:	b510      	push	{r4, lr}
    5046:	b08e      	sub	sp, #56	; 0x38
    5048:	aa01      	add	r2, sp, #4
    504a:	2364      	movs	r3, #100	; 0x64
    504c:	9301      	str	r3, [sp, #4]
    504e:	4b1c      	ldr	r3, [pc, #112]	; (50c0 <configure_i2c_master+0x7c>)
    5050:	6053      	str	r3, [r2, #4]
    5052:	2300      	movs	r3, #0
    5054:	6093      	str	r3, [r2, #8]
    5056:	7313      	strb	r3, [r2, #12]
    5058:	7613      	strb	r3, [r2, #24]
    505a:	2180      	movs	r1, #128	; 0x80
    505c:	0389      	lsls	r1, r1, #14
    505e:	6111      	str	r1, [r2, #16]
    5060:	2101      	movs	r1, #1
    5062:	4249      	negs	r1, r1
    5064:	8291      	strh	r1, [r2, #20]
    5066:	3125      	adds	r1, #37	; 0x25
    5068:	5453      	strb	r3, [r2, r1]
    506a:	6293      	str	r3, [r2, #40]	; 0x28
    506c:	3108      	adds	r1, #8
    506e:	5453      	strb	r3, [r2, r1]
    5070:	3101      	adds	r1, #1
    5072:	5453      	strb	r3, [r2, r1]
    5074:	3101      	adds	r1, #1
    5076:	5453      	strb	r3, [r2, r1]
    5078:	33d7      	adds	r3, #215	; 0xd7
    507a:	8613      	strh	r3, [r2, #48]	; 0x30
    507c:	4b11      	ldr	r3, [pc, #68]	; (50c4 <configure_i2c_master+0x80>)
    507e:	82d3      	strh	r3, [r2, #22]
    5080:	4b11      	ldr	r3, [pc, #68]	; (50c8 <configure_i2c_master+0x84>)
    5082:	61d3      	str	r3, [r2, #28]
    5084:	4b11      	ldr	r3, [pc, #68]	; (50cc <configure_i2c_master+0x88>)
    5086:	6213      	str	r3, [r2, #32]
    5088:	4c11      	ldr	r4, [pc, #68]	; (50d0 <configure_i2c_master+0x8c>)
    508a:	4912      	ldr	r1, [pc, #72]	; (50d4 <configure_i2c_master+0x90>)
    508c:	0020      	movs	r0, r4
    508e:	4b12      	ldr	r3, [pc, #72]	; (50d8 <configure_i2c_master+0x94>)
    5090:	4798      	blx	r3
    5092:	6822      	ldr	r2, [r4, #0]
    5094:	2107      	movs	r1, #7
    5096:	69d3      	ldr	r3, [r2, #28]
    5098:	4219      	tst	r1, r3
    509a:	d1fc      	bne.n	5096 <configure_i2c_master+0x52>
    509c:	6813      	ldr	r3, [r2, #0]
    509e:	2102      	movs	r1, #2
    50a0:	430b      	orrs	r3, r1
    50a2:	6013      	str	r3, [r2, #0]
    50a4:	4b0a      	ldr	r3, [pc, #40]	; (50d0 <configure_i2c_master+0x8c>)
    50a6:	88dc      	ldrh	r4, [r3, #6]
    50a8:	2300      	movs	r3, #0
    50aa:	2010      	movs	r0, #16
    50ac:	8b51      	ldrh	r1, [r2, #26]
    50ae:	4201      	tst	r1, r0
    50b0:	d104      	bne.n	50bc <configure_i2c_master+0x78>
    50b2:	3301      	adds	r3, #1
    50b4:	42a3      	cmp	r3, r4
    50b6:	d3f9      	bcc.n	50ac <configure_i2c_master+0x68>
    50b8:	2310      	movs	r3, #16
    50ba:	8353      	strh	r3, [r2, #26]
    50bc:	b00e      	add	sp, #56	; 0x38
    50be:	bd10      	pop	{r4, pc}
    50c0:	00000d48 	.word	0x00000d48
    50c4:	00002710 	.word	0x00002710
    50c8:	000c0002 	.word	0x000c0002
    50cc:	000d0002 	.word	0x000d0002
    50d0:	20000c2c 	.word	0x20000c2c
    50d4:	42001000 	.word	0x42001000
    50d8:	0000159d 	.word	0x0000159d

000050dc <ssd1306_command>:
    50dc:	b570      	push	{r4, r5, r6, lr}
    50de:	b084      	sub	sp, #16
    50e0:	aa03      	add	r2, sp, #12
    50e2:	2300      	movs	r3, #0
    50e4:	7013      	strb	r3, [r2, #0]
    50e6:	7050      	strb	r0, [r2, #1]
    50e8:	490e      	ldr	r1, [pc, #56]	; (5124 <ssd1306_command+0x48>)
    50ea:	7809      	ldrb	r1, [r1, #0]
    50ec:	4668      	mov	r0, sp
    50ee:	8001      	strh	r1, [r0, #0]
    50f0:	2102      	movs	r1, #2
    50f2:	8041      	strh	r1, [r0, #2]
    50f4:	9201      	str	r2, [sp, #4]
    50f6:	7203      	strb	r3, [r0, #8]
    50f8:	7243      	strb	r3, [r0, #9]
    50fa:	7283      	strb	r3, [r0, #10]
    50fc:	4a0a      	ldr	r2, [pc, #40]	; (5128 <ssd1306_command+0x4c>)
    50fe:	8013      	strh	r3, [r2, #0]
    5100:	4d0a      	ldr	r5, [pc, #40]	; (512c <ssd1306_command+0x50>)
    5102:	4e0b      	ldr	r6, [pc, #44]	; (5130 <ssd1306_command+0x54>)
    5104:	0014      	movs	r4, r2
    5106:	4669      	mov	r1, sp
    5108:	0028      	movs	r0, r5
    510a:	47b0      	blx	r6
    510c:	2800      	cmp	r0, #0
    510e:	d006      	beq.n	511e <ssd1306_command+0x42>
    5110:	8823      	ldrh	r3, [r4, #0]
    5112:	1c5a      	adds	r2, r3, #1
    5114:	8022      	strh	r2, [r4, #0]
    5116:	22fa      	movs	r2, #250	; 0xfa
    5118:	0092      	lsls	r2, r2, #2
    511a:	4293      	cmp	r3, r2
    511c:	d1f3      	bne.n	5106 <ssd1306_command+0x2a>
    511e:	b004      	add	sp, #16
    5120:	bd70      	pop	{r4, r5, r6, pc}
    5122:	46c0      	nop			; (mov r8, r8)
    5124:	20000c28 	.word	0x20000c28
    5128:	20000838 	.word	0x20000838
    512c:	20000c2c 	.word	0x20000c2c
    5130:	000019d5 	.word	0x000019d5

00005134 <SSD1306_Begin>:
    5134:	b570      	push	{r4, r5, r6, lr}
    5136:	0004      	movs	r4, r0
    5138:	000d      	movs	r5, r1
    513a:	4b3a      	ldr	r3, [pc, #232]	; (5224 <SSD1306_Begin+0xf0>)
    513c:	4798      	blx	r3
    513e:	4b3a      	ldr	r3, [pc, #232]	; (5228 <SSD1306_Begin+0xf4>)
    5140:	701c      	strb	r4, [r3, #0]
    5142:	4b3a      	ldr	r3, [pc, #232]	; (522c <SSD1306_Begin+0xf8>)
    5144:	701d      	strb	r5, [r3, #0]
    5146:	2000      	movs	r0, #0
    5148:	4b39      	ldr	r3, [pc, #228]	; (5230 <SSD1306_Begin+0xfc>)
    514a:	4798      	blx	r3
    514c:	0002      	movs	r2, r0
    514e:	2300      	movs	r3, #0
    5150:	0f91      	lsrs	r1, r2, #30
    5152:	0090      	lsls	r0, r2, #2
    5154:	1880      	adds	r0, r0, r2
    5156:	4159      	adcs	r1, r3
    5158:	1800      	adds	r0, r0, r0
    515a:	4149      	adcs	r1, r1
    515c:	4a35      	ldr	r2, [pc, #212]	; (5234 <SSD1306_Begin+0x100>)
    515e:	2300      	movs	r3, #0
    5160:	1880      	adds	r0, r0, r2
    5162:	4159      	adcs	r1, r3
    5164:	4a34      	ldr	r2, [pc, #208]	; (5238 <SSD1306_Begin+0x104>)
    5166:	2300      	movs	r3, #0
    5168:	4d34      	ldr	r5, [pc, #208]	; (523c <SSD1306_Begin+0x108>)
    516a:	47a8      	blx	r5
    516c:	4b34      	ldr	r3, [pc, #208]	; (5240 <SSD1306_Begin+0x10c>)
    516e:	4798      	blx	r3
    5170:	20ae      	movs	r0, #174	; 0xae
    5172:	4d34      	ldr	r5, [pc, #208]	; (5244 <SSD1306_Begin+0x110>)
    5174:	47a8      	blx	r5
    5176:	20d5      	movs	r0, #213	; 0xd5
    5178:	47a8      	blx	r5
    517a:	2080      	movs	r0, #128	; 0x80
    517c:	47a8      	blx	r5
    517e:	20a8      	movs	r0, #168	; 0xa8
    5180:	47a8      	blx	r5
    5182:	203f      	movs	r0, #63	; 0x3f
    5184:	47a8      	blx	r5
    5186:	20d3      	movs	r0, #211	; 0xd3
    5188:	47a8      	blx	r5
    518a:	2000      	movs	r0, #0
    518c:	47a8      	blx	r5
    518e:	2040      	movs	r0, #64	; 0x40
    5190:	47a8      	blx	r5
    5192:	208d      	movs	r0, #141	; 0x8d
    5194:	47a8      	blx	r5
    5196:	2c01      	cmp	r4, #1
    5198:	d02c      	beq.n	51f4 <SSD1306_Begin+0xc0>
    519a:	2014      	movs	r0, #20
    519c:	4c29      	ldr	r4, [pc, #164]	; (5244 <SSD1306_Begin+0x110>)
    519e:	47a0      	blx	r4
    51a0:	2020      	movs	r0, #32
    51a2:	47a0      	blx	r4
    51a4:	2000      	movs	r0, #0
    51a6:	47a0      	blx	r4
    51a8:	20a1      	movs	r0, #161	; 0xa1
    51aa:	47a0      	blx	r4
    51ac:	20c8      	movs	r0, #200	; 0xc8
    51ae:	47a0      	blx	r4
    51b0:	20da      	movs	r0, #218	; 0xda
    51b2:	47a0      	blx	r4
    51b4:	2012      	movs	r0, #18
    51b6:	47a0      	blx	r4
    51b8:	2081      	movs	r0, #129	; 0x81
    51ba:	47a0      	blx	r4
    51bc:	20cf      	movs	r0, #207	; 0xcf
    51be:	47a0      	blx	r4
    51c0:	20d9      	movs	r0, #217	; 0xd9
    51c2:	47a0      	blx	r4
    51c4:	20f1      	movs	r0, #241	; 0xf1
    51c6:	47a0      	blx	r4
    51c8:	20db      	movs	r0, #219	; 0xdb
    51ca:	4c1e      	ldr	r4, [pc, #120]	; (5244 <SSD1306_Begin+0x110>)
    51cc:	47a0      	blx	r4
    51ce:	2040      	movs	r0, #64	; 0x40
    51d0:	47a0      	blx	r4
    51d2:	20a4      	movs	r0, #164	; 0xa4
    51d4:	47a0      	blx	r4
    51d6:	20a6      	movs	r0, #166	; 0xa6
    51d8:	47a0      	blx	r4
    51da:	202e      	movs	r0, #46	; 0x2e
    51dc:	47a0      	blx	r4
    51de:	20af      	movs	r0, #175	; 0xaf
    51e0:	47a0      	blx	r4
    51e2:	2300      	movs	r3, #0
    51e4:	4a18      	ldr	r2, [pc, #96]	; (5248 <SSD1306_Begin+0x114>)
    51e6:	7013      	strb	r3, [r2, #0]
    51e8:	4a18      	ldr	r2, [pc, #96]	; (524c <SSD1306_Begin+0x118>)
    51ea:	7013      	strb	r3, [r2, #0]
    51ec:	2201      	movs	r2, #1
    51ee:	4b18      	ldr	r3, [pc, #96]	; (5250 <SSD1306_Begin+0x11c>)
    51f0:	701a      	strb	r2, [r3, #0]
    51f2:	bd70      	pop	{r4, r5, r6, pc}
    51f4:	2010      	movs	r0, #16
    51f6:	4c13      	ldr	r4, [pc, #76]	; (5244 <SSD1306_Begin+0x110>)
    51f8:	47a0      	blx	r4
    51fa:	2020      	movs	r0, #32
    51fc:	47a0      	blx	r4
    51fe:	2000      	movs	r0, #0
    5200:	47a0      	blx	r4
    5202:	20a1      	movs	r0, #161	; 0xa1
    5204:	47a0      	blx	r4
    5206:	20c8      	movs	r0, #200	; 0xc8
    5208:	47a0      	blx	r4
    520a:	20da      	movs	r0, #218	; 0xda
    520c:	47a0      	blx	r4
    520e:	2012      	movs	r0, #18
    5210:	47a0      	blx	r4
    5212:	2081      	movs	r0, #129	; 0x81
    5214:	47a0      	blx	r4
    5216:	209f      	movs	r0, #159	; 0x9f
    5218:	47a0      	blx	r4
    521a:	20d9      	movs	r0, #217	; 0xd9
    521c:	47a0      	blx	r4
    521e:	2022      	movs	r0, #34	; 0x22
    5220:	47a0      	blx	r4
    5222:	e7d1      	b.n	51c8 <SSD1306_Begin+0x94>
    5224:	00005045 	.word	0x00005045
    5228:	20000c3a 	.word	0x20000c3a
    522c:	20000c28 	.word	0x20000c28
    5230:	00002855 	.word	0x00002855
    5234:	00001b57 	.word	0x00001b57
    5238:	00001b58 	.word	0x00001b58
    523c:	00007f8d 	.word	0x00007f8d
    5240:	20000001 	.word	0x20000001
    5244:	000050dd 	.word	0x000050dd
    5248:	20000c29 	.word	0x20000c29
    524c:	20000c3b 	.word	0x20000c3b
    5250:	20000c38 	.word	0x20000c38

00005254 <SSD1306_DrawPixel>:
    5254:	b510      	push	{r4, lr}
    5256:	b243      	sxtb	r3, r0
    5258:	2b00      	cmp	r3, #0
    525a:	db0e      	blt.n	527a <SSD1306_DrawPixel+0x26>
    525c:	293f      	cmp	r1, #63	; 0x3f
    525e:	d80c      	bhi.n	527a <SSD1306_DrawPixel+0x26>
    5260:	2a00      	cmp	r2, #0
    5262:	d10b      	bne.n	527c <SSD1306_DrawPixel+0x28>
    5264:	08cb      	lsrs	r3, r1, #3
    5266:	01db      	lsls	r3, r3, #7
    5268:	1818      	adds	r0, r3, r0
    526a:	4c0a      	ldr	r4, [pc, #40]	; (5294 <SSD1306_DrawPixel+0x40>)
    526c:	2307      	movs	r3, #7
    526e:	4019      	ands	r1, r3
    5270:	2201      	movs	r2, #1
    5272:	408a      	lsls	r2, r1
    5274:	5c23      	ldrb	r3, [r4, r0]
    5276:	4393      	bics	r3, r2
    5278:	5423      	strb	r3, [r4, r0]
    527a:	bd10      	pop	{r4, pc}
    527c:	08cb      	lsrs	r3, r1, #3
    527e:	01db      	lsls	r3, r3, #7
    5280:	1818      	adds	r0, r3, r0
    5282:	4a04      	ldr	r2, [pc, #16]	; (5294 <SSD1306_DrawPixel+0x40>)
    5284:	2307      	movs	r3, #7
    5286:	4019      	ands	r1, r3
    5288:	3b06      	subs	r3, #6
    528a:	408b      	lsls	r3, r1
    528c:	5c11      	ldrb	r1, [r2, r0]
    528e:	430b      	orrs	r3, r1
    5290:	5413      	strb	r3, [r2, r0]
    5292:	e7f2      	b.n	527a <SSD1306_DrawPixel+0x26>
    5294:	200000f8 	.word	0x200000f8

00005298 <SSD1306_Display>:
    5298:	b5f0      	push	{r4, r5, r6, r7, lr}
    529a:	46de      	mov	lr, fp
    529c:	464f      	mov	r7, r9
    529e:	4646      	mov	r6, r8
    52a0:	b5c0      	push	{r6, r7, lr}
    52a2:	b084      	sub	sp, #16
    52a4:	2021      	movs	r0, #33	; 0x21
    52a6:	4c27      	ldr	r4, [pc, #156]	; (5344 <SSD1306_Display+0xac>)
    52a8:	47a0      	blx	r4
    52aa:	2000      	movs	r0, #0
    52ac:	47a0      	blx	r4
    52ae:	207f      	movs	r0, #127	; 0x7f
    52b0:	47a0      	blx	r4
    52b2:	2022      	movs	r0, #34	; 0x22
    52b4:	47a0      	blx	r4
    52b6:	2000      	movs	r0, #0
    52b8:	47a0      	blx	r4
    52ba:	2007      	movs	r0, #7
    52bc:	47a0      	blx	r4
    52be:	2400      	movs	r4, #0
    52c0:	2300      	movs	r3, #0
    52c2:	4698      	mov	r8, r3
    52c4:	4b20      	ldr	r3, [pc, #128]	; (5348 <SSD1306_Display+0xb0>)
    52c6:	469b      	mov	fp, r3
    52c8:	46c1      	mov	r9, r8
    52ca:	e012      	b.n	52f2 <SSD1306_Display+0x5a>
    52cc:	0025      	movs	r5, r4
    52ce:	3510      	adds	r5, #16
    52d0:	b2ad      	uxth	r5, r5
    52d2:	4f1e      	ldr	r7, [pc, #120]	; (534c <SSD1306_Display+0xb4>)
    52d4:	4e1e      	ldr	r6, [pc, #120]	; (5350 <SSD1306_Display+0xb8>)
    52d6:	5d39      	ldrb	r1, [r7, r4]
    52d8:	481e      	ldr	r0, [pc, #120]	; (5354 <SSD1306_Display+0xbc>)
    52da:	47b0      	blx	r6
    52dc:	3401      	adds	r4, #1
    52de:	b2a4      	uxth	r4, r4
    52e0:	42ac      	cmp	r4, r5
    52e2:	d1f8      	bne.n	52d6 <SSD1306_Display+0x3e>
    52e4:	481b      	ldr	r0, [pc, #108]	; (5354 <SSD1306_Display+0xbc>)
    52e6:	4b1c      	ldr	r3, [pc, #112]	; (5358 <SSD1306_Display+0xc0>)
    52e8:	4798      	blx	r3
    52ea:	2380      	movs	r3, #128	; 0x80
    52ec:	00db      	lsls	r3, r3, #3
    52ee:	429c      	cmp	r4, r3
    52f0:	d022      	beq.n	5338 <SSD1306_Display+0xa0>
    52f2:	466b      	mov	r3, sp
    52f4:	4642      	mov	r2, r8
    52f6:	705a      	strb	r2, [r3, #1]
    52f8:	2340      	movs	r3, #64	; 0x40
    52fa:	466a      	mov	r2, sp
    52fc:	7013      	strb	r3, [r2, #0]
    52fe:	4b17      	ldr	r3, [pc, #92]	; (535c <SSD1306_Display+0xc4>)
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	8093      	strh	r3, [r2, #4]
    5304:	466b      	mov	r3, sp
    5306:	2201      	movs	r2, #1
    5308:	80da      	strh	r2, [r3, #6]
    530a:	9302      	str	r3, [sp, #8]
    530c:	4642      	mov	r2, r8
    530e:	731a      	strb	r2, [r3, #12]
    5310:	735a      	strb	r2, [r3, #13]
    5312:	739a      	strb	r2, [r3, #14]
    5314:	465b      	mov	r3, fp
    5316:	464a      	mov	r2, r9
    5318:	801a      	strh	r2, [r3, #0]
    531a:	4e11      	ldr	r6, [pc, #68]	; (5360 <SSD1306_Display+0xc8>)
    531c:	4d0a      	ldr	r5, [pc, #40]	; (5348 <SSD1306_Display+0xb0>)
    531e:	a901      	add	r1, sp, #4
    5320:	480c      	ldr	r0, [pc, #48]	; (5354 <SSD1306_Display+0xbc>)
    5322:	47b0      	blx	r6
    5324:	2800      	cmp	r0, #0
    5326:	d0d1      	beq.n	52cc <SSD1306_Display+0x34>
    5328:	882b      	ldrh	r3, [r5, #0]
    532a:	1c5a      	adds	r2, r3, #1
    532c:	802a      	strh	r2, [r5, #0]
    532e:	22fa      	movs	r2, #250	; 0xfa
    5330:	0092      	lsls	r2, r2, #2
    5332:	4293      	cmp	r3, r2
    5334:	d1f3      	bne.n	531e <SSD1306_Display+0x86>
    5336:	e7c9      	b.n	52cc <SSD1306_Display+0x34>
    5338:	b004      	add	sp, #16
    533a:	bc1c      	pop	{r2, r3, r4}
    533c:	4690      	mov	r8, r2
    533e:	4699      	mov	r9, r3
    5340:	46a3      	mov	fp, r4
    5342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5344:	000050dd 	.word	0x000050dd
    5348:	20000838 	.word	0x20000838
    534c:	200000f8 	.word	0x200000f8
    5350:	00001a15 	.word	0x00001a15
    5354:	20000c2c 	.word	0x20000c2c
    5358:	000019fd 	.word	0x000019fd
    535c:	20000c28 	.word	0x20000c28
    5360:	000019e9 	.word	0x000019e9

00005364 <SSD1306_ClearDisplay>:
    5364:	4b04      	ldr	r3, [pc, #16]	; (5378 <SSD1306_ClearDisplay+0x14>)
    5366:	2280      	movs	r2, #128	; 0x80
    5368:	00d2      	lsls	r2, r2, #3
    536a:	1899      	adds	r1, r3, r2
    536c:	2200      	movs	r2, #0
    536e:	701a      	strb	r2, [r3, #0]
    5370:	3301      	adds	r3, #1
    5372:	428b      	cmp	r3, r1
    5374:	d1fb      	bne.n	536e <SSD1306_ClearDisplay+0xa>
    5376:	4770      	bx	lr
    5378:	200000f8 	.word	0x200000f8

0000537c <SSD1306_DrawLine>:
    537c:	b5f0      	push	{r4, r5, r6, r7, lr}
    537e:	46de      	mov	lr, fp
    5380:	4657      	mov	r7, sl
    5382:	464e      	mov	r6, r9
    5384:	4645      	mov	r5, r8
    5386:	b5e0      	push	{r5, r6, r7, lr}
    5388:	b083      	sub	sp, #12
    538a:	0005      	movs	r5, r0
    538c:	000e      	movs	r6, r1
    538e:	0017      	movs	r7, r2
    5390:	aa0c      	add	r2, sp, #48	; 0x30
    5392:	7812      	ldrb	r2, [r2, #0]
    5394:	4693      	mov	fp, r2
    5396:	1a5a      	subs	r2, r3, r1
    5398:	17d1      	asrs	r1, r2, #31
    539a:	1852      	adds	r2, r2, r1
    539c:	404a      	eors	r2, r1
    539e:	4691      	mov	r9, r2
    53a0:	1a3a      	subs	r2, r7, r0
    53a2:	17d1      	asrs	r1, r2, #31
    53a4:	1852      	adds	r2, r2, r1
    53a6:	404a      	eors	r2, r1
    53a8:	4692      	mov	sl, r2
    53aa:	4591      	cmp	r9, r2
    53ac:	dd04      	ble.n	53b8 <SSD1306_DrawLine+0x3c>
    53ae:	003a      	movs	r2, r7
    53b0:	001f      	movs	r7, r3
    53b2:	0013      	movs	r3, r2
    53b4:	0035      	movs	r5, r6
    53b6:	0006      	movs	r6, r0
    53b8:	42bd      	cmp	r5, r7
    53ba:	dd05      	ble.n	53c8 <SSD1306_DrawLine+0x4c>
    53bc:	0032      	movs	r2, r6
    53be:	001e      	movs	r6, r3
    53c0:	0013      	movs	r3, r2
    53c2:	002a      	movs	r2, r5
    53c4:	003d      	movs	r5, r7
    53c6:	0017      	movs	r7, r2
    53c8:	1b7a      	subs	r2, r7, r5
    53ca:	b2d2      	uxtb	r2, r2
    53cc:	0011      	movs	r1, r2
    53ce:	9201      	str	r2, [sp, #4]
    53d0:	1b9a      	subs	r2, r3, r6
    53d2:	17d0      	asrs	r0, r2, #31
    53d4:	1812      	adds	r2, r2, r0
    53d6:	4042      	eors	r2, r0
    53d8:	b2d2      	uxtb	r2, r2
    53da:	4690      	mov	r8, r2
    53dc:	084c      	lsrs	r4, r1, #1
    53de:	17f2      	asrs	r2, r6, #31
    53e0:	0fd9      	lsrs	r1, r3, #31
    53e2:	429e      	cmp	r6, r3
    53e4:	414a      	adcs	r2, r1
    53e6:	4252      	negs	r2, r2
    53e8:	2301      	movs	r3, #1
    53ea:	431a      	orrs	r2, r3
    53ec:	9200      	str	r2, [sp, #0]
    53ee:	42bd      	cmp	r5, r7
    53f0:	dc35      	bgt.n	545e <SSD1306_DrawLine+0xe2>
    53f2:	003b      	movs	r3, r7
    53f4:	464f      	mov	r7, r9
    53f6:	4699      	mov	r9, r3
    53f8:	e00e      	b.n	5418 <SSD1306_DrawLine+0x9c>
    53fa:	b2e9      	uxtb	r1, r5
    53fc:	b2f0      	uxtb	r0, r6
    53fe:	2200      	movs	r2, #0
    5400:	4b1a      	ldr	r3, [pc, #104]	; (546c <SSD1306_DrawLine+0xf0>)
    5402:	4798      	blx	r3
    5404:	4643      	mov	r3, r8
    5406:	1ae4      	subs	r4, r4, r3
    5408:	b2a3      	uxth	r3, r4
    540a:	b21c      	sxth	r4, r3
    540c:	2c00      	cmp	r4, #0
    540e:	db1d      	blt.n	544c <SSD1306_DrawLine+0xd0>
    5410:	3501      	adds	r5, #1
    5412:	b22d      	sxth	r5, r5
    5414:	45a9      	cmp	r9, r5
    5416:	db22      	blt.n	545e <SSD1306_DrawLine+0xe2>
    5418:	4557      	cmp	r7, sl
    541a:	dd08      	ble.n	542e <SSD1306_DrawLine+0xb2>
    541c:	465b      	mov	r3, fp
    541e:	2b00      	cmp	r3, #0
    5420:	d0eb      	beq.n	53fa <SSD1306_DrawLine+0x7e>
    5422:	b2e9      	uxtb	r1, r5
    5424:	b2f0      	uxtb	r0, r6
    5426:	2201      	movs	r2, #1
    5428:	4b10      	ldr	r3, [pc, #64]	; (546c <SSD1306_DrawLine+0xf0>)
    542a:	4798      	blx	r3
    542c:	e7ea      	b.n	5404 <SSD1306_DrawLine+0x88>
    542e:	465b      	mov	r3, fp
    5430:	2b00      	cmp	r3, #0
    5432:	d005      	beq.n	5440 <SSD1306_DrawLine+0xc4>
    5434:	b2f1      	uxtb	r1, r6
    5436:	b2e8      	uxtb	r0, r5
    5438:	2201      	movs	r2, #1
    543a:	4b0c      	ldr	r3, [pc, #48]	; (546c <SSD1306_DrawLine+0xf0>)
    543c:	4798      	blx	r3
    543e:	e7e1      	b.n	5404 <SSD1306_DrawLine+0x88>
    5440:	b2f1      	uxtb	r1, r6
    5442:	b2e8      	uxtb	r0, r5
    5444:	2200      	movs	r2, #0
    5446:	4b09      	ldr	r3, [pc, #36]	; (546c <SSD1306_DrawLine+0xf0>)
    5448:	4798      	blx	r3
    544a:	e7db      	b.n	5404 <SSD1306_DrawLine+0x88>
    544c:	9a00      	ldr	r2, [sp, #0]
    544e:	4694      	mov	ip, r2
    5450:	4466      	add	r6, ip
    5452:	b236      	sxth	r6, r6
    5454:	9a01      	ldr	r2, [sp, #4]
    5456:	4694      	mov	ip, r2
    5458:	4463      	add	r3, ip
    545a:	b21c      	sxth	r4, r3
    545c:	e7d8      	b.n	5410 <SSD1306_DrawLine+0x94>
    545e:	b003      	add	sp, #12
    5460:	bc3c      	pop	{r2, r3, r4, r5}
    5462:	4690      	mov	r8, r2
    5464:	4699      	mov	r9, r3
    5466:	46a2      	mov	sl, r4
    5468:	46ab      	mov	fp, r5
    546a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    546c:	00005255 	.word	0x00005255

00005470 <SSD1306_DrawFastVLine>:
    5470:	b510      	push	{r4, lr}
    5472:	b082      	sub	sp, #8
    5474:	b200      	sxth	r0, r0
    5476:	3a01      	subs	r2, #1
    5478:	1852      	adds	r2, r2, r1
    547a:	b209      	sxth	r1, r1
    547c:	9300      	str	r3, [sp, #0]
    547e:	0013      	movs	r3, r2
    5480:	0002      	movs	r2, r0
    5482:	4c02      	ldr	r4, [pc, #8]	; (548c <SSD1306_DrawFastVLine+0x1c>)
    5484:	47a0      	blx	r4
    5486:	b002      	add	sp, #8
    5488:	bd10      	pop	{r4, pc}
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	0000537d 	.word	0x0000537d

00005490 <SSD1306_FillRect>:
    5490:	b5f0      	push	{r4, r5, r6, r7, lr}
    5492:	b083      	sub	sp, #12
    5494:	9100      	str	r1, [sp, #0]
    5496:	9301      	str	r3, [sp, #4]
    5498:	ab08      	add	r3, sp, #32
    549a:	781f      	ldrb	r7, [r3, #0]
    549c:	b204      	sxth	r4, r0
    549e:	1816      	adds	r6, r2, r0
    54a0:	42b0      	cmp	r0, r6
    54a2:	da09      	bge.n	54b8 <SSD1306_FillRect+0x28>
    54a4:	4d05      	ldr	r5, [pc, #20]	; (54bc <SSD1306_FillRect+0x2c>)
    54a6:	b2e0      	uxtb	r0, r4
    54a8:	003b      	movs	r3, r7
    54aa:	9a01      	ldr	r2, [sp, #4]
    54ac:	9900      	ldr	r1, [sp, #0]
    54ae:	47a8      	blx	r5
    54b0:	3401      	adds	r4, #1
    54b2:	b224      	sxth	r4, r4
    54b4:	42b4      	cmp	r4, r6
    54b6:	dbf6      	blt.n	54a6 <SSD1306_FillRect+0x16>
    54b8:	b003      	add	sp, #12
    54ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54bc:	00005471 	.word	0x00005471

000054c0 <SSD1306_GotoXY>:
    54c0:	b243      	sxtb	r3, r0
    54c2:	2b00      	cmp	r3, #0
    54c4:	db05      	blt.n	54d2 <SSD1306_GotoXY+0x12>
    54c6:	293f      	cmp	r1, #63	; 0x3f
    54c8:	d803      	bhi.n	54d2 <SSD1306_GotoXY+0x12>
    54ca:	4b02      	ldr	r3, [pc, #8]	; (54d4 <SSD1306_GotoXY+0x14>)
    54cc:	7018      	strb	r0, [r3, #0]
    54ce:	4b02      	ldr	r3, [pc, #8]	; (54d8 <SSD1306_GotoXY+0x18>)
    54d0:	7019      	strb	r1, [r3, #0]
    54d2:	4770      	bx	lr
    54d4:	20000c29 	.word	0x20000c29
    54d8:	20000c3b 	.word	0x20000c3b

000054dc <SSD1306_TextSize>:
    54dc:	2800      	cmp	r0, #0
    54de:	d100      	bne.n	54e2 <SSD1306_TextSize+0x6>
    54e0:	3001      	adds	r0, #1
    54e2:	4b01      	ldr	r3, [pc, #4]	; (54e8 <SSD1306_TextSize+0xc>)
    54e4:	7018      	strb	r0, [r3, #0]
    54e6:	4770      	bx	lr
    54e8:	20000c38 	.word	0x20000c38

000054ec <SSD1306_Print>:
    54ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ee:	46de      	mov	lr, fp
    54f0:	4657      	mov	r7, sl
    54f2:	464e      	mov	r6, r9
    54f4:	4645      	mov	r5, r8
    54f6:	b5e0      	push	{r5, r6, r7, lr}
    54f8:	b085      	sub	sp, #20
    54fa:	2820      	cmp	r0, #32
    54fc:	d015      	beq.n	552a <SSD1306_Print+0x3e>
    54fe:	2807      	cmp	r0, #7
    5500:	d01c      	beq.n	553c <SSD1306_Print+0x50>
    5502:	2808      	cmp	r0, #8
    5504:	d026      	beq.n	5554 <SSD1306_Print+0x68>
    5506:	280d      	cmp	r0, #13
    5508:	d042      	beq.n	5590 <SSD1306_Print+0xa4>
    550a:	280a      	cmp	r0, #10
    550c:	d12b      	bne.n	5566 <SSD1306_Print+0x7a>
    550e:	4b62      	ldr	r3, [pc, #392]	; (5698 <SSD1306_Print+0x1ac>)
    5510:	7819      	ldrb	r1, [r3, #0]
    5512:	00cb      	lsls	r3, r1, #3
    5514:	4a61      	ldr	r2, [pc, #388]	; (569c <SSD1306_Print+0x1b0>)
    5516:	7812      	ldrb	r2, [r2, #0]
    5518:	189a      	adds	r2, r3, r2
    551a:	b2d2      	uxtb	r2, r2
    551c:	1a5b      	subs	r3, r3, r1
    551e:	189b      	adds	r3, r3, r2
    5520:	2b40      	cmp	r3, #64	; 0x40
    5522:	dc39      	bgt.n	5598 <SSD1306_Print+0xac>
    5524:	4b5d      	ldr	r3, [pc, #372]	; (569c <SSD1306_Print+0x1b0>)
    5526:	701a      	strb	r2, [r3, #0]
    5528:	e00d      	b.n	5546 <SSD1306_Print+0x5a>
    552a:	4b5d      	ldr	r3, [pc, #372]	; (56a0 <SSD1306_Print+0x1b4>)
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	2b00      	cmp	r3, #0
    5530:	d119      	bne.n	5566 <SSD1306_Print+0x7a>
    5532:	4b5c      	ldr	r3, [pc, #368]	; (56a4 <SSD1306_Print+0x1b8>)
    5534:	781b      	ldrb	r3, [r3, #0]
    5536:	2b00      	cmp	r3, #0
    5538:	d015      	beq.n	5566 <SSD1306_Print+0x7a>
    553a:	e004      	b.n	5546 <SSD1306_Print+0x5a>
    553c:	2300      	movs	r3, #0
    553e:	4a57      	ldr	r2, [pc, #348]	; (569c <SSD1306_Print+0x1b0>)
    5540:	7013      	strb	r3, [r2, #0]
    5542:	4a57      	ldr	r2, [pc, #348]	; (56a0 <SSD1306_Print+0x1b4>)
    5544:	7013      	strb	r3, [r2, #0]
    5546:	b005      	add	sp, #20
    5548:	bc3c      	pop	{r2, r3, r4, r5}
    554a:	4690      	mov	r8, r2
    554c:	4699      	mov	r9, r3
    554e:	46a2      	mov	sl, r4
    5550:	46ab      	mov	fp, r5
    5552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5554:	4b52      	ldr	r3, [pc, #328]	; (56a0 <SSD1306_Print+0x1b4>)
    5556:	7819      	ldrb	r1, [r3, #0]
    5558:	4b4f      	ldr	r3, [pc, #316]	; (5698 <SSD1306_Print+0x1ac>)
    555a:	781a      	ldrb	r2, [r3, #0]
    555c:	0053      	lsls	r3, r2, #1
    555e:	189b      	adds	r3, r3, r2
    5560:	005b      	lsls	r3, r3, #1
    5562:	4299      	cmp	r1, r3
    5564:	da0d      	bge.n	5582 <SSD1306_Print+0x96>
    5566:	0083      	lsls	r3, r0, #2
    5568:	1818      	adds	r0, r3, r0
    556a:	2300      	movs	r3, #0
    556c:	469b      	mov	fp, r3
    556e:	4b4e      	ldr	r3, [pc, #312]	; (56a8 <SSD1306_Print+0x1bc>)
    5570:	181b      	adds	r3, r3, r0
    5572:	9303      	str	r3, [sp, #12]
    5574:	4b48      	ldr	r3, [pc, #288]	; (5698 <SSD1306_Print+0x1ac>)
    5576:	4698      	mov	r8, r3
    5578:	4b48      	ldr	r3, [pc, #288]	; (569c <SSD1306_Print+0x1b0>)
    557a:	469a      	mov	sl, r3
    557c:	4b48      	ldr	r3, [pc, #288]	; (56a0 <SSD1306_Print+0x1b4>)
    557e:	4699      	mov	r9, r3
    5580:	e03b      	b.n	55fa <SSD1306_Print+0x10e>
    5582:	2306      	movs	r3, #6
    5584:	425b      	negs	r3, r3
    5586:	435a      	muls	r2, r3
    5588:	1889      	adds	r1, r1, r2
    558a:	4b45      	ldr	r3, [pc, #276]	; (56a0 <SSD1306_Print+0x1b4>)
    558c:	7019      	strb	r1, [r3, #0]
    558e:	e7da      	b.n	5546 <SSD1306_Print+0x5a>
    5590:	2200      	movs	r2, #0
    5592:	4b43      	ldr	r3, [pc, #268]	; (56a0 <SSD1306_Print+0x1b4>)
    5594:	701a      	strb	r2, [r3, #0]
    5596:	e7d6      	b.n	5546 <SSD1306_Print+0x5a>
    5598:	2200      	movs	r2, #0
    559a:	4b40      	ldr	r3, [pc, #256]	; (569c <SSD1306_Print+0x1b0>)
    559c:	701a      	strb	r2, [r3, #0]
    559e:	e7d2      	b.n	5546 <SSD1306_Print+0x5a>
    55a0:	4a3e      	ldr	r2, [pc, #248]	; (569c <SSD1306_Print+0x1b0>)
    55a2:	7811      	ldrb	r1, [r2, #0]
    55a4:	1861      	adds	r1, r4, r1
    55a6:	b2c9      	uxtb	r1, r1
    55a8:	4a3d      	ldr	r2, [pc, #244]	; (56a0 <SSD1306_Print+0x1b4>)
    55aa:	7810      	ldrb	r0, [r2, #0]
    55ac:	1838      	adds	r0, r7, r0
    55ae:	b2c0      	uxtb	r0, r0
    55b0:	001a      	movs	r2, r3
    55b2:	4b3e      	ldr	r3, [pc, #248]	; (56ac <SSD1306_Print+0x1c0>)
    55b4:	4798      	blx	r3
    55b6:	3401      	adds	r4, #1
    55b8:	b2e4      	uxtb	r4, r4
    55ba:	086d      	lsrs	r5, r5, #1
    55bc:	2c07      	cmp	r4, #7
    55be:	d016      	beq.n	55ee <SSD1306_Print+0x102>
    55c0:	2301      	movs	r3, #1
    55c2:	402b      	ands	r3, r5
    55c4:	4642      	mov	r2, r8
    55c6:	7812      	ldrb	r2, [r2, #0]
    55c8:	2a01      	cmp	r2, #1
    55ca:	d0e9      	beq.n	55a0 <SSD1306_Print+0xb4>
    55cc:	0021      	movs	r1, r4
    55ce:	4351      	muls	r1, r2
    55d0:	4650      	mov	r0, sl
    55d2:	7800      	ldrb	r0, [r0, #0]
    55d4:	1809      	adds	r1, r1, r0
    55d6:	b2c9      	uxtb	r1, r1
    55d8:	0038      	movs	r0, r7
    55da:	4350      	muls	r0, r2
    55dc:	464e      	mov	r6, r9
    55de:	7836      	ldrb	r6, [r6, #0]
    55e0:	1980      	adds	r0, r0, r6
    55e2:	b2c0      	uxtb	r0, r0
    55e4:	9300      	str	r3, [sp, #0]
    55e6:	0013      	movs	r3, r2
    55e8:	4e31      	ldr	r6, [pc, #196]	; (56b0 <SSD1306_Print+0x1c4>)
    55ea:	47b0      	blx	r6
    55ec:	e7e3      	b.n	55b6 <SSD1306_Print+0xca>
    55ee:	2301      	movs	r3, #1
    55f0:	469c      	mov	ip, r3
    55f2:	44e3      	add	fp, ip
    55f4:	465b      	mov	r3, fp
    55f6:	2b05      	cmp	r3, #5
    55f8:	d008      	beq.n	560c <SSD1306_Print+0x120>
    55fa:	465b      	mov	r3, fp
    55fc:	466a      	mov	r2, sp
    55fe:	72d3      	strb	r3, [r2, #11]
    5600:	7ad7      	ldrb	r7, [r2, #11]
    5602:	9b03      	ldr	r3, [sp, #12]
    5604:	465a      	mov	r2, fp
    5606:	5c9d      	ldrb	r5, [r3, r2]
    5608:	2400      	movs	r4, #0
    560a:	e7d9      	b.n	55c0 <SSD1306_Print+0xd4>
    560c:	4d22      	ldr	r5, [pc, #136]	; (5698 <SSD1306_Print+0x1ac>)
    560e:	782a      	ldrb	r2, [r5, #0]
    5610:	00d3      	lsls	r3, r2, #3
    5612:	1a9b      	subs	r3, r3, r2
    5614:	b2db      	uxtb	r3, r3
    5616:	4921      	ldr	r1, [pc, #132]	; (569c <SSD1306_Print+0x1b0>)
    5618:	7809      	ldrb	r1, [r1, #0]
    561a:	0090      	lsls	r0, r2, #2
    561c:	1810      	adds	r0, r2, r0
    561e:	4c20      	ldr	r4, [pc, #128]	; (56a0 <SSD1306_Print+0x1b4>)
    5620:	7826      	ldrb	r6, [r4, #0]
    5622:	1980      	adds	r0, r0, r6
    5624:	b2c0      	uxtb	r0, r0
    5626:	2600      	movs	r6, #0
    5628:	9600      	str	r6, [sp, #0]
    562a:	4e21      	ldr	r6, [pc, #132]	; (56b0 <SSD1306_Print+0x1c4>)
    562c:	47b0      	blx	r6
    562e:	7829      	ldrb	r1, [r5, #0]
    5630:	004b      	lsls	r3, r1, #1
    5632:	18cb      	adds	r3, r1, r3
    5634:	005b      	lsls	r3, r3, #1
    5636:	7822      	ldrb	r2, [r4, #0]
    5638:	189b      	adds	r3, r3, r2
    563a:	b2db      	uxtb	r3, r3
    563c:	004a      	lsls	r2, r1, #1
    563e:	1852      	adds	r2, r2, r1
    5640:	0052      	lsls	r2, r2, #1
    5642:	3280      	adds	r2, #128	; 0x80
    5644:	4293      	cmp	r3, r2
    5646:	dc1f      	bgt.n	5688 <SSD1306_Print+0x19c>
    5648:	4a15      	ldr	r2, [pc, #84]	; (56a0 <SSD1306_Print+0x1b4>)
    564a:	7013      	strb	r3, [r2, #0]
    564c:	4b15      	ldr	r3, [pc, #84]	; (56a4 <SSD1306_Print+0x1b8>)
    564e:	781b      	ldrb	r3, [r3, #0]
    5650:	2b00      	cmp	r3, #0
    5652:	d100      	bne.n	5656 <SSD1306_Print+0x16a>
    5654:	e777      	b.n	5546 <SSD1306_Print+0x5a>
    5656:	4b12      	ldr	r3, [pc, #72]	; (56a0 <SSD1306_Print+0x1b4>)
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	008a      	lsls	r2, r1, #2
    565c:	1852      	adds	r2, r2, r1
    565e:	189b      	adds	r3, r3, r2
    5660:	2b80      	cmp	r3, #128	; 0x80
    5662:	dc00      	bgt.n	5666 <SSD1306_Print+0x17a>
    5664:	e76f      	b.n	5546 <SSD1306_Print+0x5a>
    5666:	2200      	movs	r2, #0
    5668:	4b0d      	ldr	r3, [pc, #52]	; (56a0 <SSD1306_Print+0x1b4>)
    566a:	701a      	strb	r2, [r3, #0]
    566c:	00cb      	lsls	r3, r1, #3
    566e:	4a0b      	ldr	r2, [pc, #44]	; (569c <SSD1306_Print+0x1b0>)
    5670:	7812      	ldrb	r2, [r2, #0]
    5672:	189b      	adds	r3, r3, r2
    5674:	b2db      	uxtb	r3, r3
    5676:	00ca      	lsls	r2, r1, #3
    5678:	1a51      	subs	r1, r2, r1
    567a:	18c9      	adds	r1, r1, r3
    567c:	2940      	cmp	r1, #64	; 0x40
    567e:	dd07      	ble.n	5690 <SSD1306_Print+0x1a4>
    5680:	2200      	movs	r2, #0
    5682:	4b06      	ldr	r3, [pc, #24]	; (569c <SSD1306_Print+0x1b0>)
    5684:	701a      	strb	r2, [r3, #0]
    5686:	e75e      	b.n	5546 <SSD1306_Print+0x5a>
    5688:	2280      	movs	r2, #128	; 0x80
    568a:	4b05      	ldr	r3, [pc, #20]	; (56a0 <SSD1306_Print+0x1b4>)
    568c:	701a      	strb	r2, [r3, #0]
    568e:	e7dd      	b.n	564c <SSD1306_Print+0x160>
    5690:	4a02      	ldr	r2, [pc, #8]	; (569c <SSD1306_Print+0x1b0>)
    5692:	7013      	strb	r3, [r2, #0]
    5694:	e757      	b.n	5546 <SSD1306_Print+0x5a>
    5696:	46c0      	nop			; (mov r8, r8)
    5698:	20000c38 	.word	0x20000c38
    569c:	20000c3b 	.word	0x20000c3b
    56a0:	20000c29 	.word	0x20000c29
    56a4:	20000c39 	.word	0x20000c39
    56a8:	0000bad8 	.word	0x0000bad8
    56ac:	00005255 	.word	0x00005255
    56b0:	00005491 	.word	0x00005491

000056b4 <SSD1306_DrawText>:
    56b4:	b570      	push	{r4, r5, r6, lr}
    56b6:	0014      	movs	r4, r2
    56b8:	001d      	movs	r5, r3
    56ba:	4b07      	ldr	r3, [pc, #28]	; (56d8 <SSD1306_DrawText+0x24>)
    56bc:	4798      	blx	r3
    56be:	0028      	movs	r0, r5
    56c0:	4b06      	ldr	r3, [pc, #24]	; (56dc <SSD1306_DrawText+0x28>)
    56c2:	4798      	blx	r3
    56c4:	7820      	ldrb	r0, [r4, #0]
    56c6:	2800      	cmp	r0, #0
    56c8:	d005      	beq.n	56d6 <SSD1306_DrawText+0x22>
    56ca:	4d05      	ldr	r5, [pc, #20]	; (56e0 <SSD1306_DrawText+0x2c>)
    56cc:	3401      	adds	r4, #1
    56ce:	47a8      	blx	r5
    56d0:	7820      	ldrb	r0, [r4, #0]
    56d2:	2800      	cmp	r0, #0
    56d4:	d1fa      	bne.n	56cc <SSD1306_DrawText+0x18>
    56d6:	bd70      	pop	{r4, r5, r6, pc}
    56d8:	000054c1 	.word	0x000054c1
    56dc:	000054dd 	.word	0x000054dd
    56e0:	000054ed 	.word	0x000054ed

000056e4 <SSD1306_DrawBMP>:
    56e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56e6:	46de      	mov	lr, fp
    56e8:	4657      	mov	r7, sl
    56ea:	464e      	mov	r6, r9
    56ec:	4645      	mov	r5, r8
    56ee:	b5e0      	push	{r5, r6, r7, lr}
    56f0:	b087      	sub	sp, #28
    56f2:	4680      	mov	r8, r0
    56f4:	000e      	movs	r6, r1
    56f6:	9205      	str	r2, [sp, #20]
    56f8:	001a      	movs	r2, r3
    56fa:	9303      	str	r3, [sp, #12]
    56fc:	ab10      	add	r3, sp, #64	; 0x40
    56fe:	781b      	ldrb	r3, [r3, #0]
    5700:	3207      	adds	r2, #7
    5702:	10d2      	asrs	r2, r2, #3
    5704:	9204      	str	r2, [sp, #16]
    5706:	2b00      	cmp	r3, #0
    5708:	d03a      	beq.n	5780 <SSD1306_DrawBMP+0x9c>
    570a:	185b      	adds	r3, r3, r1
    570c:	b2db      	uxtb	r3, r3
    570e:	9302      	str	r3, [sp, #8]
    5710:	2300      	movs	r3, #0
    5712:	469b      	mov	fp, r3
    5714:	4b1e      	ldr	r3, [pc, #120]	; (5790 <SSD1306_DrawBMP+0xac>)
    5716:	469a      	mov	sl, r3
    5718:	4699      	mov	r9, r3
    571a:	e020      	b.n	575e <SSD1306_DrawBMP+0x7a>
    571c:	2200      	movs	r2, #0
    571e:	9901      	ldr	r1, [sp, #4]
    5720:	0020      	movs	r0, r4
    5722:	47d0      	blx	sl
    5724:	3401      	adds	r4, #1
    5726:	b2e4      	uxtb	r4, r4
    5728:	42a7      	cmp	r7, r4
    572a:	d00e      	beq.n	574a <SSD1306_DrawBMP+0x66>
    572c:	1ba3      	subs	r3, r4, r6
    572e:	b2db      	uxtb	r3, r3
    5730:	08da      	lsrs	r2, r3, #3
    5732:	5ca9      	ldrb	r1, [r5, r2]
    5734:	2207      	movs	r2, #7
    5736:	401a      	ands	r2, r3
    5738:	2380      	movs	r3, #128	; 0x80
    573a:	4113      	asrs	r3, r2
    573c:	420b      	tst	r3, r1
    573e:	d0ed      	beq.n	571c <SSD1306_DrawBMP+0x38>
    5740:	2201      	movs	r2, #1
    5742:	9901      	ldr	r1, [sp, #4]
    5744:	0020      	movs	r0, r4
    5746:	47c8      	blx	r9
    5748:	e7ec      	b.n	5724 <SSD1306_DrawBMP+0x40>
    574a:	46b0      	mov	r8, r6
    574c:	9e01      	ldr	r6, [sp, #4]
    574e:	2301      	movs	r3, #1
    5750:	469c      	mov	ip, r3
    5752:	44e3      	add	fp, ip
    5754:	3601      	adds	r6, #1
    5756:	b2f6      	uxtb	r6, r6
    5758:	9b02      	ldr	r3, [sp, #8]
    575a:	429e      	cmp	r6, r3
    575c:	d010      	beq.n	5780 <SSD1306_DrawBMP+0x9c>
    575e:	9b03      	ldr	r3, [sp, #12]
    5760:	2b00      	cmp	r3, #0
    5762:	d0f4      	beq.n	574e <SSD1306_DrawBMP+0x6a>
    5764:	25ff      	movs	r5, #255	; 0xff
    5766:	9a04      	ldr	r2, [sp, #16]
    5768:	4015      	ands	r5, r2
    576a:	465a      	mov	r2, fp
    576c:	4355      	muls	r5, r2
    576e:	4443      	add	r3, r8
    5770:	b2df      	uxtb	r7, r3
    5772:	4644      	mov	r4, r8
    5774:	9b05      	ldr	r3, [sp, #20]
    5776:	469c      	mov	ip, r3
    5778:	4465      	add	r5, ip
    577a:	9601      	str	r6, [sp, #4]
    577c:	4646      	mov	r6, r8
    577e:	e7d5      	b.n	572c <SSD1306_DrawBMP+0x48>
    5780:	b007      	add	sp, #28
    5782:	bc3c      	pop	{r2, r3, r4, r5}
    5784:	4690      	mov	r8, r2
    5786:	4699      	mov	r9, r3
    5788:	46a2      	mov	sl, r4
    578a:	46ab      	mov	fp, r5
    578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    578e:	46c0      	nop			; (mov r8, r8)
    5790:	00005255 	.word	0x00005255

00005794 <user_delay_ms>:
	rslt += bmi160_set_sens_conf(&sensor_1);
	return rslt;
}

void user_delay_ms(uint32_t period)
{
    5794:	b510      	push	{r4, lr}
    5796:	1e04      	subs	r4, r0, #0
    delay_ms(period);
    5798:	d10f      	bne.n	57ba <user_delay_ms+0x26>
    579a:	2000      	movs	r0, #0
    579c:	4b11      	ldr	r3, [pc, #68]	; (57e4 <user_delay_ms+0x50>)
    579e:	4798      	blx	r3
    57a0:	0002      	movs	r2, r0
    57a2:	2300      	movs	r3, #0
    57a4:	4810      	ldr	r0, [pc, #64]	; (57e8 <user_delay_ms+0x54>)
    57a6:	2100      	movs	r1, #0
    57a8:	1880      	adds	r0, r0, r2
    57aa:	4159      	adcs	r1, r3
    57ac:	4a0f      	ldr	r2, [pc, #60]	; (57ec <user_delay_ms+0x58>)
    57ae:	2300      	movs	r3, #0
    57b0:	4c0f      	ldr	r4, [pc, #60]	; (57f0 <user_delay_ms+0x5c>)
    57b2:	47a0      	blx	r4
    57b4:	4b0f      	ldr	r3, [pc, #60]	; (57f4 <user_delay_ms+0x60>)
    57b6:	4798      	blx	r3
}
    57b8:	bd10      	pop	{r4, pc}
    delay_ms(period);
    57ba:	2000      	movs	r0, #0
    57bc:	4b09      	ldr	r3, [pc, #36]	; (57e4 <user_delay_ms+0x50>)
    57be:	4798      	blx	r3
    57c0:	0002      	movs	r2, r0
    57c2:	2300      	movs	r3, #0
    57c4:	0020      	movs	r0, r4
    57c6:	2100      	movs	r1, #0
    57c8:	4c0b      	ldr	r4, [pc, #44]	; (57f8 <user_delay_ms+0x64>)
    57ca:	47a0      	blx	r4
    57cc:	4a0b      	ldr	r2, [pc, #44]	; (57fc <user_delay_ms+0x68>)
    57ce:	2300      	movs	r3, #0
    57d0:	1880      	adds	r0, r0, r2
    57d2:	4159      	adcs	r1, r3
    57d4:	4a0a      	ldr	r2, [pc, #40]	; (5800 <user_delay_ms+0x6c>)
    57d6:	2300      	movs	r3, #0
    57d8:	4c05      	ldr	r4, [pc, #20]	; (57f0 <user_delay_ms+0x5c>)
    57da:	47a0      	blx	r4
    57dc:	4b05      	ldr	r3, [pc, #20]	; (57f4 <user_delay_ms+0x60>)
    57de:	4798      	blx	r3
    57e0:	e7ea      	b.n	57b8 <user_delay_ms+0x24>
    57e2:	46c0      	nop			; (mov r8, r8)
    57e4:	00002855 	.word	0x00002855
    57e8:	006acfbf 	.word	0x006acfbf
    57ec:	006acfc0 	.word	0x006acfc0
    57f0:	00007f8d 	.word	0x00007f8d
    57f4:	20000001 	.word	0x20000001
    57f8:	00007fcd 	.word	0x00007fcd
    57fc:	00001b57 	.word	0x00001b57
    5800:	00001b58 	.word	0x00001b58

00005804 <user_spi_read>:

int8_t user_spi_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
    5804:	b5f0      	push	{r4, r5, r6, r7, lr}
    5806:	b083      	sub	sp, #12
    5808:	af00      	add	r7, sp, #0
    580a:	0004      	movs	r4, r0
    580c:	6039      	str	r1, [r7, #0]
    580e:	0016      	movs	r6, r2
    5810:	001d      	movs	r5, r3
     * | (don't care)   | (reg_data[len - 1]) | LOW         |
     * | (don't care)   | (don't care)        | HIGH        |
     * |----------------+---------------------|-------------|
     */
	
	uint8_t buffer[len];
    5812:	3307      	adds	r3, #7
    5814:	08db      	lsrs	r3, r3, #3
    5816:	00db      	lsls	r3, r3, #3
    5818:	466a      	mov	r2, sp
    581a:	1ad3      	subs	r3, r2, r3
    581c:	469d      	mov	sp, r3
    581e:	607b      	str	r3, [r7, #4]
		
	memset(buffer, 0x00, len);
    5820:	002a      	movs	r2, r5
    5822:	2100      	movs	r1, #0
    5824:	4668      	mov	r0, sp
    5826:	4b16      	ldr	r3, [pc, #88]	; (5880 <user_spi_read+0x7c>)
    5828:	4798      	blx	r3
	
	switch (dev_id)
    582a:	2c00      	cmp	r4, #0
    582c:	d01b      	beq.n	5866 <user_spi_read+0x62>
    582e:	2c01      	cmp	r4, #1
    5830:	d01f      	beq.n	5872 <user_spi_read+0x6e>
			break;
		case 1: spi_select_slave(&spi_master_instance, &slave_1, true);
			break;
	}

	rslt = spi_transceive_wait(&spi_master_instance, reg_addr, NULL);
    5832:	8839      	ldrh	r1, [r7, #0]
    5834:	4c13      	ldr	r4, [pc, #76]	; (5884 <user_spi_read+0x80>)
    5836:	2200      	movs	r2, #0
    5838:	0020      	movs	r0, r4
    583a:	4b13      	ldr	r3, [pc, #76]	; (5888 <user_spi_read+0x84>)
    583c:	4798      	blx	r3
	rslt = spi_transceive_buffer_wait(&spi_master_instance, buffer, reg_data, len);
    583e:	002b      	movs	r3, r5
    5840:	0032      	movs	r2, r6
    5842:	6879      	ldr	r1, [r7, #4]
    5844:	0020      	movs	r0, r4
    5846:	4d11      	ldr	r5, [pc, #68]	; (588c <user_spi_read+0x88>)
    5848:	47a8      	blx	r5
    584a:	0005      	movs	r5, r0
	
	spi_select_slave(&spi_master_instance, &slave_0, false);
    584c:	2200      	movs	r2, #0
    584e:	4910      	ldr	r1, [pc, #64]	; (5890 <user_spi_read+0x8c>)
    5850:	0020      	movs	r0, r4
    5852:	4e10      	ldr	r6, [pc, #64]	; (5894 <user_spi_read+0x90>)
    5854:	47b0      	blx	r6
	spi_select_slave(&spi_master_instance, &slave_1, false);
    5856:	2200      	movs	r2, #0
    5858:	490f      	ldr	r1, [pc, #60]	; (5898 <user_spi_read+0x94>)
    585a:	0020      	movs	r0, r4
    585c:	47b0      	blx	r6

    
	return rslt;
    585e:	b268      	sxtb	r0, r5
}
    5860:	46bd      	mov	sp, r7
    5862:	b003      	add	sp, #12
    5864:	bdf0      	pop	{r4, r5, r6, r7, pc}
		case 0:	spi_select_slave(&spi_master_instance, &slave_0, true);
    5866:	2201      	movs	r2, #1
    5868:	4909      	ldr	r1, [pc, #36]	; (5890 <user_spi_read+0x8c>)
    586a:	4806      	ldr	r0, [pc, #24]	; (5884 <user_spi_read+0x80>)
    586c:	4b09      	ldr	r3, [pc, #36]	; (5894 <user_spi_read+0x90>)
    586e:	4798      	blx	r3
			break;
    5870:	e7df      	b.n	5832 <user_spi_read+0x2e>
		case 1: spi_select_slave(&spi_master_instance, &slave_1, true);
    5872:	2201      	movs	r2, #1
    5874:	4908      	ldr	r1, [pc, #32]	; (5898 <user_spi_read+0x94>)
    5876:	4803      	ldr	r0, [pc, #12]	; (5884 <user_spi_read+0x80>)
    5878:	4b06      	ldr	r3, [pc, #24]	; (5894 <user_spi_read+0x90>)
    587a:	4798      	blx	r3
			break;
    587c:	e7d9      	b.n	5832 <user_spi_read+0x2e>
    587e:	46c0      	nop			; (mov r8, r8)
    5880:	0000a5a7 	.word	0x0000a5a7
    5884:	20000cf4 	.word	0x20000cf4
    5888:	00001fed 	.word	0x00001fed
    588c:	00002191 	.word	0x00002191
    5890:	20000cc4 	.word	0x20000cc4
    5894:	0000209d 	.word	0x0000209d
    5898:	20000c40 	.word	0x20000c40

0000589c <user_spi_write>:

int8_t user_spi_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
    589c:	b5f0      	push	{r4, r5, r6, r7, lr}
    589e:	b083      	sub	sp, #12
    58a0:	af00      	add	r7, sp, #0
    58a2:	0004      	movs	r4, r0
    58a4:	6039      	str	r1, [r7, #0]
    58a6:	0016      	movs	r6, r2
    58a8:	001d      	movs	r5, r3
     * | (reg_data[len - 1]) | (don't care) | LOW         |
     * | (don't care)        | (don't care) | HIGH        |
     * |---------------------+--------------|-------------|
     */

	uint8_t buffer[len];
    58aa:	3307      	adds	r3, #7
    58ac:	08db      	lsrs	r3, r3, #3
    58ae:	00db      	lsls	r3, r3, #3
    58b0:	466a      	mov	r2, sp
    58b2:	1ad3      	subs	r3, r2, r3
    58b4:	469d      	mov	sp, r3
    58b6:	607b      	str	r3, [r7, #4]
	memset(buffer, 0x00, len);
    58b8:	002a      	movs	r2, r5
    58ba:	2100      	movs	r1, #0
    58bc:	4668      	mov	r0, sp
    58be:	4b16      	ldr	r3, [pc, #88]	; (5918 <user_spi_write+0x7c>)
    58c0:	4798      	blx	r3
	
	switch (dev_id)
    58c2:	2c00      	cmp	r4, #0
    58c4:	d01b      	beq.n	58fe <user_spi_write+0x62>
    58c6:	2c01      	cmp	r4, #1
    58c8:	d01f      	beq.n	590a <user_spi_write+0x6e>
		break;
		case 1: spi_select_slave(&spi_master_instance, &slave_1, true);
		break;
	}
	
	rslt = spi_transceive_wait(&spi_master_instance, reg_addr, NULL);
    58ca:	8839      	ldrh	r1, [r7, #0]
    58cc:	4c13      	ldr	r4, [pc, #76]	; (591c <user_spi_write+0x80>)
    58ce:	2200      	movs	r2, #0
    58d0:	0020      	movs	r0, r4
    58d2:	4b13      	ldr	r3, [pc, #76]	; (5920 <user_spi_write+0x84>)
    58d4:	4798      	blx	r3
	rslt = spi_transceive_buffer_wait(&spi_master_instance, reg_data, buffer, len);
    58d6:	002b      	movs	r3, r5
    58d8:	687a      	ldr	r2, [r7, #4]
    58da:	0031      	movs	r1, r6
    58dc:	0020      	movs	r0, r4
    58de:	4d11      	ldr	r5, [pc, #68]	; (5924 <user_spi_write+0x88>)
    58e0:	47a8      	blx	r5
    58e2:	0005      	movs	r5, r0

	spi_select_slave(&spi_master_instance, &slave_0, false);
    58e4:	2200      	movs	r2, #0
    58e6:	4910      	ldr	r1, [pc, #64]	; (5928 <user_spi_write+0x8c>)
    58e8:	0020      	movs	r0, r4
    58ea:	4e10      	ldr	r6, [pc, #64]	; (592c <user_spi_write+0x90>)
    58ec:	47b0      	blx	r6
	spi_select_slave(&spi_master_instance, &slave_1, false);
    58ee:	2200      	movs	r2, #0
    58f0:	490f      	ldr	r1, [pc, #60]	; (5930 <user_spi_write+0x94>)
    58f2:	0020      	movs	r0, r4
    58f4:	47b0      	blx	r6

    return rslt;
    58f6:	b268      	sxtb	r0, r5
}
    58f8:	46bd      	mov	sp, r7
    58fa:	b003      	add	sp, #12
    58fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		case 0:	spi_select_slave(&spi_master_instance, &slave_0, true);
    58fe:	2201      	movs	r2, #1
    5900:	4909      	ldr	r1, [pc, #36]	; (5928 <user_spi_write+0x8c>)
    5902:	4806      	ldr	r0, [pc, #24]	; (591c <user_spi_write+0x80>)
    5904:	4b09      	ldr	r3, [pc, #36]	; (592c <user_spi_write+0x90>)
    5906:	4798      	blx	r3
		break;
    5908:	e7df      	b.n	58ca <user_spi_write+0x2e>
		case 1: spi_select_slave(&spi_master_instance, &slave_1, true);
    590a:	2201      	movs	r2, #1
    590c:	4908      	ldr	r1, [pc, #32]	; (5930 <user_spi_write+0x94>)
    590e:	4803      	ldr	r0, [pc, #12]	; (591c <user_spi_write+0x80>)
    5910:	4b06      	ldr	r3, [pc, #24]	; (592c <user_spi_write+0x90>)
    5912:	4798      	blx	r3
		break;
    5914:	e7d9      	b.n	58ca <user_spi_write+0x2e>
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	0000a5a7 	.word	0x0000a5a7
    591c:	20000cf4 	.word	0x20000cf4
    5920:	00001fed 	.word	0x00001fed
    5924:	00002191 	.word	0x00002191
    5928:	20000cc4 	.word	0x20000cc4
    592c:	0000209d 	.word	0x0000209d
    5930:	20000c40 	.word	0x20000c40

00005934 <my_calback_cdc_set_dtr>:
	my_flag_DTR  = set;
    5934:	1e4b      	subs	r3, r1, #1
    5936:	4199      	sbcs	r1, r3
    5938:	4b01      	ldr	r3, [pc, #4]	; (5940 <my_calback_cdc_set_dtr+0xc>)
    593a:	7019      	strb	r1, [r3, #0]
}
    593c:	4770      	bx	lr
    593e:	46c0      	nop			; (mov r8, r8)
    5940:	2000083a 	.word	0x2000083a

00005944 <my_callback_cdc_enable>:
}
    5944:	2001      	movs	r0, #1
    5946:	4770      	bx	lr

00005948 <my_callback_cdc_disable>:
}
    5948:	4770      	bx	lr
	...

0000594c <configure_adc>:
{
    594c:	b570      	push	{r4, r5, r6, lr}
	adc_get_config_defaults(&adc_conf);
    594e:	4c15      	ldr	r4, [pc, #84]	; (59a4 <configure_adc+0x58>)
    5950:	0020      	movs	r0, r4
    5952:	4b15      	ldr	r3, [pc, #84]	; (59a8 <configure_adc+0x5c>)
    5954:	4798      	blx	r3
	adc_conf.clock_source = GCLK_GENERATOR_1;
    5956:	2301      	movs	r3, #1
    5958:	7023      	strb	r3, [r4, #0]
	adc_conf.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    595a:	33ff      	adds	r3, #255	; 0xff
    595c:	8063      	strh	r3, [r4, #2]
	adc_conf.reference = ADC_REFERENCE_INTVCC1;
    595e:	3bfe      	subs	r3, #254	; 0xfe
    5960:	7063      	strb	r3, [r4, #1]
	adc_conf.resolution = ADC_RESOLUTION_16BIT;
    5962:	330e      	adds	r3, #14
    5964:	7123      	strb	r3, [r4, #4]
	adc_conf.positive_input = ADC_POSITIVE_INPUT_PIN11;
    5966:	3b05      	subs	r3, #5
    5968:	7323      	strb	r3, [r4, #12]
	adc_conf.negative_input = ADC_NEGATIVE_INPUT_GND;
    596a:	23c0      	movs	r3, #192	; 0xc0
    596c:	015b      	lsls	r3, r3, #5
    596e:	81e3      	strh	r3, [r4, #14]
	adc_init(&adc_instance, ADC, &adc_conf);
    5970:	4d0e      	ldr	r5, [pc, #56]	; (59ac <configure_adc+0x60>)
    5972:	0022      	movs	r2, r4
    5974:	490e      	ldr	r1, [pc, #56]	; (59b0 <configure_adc+0x64>)
    5976:	0028      	movs	r0, r5
    5978:	4b0e      	ldr	r3, [pc, #56]	; (59b4 <configure_adc+0x68>)
    597a:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    597c:	682a      	ldr	r2, [r5, #0]
    597e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    5980:	b25b      	sxtb	r3, r3
    5982:	2b00      	cmp	r3, #0
    5984:	dbfb      	blt.n	597e <configure_adc+0x32>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    5986:	230f      	movs	r3, #15
    5988:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    598a:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    598c:	7813      	ldrb	r3, [r2, #0]
    598e:	2102      	movs	r1, #2
    5990:	430b      	orrs	r3, r1
    5992:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    5994:	4b05      	ldr	r3, [pc, #20]	; (59ac <configure_adc+0x60>)
    5996:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    5998:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    599a:	b25b      	sxtb	r3, r3
    599c:	2b00      	cmp	r3, #0
    599e:	dbfb      	blt.n	5998 <configure_adc+0x4c>
}
    59a0:	bd70      	pop	{r4, r5, r6, pc}
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	20000c44 	.word	0x20000c44
    59a8:	0000105d 	.word	0x0000105d
    59ac:	20000d0c 	.word	0x20000d0c
    59b0:	42004000 	.word	0x42004000
    59b4:	000010a5 	.word	0x000010a5

000059b8 <configure_spi_master>:
{
    59b8:	b530      	push	{r4, r5, lr}
    59ba:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    59bc:	4c34      	ldr	r4, [pc, #208]	; (5a90 <configure_spi_master+0xd8>)
    59be:	2311      	movs	r3, #17
    59c0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    59c2:	2300      	movs	r3, #0
    59c4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    59c6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    59c8:	a901      	add	r1, sp, #4
    59ca:	2201      	movs	r2, #1
    59cc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    59ce:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    59d0:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    59d2:	2011      	movs	r0, #17
    59d4:	4b2f      	ldr	r3, [pc, #188]	; (5a94 <configure_spi_master+0xdc>)
    59d6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    59d8:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    59da:	09d1      	lsrs	r1, r2, #7
		return NULL;
    59dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    59de:	2900      	cmp	r1, #0
    59e0:	d104      	bne.n	59ec <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    59e2:	0953      	lsrs	r3, r2, #5
    59e4:	01db      	lsls	r3, r3, #7
    59e6:	492c      	ldr	r1, [pc, #176]	; (5a98 <configure_spi_master+0xe0>)
    59e8:	468c      	mov	ip, r1
    59ea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    59ec:	211f      	movs	r1, #31
    59ee:	4011      	ands	r1, r2
    59f0:	2201      	movs	r2, #1
    59f2:	0010      	movs	r0, r2
    59f4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    59f6:	6198      	str	r0, [r3, #24]
	slave->ss_pin          = config->ss_pin;
    59f8:	4c28      	ldr	r4, [pc, #160]	; (5a9c <configure_spi_master+0xe4>)
    59fa:	2314      	movs	r3, #20
    59fc:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    59fe:	2300      	movs	r3, #0
    5a00:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    5a02:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5a04:	a901      	add	r1, sp, #4
    5a06:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5a08:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5a0a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5a0c:	2014      	movs	r0, #20
    5a0e:	4b21      	ldr	r3, [pc, #132]	; (5a94 <configure_spi_master+0xdc>)
    5a10:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5a12:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5a14:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5a16:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a18:	2900      	cmp	r1, #0
    5a1a:	d104      	bne.n	5a26 <configure_spi_master+0x6e>
		return &(ports[port_index]->Group[group_index]);
    5a1c:	0953      	lsrs	r3, r2, #5
    5a1e:	01db      	lsls	r3, r3, #7
    5a20:	491d      	ldr	r1, [pc, #116]	; (5a98 <configure_spi_master+0xe0>)
    5a22:	468c      	mov	ip, r1
    5a24:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a26:	211f      	movs	r1, #31
    5a28:	4011      	ands	r1, r2
    5a2a:	2201      	movs	r2, #1
    5a2c:	0010      	movs	r0, r2
    5a2e:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    5a30:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    5a32:	ac02      	add	r4, sp, #8
    5a34:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5a36:	2300      	movs	r3, #0
    5a38:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5a3a:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5a3c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    5a3e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    5a40:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5a42:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    5a44:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5a46:	3223      	adds	r2, #35	; 0x23
    5a48:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5a4a:	3a18      	subs	r2, #24
    5a4c:	2100      	movs	r1, #0
    5a4e:	a808      	add	r0, sp, #32
    5a50:	4b13      	ldr	r3, [pc, #76]	; (5aa0 <configure_spi_master+0xe8>)
    5a52:	4798      	blx	r3
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    5a54:	2380      	movs	r3, #128	; 0x80
    5a56:	025b      	lsls	r3, r3, #9
    5a58:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    5a5a:	4b12      	ldr	r3, [pc, #72]	; (5aa4 <configure_spi_master+0xec>)
    5a5c:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    5a5e:	2301      	movs	r3, #1
    5a60:	425b      	negs	r3, r3
    5a62:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    5a64:	4b10      	ldr	r3, [pc, #64]	; (5aa8 <configure_spi_master+0xf0>)
    5a66:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    5a68:	4b10      	ldr	r3, [pc, #64]	; (5aac <configure_spi_master+0xf4>)
    5a6a:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = 4000000;
    5a6c:	4b10      	ldr	r3, [pc, #64]	; (5ab0 <configure_spi_master+0xf8>)
    5a6e:	61a3      	str	r3, [r4, #24]
	spi_init(&spi_master_instance, SENSOR_SERCOM, &config_spi_master);
    5a70:	4d10      	ldr	r5, [pc, #64]	; (5ab4 <configure_spi_master+0xfc>)
    5a72:	0022      	movs	r2, r4
    5a74:	4910      	ldr	r1, [pc, #64]	; (5ab8 <configure_spi_master+0x100>)
    5a76:	0028      	movs	r0, r5
    5a78:	4b10      	ldr	r3, [pc, #64]	; (5abc <configure_spi_master+0x104>)
    5a7a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a7c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    5a7e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5a80:	2b00      	cmp	r3, #0
    5a82:	d1fc      	bne.n	5a7e <configure_spi_master+0xc6>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5a84:	6813      	ldr	r3, [r2, #0]
    5a86:	2102      	movs	r1, #2
    5a88:	430b      	orrs	r3, r1
    5a8a:	6013      	str	r3, [r2, #0]
}
    5a8c:	b011      	add	sp, #68	; 0x44
    5a8e:	bd30      	pop	{r4, r5, pc}
    5a90:	20000cc4 	.word	0x20000cc4
    5a94:	0000156d 	.word	0x0000156d
    5a98:	41004400 	.word	0x41004400
    5a9c:	20000c40 	.word	0x20000c40
    5aa0:	0000a5a7 	.word	0x0000a5a7
    5aa4:	00100002 	.word	0x00100002
    5aa8:	00120002 	.word	0x00120002
    5aac:	00130002 	.word	0x00130002
    5ab0:	003d0900 	.word	0x003d0900
    5ab4:	20000cf4 	.word	0x20000cf4
    5ab8:	42000c00 	.word	0x42000c00
    5abc:	00001cb9 	.word	0x00001cb9

00005ac0 <initSensor>:
{
    5ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ac2:	46c6      	mov	lr, r8
    5ac4:	b500      	push	{lr}
	sensor.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
    5ac6:	4813      	ldr	r0, [pc, #76]	; (5b14 <initSensor+0x54>)
    5ac8:	230c      	movs	r3, #12
    5aca:	469c      	mov	ip, r3
    5acc:	7143      	strb	r3, [r0, #5]
	sensor.accel_cfg.range = BMI160_ACCEL_RANGE_4G; //BMI160_ACCEL_RANGE_2G;
    5ace:	2705      	movs	r7, #5
    5ad0:	7187      	strb	r7, [r0, #6]
	sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
    5ad2:	2302      	movs	r3, #2
    5ad4:	71c3      	strb	r3, [r0, #7]
	sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
    5ad6:	2611      	movs	r6, #17
    5ad8:	7106      	strb	r6, [r0, #4]
	sensor.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
    5ada:	250d      	movs	r5, #13
    5adc:	7345      	strb	r5, [r0, #13]
	sensor.gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
    5ade:	2100      	movs	r1, #0
    5ae0:	7381      	strb	r1, [r0, #14]
	sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
    5ae2:	73c3      	strb	r3, [r0, #15]
	sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
    5ae4:	2215      	movs	r2, #21
    5ae6:	4690      	mov	r8, r2
    5ae8:	7302      	strb	r2, [r0, #12]
	sensor_1.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
    5aea:	4c0b      	ldr	r4, [pc, #44]	; (5b18 <initSensor+0x58>)
    5aec:	4662      	mov	r2, ip
    5aee:	7162      	strb	r2, [r4, #5]
	sensor_1.accel_cfg.range = BMI160_ACCEL_RANGE_4G; //BMI160_ACCEL_RANGE_2G;
    5af0:	71a7      	strb	r7, [r4, #6]
	sensor_1.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
    5af2:	71e3      	strb	r3, [r4, #7]
	sensor_1.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
    5af4:	7126      	strb	r6, [r4, #4]
	sensor_1.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
    5af6:	7365      	strb	r5, [r4, #13]
	sensor_1.gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
    5af8:	73a1      	strb	r1, [r4, #14]
	sensor_1.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
    5afa:	73e3      	strb	r3, [r4, #15]
	sensor_1.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
    5afc:	4643      	mov	r3, r8
    5afe:	7323      	strb	r3, [r4, #12]
	rslt = bmi160_set_sens_conf(&sensor);
    5b00:	4d06      	ldr	r5, [pc, #24]	; (5b1c <initSensor+0x5c>)
    5b02:	47a8      	blx	r5
    5b04:	0006      	movs	r6, r0
	rslt += bmi160_set_sens_conf(&sensor_1);
    5b06:	0020      	movs	r0, r4
    5b08:	47a8      	blx	r5
    5b0a:	1980      	adds	r0, r0, r6
	return rslt;
    5b0c:	b240      	sxtb	r0, r0
}
    5b0e:	bc04      	pop	{r2}
    5b10:	4690      	mov	r8, r2
    5b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b14:	20000cc8 	.word	0x20000cc8
    5b18:	20000c80 	.word	0x20000c80
    5b1c:	00004c89 	.word	0x00004c89

00005b20 <RP_calculate>:

void RP_calculate( void );
void RP_calculate( void )
{
    5b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b22:	46de      	mov	lr, fp
    5b24:	4657      	mov	r7, sl
    5b26:	464e      	mov	r6, r9
    5b28:	4645      	mov	r5, r8
    5b2a:	b5e0      	push	{r5, r6, r7, lr}
    5b2c:	b089      	sub	sp, #36	; 0x24
	float x_Buff = accel.x;
    5b2e:	4c44      	ldr	r4, [pc, #272]	; (5c40 <RP_calculate+0x120>)
    5b30:	8820      	ldrh	r0, [r4, #0]
    5b32:	b200      	sxth	r0, r0
    5b34:	4b43      	ldr	r3, [pc, #268]	; (5c44 <RP_calculate+0x124>)
    5b36:	469b      	mov	fp, r3
    5b38:	4798      	blx	r3
    5b3a:	1c07      	adds	r7, r0, #0
	float y_Buff = accel.y;
    5b3c:	8860      	ldrh	r0, [r4, #2]
    5b3e:	b200      	sxth	r0, r0
    5b40:	47d8      	blx	fp
    5b42:	1c05      	adds	r5, r0, #0
	float z_Buff = accel.z;
    5b44:	88a0      	ldrh	r0, [r4, #4]
    5b46:	b200      	sxth	r0, r0
    5b48:	47d8      	blx	fp
	roll  = atan2(x_Buff , sqrt(y_Buff * y_Buff + z_Buff * z_Buff)) * 57.3;
    5b4a:	4a3f      	ldr	r2, [pc, #252]	; (5c48 <RP_calculate+0x128>)
    5b4c:	4692      	mov	sl, r2
    5b4e:	1c01      	adds	r1, r0, #0
    5b50:	9004      	str	r0, [sp, #16]
    5b52:	4790      	blx	r2
    5b54:	1c04      	adds	r4, r0, #0
    5b56:	1c29      	adds	r1, r5, #0
    5b58:	9506      	str	r5, [sp, #24]
    5b5a:	1c28      	adds	r0, r5, #0
    5b5c:	47d0      	blx	sl
    5b5e:	4e3b      	ldr	r6, [pc, #236]	; (5c4c <RP_calculate+0x12c>)
    5b60:	9407      	str	r4, [sp, #28]
    5b62:	1c21      	adds	r1, r4, #0
    5b64:	47b0      	blx	r6
    5b66:	4c3a      	ldr	r4, [pc, #232]	; (5c50 <RP_calculate+0x130>)
    5b68:	47a0      	blx	r4
    5b6a:	4a3a      	ldr	r2, [pc, #232]	; (5c54 <RP_calculate+0x134>)
    5b6c:	4690      	mov	r8, r2
    5b6e:	4790      	blx	r2
    5b70:	9000      	str	r0, [sp, #0]
    5b72:	9101      	str	r1, [sp, #4]
    5b74:	9702      	str	r7, [sp, #8]
    5b76:	1c38      	adds	r0, r7, #0
    5b78:	47a0      	blx	r4
    5b7a:	9a00      	ldr	r2, [sp, #0]
    5b7c:	9b01      	ldr	r3, [sp, #4]
    5b7e:	4d36      	ldr	r5, [pc, #216]	; (5c58 <RP_calculate+0x138>)
    5b80:	46a9      	mov	r9, r5
    5b82:	47a8      	blx	r5
    5b84:	4f35      	ldr	r7, [pc, #212]	; (5c5c <RP_calculate+0x13c>)
    5b86:	4a36      	ldr	r2, [pc, #216]	; (5c60 <RP_calculate+0x140>)
    5b88:	4b36      	ldr	r3, [pc, #216]	; (5c64 <RP_calculate+0x144>)
    5b8a:	47b8      	blx	r7
    5b8c:	4d36      	ldr	r5, [pc, #216]	; (5c68 <RP_calculate+0x148>)
    5b8e:	47a8      	blx	r5
    5b90:	4b36      	ldr	r3, [pc, #216]	; (5c6c <RP_calculate+0x14c>)
    5b92:	6018      	str	r0, [r3, #0]
	pitch = atan2(y_Buff , sqrt(x_Buff * z_Buff + z_Buff * z_Buff)) * 57.3;
    5b94:	9904      	ldr	r1, [sp, #16]
    5b96:	9802      	ldr	r0, [sp, #8]
    5b98:	47d0      	blx	sl
    5b9a:	9907      	ldr	r1, [sp, #28]
    5b9c:	47b0      	blx	r6
    5b9e:	47a0      	blx	r4
    5ba0:	47c0      	blx	r8
    5ba2:	9000      	str	r0, [sp, #0]
    5ba4:	9101      	str	r1, [sp, #4]
    5ba6:	9806      	ldr	r0, [sp, #24]
    5ba8:	47a0      	blx	r4
    5baa:	9a00      	ldr	r2, [sp, #0]
    5bac:	9b01      	ldr	r3, [sp, #4]
    5bae:	47c8      	blx	r9
    5bb0:	4a2b      	ldr	r2, [pc, #172]	; (5c60 <RP_calculate+0x140>)
    5bb2:	4b2c      	ldr	r3, [pc, #176]	; (5c64 <RP_calculate+0x144>)
    5bb4:	47b8      	blx	r7
    5bb6:	47a8      	blx	r5
    5bb8:	4b2d      	ldr	r3, [pc, #180]	; (5c70 <RP_calculate+0x150>)
    5bba:	6018      	str	r0, [r3, #0]
	
	x_Buff = accel_1.x;
    5bbc:	4b2d      	ldr	r3, [pc, #180]	; (5c74 <RP_calculate+0x154>)
    5bbe:	8818      	ldrh	r0, [r3, #0]
    5bc0:	b200      	sxth	r0, r0
    5bc2:	47d8      	blx	fp
    5bc4:	9002      	str	r0, [sp, #8]
	y_Buff = accel_1.y;
    5bc6:	4a2b      	ldr	r2, [pc, #172]	; (5c74 <RP_calculate+0x154>)
    5bc8:	8850      	ldrh	r0, [r2, #2]
    5bca:	b200      	sxth	r0, r0
    5bcc:	47d8      	blx	fp
    5bce:	9000      	str	r0, [sp, #0]
	z_Buff = accel_1.z;
    5bd0:	4928      	ldr	r1, [pc, #160]	; (5c74 <RP_calculate+0x154>)
    5bd2:	8888      	ldrh	r0, [r1, #4]
    5bd4:	b200      	sxth	r0, r0
    5bd6:	47d8      	blx	fp
	roll_1  = atan2(x_Buff , sqrt(y_Buff * y_Buff + z_Buff * z_Buff)) * 57.3;
    5bd8:	1c01      	adds	r1, r0, #0
    5bda:	47d0      	blx	sl
    5bdc:	9006      	str	r0, [sp, #24]
    5bde:	9a00      	ldr	r2, [sp, #0]
    5be0:	1c11      	adds	r1, r2, #0
    5be2:	1c10      	adds	r0, r2, #0
    5be4:	47d0      	blx	sl
    5be6:	9906      	ldr	r1, [sp, #24]
    5be8:	47b0      	blx	r6
    5bea:	47a0      	blx	r4
    5bec:	47c0      	blx	r8
    5bee:	9004      	str	r0, [sp, #16]
    5bf0:	9105      	str	r1, [sp, #20]
    5bf2:	9802      	ldr	r0, [sp, #8]
    5bf4:	47a0      	blx	r4
    5bf6:	9a04      	ldr	r2, [sp, #16]
    5bf8:	9b05      	ldr	r3, [sp, #20]
    5bfa:	47c8      	blx	r9
    5bfc:	4a18      	ldr	r2, [pc, #96]	; (5c60 <RP_calculate+0x140>)
    5bfe:	4b19      	ldr	r3, [pc, #100]	; (5c64 <RP_calculate+0x144>)
    5c00:	47b8      	blx	r7
    5c02:	47a8      	blx	r5
    5c04:	4b1c      	ldr	r3, [pc, #112]	; (5c78 <RP_calculate+0x158>)
    5c06:	6018      	str	r0, [r3, #0]
	pitch_1 = atan2(y_Buff , sqrt(x_Buff * x_Buff + z_Buff * z_Buff)) * 57.3;
    5c08:	9b02      	ldr	r3, [sp, #8]
    5c0a:	1c19      	adds	r1, r3, #0
    5c0c:	1c18      	adds	r0, r3, #0
    5c0e:	47d0      	blx	sl
    5c10:	9906      	ldr	r1, [sp, #24]
    5c12:	47b0      	blx	r6
    5c14:	47a0      	blx	r4
    5c16:	47c0      	blx	r8
    5c18:	9002      	str	r0, [sp, #8]
    5c1a:	9103      	str	r1, [sp, #12]
    5c1c:	9800      	ldr	r0, [sp, #0]
    5c1e:	47a0      	blx	r4
    5c20:	9a02      	ldr	r2, [sp, #8]
    5c22:	9b03      	ldr	r3, [sp, #12]
    5c24:	47c8      	blx	r9
    5c26:	4a0e      	ldr	r2, [pc, #56]	; (5c60 <RP_calculate+0x140>)
    5c28:	4b0e      	ldr	r3, [pc, #56]	; (5c64 <RP_calculate+0x144>)
    5c2a:	47b8      	blx	r7
    5c2c:	47a8      	blx	r5
    5c2e:	4b13      	ldr	r3, [pc, #76]	; (5c7c <RP_calculate+0x15c>)
    5c30:	6018      	str	r0, [r3, #0]
}
    5c32:	b009      	add	sp, #36	; 0x24
    5c34:	bc3c      	pop	{r2, r3, r4, r5}
    5c36:	4690      	mov	r8, r2
    5c38:	4699      	mov	r9, r3
    5c3a:	46a2      	mov	sl, r4
    5c3c:	46ab      	mov	fp, r5
    5c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c40:	20000c74 	.word	0x20000c74
    5c44:	00008781 	.word	0x00008781
    5c48:	00008501 	.word	0x00008501
    5c4c:	000081dd 	.word	0x000081dd
    5c50:	0000a371 	.word	0x0000a371
    5c54:	000067bd 	.word	0x000067bd
    5c58:	0000645d 	.word	0x0000645d
    5c5c:	000096a9 	.word	0x000096a9
    5c60:	66666666 	.word	0x66666666
    5c64:	404ca666 	.word	0x404ca666
    5c68:	0000a415 	.word	0x0000a415
    5c6c:	20000844 	.word	0x20000844
    5c70:	2000083c 	.word	0x2000083c
    5c74:	20000d00 	.word	0x20000d00
    5c78:	20000848 	.word	0x20000848
    5c7c:	20000840 	.word	0x20000840

00005c80 <drawAkku>:
		}
	}
}

void drawAkku(uint8_t stat)
{
    5c80:	b510      	push	{r4, lr}
    5c82:	b082      	sub	sp, #8
	switch(stat)
    5c84:	2801      	cmp	r0, #1
    5c86:	d00f      	beq.n	5ca8 <drawAkku+0x28>
    5c88:	2800      	cmp	r0, #0
    5c8a:	d005      	beq.n	5c98 <drawAkku+0x18>
    5c8c:	2802      	cmp	r0, #2
    5c8e:	d013      	beq.n	5cb8 <drawAkku+0x38>
    5c90:	2803      	cmp	r0, #3
    5c92:	d019      	beq.n	5cc8 <drawAkku+0x48>
		case 3: SSD1306_DrawBMP(100, 0, bat3_icon16x16, 16, 16);
		break;
		default:
		break;
	}
}
    5c94:	b002      	add	sp, #8
    5c96:	bd10      	pop	{r4, pc}
		case 0: SSD1306_DrawBMP(100, 0, bat0_icon16x16, 16, 16);
    5c98:	2310      	movs	r3, #16
    5c9a:	9300      	str	r3, [sp, #0]
    5c9c:	4a0e      	ldr	r2, [pc, #56]	; (5cd8 <drawAkku+0x58>)
    5c9e:	2100      	movs	r1, #0
    5ca0:	2064      	movs	r0, #100	; 0x64
    5ca2:	4c0e      	ldr	r4, [pc, #56]	; (5cdc <drawAkku+0x5c>)
    5ca4:	47a0      	blx	r4
		break;
    5ca6:	e7f5      	b.n	5c94 <drawAkku+0x14>
		case 1: SSD1306_DrawBMP(100, 0, bat1_icon16x16, 16, 16);
    5ca8:	2310      	movs	r3, #16
    5caa:	9300      	str	r3, [sp, #0]
    5cac:	4a0c      	ldr	r2, [pc, #48]	; (5ce0 <drawAkku+0x60>)
    5cae:	2100      	movs	r1, #0
    5cb0:	2064      	movs	r0, #100	; 0x64
    5cb2:	4c0a      	ldr	r4, [pc, #40]	; (5cdc <drawAkku+0x5c>)
    5cb4:	47a0      	blx	r4
		break;
    5cb6:	e7ed      	b.n	5c94 <drawAkku+0x14>
		case 2: SSD1306_DrawBMP(100, 0, bat2_icon16x16, 16, 16);
    5cb8:	2310      	movs	r3, #16
    5cba:	9300      	str	r3, [sp, #0]
    5cbc:	4a09      	ldr	r2, [pc, #36]	; (5ce4 <drawAkku+0x64>)
    5cbe:	2100      	movs	r1, #0
    5cc0:	2064      	movs	r0, #100	; 0x64
    5cc2:	4c06      	ldr	r4, [pc, #24]	; (5cdc <drawAkku+0x5c>)
    5cc4:	47a0      	blx	r4
		break;
    5cc6:	e7e5      	b.n	5c94 <drawAkku+0x14>
		case 3: SSD1306_DrawBMP(100, 0, bat3_icon16x16, 16, 16);
    5cc8:	2310      	movs	r3, #16
    5cca:	9300      	str	r3, [sp, #0]
    5ccc:	4a06      	ldr	r2, [pc, #24]	; (5ce8 <drawAkku+0x68>)
    5cce:	2100      	movs	r1, #0
    5cd0:	2064      	movs	r0, #100	; 0x64
    5cd2:	4c02      	ldr	r4, [pc, #8]	; (5cdc <drawAkku+0x5c>)
    5cd4:	47a0      	blx	r4
}
    5cd6:	e7dd      	b.n	5c94 <drawAkku+0x14>
    5cd8:	200004f8 	.word	0x200004f8
    5cdc:	000056e5 	.word	0x000056e5
    5ce0:	20000518 	.word	0x20000518
    5ce4:	20000538 	.word	0x20000538
    5ce8:	0000bfd8 	.word	0x0000bfd8

00005cec <drawTemeprature>:

void drawTemeprature(int32_t t)
{
    5cec:	b510      	push	{r4, lr}
    5cee:	b084      	sub	sp, #16
    5cf0:	0002      	movs	r2, r0
	char str_adc[7];
	sprintf(str_adc, "%d%c", t, 167);
    5cf2:	23a7      	movs	r3, #167	; 0xa7
    5cf4:	490d      	ldr	r1, [pc, #52]	; (5d2c <drawTemeprature+0x40>)
    5cf6:	a802      	add	r0, sp, #8
    5cf8:	4c0d      	ldr	r4, [pc, #52]	; (5d30 <drawTemeprature+0x44>)
    5cfa:	47a0      	blx	r4
	SSD1306_DrawText(17, 0, str_adc, 2);
    5cfc:	2302      	movs	r3, #2
    5cfe:	aa02      	add	r2, sp, #8
    5d00:	2100      	movs	r1, #0
    5d02:	2011      	movs	r0, #17
    5d04:	4c0b      	ldr	r4, [pc, #44]	; (5d34 <drawTemeprature+0x48>)
    5d06:	47a0      	blx	r4
	
	SSD1306_DrawBMP(0, 0, temperature_icon16x16, 16, 16);
    5d08:	2310      	movs	r3, #16
    5d0a:	9300      	str	r3, [sp, #0]
    5d0c:	4a0a      	ldr	r2, [pc, #40]	; (5d38 <drawTemeprature+0x4c>)
    5d0e:	2100      	movs	r1, #0
    5d10:	2000      	movs	r0, #0
    5d12:	4c0a      	ldr	r4, [pc, #40]	; (5d3c <drawTemeprature+0x50>)
    5d14:	47a0      	blx	r4
	SSD1306_DrawLine(63, 0, 63, 17, TRUE);
    5d16:	2301      	movs	r3, #1
    5d18:	9300      	str	r3, [sp, #0]
    5d1a:	3310      	adds	r3, #16
    5d1c:	223f      	movs	r2, #63	; 0x3f
    5d1e:	2100      	movs	r1, #0
    5d20:	203f      	movs	r0, #63	; 0x3f
    5d22:	4c07      	ldr	r4, [pc, #28]	; (5d40 <drawTemeprature+0x54>)
    5d24:	47a0      	blx	r4
}
    5d26:	b004      	add	sp, #16
    5d28:	bd10      	pop	{r4, pc}
    5d2a:	46c0      	nop			; (mov r8, r8)
    5d2c:	0000c018 	.word	0x0000c018
    5d30:	0000a759 	.word	0x0000a759
    5d34:	000056b5 	.word	0x000056b5
    5d38:	20000558 	.word	0x20000558
    5d3c:	000056e5 	.word	0x000056e5
    5d40:	0000537d 	.word	0x0000537d

00005d44 <drawAverageFaktor>:

void drawAverageFaktor(uint8_t f)
{
    5d44:	b510      	push	{r4, lr}
    5d46:	b082      	sub	sp, #8
    5d48:	0003      	movs	r3, r0
		char str[7];
		sprintf(str, "%c:%03d", 0xED, f);
    5d4a:	22ed      	movs	r2, #237	; 0xed
    5d4c:	4905      	ldr	r1, [pc, #20]	; (5d64 <drawAverageFaktor+0x20>)
    5d4e:	4668      	mov	r0, sp
    5d50:	4c05      	ldr	r4, [pc, #20]	; (5d68 <drawAverageFaktor+0x24>)
    5d52:	47a0      	blx	r4
		SSD1306_DrawText(65, 4, str, 1);
    5d54:	2301      	movs	r3, #1
    5d56:	466a      	mov	r2, sp
    5d58:	2104      	movs	r1, #4
    5d5a:	2041      	movs	r0, #65	; 0x41
    5d5c:	4c03      	ldr	r4, [pc, #12]	; (5d6c <drawAverageFaktor+0x28>)
    5d5e:	47a0      	blx	r4
}
    5d60:	b002      	add	sp, #8
    5d62:	bd10      	pop	{r4, pc}
    5d64:	0000c004 	.word	0x0000c004
    5d68:	0000a759 	.word	0x0000a759
    5d6c:	000056b5 	.word	0x000056b5

00005d70 <drawAngle>:

void drawAngle(int32_t angle)
{
    5d70:	b530      	push	{r4, r5, lr}
    5d72:	b087      	sub	sp, #28
    5d74:	0004      	movs	r4, r0
	SSD1306_DrawLine(4, 17, 124, 17, TRUE);
    5d76:	2301      	movs	r3, #1
    5d78:	9300      	str	r3, [sp, #0]
    5d7a:	3310      	adds	r3, #16
    5d7c:	227c      	movs	r2, #124	; 0x7c
    5d7e:	2111      	movs	r1, #17
    5d80:	2004      	movs	r0, #4
    5d82:	4d0d      	ldr	r5, [pc, #52]	; (5db8 <drawAngle+0x48>)
    5d84:	47a8      	blx	r5
	
	int vorkomma = (int)angle/100;
    5d86:	2164      	movs	r1, #100	; 0x64
    5d88:	0020      	movs	r0, r4
    5d8a:	4b0c      	ldr	r3, [pc, #48]	; (5dbc <drawAngle+0x4c>)
    5d8c:	4798      	blx	r3
    5d8e:	0002      	movs	r2, r0
	int nachkomma = abs((int)(angle - vorkomma*100));
    5d90:	2364      	movs	r3, #100	; 0x64
    5d92:	425b      	negs	r3, r3
    5d94:	4343      	muls	r3, r0
    5d96:	191b      	adds	r3, r3, r4
    5d98:	17d9      	asrs	r1, r3, #31
    5d9a:	185b      	adds	r3, r3, r1
    5d9c:	404b      	eors	r3, r1
	
	char str[10];
	//Gradzeichen ASCII = 167
	sprintf(str, "%03d.%02d", vorkomma, nachkomma);
    5d9e:	4908      	ldr	r1, [pc, #32]	; (5dc0 <drawAngle+0x50>)
    5da0:	a803      	add	r0, sp, #12
    5da2:	4c08      	ldr	r4, [pc, #32]	; (5dc4 <drawAngle+0x54>)
    5da4:	47a0      	blx	r4
	SSD1306_DrawText(5, 25, str, 3);
    5da6:	2303      	movs	r3, #3
    5da8:	aa03      	add	r2, sp, #12
    5daa:	2119      	movs	r1, #25
    5dac:	2005      	movs	r0, #5
    5dae:	4c06      	ldr	r4, [pc, #24]	; (5dc8 <drawAngle+0x58>)
    5db0:	47a0      	blx	r4
}
    5db2:	b007      	add	sp, #28
    5db4:	bd30      	pop	{r4, r5, pc}
    5db6:	46c0      	nop			; (mov r8, r8)
    5db8:	0000537d 	.word	0x0000537d
    5dbc:	00007cbd 	.word	0x00007cbd
    5dc0:	0000bff8 	.word	0x0000bff8
    5dc4:	0000a759 	.word	0x0000a759
    5dc8:	000056b5 	.word	0x000056b5

00005dcc <drawMinMaxWinkel>:
	SSD1306_DrawLine(5, 10, 15, 10, TRUE);
	SSD1306_DrawLine(5, 10, 15, 5, TRUE);
}

void drawMinMaxWinkel(int32_t minValue, int32_t maxValue)
{	
    5dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dce:	46d6      	mov	lr, sl
    5dd0:	b500      	push	{lr}
    5dd2:	b088      	sub	sp, #32
    5dd4:	0007      	movs	r7, r0
    5dd6:	9103      	str	r1, [sp, #12]
	SSD1306_DrawLine(4, 52, 124, 52, TRUE);
    5dd8:	2501      	movs	r5, #1
    5dda:	9500      	str	r5, [sp, #0]
    5ddc:	2334      	movs	r3, #52	; 0x34
    5dde:	227c      	movs	r2, #124	; 0x7c
    5de0:	2134      	movs	r1, #52	; 0x34
    5de2:	2004      	movs	r0, #4
    5de4:	4c21      	ldr	r4, [pc, #132]	; (5e6c <drawMinMaxWinkel+0xa0>)
    5de6:	47a0      	blx	r4
	SSD1306_DrawLine(63, 52, 63, 64, TRUE);
    5de8:	9500      	str	r5, [sp, #0]
    5dea:	2340      	movs	r3, #64	; 0x40
    5dec:	223f      	movs	r2, #63	; 0x3f
    5dee:	2134      	movs	r1, #52	; 0x34
    5df0:	203f      	movs	r0, #63	; 0x3f
    5df2:	47a0      	blx	r4
	
	char text[12];
	memset(text, 0, 12);
    5df4:	220c      	movs	r2, #12
    5df6:	2100      	movs	r1, #0
    5df8:	a805      	add	r0, sp, #20
    5dfa:	4b1d      	ldr	r3, [pc, #116]	; (5e70 <drawMinMaxWinkel+0xa4>)
    5dfc:	469a      	mov	sl, r3
    5dfe:	4798      	blx	r3
	int vorkomma = (int)minValue/100;
    5e00:	4e1c      	ldr	r6, [pc, #112]	; (5e74 <drawMinMaxWinkel+0xa8>)
    5e02:	2164      	movs	r1, #100	; 0x64
    5e04:	0038      	movs	r0, r7
    5e06:	47b0      	blx	r6
    5e08:	0003      	movs	r3, r0
	int nachkomma = abs((int)(minValue - vorkomma*100));
    5e0a:	2464      	movs	r4, #100	; 0x64
    5e0c:	4264      	negs	r4, r4
    5e0e:	0022      	movs	r2, r4
    5e10:	4342      	muls	r2, r0
    5e12:	19d7      	adds	r7, r2, r7
    5e14:	17f8      	asrs	r0, r7, #31
    5e16:	183f      	adds	r7, r7, r0
    5e18:	4047      	eors	r7, r0

	sprintf(text, "%c %d.%02d", 31, vorkomma, nachkomma);
    5e1a:	9700      	str	r7, [sp, #0]
    5e1c:	221f      	movs	r2, #31
    5e1e:	4916      	ldr	r1, [pc, #88]	; (5e78 <drawMinMaxWinkel+0xac>)
    5e20:	a805      	add	r0, sp, #20
    5e22:	4d16      	ldr	r5, [pc, #88]	; (5e7c <drawMinMaxWinkel+0xb0>)
    5e24:	47a8      	blx	r5
	SSD1306_DrawText(5, 56, text, 1);
    5e26:	2301      	movs	r3, #1
    5e28:	aa05      	add	r2, sp, #20
    5e2a:	2138      	movs	r1, #56	; 0x38
    5e2c:	2005      	movs	r0, #5
    5e2e:	4f14      	ldr	r7, [pc, #80]	; (5e80 <drawMinMaxWinkel+0xb4>)
    5e30:	47b8      	blx	r7
	
	memset(text, 0, 12);
    5e32:	220c      	movs	r2, #12
    5e34:	2100      	movs	r1, #0
    5e36:	a805      	add	r0, sp, #20
    5e38:	47d0      	blx	sl
	vorkomma = (int)maxValue/100;
    5e3a:	2164      	movs	r1, #100	; 0x64
    5e3c:	9803      	ldr	r0, [sp, #12]
    5e3e:	47b0      	blx	r6
    5e40:	0003      	movs	r3, r0
	nachkomma = abs((int)(maxValue - vorkomma*100));
    5e42:	4344      	muls	r4, r0
    5e44:	9a03      	ldr	r2, [sp, #12]
    5e46:	4694      	mov	ip, r2
    5e48:	4464      	add	r4, ip
    5e4a:	17e2      	asrs	r2, r4, #31
    5e4c:	18a4      	adds	r4, r4, r2
    5e4e:	4054      	eors	r4, r2

	sprintf(text, "%c %d.%02d", 30, vorkomma, nachkomma);
    5e50:	9400      	str	r4, [sp, #0]
    5e52:	221e      	movs	r2, #30
    5e54:	4908      	ldr	r1, [pc, #32]	; (5e78 <drawMinMaxWinkel+0xac>)
    5e56:	a805      	add	r0, sp, #20
    5e58:	47a8      	blx	r5
	SSD1306_DrawText(70, 56, text, 1);
    5e5a:	2301      	movs	r3, #1
    5e5c:	aa05      	add	r2, sp, #20
    5e5e:	2138      	movs	r1, #56	; 0x38
    5e60:	2046      	movs	r0, #70	; 0x46
    5e62:	47b8      	blx	r7
    5e64:	b008      	add	sp, #32
    5e66:	bc04      	pop	{r2}
    5e68:	4692      	mov	sl, r2
    5e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e6c:	0000537d 	.word	0x0000537d
    5e70:	0000a5a7 	.word	0x0000a5a7
    5e74:	00007cbd 	.word	0x00007cbd
    5e78:	0000c00c 	.word	0x0000c00c
    5e7c:	0000a759 	.word	0x0000a759
    5e80:	000056b5 	.word	0x000056b5

00005e84 <main>:
{
    5e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e86:	46de      	mov	lr, fp
    5e88:	4657      	mov	r7, sl
    5e8a:	464e      	mov	r6, r9
    5e8c:	4645      	mov	r5, r8
    5e8e:	b5e0      	push	{r5, r6, r7, lr}
    5e90:	b09f      	sub	sp, #124	; 0x7c
	system_init();
    5e92:	4bd2      	ldr	r3, [pc, #840]	; (61dc <main+0x358>)
    5e94:	4798      	blx	r3
	cpu_irq_enable();
    5e96:	2601      	movs	r6, #1
    5e98:	4bd1      	ldr	r3, [pc, #836]	; (61e0 <main+0x35c>)
    5e9a:	701e      	strb	r6, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    5e9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5ea0:	b662      	cpsie	i
	configure_adc();
    5ea2:	4bd0      	ldr	r3, [pc, #832]	; (61e4 <main+0x360>)
    5ea4:	4798      	blx	r3
	configure_spi_master();
    5ea6:	4bd0      	ldr	r3, [pc, #832]	; (61e8 <main+0x364>)
    5ea8:	4798      	blx	r3
	udc_start();
    5eaa:	4bd0      	ldr	r3, [pc, #832]	; (61ec <main+0x368>)
    5eac:	4798      	blx	r3
	stdio_usb_init();
    5eae:	4bd0      	ldr	r3, [pc, #832]	; (61f0 <main+0x36c>)
    5eb0:	4798      	blx	r3
	stdio_usb_enable();
    5eb2:	4bd0      	ldr	r3, [pc, #832]	; (61f4 <main+0x370>)
    5eb4:	4798      	blx	r3
	sensor.id = 0;
    5eb6:	4dd0      	ldr	r5, [pc, #832]	; (61f8 <main+0x374>)
    5eb8:	2700      	movs	r7, #0
    5eba:	706f      	strb	r7, [r5, #1]
	sensor.interface = BMI160_SPI_INTF;
    5ebc:	70ae      	strb	r6, [r5, #2]
	sensor.read = user_spi_read;
    5ebe:	49cf      	ldr	r1, [pc, #828]	; (61fc <main+0x378>)
    5ec0:	61e9      	str	r1, [r5, #28]
	sensor.write = user_spi_write;
    5ec2:	4acf      	ldr	r2, [pc, #828]	; (6200 <main+0x37c>)
    5ec4:	622a      	str	r2, [r5, #32]
	sensor.delay_ms = user_delay_ms;
    5ec6:	4bcf      	ldr	r3, [pc, #828]	; (6204 <main+0x380>)
    5ec8:	626b      	str	r3, [r5, #36]	; 0x24
	sensor_1.id = 1;
    5eca:	4ccf      	ldr	r4, [pc, #828]	; (6208 <main+0x384>)
    5ecc:	7066      	strb	r6, [r4, #1]
	sensor_1.interface = BMI160_SPI_INTF;
    5ece:	70a6      	strb	r6, [r4, #2]
	sensor_1.read = user_spi_read;
    5ed0:	61e1      	str	r1, [r4, #28]
	sensor_1.write = user_spi_write;
    5ed2:	6222      	str	r2, [r4, #32]
	sensor_1.delay_ms = user_delay_ms;
    5ed4:	6263      	str	r3, [r4, #36]	; 0x24
	rslt = bmi160_init(&sensor);
    5ed6:	0028      	movs	r0, r5
    5ed8:	4ecc      	ldr	r6, [pc, #816]	; (620c <main+0x388>)
    5eda:	47b0      	blx	r6
	rslt = bmi160_init(&sensor_1);
    5edc:	0020      	movs	r0, r4
    5ede:	47b0      	blx	r6
	rslt = initSensor();
    5ee0:	4bcb      	ldr	r3, [pc, #812]	; (6210 <main+0x38c>)
    5ee2:	4798      	blx	r3
	uint8_t chip_id = 0;
    5ee4:	2617      	movs	r6, #23
    5ee6:	ab18      	add	r3, sp, #96	; 0x60
    5ee8:	469c      	mov	ip, r3
    5eea:	4466      	add	r6, ip
    5eec:	7037      	strb	r7, [r6, #0]
	rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &chip_id, 1, &sensor);
    5eee:	002b      	movs	r3, r5
    5ef0:	2201      	movs	r2, #1
    5ef2:	0031      	movs	r1, r6
    5ef4:	2000      	movs	r0, #0
    5ef6:	4dc7      	ldr	r5, [pc, #796]	; (6214 <main+0x390>)
    5ef8:	47a8      	blx	r5
	rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &chip_id, 1, &sensor_1);
    5efa:	0023      	movs	r3, r4
    5efc:	2201      	movs	r2, #1
    5efe:	0031      	movs	r1, r6
    5f00:	2000      	movs	r0, #0
    5f02:	47a8      	blx	r5
	SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS);
    5f04:	213c      	movs	r1, #60	; 0x3c
    5f06:	2002      	movs	r0, #2
    5f08:	4bc3      	ldr	r3, [pc, #780]	; (6218 <main+0x394>)
    5f0a:	4798      	blx	r3
	SSD1306_ClearDisplay();
    5f0c:	4bc3      	ldr	r3, [pc, #780]	; (621c <main+0x398>)
    5f0e:	4798      	blx	r3
	uint8_t avgFaktor = pow (2, avgPotenz);
    5f10:	2380      	movs	r3, #128	; 0x80
    5f12:	930f      	str	r3, [sp, #60]	; 0x3c
	uint8_t avgPotenz = 7;
    5f14:	3b79      	subs	r3, #121	; 0x79
    5f16:	9318      	str	r3, [sp, #96]	; 0x60
	int32_t maxAngle = -360;
    5f18:	4bc1      	ldr	r3, [pc, #772]	; (6220 <main+0x39c>)
    5f1a:	930c      	str	r3, [sp, #48]	; 0x30
	int32_t minAngle = 360;
    5f1c:	23b4      	movs	r3, #180	; 0xb4
    5f1e:	005b      	lsls	r3, r3, #1
    5f20:	9309      	str	r3, [sp, #36]	; 0x24
	int32_t zeroAngle_1 = 0;
    5f22:	2300      	movs	r3, #0
    5f24:	930e      	str	r3, [sp, #56]	; 0x38
	int32_t zeroAngle = 0;
    5f26:	9313      	str	r3, [sp, #76]	; 0x4c
	uint8_t stat = 0;
    5f28:	9319      	str	r3, [sp, #100]	; 0x64
		status_flags |= ADC_STATUS_WINDOW;
    5f2a:	2602      	movs	r6, #2
    5f2c:	e124      	b.n	6178 <main+0x2f4>
		while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);	
    5f2e:	4208      	tst	r0, r1
    5f30:	d10c      	bne.n	5f4c <main+0xc8>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5f32:	7e13      	ldrb	r3, [r2, #24]
    5f34:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5f36:	0001      	movs	r1, r0
    5f38:	4019      	ands	r1, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    5f3a:	2404      	movs	r4, #4
    5f3c:	421c      	tst	r4, r3
    5f3e:	d000      	beq.n	5f42 <main+0xbe>
		status_flags |= ADC_STATUS_WINDOW;
    5f40:	4331      	orrs	r1, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5f42:	421e      	tst	r6, r3
    5f44:	d0f3      	beq.n	5f2e <main+0xaa>
		status_flags |= ADC_STATUS_OVERRUN;
    5f46:	2304      	movs	r3, #4
    5f48:	4319      	orrs	r1, r3
    5f4a:	e7f0      	b.n	5f2e <main+0xaa>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5f4c:	7e13      	ldrb	r3, [r2, #24]
    5f4e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5f50:	2101      	movs	r1, #1
    5f52:	4019      	ands	r1, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    5f54:	2004      	movs	r0, #4
    5f56:	4218      	tst	r0, r3
    5f58:	d000      	beq.n	5f5c <main+0xd8>
		status_flags |= ADC_STATUS_WINDOW;
    5f5a:	4331      	orrs	r1, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5f5c:	421e      	tst	r6, r3
    5f5e:	d001      	beq.n	5f64 <main+0xe0>
		status_flags |= ADC_STATUS_OVERRUN;
    5f60:	2304      	movs	r3, #4
    5f62:	4319      	orrs	r1, r3
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    5f64:	07cb      	lsls	r3, r1, #31
    5f66:	d421      	bmi.n	5fac <main+0x128>
		adc_val = adc_val / 6.62;
    5f68:	4cae      	ldr	r4, [pc, #696]	; (6224 <main+0x3a0>)
    5f6a:	8820      	ldrh	r0, [r4, #0]
    5f6c:	b280      	uxth	r0, r0
    5f6e:	4bae      	ldr	r3, [pc, #696]	; (6228 <main+0x3a4>)
    5f70:	4798      	blx	r3
    5f72:	4aae      	ldr	r2, [pc, #696]	; (622c <main+0x3a8>)
    5f74:	4bae      	ldr	r3, [pc, #696]	; (6230 <main+0x3ac>)
    5f76:	4daf      	ldr	r5, [pc, #700]	; (6234 <main+0x3b0>)
    5f78:	47a8      	blx	r5
    5f7a:	4baf      	ldr	r3, [pc, #700]	; (6238 <main+0x3b4>)
    5f7c:	4798      	blx	r3
    5f7e:	b280      	uxth	r0, r0
    5f80:	8020      	strh	r0, [r4, #0]
		if(adc_val	> 1000)
    5f82:	8823      	ldrh	r3, [r4, #0]
    5f84:	b29b      	uxth	r3, r3
    5f86:	22fa      	movs	r2, #250	; 0xfa
    5f88:	0092      	lsls	r2, r2, #2
    5f8a:	4293      	cmp	r3, r2
    5f8c:	d92a      	bls.n	5fe4 <main+0x160>
			if(!chgStatus)
    5f8e:	4643      	mov	r3, r8
    5f90:	029b      	lsls	r3, r3, #10
    5f92:	d424      	bmi.n	5fde <main+0x15a>
				drawAkku(stat++);
    5f94:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5f96:	1c5c      	adds	r4, r3, #1
    5f98:	b2e4      	uxtb	r4, r4
    5f9a:	0018      	movs	r0, r3
    5f9c:	4ba7      	ldr	r3, [pc, #668]	; (623c <main+0x3b8>)
    5f9e:	4798      	blx	r3
    5fa0:	9419      	str	r4, [sp, #100]	; 0x64
				if(stat > 3) stat = 0;
    5fa2:	2c03      	cmp	r4, #3
    5fa4:	d91e      	bls.n	5fe4 <main+0x160>
    5fa6:	2300      	movs	r3, #0
    5fa8:	9319      	str	r3, [sp, #100]	; 0x64
    5faa:	e01b      	b.n	5fe4 <main+0x160>
    5fac:	7e53      	ldrb	r3, [r2, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    5fae:	b25b      	sxtb	r3, r3
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	dbfb      	blt.n	5fac <main+0x128>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    5fb4:	8b51      	ldrh	r1, [r2, #26]
    5fb6:	4b9b      	ldr	r3, [pc, #620]	; (6224 <main+0x3a0>)
    5fb8:	8019      	strh	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    5fba:	2301      	movs	r3, #1
    5fbc:	7613      	strb	r3, [r2, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5fbe:	7e11      	ldrb	r1, [r2, #24]
    5fc0:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5fc2:	400b      	ands	r3, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    5fc4:	2004      	movs	r0, #4
    5fc6:	4208      	tst	r0, r1
    5fc8:	d000      	beq.n	5fcc <main+0x148>
		status_flags |= ADC_STATUS_WINDOW;
    5fca:	4333      	orrs	r3, r6
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5fcc:	420e      	tst	r6, r1
    5fce:	d001      	beq.n	5fd4 <main+0x150>
		status_flags |= ADC_STATUS_OVERRUN;
    5fd0:	2104      	movs	r1, #4
    5fd2:	430b      	orrs	r3, r1

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    5fd4:	2104      	movs	r1, #4
    5fd6:	4219      	tst	r1, r3
    5fd8:	d0c6      	beq.n	5f68 <main+0xe4>
	adc_module->INTFLAG.reg = int_flags;
    5fda:	7616      	strb	r6, [r2, #24]
    5fdc:	e7c4      	b.n	5f68 <main+0xe4>
				drawAkku(3);
    5fde:	2003      	movs	r0, #3
    5fe0:	4b96      	ldr	r3, [pc, #600]	; (623c <main+0x3b8>)
    5fe2:	4798      	blx	r3
		for (int n = 0; n < avgFaktor; n++)
    5fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5fe6:	4693      	mov	fp, r2
    5fe8:	2a00      	cmp	r2, #0
    5fea:	dc00      	bgt.n	5fee <main+0x16a>
    5fec:	e0e4      	b.n	61b8 <main+0x334>
    5fee:	2400      	movs	r4, #0
    5ff0:	2300      	movs	r3, #0
    5ff2:	4699      	mov	r9, r3
    5ff4:	469a      	mov	sl, r3
			rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel,   &gyro,   &sensor);
    5ff6:	4b80      	ldr	r3, [pc, #512]	; (61f8 <main+0x374>)
    5ff8:	4a91      	ldr	r2, [pc, #580]	; (6240 <main+0x3bc>)
    5ffa:	4992      	ldr	r1, [pc, #584]	; (6244 <main+0x3c0>)
    5ffc:	2003      	movs	r0, #3
    5ffe:	4d92      	ldr	r5, [pc, #584]	; (6248 <main+0x3c4>)
    6000:	47a8      	blx	r5
			rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel_1, &gyro_1, &sensor_1);
    6002:	4b81      	ldr	r3, [pc, #516]	; (6208 <main+0x384>)
    6004:	4a91      	ldr	r2, [pc, #580]	; (624c <main+0x3c8>)
    6006:	4992      	ldr	r1, [pc, #584]	; (6250 <main+0x3cc>)
    6008:	2003      	movs	r0, #3
    600a:	47a8      	blx	r5
			RP_calculate();
    600c:	4b91      	ldr	r3, [pc, #580]	; (6254 <main+0x3d0>)
    600e:	4798      	blx	r3
			avrgRoll += (int32_t)(roll*100);
    6010:	4b91      	ldr	r3, [pc, #580]	; (6258 <main+0x3d4>)
    6012:	6818      	ldr	r0, [r3, #0]
    6014:	4b91      	ldr	r3, [pc, #580]	; (625c <main+0x3d8>)
    6016:	4698      	mov	r8, r3
    6018:	4991      	ldr	r1, [pc, #580]	; (6260 <main+0x3dc>)
    601a:	4798      	blx	r3
    601c:	4d91      	ldr	r5, [pc, #580]	; (6264 <main+0x3e0>)
    601e:	47a8      	blx	r5
    6020:	4482      	add	sl, r0
			avrgRoll_1 += (int32_t)(roll_1*100);
    6022:	4b91      	ldr	r3, [pc, #580]	; (6268 <main+0x3e4>)
    6024:	6818      	ldr	r0, [r3, #0]
    6026:	498e      	ldr	r1, [pc, #568]	; (6260 <main+0x3dc>)
    6028:	47c0      	blx	r8
    602a:	47a8      	blx	r5
    602c:	4481      	add	r9, r0
		for (int n = 0; n < avgFaktor; n++)
    602e:	3401      	adds	r4, #1
    6030:	455c      	cmp	r4, fp
    6032:	dbe0      	blt.n	5ff6 <main+0x172>
		currentRawAngle = avrgRoll / avgFaktor;
    6034:	4d8d      	ldr	r5, [pc, #564]	; (626c <main+0x3e8>)
    6036:	4659      	mov	r1, fp
    6038:	4650      	mov	r0, sl
    603a:	47a8      	blx	r5
    603c:	0004      	movs	r4, r0
		currentRawAngle_1 = avrgRoll_1 / avgFaktor;
    603e:	4659      	mov	r1, fp
    6040:	4648      	mov	r0, r9
    6042:	47a8      	blx	r5
    6044:	9012      	str	r0, [sp, #72]	; 0x48
		currentAngle = (zeroAngle - currentRawAngle);
    6046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6048:	1b1b      	subs	r3, r3, r4
    604a:	4698      	mov	r8, r3
		int16_t temperature = 0;
    604c:	2512      	movs	r5, #18
    604e:	ab18      	add	r3, sp, #96	; 0x60
    6050:	469c      	mov	ip, r3
    6052:	4465      	add	r5, ip
    6054:	2300      	movs	r3, #0
    6056:	802b      	strh	r3, [r5, #0]
		rslt = bmi160_get_regs(BMI160_TEMPERATURE_ADDR, &temperature, 2, &sensor);
    6058:	4b67      	ldr	r3, [pc, #412]	; (61f8 <main+0x374>)
    605a:	0032      	movs	r2, r6
    605c:	0029      	movs	r1, r5
    605e:	2020      	movs	r0, #32
    6060:	4f6c      	ldr	r7, [pc, #432]	; (6214 <main+0x390>)
    6062:	47b8      	blx	r7
		if (temperature > 0)
    6064:	2300      	movs	r3, #0
    6066:	5ee8      	ldrsh	r0, [r5, r3]
    6068:	2800      	cmp	r0, #0
    606a:	dc00      	bgt.n	606e <main+0x1ea>
    606c:	e0a8      	b.n	61c0 <main+0x33c>
			temperature = (temperature * 0.001953) + 23;
    606e:	4b6e      	ldr	r3, [pc, #440]	; (6228 <main+0x3a4>)
    6070:	4798      	blx	r3
    6072:	4a7f      	ldr	r2, [pc, #508]	; (6270 <main+0x3ec>)
    6074:	4b7f      	ldr	r3, [pc, #508]	; (6274 <main+0x3f0>)
    6076:	4d80      	ldr	r5, [pc, #512]	; (6278 <main+0x3f4>)
    6078:	47a8      	blx	r5
    607a:	2200      	movs	r2, #0
    607c:	4b7f      	ldr	r3, [pc, #508]	; (627c <main+0x3f8>)
    607e:	4d80      	ldr	r5, [pc, #512]	; (6280 <main+0x3fc>)
    6080:	47a8      	blx	r5
    6082:	4b80      	ldr	r3, [pc, #512]	; (6284 <main+0x400>)
    6084:	4798      	blx	r3
    6086:	2312      	movs	r3, #18
    6088:	aa18      	add	r2, sp, #96	; 0x60
    608a:	4694      	mov	ip, r2
    608c:	4463      	add	r3, ip
    608e:	8018      	strh	r0, [r3, #0]
		int16_t temperature_1 = 0;
    6090:	ad1d      	add	r5, sp, #116	; 0x74
    6092:	2300      	movs	r3, #0
    6094:	802b      	strh	r3, [r5, #0]
		rslt = bmi160_get_regs(BMI160_TEMPERATURE_ADDR, &temperature_1, 2, &sensor_1);
    6096:	4b5c      	ldr	r3, [pc, #368]	; (6208 <main+0x384>)
    6098:	0032      	movs	r2, r6
    609a:	0029      	movs	r1, r5
    609c:	2020      	movs	r0, #32
    609e:	4f5d      	ldr	r7, [pc, #372]	; (6214 <main+0x390>)
    60a0:	47b8      	blx	r7
		if (temperature_1 > 0)
    60a2:	2300      	movs	r3, #0
    60a4:	5ee8      	ldrsh	r0, [r5, r3]
    60a6:	2800      	cmp	r0, #0
    60a8:	dc00      	bgt.n	60ac <main+0x228>
    60aa:	e091      	b.n	61d0 <main+0x34c>
			temperature_1 = (temperature_1 * 0.001953) + 23;
    60ac:	4b5e      	ldr	r3, [pc, #376]	; (6228 <main+0x3a4>)
    60ae:	4798      	blx	r3
    60b0:	4a6f      	ldr	r2, [pc, #444]	; (6270 <main+0x3ec>)
    60b2:	4b70      	ldr	r3, [pc, #448]	; (6274 <main+0x3f0>)
    60b4:	4d70      	ldr	r5, [pc, #448]	; (6278 <main+0x3f4>)
    60b6:	47a8      	blx	r5
    60b8:	2200      	movs	r2, #0
    60ba:	4b70      	ldr	r3, [pc, #448]	; (627c <main+0x3f8>)
    60bc:	4d70      	ldr	r5, [pc, #448]	; (6280 <main+0x3fc>)
    60be:	47a8      	blx	r5
    60c0:	4b70      	ldr	r3, [pc, #448]	; (6284 <main+0x400>)
    60c2:	4798      	blx	r3
    60c4:	ab1d      	add	r3, sp, #116	; 0x74
    60c6:	8018      	strh	r0, [r3, #0]
    60c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    60ca:	930d      	str	r3, [sp, #52]	; 0x34
		if(!sw_1) // ZERO BUTTON
    60cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    60ce:	2b00      	cmp	r3, #0
    60d0:	d104      	bne.n	60dc <main+0x258>
			maxAngle = currentRawAngle;
    60d2:	940c      	str	r4, [sp, #48]	; 0x30
			minAngle = currentRawAngle;
    60d4:	9409      	str	r4, [sp, #36]	; 0x24
			zeroAngle_1 = currentRawAngle_1;
    60d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    60d8:	930d      	str	r3, [sp, #52]	; 0x34
			zeroAngle = currentRawAngle;
    60da:	9413      	str	r4, [sp, #76]	; 0x4c
		if (!sw_0) // CALIB BUTTON
    60dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    60de:	2b00      	cmp	r3, #0
    60e0:	d100      	bne.n	60e4 <main+0x260>
    60e2:	e0eb      	b.n	62bc <main+0x438>
		drawAverageFaktor(avgFaktor);
    60e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    60e6:	4b68      	ldr	r3, [pc, #416]	; (6288 <main+0x404>)
    60e8:	4798      	blx	r3
		int tmp = max(temperature, temperature_1);
    60ea:	2312      	movs	r3, #18
    60ec:	aa18      	add	r2, sp, #96	; 0x60
    60ee:	4694      	mov	ip, r2
    60f0:	4463      	add	r3, ip
    60f2:	881a      	ldrh	r2, [r3, #0]
    60f4:	ab1d      	add	r3, sp, #116	; 0x74
    60f6:	881b      	ldrh	r3, [r3, #0]
    60f8:	1c1c      	adds	r4, r3, #0
    60fa:	b21b      	sxth	r3, r3
    60fc:	b211      	sxth	r1, r2
    60fe:	428b      	cmp	r3, r1
    6100:	da00      	bge.n	6104 <main+0x280>
    6102:	1c14      	adds	r4, r2, #0
    6104:	b224      	sxth	r4, r4
    6106:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6108:	4543      	cmp	r3, r8
    610a:	dd01      	ble.n	6110 <main+0x28c>
    610c:	4643      	mov	r3, r8
    610e:	9309      	str	r3, [sp, #36]	; 0x24
    6110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6112:	4543      	cmp	r3, r8
    6114:	da01      	bge.n	611a <main+0x296>
    6116:	4643      	mov	r3, r8
    6118:	930c      	str	r3, [sp, #48]	; 0x30
		drawTemeprature(tmp);
    611a:	0020      	movs	r0, r4
    611c:	4b5b      	ldr	r3, [pc, #364]	; (628c <main+0x408>)
    611e:	4798      	blx	r3
		drawAngle(currentAngle);
    6120:	4640      	mov	r0, r8
    6122:	4b5b      	ldr	r3, [pc, #364]	; (6290 <main+0x40c>)
    6124:	4798      	blx	r3
		drawMinMaxWinkel( minAngle, maxAngle );
    6126:	990c      	ldr	r1, [sp, #48]	; 0x30
    6128:	9809      	ldr	r0, [sp, #36]	; 0x24
    612a:	4b5a      	ldr	r3, [pc, #360]	; (6294 <main+0x410>)
    612c:	4798      	blx	r3
		SSD1306_Display();      // Show initial text
    612e:	4b5a      	ldr	r3, [pc, #360]	; (6298 <main+0x414>)
    6130:	4798      	blx	r3
		delay_ms(10);
    6132:	2000      	movs	r0, #0
    6134:	4b59      	ldr	r3, [pc, #356]	; (629c <main+0x418>)
    6136:	4798      	blx	r3
    6138:	900a      	str	r0, [sp, #40]	; 0x28
    613a:	2300      	movs	r3, #0
    613c:	930b      	str	r3, [sp, #44]	; 0x2c
    613e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6142:	0f91      	lsrs	r1, r2, #30
    6144:	9107      	str	r1, [sp, #28]
    6146:	0091      	lsls	r1, r2, #2
    6148:	9106      	str	r1, [sp, #24]
    614a:	9806      	ldr	r0, [sp, #24]
    614c:	9907      	ldr	r1, [sp, #28]
    614e:	1880      	adds	r0, r0, r2
    6150:	4159      	adcs	r1, r3
    6152:	1800      	adds	r0, r0, r0
    6154:	4149      	adcs	r1, r1
    6156:	4a52      	ldr	r2, [pc, #328]	; (62a0 <main+0x41c>)
    6158:	2300      	movs	r3, #0
    615a:	1880      	adds	r0, r0, r2
    615c:	4159      	adcs	r1, r3
    615e:	4a51      	ldr	r2, [pc, #324]	; (62a4 <main+0x420>)
    6160:	2300      	movs	r3, #0
    6162:	4d51      	ldr	r5, [pc, #324]	; (62a8 <main+0x424>)
    6164:	47a8      	blx	r5
    6166:	4b51      	ldr	r3, [pc, #324]	; (62ac <main+0x428>)
    6168:	4798      	blx	r3
		if(my_flag_DTR)	
    616a:	4b51      	ldr	r3, [pc, #324]	; (62b0 <main+0x42c>)
    616c:	781b      	ldrb	r3, [r3, #0]
    616e:	2b00      	cmp	r3, #0
    6170:	d000      	beq.n	6174 <main+0x2f0>
    6172:	e0fc      	b.n	636e <main+0x4ea>
	{
    6174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6176:	930e      	str	r3, [sp, #56]	; 0x38
		SSD1306_ClearDisplay();
    6178:	4b28      	ldr	r3, [pc, #160]	; (621c <main+0x398>)
    617a:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    617c:	4b4d      	ldr	r3, [pc, #308]	; (62b4 <main+0x430>)
    617e:	2280      	movs	r2, #128	; 0x80
    6180:	0052      	lsls	r2, r2, #1
    6182:	61da      	str	r2, [r3, #28]
	return (port_base->IN.reg & pin_mask);
    6184:	6a1a      	ldr	r2, [r3, #32]
    6186:	2180      	movs	r1, #128	; 0x80
    6188:	4011      	ands	r1, r2
    618a:	9111      	str	r1, [sp, #68]	; 0x44
    618c:	6a1a      	ldr	r2, [r3, #32]
    618e:	2104      	movs	r1, #4
    6190:	400a      	ands	r2, r1
    6192:	9210      	str	r2, [sp, #64]	; 0x40
    6194:	6a1b      	ldr	r3, [r3, #32]
    6196:	4698      	mov	r8, r3
	Adc *const adc_module = module_inst->hw;
    6198:	4b47      	ldr	r3, [pc, #284]	; (62b8 <main+0x434>)
    619a:	681a      	ldr	r2, [r3, #0]
    619c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    619e:	b25b      	sxtb	r3, r3
    61a0:	2b00      	cmp	r3, #0
    61a2:	dbfb      	blt.n	619c <main+0x318>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    61a4:	7b13      	ldrb	r3, [r2, #12]
    61a6:	2102      	movs	r1, #2
    61a8:	430b      	orrs	r3, r1
    61aa:	7313      	strb	r3, [r2, #12]
    61ac:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    61ae:	b25b      	sxtb	r3, r3
    61b0:	2b00      	cmp	r3, #0
    61b2:	dbfb      	blt.n	61ac <main+0x328>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    61b4:	2001      	movs	r0, #1
    61b6:	e6bc      	b.n	5f32 <main+0xae>
		for (int n = 0; n < avgFaktor; n++)
    61b8:	2300      	movs	r3, #0
    61ba:	4699      	mov	r9, r3
    61bc:	469a      	mov	sl, r3
    61be:	e739      	b.n	6034 <main+0x1b0>
			temperature = -100;
    61c0:	2264      	movs	r2, #100	; 0x64
    61c2:	4252      	negs	r2, r2
    61c4:	2312      	movs	r3, #18
    61c6:	a918      	add	r1, sp, #96	; 0x60
    61c8:	468c      	mov	ip, r1
    61ca:	4463      	add	r3, ip
    61cc:	801a      	strh	r2, [r3, #0]
    61ce:	e75f      	b.n	6090 <main+0x20c>
			temperature_1 = -100;
    61d0:	2264      	movs	r2, #100	; 0x64
    61d2:	4252      	negs	r2, r2
    61d4:	ab1d      	add	r3, sp, #116	; 0x74
    61d6:	801a      	strh	r2, [r3, #0]
    61d8:	e776      	b.n	60c8 <main+0x244>
    61da:	46c0      	nop			; (mov r8, r8)
    61dc:	00002a99 	.word	0x00002a99
    61e0:	200000f4 	.word	0x200000f4
    61e4:	0000594d 	.word	0x0000594d
    61e8:	000059b9 	.word	0x000059b9
    61ec:	00000b11 	.word	0x00000b11
    61f0:	00000169 	.word	0x00000169
    61f4:	00000159 	.word	0x00000159
    61f8:	20000cc8 	.word	0x20000cc8
    61fc:	00005805 	.word	0x00005805
    6200:	0000589d 	.word	0x0000589d
    6204:	00005795 	.word	0x00005795
    6208:	20000c80 	.word	0x20000c80
    620c:	00004aa9 	.word	0x00004aa9
    6210:	00005ac1 	.word	0x00005ac1
    6214:	00004901 	.word	0x00004901
    6218:	00005135 	.word	0x00005135
    621c:	00005365 	.word	0x00005365
    6220:	fffffe98 	.word	0xfffffe98
    6224:	20000c3c 	.word	0x20000c3c
    6228:	0000a27d 	.word	0x0000a27d
    622c:	47ae147b 	.word	0x47ae147b
    6230:	401a7ae1 	.word	0x401a7ae1
    6234:	00008e41 	.word	0x00008e41
    6238:	00008021 	.word	0x00008021
    623c:	00005c81 	.word	0x00005c81
    6240:	20000cb8 	.word	0x20000cb8
    6244:	20000c74 	.word	0x20000c74
    6248:	00004e3d 	.word	0x00004e3d
    624c:	20000cac 	.word	0x20000cac
    6250:	20000d00 	.word	0x20000d00
    6254:	00005b21 	.word	0x00005b21
    6258:	20000844 	.word	0x20000844
    625c:	00008501 	.word	0x00008501
    6260:	42c80000 	.word	0x42c80000
    6264:	00008741 	.word	0x00008741
    6268:	20000848 	.word	0x20000848
    626c:	00007cbd 	.word	0x00007cbd
    6270:	c842fa51 	.word	0xc842fa51
    6274:	3f5fff79 	.word	0x3f5fff79
    6278:	000096a9 	.word	0x000096a9
    627c:	40370000 	.word	0x40370000
    6280:	00008821 	.word	0x00008821
    6284:	0000a215 	.word	0x0000a215
    6288:	00005d45 	.word	0x00005d45
    628c:	00005ced 	.word	0x00005ced
    6290:	00005d71 	.word	0x00005d71
    6294:	00005dcd 	.word	0x00005dcd
    6298:	00005299 	.word	0x00005299
    629c:	00002855 	.word	0x00002855
    62a0:	00001b57 	.word	0x00001b57
    62a4:	00001b58 	.word	0x00001b58
    62a8:	00007f8d 	.word	0x00007f8d
    62ac:	20000001 	.word	0x20000001
    62b0:	2000083a 	.word	0x2000083a
    62b4:	41004400 	.word	0x41004400
    62b8:	20000d0c 	.word	0x20000d0c
			delay_ms(10);
    62bc:	2000      	movs	r0, #0
    62be:	4b52      	ldr	r3, [pc, #328]	; (6408 <main+0x584>)
    62c0:	4798      	blx	r3
    62c2:	9016      	str	r0, [sp, #88]	; 0x58
    62c4:	2300      	movs	r3, #0
    62c6:	9317      	str	r3, [sp, #92]	; 0x5c
    62c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    62ca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    62cc:	0f9a      	lsrs	r2, r3, #30
    62ce:	9215      	str	r2, [sp, #84]	; 0x54
    62d0:	009a      	lsls	r2, r3, #2
    62d2:	9214      	str	r2, [sp, #80]	; 0x50
    62d4:	9814      	ldr	r0, [sp, #80]	; 0x50
    62d6:	9915      	ldr	r1, [sp, #84]	; 0x54
    62d8:	18c0      	adds	r0, r0, r3
    62da:	4161      	adcs	r1, r4
    62dc:	1800      	adds	r0, r0, r0
    62de:	4149      	adcs	r1, r1
    62e0:	4b4a      	ldr	r3, [pc, #296]	; (640c <main+0x588>)
    62e2:	2400      	movs	r4, #0
    62e4:	18c0      	adds	r0, r0, r3
    62e6:	4161      	adcs	r1, r4
    62e8:	4a49      	ldr	r2, [pc, #292]	; (6410 <main+0x58c>)
    62ea:	2300      	movs	r3, #0
    62ec:	4c49      	ldr	r4, [pc, #292]	; (6414 <main+0x590>)
    62ee:	47a0      	blx	r4
    62f0:	4b49      	ldr	r3, [pc, #292]	; (6418 <main+0x594>)
    62f2:	4798      	blx	r3
			if (avgPotenz >= 7)
    62f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    62f6:	2b06      	cmp	r3, #6
    62f8:	d836      	bhi.n	6368 <main+0x4e4>
				avgPotenz++;
    62fa:	3301      	adds	r3, #1
    62fc:	b2db      	uxtb	r3, r3
    62fe:	9318      	str	r3, [sp, #96]	; 0x60
			avgFaktor = pow (2, avgPotenz);
    6300:	9818      	ldr	r0, [sp, #96]	; 0x60
    6302:	4b46      	ldr	r3, [pc, #280]	; (641c <main+0x598>)
    6304:	4798      	blx	r3
    6306:	0002      	movs	r2, r0
    6308:	000b      	movs	r3, r1
    630a:	2000      	movs	r0, #0
    630c:	2180      	movs	r1, #128	; 0x80
    630e:	05c9      	lsls	r1, r1, #23
    6310:	4c43      	ldr	r4, [pc, #268]	; (6420 <main+0x59c>)
    6312:	47a0      	blx	r4
    6314:	4b43      	ldr	r3, [pc, #268]	; (6424 <main+0x5a0>)
    6316:	4798      	blx	r3
    6318:	b2c3      	uxtb	r3, r0
    631a:	930f      	str	r3, [sp, #60]	; 0x3c
    631c:	4b42      	ldr	r3, [pc, #264]	; (6428 <main+0x5a4>)
    631e:	6a1b      	ldr	r3, [r3, #32]
			while(port_pin_get_input_level(BUTTON_0_PIN) == false)
    6320:	061b      	lsls	r3, r3, #24
    6322:	d500      	bpl.n	6326 <main+0x4a2>
    6324:	e6de      	b.n	60e4 <main+0x260>
				delay_ms(10);
    6326:	4d38      	ldr	r5, [pc, #224]	; (6408 <main+0x584>)
    6328:	46aa      	mov	sl, r5
    632a:	2000      	movs	r0, #0
    632c:	47d0      	blx	sl
    632e:	0004      	movs	r4, r0
    6330:	2500      	movs	r5, #0
    6332:	0f83      	lsrs	r3, r0, #30
    6334:	9305      	str	r3, [sp, #20]
    6336:	0083      	lsls	r3, r0, #2
    6338:	9304      	str	r3, [sp, #16]
    633a:	9804      	ldr	r0, [sp, #16]
    633c:	9905      	ldr	r1, [sp, #20]
    633e:	1900      	adds	r0, r0, r4
    6340:	4169      	adcs	r1, r5
    6342:	1800      	adds	r0, r0, r0
    6344:	4149      	adcs	r1, r1
    6346:	4a31      	ldr	r2, [pc, #196]	; (640c <main+0x588>)
    6348:	2300      	movs	r3, #0
    634a:	1880      	adds	r0, r0, r2
    634c:	4159      	adcs	r1, r3
    634e:	4a30      	ldr	r2, [pc, #192]	; (6410 <main+0x58c>)
    6350:	2300      	movs	r3, #0
    6352:	4f30      	ldr	r7, [pc, #192]	; (6414 <main+0x590>)
    6354:	47b8      	blx	r7
    6356:	4b30      	ldr	r3, [pc, #192]	; (6418 <main+0x594>)
    6358:	4798      	blx	r3
    635a:	4b33      	ldr	r3, [pc, #204]	; (6428 <main+0x5a4>)
    635c:	6a1b      	ldr	r3, [r3, #32]
			while(port_pin_get_input_level(BUTTON_0_PIN) == false)
    635e:	061b      	lsls	r3, r3, #24
    6360:	d5e3      	bpl.n	632a <main+0x4a6>
    6362:	941a      	str	r4, [sp, #104]	; 0x68
    6364:	951b      	str	r5, [sp, #108]	; 0x6c
    6366:	e6bd      	b.n	60e4 <main+0x260>
				avgPotenz = 0;
    6368:	2300      	movs	r3, #0
    636a:	9318      	str	r3, [sp, #96]	; 0x60
    636c:	e7c8      	b.n	6300 <main+0x47c>
			printf("Temp: %03d --> Sensor [0]: ACC[x,y,z] %04d %04d %04d, Ang: [x,y] %03d %03; [%03d]\t\t", tmp, accel.x, accel.y, accel.z, (int32_t)(roll*100), (int16_t)(pitch*100), currentAngle);
    636e:	4b2f      	ldr	r3, [pc, #188]	; (642c <main+0x5a8>)
    6370:	881a      	ldrh	r2, [r3, #0]
    6372:	b212      	sxth	r2, r2
    6374:	0017      	movs	r7, r2
    6376:	885a      	ldrh	r2, [r3, #2]
    6378:	b212      	sxth	r2, r2
    637a:	4691      	mov	r9, r2
    637c:	889b      	ldrh	r3, [r3, #4]
    637e:	b21b      	sxth	r3, r3
    6380:	469a      	mov	sl, r3
    6382:	4b2b      	ldr	r3, [pc, #172]	; (6430 <main+0x5ac>)
    6384:	681b      	ldr	r3, [r3, #0]
    6386:	469b      	mov	fp, r3
    6388:	4b2a      	ldr	r3, [pc, #168]	; (6434 <main+0x5b0>)
    638a:	6818      	ldr	r0, [r3, #0]
    638c:	4643      	mov	r3, r8
    638e:	9303      	str	r3, [sp, #12]
    6390:	4b29      	ldr	r3, [pc, #164]	; (6438 <main+0x5b4>)
    6392:	4698      	mov	r8, r3
    6394:	4929      	ldr	r1, [pc, #164]	; (643c <main+0x5b8>)
    6396:	4798      	blx	r3
    6398:	4d29      	ldr	r5, [pc, #164]	; (6440 <main+0x5bc>)
    639a:	47a8      	blx	r5
    639c:	b200      	sxth	r0, r0
    639e:	9002      	str	r0, [sp, #8]
    63a0:	4926      	ldr	r1, [pc, #152]	; (643c <main+0x5b8>)
    63a2:	4658      	mov	r0, fp
    63a4:	47c0      	blx	r8
    63a6:	47a8      	blx	r5
    63a8:	9001      	str	r0, [sp, #4]
    63aa:	4653      	mov	r3, sl
    63ac:	9300      	str	r3, [sp, #0]
    63ae:	464b      	mov	r3, r9
    63b0:	003a      	movs	r2, r7
    63b2:	0021      	movs	r1, r4
    63b4:	4823      	ldr	r0, [pc, #140]	; (6444 <main+0x5c0>)
    63b6:	4f24      	ldr	r7, [pc, #144]	; (6448 <main+0x5c4>)
    63b8:	46ba      	mov	sl, r7
    63ba:	47b8      	blx	r7
			printf("Temp: %03d --> Sensor [1]: ACC[x,y,z] %04d %04d %04d, Ang: [x,y] %03d %03; [%03d]\n\r", tmp, accel_1.x, accel_1.y, accel_1.z, (int32_t)(roll_1*100), (int16_t)(pitch_1*100), currentAngle_1);
    63bc:	4b23      	ldr	r3, [pc, #140]	; (644c <main+0x5c8>)
    63be:	881a      	ldrh	r2, [r3, #0]
    63c0:	b212      	sxth	r2, r2
    63c2:	0017      	movs	r7, r2
    63c4:	885a      	ldrh	r2, [r3, #2]
    63c6:	b212      	sxth	r2, r2
    63c8:	9210      	str	r2, [sp, #64]	; 0x40
    63ca:	889b      	ldrh	r3, [r3, #4]
    63cc:	b219      	sxth	r1, r3
    63ce:	4689      	mov	r9, r1
    63d0:	4b1f      	ldr	r3, [pc, #124]	; (6450 <main+0x5cc>)
    63d2:	6819      	ldr	r1, [r3, #0]
    63d4:	468b      	mov	fp, r1
    63d6:	4b1f      	ldr	r3, [pc, #124]	; (6454 <main+0x5d0>)
    63d8:	6818      	ldr	r0, [r3, #0]
		currentAngle_1 = (zeroAngle_1 - currentRawAngle_1);
    63da:	990e      	ldr	r1, [sp, #56]	; 0x38
    63dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    63de:	1acb      	subs	r3, r1, r3
			printf("Temp: %03d --> Sensor [1]: ACC[x,y,z] %04d %04d %04d, Ang: [x,y] %03d %03; [%03d]\n\r", tmp, accel_1.x, accel_1.y, accel_1.z, (int32_t)(roll_1*100), (int16_t)(pitch_1*100), currentAngle_1);
    63e0:	9303      	str	r3, [sp, #12]
    63e2:	4916      	ldr	r1, [pc, #88]	; (643c <main+0x5b8>)
    63e4:	47c0      	blx	r8
    63e6:	47a8      	blx	r5
    63e8:	b200      	sxth	r0, r0
    63ea:	9002      	str	r0, [sp, #8]
    63ec:	4913      	ldr	r1, [pc, #76]	; (643c <main+0x5b8>)
    63ee:	4658      	mov	r0, fp
    63f0:	47c0      	blx	r8
    63f2:	47a8      	blx	r5
    63f4:	9001      	str	r0, [sp, #4]
    63f6:	4649      	mov	r1, r9
    63f8:	9100      	str	r1, [sp, #0]
    63fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    63fc:	003a      	movs	r2, r7
    63fe:	0021      	movs	r1, r4
    6400:	4815      	ldr	r0, [pc, #84]	; (6458 <main+0x5d4>)
    6402:	47d0      	blx	sl
    6404:	e6b6      	b.n	6174 <main+0x2f0>
    6406:	46c0      	nop			; (mov r8, r8)
    6408:	00002855 	.word	0x00002855
    640c:	00001b57 	.word	0x00001b57
    6410:	00001b58 	.word	0x00001b58
    6414:	00007f8d 	.word	0x00007f8d
    6418:	20000001 	.word	0x20000001
    641c:	0000a301 	.word	0x0000a301
    6420:	00006465 	.word	0x00006465
    6424:	00008021 	.word	0x00008021
    6428:	41004400 	.word	0x41004400
    642c:	20000c74 	.word	0x20000c74
    6430:	20000844 	.word	0x20000844
    6434:	2000083c 	.word	0x2000083c
    6438:	00008501 	.word	0x00008501
    643c:	42c80000 	.word	0x42c80000
    6440:	00008741 	.word	0x00008741
    6444:	0000c020 	.word	0x0000c020
    6448:	0000a5b9 	.word	0x0000a5b9
    644c:	20000d00 	.word	0x20000d00
    6450:	20000848 	.word	0x20000848
    6454:	20000840 	.word	0x20000840
    6458:	0000c074 	.word	0x0000c074

0000645c <atan2>:
    645c:	b510      	push	{r4, lr}
    645e:	f000 fa0d 	bl	687c <__ieee754_atan2>
    6462:	bd10      	pop	{r4, pc}

00006464 <pow>:
    6464:	b5f0      	push	{r4, r5, r6, r7, lr}
    6466:	4657      	mov	r7, sl
    6468:	464e      	mov	r6, r9
    646a:	46de      	mov	lr, fp
    646c:	4645      	mov	r5, r8
    646e:	b5e0      	push	{r5, r6, r7, lr}
    6470:	b08f      	sub	sp, #60	; 0x3c
    6472:	001d      	movs	r5, r3
    6474:	0006      	movs	r6, r0
    6476:	000f      	movs	r7, r1
    6478:	0014      	movs	r4, r2
    647a:	f000 fabb 	bl	69f4 <__ieee754_pow>
    647e:	4bc7      	ldr	r3, [pc, #796]	; (679c <pow+0x338>)
    6480:	9000      	str	r0, [sp, #0]
    6482:	9101      	str	r1, [sp, #4]
    6484:	469a      	mov	sl, r3
    6486:	781b      	ldrb	r3, [r3, #0]
    6488:	b25b      	sxtb	r3, r3
    648a:	4699      	mov	r9, r3
    648c:	3301      	adds	r3, #1
    648e:	d03e      	beq.n	650e <pow+0xaa>
    6490:	0022      	movs	r2, r4
    6492:	002b      	movs	r3, r5
    6494:	0020      	movs	r0, r4
    6496:	0029      	movs	r1, r5
    6498:	f003 fe9c 	bl	a1d4 <__aeabi_dcmpun>
    649c:	4683      	mov	fp, r0
    649e:	2800      	cmp	r0, #0
    64a0:	d135      	bne.n	650e <pow+0xaa>
    64a2:	0032      	movs	r2, r6
    64a4:	003b      	movs	r3, r7
    64a6:	0030      	movs	r0, r6
    64a8:	0039      	movs	r1, r7
    64aa:	f003 fe93 	bl	a1d4 <__aeabi_dcmpun>
    64ae:	2200      	movs	r2, #0
    64b0:	9003      	str	r0, [sp, #12]
    64b2:	2800      	cmp	r0, #0
    64b4:	d000      	beq.n	64b8 <pow+0x54>
    64b6:	e0b6      	b.n	6626 <pow+0x1c2>
    64b8:	2300      	movs	r3, #0
    64ba:	0030      	movs	r0, r6
    64bc:	0039      	movs	r1, r7
    64be:	f001 fcf9 	bl	7eb4 <__aeabi_dcmpeq>
    64c2:	2800      	cmp	r0, #0
    64c4:	d02c      	beq.n	6520 <pow+0xbc>
    64c6:	2200      	movs	r2, #0
    64c8:	2300      	movs	r3, #0
    64ca:	0020      	movs	r0, r4
    64cc:	0029      	movs	r1, r5
    64ce:	f001 fcf1 	bl	7eb4 <__aeabi_dcmpeq>
    64d2:	4683      	mov	fp, r0
    64d4:	2800      	cmp	r0, #0
    64d6:	d100      	bne.n	64da <pow+0x76>
    64d8:	e077      	b.n	65ca <pow+0x166>
    64da:	ab04      	add	r3, sp, #16
    64dc:	4698      	mov	r8, r3
    64de:	2301      	movs	r3, #1
    64e0:	4642      	mov	r2, r8
    64e2:	9304      	str	r3, [sp, #16]
    64e4:	4bae      	ldr	r3, [pc, #696]	; (67a0 <pow+0x33c>)
    64e6:	6053      	str	r3, [r2, #4]
    64e8:	4643      	mov	r3, r8
    64ea:	9a03      	ldr	r2, [sp, #12]
    64ec:	611c      	str	r4, [r3, #16]
    64ee:	615d      	str	r5, [r3, #20]
    64f0:	621a      	str	r2, [r3, #32]
    64f2:	609e      	str	r6, [r3, #8]
    64f4:	60df      	str	r7, [r3, #12]
    64f6:	4642      	mov	r2, r8
    64f8:	2300      	movs	r3, #0
    64fa:	2400      	movs	r4, #0
    64fc:	6193      	str	r3, [r2, #24]
    64fe:	61d4      	str	r4, [r2, #28]
    6500:	464b      	mov	r3, r9
    6502:	2b00      	cmp	r3, #0
    6504:	d04d      	beq.n	65a2 <pow+0x13e>
    6506:	2300      	movs	r3, #0
    6508:	4ca6      	ldr	r4, [pc, #664]	; (67a4 <pow+0x340>)
    650a:	9300      	str	r3, [sp, #0]
    650c:	9401      	str	r4, [sp, #4]
    650e:	9800      	ldr	r0, [sp, #0]
    6510:	9901      	ldr	r1, [sp, #4]
    6512:	b00f      	add	sp, #60	; 0x3c
    6514:	bc3c      	pop	{r2, r3, r4, r5}
    6516:	4690      	mov	r8, r2
    6518:	4699      	mov	r9, r3
    651a:	46a2      	mov	sl, r4
    651c:	46ab      	mov	fp, r5
    651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6520:	9800      	ldr	r0, [sp, #0]
    6522:	9901      	ldr	r1, [sp, #4]
    6524:	f001 fa1c 	bl	7960 <finite>
    6528:	4681      	mov	r9, r0
    652a:	2800      	cmp	r0, #0
    652c:	d100      	bne.n	6530 <pow+0xcc>
    652e:	e09b      	b.n	6668 <pow+0x204>
    6530:	9800      	ldr	r0, [sp, #0]
    6532:	9901      	ldr	r1, [sp, #4]
    6534:	2200      	movs	r2, #0
    6536:	2300      	movs	r3, #0
    6538:	f001 fcbc 	bl	7eb4 <__aeabi_dcmpeq>
    653c:	2800      	cmp	r0, #0
    653e:	d0e6      	beq.n	650e <pow+0xaa>
    6540:	0030      	movs	r0, r6
    6542:	0039      	movs	r1, r7
    6544:	f001 fa0c 	bl	7960 <finite>
    6548:	2800      	cmp	r0, #0
    654a:	d0e0      	beq.n	650e <pow+0xaa>
    654c:	0020      	movs	r0, r4
    654e:	0029      	movs	r1, r5
    6550:	f001 fa06 	bl	7960 <finite>
    6554:	2800      	cmp	r0, #0
    6556:	d0da      	beq.n	650e <pow+0xaa>
    6558:	ab04      	add	r3, sp, #16
    655a:	4698      	mov	r8, r3
    655c:	2304      	movs	r3, #4
    655e:	4642      	mov	r2, r8
    6560:	9304      	str	r3, [sp, #16]
    6562:	4b8f      	ldr	r3, [pc, #572]	; (67a0 <pow+0x33c>)
    6564:	6114      	str	r4, [r2, #16]
    6566:	6155      	str	r5, [r2, #20]
    6568:	6053      	str	r3, [r2, #4]
    656a:	2300      	movs	r3, #0
    656c:	2400      	movs	r4, #0
    656e:	6213      	str	r3, [r2, #32]
    6570:	2300      	movs	r3, #0
    6572:	6193      	str	r3, [r2, #24]
    6574:	61d4      	str	r4, [r2, #28]
    6576:	4653      	mov	r3, sl
    6578:	781b      	ldrb	r3, [r3, #0]
    657a:	6096      	str	r6, [r2, #8]
    657c:	60d7      	str	r7, [r2, #12]
    657e:	b25b      	sxtb	r3, r3
    6580:	2b02      	cmp	r3, #2
    6582:	d004      	beq.n	658e <pow+0x12a>
    6584:	4640      	mov	r0, r8
    6586:	f001 f9f5 	bl	7974 <matherr>
    658a:	2800      	cmp	r0, #0
    658c:	d10e      	bne.n	65ac <pow+0x148>
    658e:	f003 ffd7 	bl	a540 <__errno>
    6592:	2322      	movs	r3, #34	; 0x22
    6594:	6003      	str	r3, [r0, #0]
    6596:	e009      	b.n	65ac <pow+0x148>
    6598:	4642      	mov	r2, r8
    659a:	2300      	movs	r3, #0
    659c:	2400      	movs	r4, #0
    659e:	6193      	str	r3, [r2, #24]
    65a0:	61d4      	str	r4, [r2, #28]
    65a2:	4640      	mov	r0, r8
    65a4:	f001 f9e6 	bl	7974 <matherr>
    65a8:	2800      	cmp	r0, #0
    65aa:	d037      	beq.n	661c <pow+0x1b8>
    65ac:	4643      	mov	r3, r8
    65ae:	6a1b      	ldr	r3, [r3, #32]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d004      	beq.n	65be <pow+0x15a>
    65b4:	f003 ffc4 	bl	a540 <__errno>
    65b8:	4643      	mov	r3, r8
    65ba:	6a1b      	ldr	r3, [r3, #32]
    65bc:	6003      	str	r3, [r0, #0]
    65be:	4643      	mov	r3, r8
    65c0:	69dc      	ldr	r4, [r3, #28]
    65c2:	699b      	ldr	r3, [r3, #24]
    65c4:	9300      	str	r3, [sp, #0]
    65c6:	9401      	str	r4, [sp, #4]
    65c8:	e7a1      	b.n	650e <pow+0xaa>
    65ca:	0020      	movs	r0, r4
    65cc:	0029      	movs	r1, r5
    65ce:	f001 f9c7 	bl	7960 <finite>
    65d2:	2800      	cmp	r0, #0
    65d4:	d09b      	beq.n	650e <pow+0xaa>
    65d6:	2200      	movs	r2, #0
    65d8:	2300      	movs	r3, #0
    65da:	0020      	movs	r0, r4
    65dc:	0029      	movs	r1, r5
    65de:	f001 fc6f 	bl	7ec0 <__aeabi_dcmplt>
    65e2:	2800      	cmp	r0, #0
    65e4:	d100      	bne.n	65e8 <pow+0x184>
    65e6:	e792      	b.n	650e <pow+0xaa>
    65e8:	ab04      	add	r3, sp, #16
    65ea:	4698      	mov	r8, r3
    65ec:	2301      	movs	r3, #1
    65ee:	4642      	mov	r2, r8
    65f0:	9304      	str	r3, [sp, #16]
    65f2:	4b6b      	ldr	r3, [pc, #428]	; (67a0 <pow+0x33c>)
    65f4:	6053      	str	r3, [r2, #4]
    65f6:	4643      	mov	r3, r8
    65f8:	465a      	mov	r2, fp
    65fa:	609e      	str	r6, [r3, #8]
    65fc:	60df      	str	r7, [r3, #12]
    65fe:	621a      	str	r2, [r3, #32]
    6600:	611c      	str	r4, [r3, #16]
    6602:	615d      	str	r5, [r3, #20]
    6604:	4653      	mov	r3, sl
    6606:	781b      	ldrb	r3, [r3, #0]
    6608:	b25b      	sxtb	r3, r3
    660a:	2b00      	cmp	r3, #0
    660c:	d0c4      	beq.n	6598 <pow+0x134>
    660e:	2000      	movs	r0, #0
    6610:	4642      	mov	r2, r8
    6612:	4965      	ldr	r1, [pc, #404]	; (67a8 <pow+0x344>)
    6614:	6190      	str	r0, [r2, #24]
    6616:	61d1      	str	r1, [r2, #28]
    6618:	2b02      	cmp	r3, #2
    661a:	d1c2      	bne.n	65a2 <pow+0x13e>
    661c:	f003 ff90 	bl	a540 <__errno>
    6620:	2321      	movs	r3, #33	; 0x21
    6622:	6003      	str	r3, [r0, #0]
    6624:	e7c2      	b.n	65ac <pow+0x148>
    6626:	2300      	movs	r3, #0
    6628:	0020      	movs	r0, r4
    662a:	0029      	movs	r1, r5
    662c:	f001 fc42 	bl	7eb4 <__aeabi_dcmpeq>
    6630:	2800      	cmp	r0, #0
    6632:	d100      	bne.n	6636 <pow+0x1d2>
    6634:	e76b      	b.n	650e <pow+0xaa>
    6636:	ab04      	add	r3, sp, #16
    6638:	4698      	mov	r8, r3
    663a:	2301      	movs	r3, #1
    663c:	4642      	mov	r2, r8
    663e:	9304      	str	r3, [sp, #16]
    6640:	4b57      	ldr	r3, [pc, #348]	; (67a0 <pow+0x33c>)
    6642:	4641      	mov	r1, r8
    6644:	6053      	str	r3, [r2, #4]
    6646:	4643      	mov	r3, r8
    6648:	465a      	mov	r2, fp
    664a:	621a      	str	r2, [r3, #32]
    664c:	2200      	movs	r2, #0
    664e:	609e      	str	r6, [r3, #8]
    6650:	60df      	str	r7, [r3, #12]
    6652:	611c      	str	r4, [r3, #16]
    6654:	615d      	str	r5, [r3, #20]
    6656:	4b53      	ldr	r3, [pc, #332]	; (67a4 <pow+0x340>)
    6658:	618a      	str	r2, [r1, #24]
    665a:	61cb      	str	r3, [r1, #28]
    665c:	9200      	str	r2, [sp, #0]
    665e:	9301      	str	r3, [sp, #4]
    6660:	464b      	mov	r3, r9
    6662:	2b02      	cmp	r3, #2
    6664:	d19d      	bne.n	65a2 <pow+0x13e>
    6666:	e752      	b.n	650e <pow+0xaa>
    6668:	0030      	movs	r0, r6
    666a:	0039      	movs	r1, r7
    666c:	f001 f978 	bl	7960 <finite>
    6670:	2800      	cmp	r0, #0
    6672:	d100      	bne.n	6676 <pow+0x212>
    6674:	e75c      	b.n	6530 <pow+0xcc>
    6676:	0020      	movs	r0, r4
    6678:	0029      	movs	r1, r5
    667a:	f001 f971 	bl	7960 <finite>
    667e:	2800      	cmp	r0, #0
    6680:	d100      	bne.n	6684 <pow+0x220>
    6682:	e755      	b.n	6530 <pow+0xcc>
    6684:	9800      	ldr	r0, [sp, #0]
    6686:	9901      	ldr	r1, [sp, #4]
    6688:	000b      	movs	r3, r1
    668a:	0002      	movs	r2, r0
    668c:	f003 fda2 	bl	a1d4 <__aeabi_dcmpun>
    6690:	ab04      	add	r3, sp, #16
    6692:	4698      	mov	r8, r3
    6694:	2800      	cmp	r0, #0
    6696:	d161      	bne.n	675c <pow+0x2f8>
    6698:	2303      	movs	r3, #3
    669a:	4642      	mov	r2, r8
    669c:	9304      	str	r3, [sp, #16]
    669e:	4b40      	ldr	r3, [pc, #256]	; (67a0 <pow+0x33c>)
    66a0:	6210      	str	r0, [r2, #32]
    66a2:	6053      	str	r3, [r2, #4]
    66a4:	4653      	mov	r3, sl
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	6096      	str	r6, [r2, #8]
    66aa:	60d7      	str	r7, [r2, #12]
    66ac:	b25b      	sxtb	r3, r3
    66ae:	6114      	str	r4, [r2, #16]
    66b0:	6155      	str	r5, [r2, #20]
    66b2:	4699      	mov	r9, r3
    66b4:	2b00      	cmp	r3, #0
    66b6:	d12f      	bne.n	6718 <pow+0x2b4>
    66b8:	22e0      	movs	r2, #224	; 0xe0
    66ba:	4641      	mov	r1, r8
    66bc:	4b3b      	ldr	r3, [pc, #236]	; (67ac <pow+0x348>)
    66be:	0612      	lsls	r2, r2, #24
    66c0:	618a      	str	r2, [r1, #24]
    66c2:	61cb      	str	r3, [r1, #28]
    66c4:	0030      	movs	r0, r6
    66c6:	2200      	movs	r2, #0
    66c8:	2300      	movs	r3, #0
    66ca:	0039      	movs	r1, r7
    66cc:	f001 fbf8 	bl	7ec0 <__aeabi_dcmplt>
    66d0:	2800      	cmp	r0, #0
    66d2:	d100      	bne.n	66d6 <pow+0x272>
    66d4:	e756      	b.n	6584 <pow+0x120>
    66d6:	2200      	movs	r2, #0
    66d8:	4b35      	ldr	r3, [pc, #212]	; (67b0 <pow+0x34c>)
    66da:	0020      	movs	r0, r4
    66dc:	0029      	movs	r1, r5
    66de:	f002 ffe3 	bl	96a8 <__aeabi_dmul>
    66e2:	0004      	movs	r4, r0
    66e4:	000d      	movs	r5, r1
    66e6:	f001 f94d 	bl	7984 <rint>
    66ea:	0002      	movs	r2, r0
    66ec:	000b      	movs	r3, r1
    66ee:	0020      	movs	r0, r4
    66f0:	0029      	movs	r1, r5
    66f2:	f001 fbdf 	bl	7eb4 <__aeabi_dcmpeq>
    66f6:	2800      	cmp	r0, #0
    66f8:	d105      	bne.n	6706 <pow+0x2a2>
    66fa:	22e0      	movs	r2, #224	; 0xe0
    66fc:	4b2d      	ldr	r3, [pc, #180]	; (67b4 <pow+0x350>)
    66fe:	0612      	lsls	r2, r2, #24
    6700:	4641      	mov	r1, r8
    6702:	618a      	str	r2, [r1, #24]
    6704:	61cb      	str	r3, [r1, #28]
    6706:	4653      	mov	r3, sl
    6708:	781b      	ldrb	r3, [r3, #0]
    670a:	b25b      	sxtb	r3, r3
    670c:	4699      	mov	r9, r3
    670e:	464b      	mov	r3, r9
    6710:	2b02      	cmp	r3, #2
    6712:	d000      	beq.n	6716 <pow+0x2b2>
    6714:	e736      	b.n	6584 <pow+0x120>
    6716:	e73a      	b.n	658e <pow+0x12a>
    6718:	2200      	movs	r2, #0
    671a:	4641      	mov	r1, r8
    671c:	4b26      	ldr	r3, [pc, #152]	; (67b8 <pow+0x354>)
    671e:	0030      	movs	r0, r6
    6720:	618a      	str	r2, [r1, #24]
    6722:	61cb      	str	r3, [r1, #28]
    6724:	2200      	movs	r2, #0
    6726:	2300      	movs	r3, #0
    6728:	0039      	movs	r1, r7
    672a:	f001 fbc9 	bl	7ec0 <__aeabi_dcmplt>
    672e:	2800      	cmp	r0, #0
    6730:	d0ed      	beq.n	670e <pow+0x2aa>
    6732:	2200      	movs	r2, #0
    6734:	4b1e      	ldr	r3, [pc, #120]	; (67b0 <pow+0x34c>)
    6736:	0020      	movs	r0, r4
    6738:	0029      	movs	r1, r5
    673a:	f002 ffb5 	bl	96a8 <__aeabi_dmul>
    673e:	0004      	movs	r4, r0
    6740:	000d      	movs	r5, r1
    6742:	f001 f91f 	bl	7984 <rint>
    6746:	0002      	movs	r2, r0
    6748:	000b      	movs	r3, r1
    674a:	0020      	movs	r0, r4
    674c:	0029      	movs	r1, r5
    674e:	f001 fbb1 	bl	7eb4 <__aeabi_dcmpeq>
    6752:	2800      	cmp	r0, #0
    6754:	d1d7      	bne.n	6706 <pow+0x2a2>
    6756:	2200      	movs	r2, #0
    6758:	4b13      	ldr	r3, [pc, #76]	; (67a8 <pow+0x344>)
    675a:	e7d1      	b.n	6700 <pow+0x29c>
    675c:	2301      	movs	r3, #1
    675e:	4642      	mov	r2, r8
    6760:	9304      	str	r3, [sp, #16]
    6762:	4b0f      	ldr	r3, [pc, #60]	; (67a0 <pow+0x33c>)
    6764:	6053      	str	r3, [r2, #4]
    6766:	4643      	mov	r3, r8
    6768:	464a      	mov	r2, r9
    676a:	611c      	str	r4, [r3, #16]
    676c:	615d      	str	r5, [r3, #20]
    676e:	621a      	str	r2, [r3, #32]
    6770:	609e      	str	r6, [r3, #8]
    6772:	60df      	str	r7, [r3, #12]
    6774:	2400      	movs	r4, #0
    6776:	4653      	mov	r3, sl
    6778:	571c      	ldrsb	r4, [r3, r4]
    677a:	2c00      	cmp	r4, #0
    677c:	d100      	bne.n	6780 <pow+0x31c>
    677e:	e70b      	b.n	6598 <pow+0x134>
    6780:	2300      	movs	r3, #0
    6782:	2200      	movs	r2, #0
    6784:	0019      	movs	r1, r3
    6786:	0010      	movs	r0, r2
    6788:	f002 fb5a 	bl	8e40 <__aeabi_ddiv>
    678c:	4643      	mov	r3, r8
    678e:	6198      	str	r0, [r3, #24]
    6790:	61d9      	str	r1, [r3, #28]
    6792:	2c02      	cmp	r4, #2
    6794:	d100      	bne.n	6798 <pow+0x334>
    6796:	e741      	b.n	661c <pow+0x1b8>
    6798:	e703      	b.n	65a2 <pow+0x13e>
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	20000578 	.word	0x20000578
    67a0:	0000c0c8 	.word	0x0000c0c8
    67a4:	3ff00000 	.word	0x3ff00000
    67a8:	fff00000 	.word	0xfff00000
    67ac:	47efffff 	.word	0x47efffff
    67b0:	3fe00000 	.word	0x3fe00000
    67b4:	c7efffff 	.word	0xc7efffff
    67b8:	7ff00000 	.word	0x7ff00000

000067bc <sqrt>:
    67bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    67be:	4647      	mov	r7, r8
    67c0:	46ce      	mov	lr, r9
    67c2:	b580      	push	{r7, lr}
    67c4:	b08d      	sub	sp, #52	; 0x34
    67c6:	0004      	movs	r4, r0
    67c8:	000d      	movs	r5, r1
    67ca:	f000 fe49 	bl	7460 <__ieee754_sqrt>
    67ce:	4b29      	ldr	r3, [pc, #164]	; (6874 <sqrt+0xb8>)
    67d0:	0006      	movs	r6, r0
    67d2:	781b      	ldrb	r3, [r3, #0]
    67d4:	000f      	movs	r7, r1
    67d6:	b25b      	sxtb	r3, r3
    67d8:	4698      	mov	r8, r3
    67da:	3301      	adds	r3, #1
    67dc:	d010      	beq.n	6800 <sqrt+0x44>
    67de:	0022      	movs	r2, r4
    67e0:	002b      	movs	r3, r5
    67e2:	0020      	movs	r0, r4
    67e4:	0029      	movs	r1, r5
    67e6:	f003 fcf5 	bl	a1d4 <__aeabi_dcmpun>
    67ea:	4681      	mov	r9, r0
    67ec:	2800      	cmp	r0, #0
    67ee:	d107      	bne.n	6800 <sqrt+0x44>
    67f0:	2200      	movs	r2, #0
    67f2:	2300      	movs	r3, #0
    67f4:	0020      	movs	r0, r4
    67f6:	0029      	movs	r1, r5
    67f8:	f001 fb62 	bl	7ec0 <__aeabi_dcmplt>
    67fc:	2800      	cmp	r0, #0
    67fe:	d106      	bne.n	680e <sqrt+0x52>
    6800:	0030      	movs	r0, r6
    6802:	0039      	movs	r1, r7
    6804:	b00d      	add	sp, #52	; 0x34
    6806:	bc0c      	pop	{r2, r3}
    6808:	4690      	mov	r8, r2
    680a:	4699      	mov	r9, r3
    680c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    680e:	2301      	movs	r3, #1
    6810:	9302      	str	r3, [sp, #8]
    6812:	4b19      	ldr	r3, [pc, #100]	; (6878 <sqrt+0xbc>)
    6814:	9406      	str	r4, [sp, #24]
    6816:	9507      	str	r5, [sp, #28]
    6818:	9303      	str	r3, [sp, #12]
    681a:	464b      	mov	r3, r9
    681c:	930a      	str	r3, [sp, #40]	; 0x28
    681e:	4643      	mov	r3, r8
    6820:	9404      	str	r4, [sp, #16]
    6822:	9505      	str	r5, [sp, #20]
    6824:	2b00      	cmp	r3, #0
    6826:	d015      	beq.n	6854 <sqrt+0x98>
    6828:	2300      	movs	r3, #0
    682a:	2200      	movs	r2, #0
    682c:	0019      	movs	r1, r3
    682e:	0010      	movs	r0, r2
    6830:	f002 fb06 	bl	8e40 <__aeabi_ddiv>
    6834:	4643      	mov	r3, r8
    6836:	9008      	str	r0, [sp, #32]
    6838:	9109      	str	r1, [sp, #36]	; 0x24
    683a:	2b02      	cmp	r3, #2
    683c:	d10e      	bne.n	685c <sqrt+0xa0>
    683e:	f003 fe7f 	bl	a540 <__errno>
    6842:	2321      	movs	r3, #33	; 0x21
    6844:	6003      	str	r3, [r0, #0]
    6846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6848:	9301      	str	r3, [sp, #4]
    684a:	2b00      	cmp	r3, #0
    684c:	d10c      	bne.n	6868 <sqrt+0xac>
    684e:	9e08      	ldr	r6, [sp, #32]
    6850:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6852:	e7d5      	b.n	6800 <sqrt+0x44>
    6854:	2300      	movs	r3, #0
    6856:	2400      	movs	r4, #0
    6858:	9308      	str	r3, [sp, #32]
    685a:	9409      	str	r4, [sp, #36]	; 0x24
    685c:	a802      	add	r0, sp, #8
    685e:	f001 f889 	bl	7974 <matherr>
    6862:	2800      	cmp	r0, #0
    6864:	d1ef      	bne.n	6846 <sqrt+0x8a>
    6866:	e7ea      	b.n	683e <sqrt+0x82>
    6868:	f003 fe6a 	bl	a540 <__errno>
    686c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    686e:	9301      	str	r3, [sp, #4]
    6870:	6003      	str	r3, [r0, #0]
    6872:	e7ec      	b.n	684e <sqrt+0x92>
    6874:	20000578 	.word	0x20000578
    6878:	0000c0cc 	.word	0x0000c0cc

0000687c <__ieee754_atan2>:
    687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    687e:	0015      	movs	r5, r2
    6880:	4647      	mov	r7, r8
    6882:	46ce      	mov	lr, r9
    6884:	005a      	lsls	r2, r3, #1
    6886:	001c      	movs	r4, r3
    6888:	426b      	negs	r3, r5
    688a:	b580      	push	{r7, lr}
    688c:	432b      	orrs	r3, r5
    688e:	4f4b      	ldr	r7, [pc, #300]	; (69bc <__ieee754_atan2+0x140>)
    6890:	0852      	lsrs	r2, r2, #1
    6892:	0fdb      	lsrs	r3, r3, #31
    6894:	4688      	mov	r8, r1
    6896:	4313      	orrs	r3, r2
    6898:	42bb      	cmp	r3, r7
    689a:	d83a      	bhi.n	6912 <__ieee754_atan2+0x96>
    689c:	004b      	lsls	r3, r1, #1
    689e:	085b      	lsrs	r3, r3, #1
    68a0:	4699      	mov	r9, r3
    68a2:	464e      	mov	r6, r9
    68a4:	4243      	negs	r3, r0
    68a6:	4303      	orrs	r3, r0
    68a8:	0fdb      	lsrs	r3, r3, #31
    68aa:	4333      	orrs	r3, r6
    68ac:	42bb      	cmp	r3, r7
    68ae:	d830      	bhi.n	6912 <__ieee754_atan2+0x96>
    68b0:	4b43      	ldr	r3, [pc, #268]	; (69c0 <__ieee754_atan2+0x144>)
    68b2:	18e3      	adds	r3, r4, r3
    68b4:	432b      	orrs	r3, r5
    68b6:	d043      	beq.n	6940 <__ieee754_atan2+0xc4>
    68b8:	2602      	movs	r6, #2
    68ba:	17a3      	asrs	r3, r4, #30
    68bc:	401e      	ands	r6, r3
    68be:	0fcb      	lsrs	r3, r1, #31
    68c0:	431e      	orrs	r6, r3
    68c2:	464b      	mov	r3, r9
    68c4:	4303      	orrs	r3, r0
    68c6:	d02e      	beq.n	6926 <__ieee754_atan2+0xaa>
    68c8:	0013      	movs	r3, r2
    68ca:	432b      	orrs	r3, r5
    68cc:	d032      	beq.n	6934 <__ieee754_atan2+0xb8>
    68ce:	42ba      	cmp	r2, r7
    68d0:	d041      	beq.n	6956 <__ieee754_atan2+0xda>
    68d2:	45b9      	cmp	r9, r7
    68d4:	d02e      	beq.n	6934 <__ieee754_atan2+0xb8>
    68d6:	464b      	mov	r3, r9
    68d8:	1a9a      	subs	r2, r3, r2
    68da:	1512      	asrs	r2, r2, #20
    68dc:	2a3c      	cmp	r2, #60	; 0x3c
    68de:	dc32      	bgt.n	6946 <__ieee754_atan2+0xca>
    68e0:	2c00      	cmp	r4, #0
    68e2:	db55      	blt.n	6990 <__ieee754_atan2+0x114>
    68e4:	002a      	movs	r2, r5
    68e6:	0023      	movs	r3, r4
    68e8:	f002 faaa 	bl	8e40 <__aeabi_ddiv>
    68ec:	f001 f834 	bl	7958 <fabs>
    68f0:	f000 fe96 	bl	7620 <atan>
    68f4:	2e01      	cmp	r6, #1
    68f6:	d046      	beq.n	6986 <__ieee754_atan2+0x10a>
    68f8:	2e02      	cmp	r6, #2
    68fa:	d039      	beq.n	6970 <__ieee754_atan2+0xf4>
    68fc:	2e00      	cmp	r6, #0
    68fe:	d00e      	beq.n	691e <__ieee754_atan2+0xa2>
    6900:	4a30      	ldr	r2, [pc, #192]	; (69c4 <__ieee754_atan2+0x148>)
    6902:	4b31      	ldr	r3, [pc, #196]	; (69c8 <__ieee754_atan2+0x14c>)
    6904:	f003 f950 	bl	9ba8 <__aeabi_dsub>
    6908:	4a30      	ldr	r2, [pc, #192]	; (69cc <__ieee754_atan2+0x150>)
    690a:	4b31      	ldr	r3, [pc, #196]	; (69d0 <__ieee754_atan2+0x154>)
    690c:	f003 f94c 	bl	9ba8 <__aeabi_dsub>
    6910:	e005      	b.n	691e <__ieee754_atan2+0xa2>
    6912:	0002      	movs	r2, r0
    6914:	000b      	movs	r3, r1
    6916:	0028      	movs	r0, r5
    6918:	0021      	movs	r1, r4
    691a:	f001 ff81 	bl	8820 <__aeabi_dadd>
    691e:	bc0c      	pop	{r2, r3}
    6920:	4690      	mov	r8, r2
    6922:	4699      	mov	r9, r3
    6924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6926:	2e02      	cmp	r6, #2
    6928:	d010      	beq.n	694c <__ieee754_atan2+0xd0>
    692a:	2e03      	cmp	r6, #3
    692c:	d1f7      	bne.n	691e <__ieee754_atan2+0xa2>
    692e:	4827      	ldr	r0, [pc, #156]	; (69cc <__ieee754_atan2+0x150>)
    6930:	4928      	ldr	r1, [pc, #160]	; (69d4 <__ieee754_atan2+0x158>)
    6932:	e7f4      	b.n	691e <__ieee754_atan2+0xa2>
    6934:	4643      	mov	r3, r8
    6936:	4825      	ldr	r0, [pc, #148]	; (69cc <__ieee754_atan2+0x150>)
    6938:	2b00      	cmp	r3, #0
    693a:	db0a      	blt.n	6952 <__ieee754_atan2+0xd6>
    693c:	4926      	ldr	r1, [pc, #152]	; (69d8 <__ieee754_atan2+0x15c>)
    693e:	e7ee      	b.n	691e <__ieee754_atan2+0xa2>
    6940:	f000 fe6e 	bl	7620 <atan>
    6944:	e7eb      	b.n	691e <__ieee754_atan2+0xa2>
    6946:	4821      	ldr	r0, [pc, #132]	; (69cc <__ieee754_atan2+0x150>)
    6948:	4923      	ldr	r1, [pc, #140]	; (69d8 <__ieee754_atan2+0x15c>)
    694a:	e7d3      	b.n	68f4 <__ieee754_atan2+0x78>
    694c:	481f      	ldr	r0, [pc, #124]	; (69cc <__ieee754_atan2+0x150>)
    694e:	4920      	ldr	r1, [pc, #128]	; (69d0 <__ieee754_atan2+0x154>)
    6950:	e7e5      	b.n	691e <__ieee754_atan2+0xa2>
    6952:	4922      	ldr	r1, [pc, #136]	; (69dc <__ieee754_atan2+0x160>)
    6954:	e7e3      	b.n	691e <__ieee754_atan2+0xa2>
    6956:	4591      	cmp	r9, r2
    6958:	d01f      	beq.n	699a <__ieee754_atan2+0x11e>
    695a:	2e02      	cmp	r6, #2
    695c:	d0f6      	beq.n	694c <__ieee754_atan2+0xd0>
    695e:	2e03      	cmp	r6, #3
    6960:	d0e5      	beq.n	692e <__ieee754_atan2+0xb2>
    6962:	2000      	movs	r0, #0
    6964:	2100      	movs	r1, #0
    6966:	2e01      	cmp	r6, #1
    6968:	d1d9      	bne.n	691e <__ieee754_atan2+0xa2>
    696a:	2180      	movs	r1, #128	; 0x80
    696c:	0609      	lsls	r1, r1, #24
    696e:	e7d6      	b.n	691e <__ieee754_atan2+0xa2>
    6970:	4a14      	ldr	r2, [pc, #80]	; (69c4 <__ieee754_atan2+0x148>)
    6972:	4b15      	ldr	r3, [pc, #84]	; (69c8 <__ieee754_atan2+0x14c>)
    6974:	f003 f918 	bl	9ba8 <__aeabi_dsub>
    6978:	0002      	movs	r2, r0
    697a:	000b      	movs	r3, r1
    697c:	4813      	ldr	r0, [pc, #76]	; (69cc <__ieee754_atan2+0x150>)
    697e:	4914      	ldr	r1, [pc, #80]	; (69d0 <__ieee754_atan2+0x154>)
    6980:	f003 f912 	bl	9ba8 <__aeabi_dsub>
    6984:	e7cb      	b.n	691e <__ieee754_atan2+0xa2>
    6986:	2480      	movs	r4, #128	; 0x80
    6988:	0624      	lsls	r4, r4, #24
    698a:	190b      	adds	r3, r1, r4
    698c:	0019      	movs	r1, r3
    698e:	e7c6      	b.n	691e <__ieee754_atan2+0xa2>
    6990:	323c      	adds	r2, #60	; 0x3c
    6992:	daa7      	bge.n	68e4 <__ieee754_atan2+0x68>
    6994:	2000      	movs	r0, #0
    6996:	2100      	movs	r1, #0
    6998:	e7ac      	b.n	68f4 <__ieee754_atan2+0x78>
    699a:	2e02      	cmp	r6, #2
    699c:	d006      	beq.n	69ac <__ieee754_atan2+0x130>
    699e:	2e03      	cmp	r6, #3
    69a0:	d009      	beq.n	69b6 <__ieee754_atan2+0x13a>
    69a2:	480a      	ldr	r0, [pc, #40]	; (69cc <__ieee754_atan2+0x150>)
    69a4:	2e01      	cmp	r6, #1
    69a6:	d004      	beq.n	69b2 <__ieee754_atan2+0x136>
    69a8:	490d      	ldr	r1, [pc, #52]	; (69e0 <__ieee754_atan2+0x164>)
    69aa:	e7b8      	b.n	691e <__ieee754_atan2+0xa2>
    69ac:	480d      	ldr	r0, [pc, #52]	; (69e4 <__ieee754_atan2+0x168>)
    69ae:	490e      	ldr	r1, [pc, #56]	; (69e8 <__ieee754_atan2+0x16c>)
    69b0:	e7b5      	b.n	691e <__ieee754_atan2+0xa2>
    69b2:	490e      	ldr	r1, [pc, #56]	; (69ec <__ieee754_atan2+0x170>)
    69b4:	e7b3      	b.n	691e <__ieee754_atan2+0xa2>
    69b6:	480b      	ldr	r0, [pc, #44]	; (69e4 <__ieee754_atan2+0x168>)
    69b8:	490d      	ldr	r1, [pc, #52]	; (69f0 <__ieee754_atan2+0x174>)
    69ba:	e7b0      	b.n	691e <__ieee754_atan2+0xa2>
    69bc:	7ff00000 	.word	0x7ff00000
    69c0:	c0100000 	.word	0xc0100000
    69c4:	33145c07 	.word	0x33145c07
    69c8:	3ca1a626 	.word	0x3ca1a626
    69cc:	54442d18 	.word	0x54442d18
    69d0:	400921fb 	.word	0x400921fb
    69d4:	c00921fb 	.word	0xc00921fb
    69d8:	3ff921fb 	.word	0x3ff921fb
    69dc:	bff921fb 	.word	0xbff921fb
    69e0:	3fe921fb 	.word	0x3fe921fb
    69e4:	7f3321d2 	.word	0x7f3321d2
    69e8:	4002d97c 	.word	0x4002d97c
    69ec:	bfe921fb 	.word	0xbfe921fb
    69f0:	c002d97c 	.word	0xc002d97c

000069f4 <__ieee754_pow>:
    69f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69f6:	4657      	mov	r7, sl
    69f8:	464e      	mov	r6, r9
    69fa:	4645      	mov	r5, r8
    69fc:	46de      	mov	lr, fp
    69fe:	001c      	movs	r4, r3
    6a00:	0013      	movs	r3, r2
    6a02:	b5e0      	push	{r5, r6, r7, lr}
    6a04:	0065      	lsls	r5, r4, #1
    6a06:	b091      	sub	sp, #68	; 0x44
    6a08:	086d      	lsrs	r5, r5, #1
    6a0a:	9300      	str	r3, [sp, #0]
    6a0c:	9401      	str	r4, [sp, #4]
    6a0e:	0007      	movs	r7, r0
    6a10:	000e      	movs	r6, r1
    6a12:	4680      	mov	r8, r0
    6a14:	4689      	mov	r9, r1
    6a16:	46a2      	mov	sl, r4
    6a18:	432b      	orrs	r3, r5
    6a1a:	d031      	beq.n	6a80 <__ieee754_pow+0x8c>
    6a1c:	4b67      	ldr	r3, [pc, #412]	; (6bbc <__ieee754_pow+0x1c8>)
    6a1e:	0074      	lsls	r4, r6, #1
    6a20:	0864      	lsrs	r4, r4, #1
    6a22:	429c      	cmp	r4, r3
    6a24:	dc27      	bgt.n	6a76 <__ieee754_pow+0x82>
    6a26:	d024      	beq.n	6a72 <__ieee754_pow+0x7e>
    6a28:	429d      	cmp	r5, r3
    6a2a:	dc24      	bgt.n	6a76 <__ieee754_pow+0x82>
    6a2c:	4b63      	ldr	r3, [pc, #396]	; (6bbc <__ieee754_pow+0x1c8>)
    6a2e:	429d      	cmp	r5, r3
    6a30:	d100      	bne.n	6a34 <__ieee754_pow+0x40>
    6a32:	e081      	b.n	6b38 <__ieee754_pow+0x144>
    6a34:	2300      	movs	r3, #0
    6a36:	469b      	mov	fp, r3
    6a38:	464b      	mov	r3, r9
    6a3a:	2b00      	cmp	r3, #0
    6a3c:	da00      	bge.n	6a40 <__ieee754_pow+0x4c>
    6a3e:	e07f      	b.n	6b40 <__ieee754_pow+0x14c>
    6a40:	2a00      	cmp	r2, #0
    6a42:	d12c      	bne.n	6a9e <__ieee754_pow+0xaa>
    6a44:	4b5d      	ldr	r3, [pc, #372]	; (6bbc <__ieee754_pow+0x1c8>)
    6a46:	429d      	cmp	r5, r3
    6a48:	d100      	bne.n	6a4c <__ieee754_pow+0x58>
    6a4a:	e097      	b.n	6b7c <__ieee754_pow+0x188>
    6a4c:	4b5c      	ldr	r3, [pc, #368]	; (6bc0 <__ieee754_pow+0x1cc>)
    6a4e:	429d      	cmp	r5, r3
    6a50:	d066      	beq.n	6b20 <__ieee754_pow+0x12c>
    6a52:	2380      	movs	r3, #128	; 0x80
    6a54:	05db      	lsls	r3, r3, #23
    6a56:	459a      	cmp	sl, r3
    6a58:	d100      	bne.n	6a5c <__ieee754_pow+0x68>
    6a5a:	e3b9      	b.n	71d0 <__ieee754_pow+0x7dc>
    6a5c:	4b59      	ldr	r3, [pc, #356]	; (6bc4 <__ieee754_pow+0x1d0>)
    6a5e:	459a      	cmp	sl, r3
    6a60:	d11d      	bne.n	6a9e <__ieee754_pow+0xaa>
    6a62:	464b      	mov	r3, r9
    6a64:	2b00      	cmp	r3, #0
    6a66:	db1a      	blt.n	6a9e <__ieee754_pow+0xaa>
    6a68:	0038      	movs	r0, r7
    6a6a:	0031      	movs	r1, r6
    6a6c:	f000 fcf8 	bl	7460 <__ieee754_sqrt>
    6a70:	e008      	b.n	6a84 <__ieee754_pow+0x90>
    6a72:	2800      	cmp	r0, #0
    6a74:	d00d      	beq.n	6a92 <__ieee754_pow+0x9e>
    6a76:	4b54      	ldr	r3, [pc, #336]	; (6bc8 <__ieee754_pow+0x1d4>)
    6a78:	469c      	mov	ip, r3
    6a7a:	4464      	add	r4, ip
    6a7c:	4327      	orrs	r7, r4
    6a7e:	d10a      	bne.n	6a96 <__ieee754_pow+0xa2>
    6a80:	2000      	movs	r0, #0
    6a82:	494f      	ldr	r1, [pc, #316]	; (6bc0 <__ieee754_pow+0x1cc>)
    6a84:	b011      	add	sp, #68	; 0x44
    6a86:	bc3c      	pop	{r2, r3, r4, r5}
    6a88:	4690      	mov	r8, r2
    6a8a:	4699      	mov	r9, r3
    6a8c:	46a2      	mov	sl, r4
    6a8e:	46ab      	mov	fp, r5
    6a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a92:	42a5      	cmp	r5, r4
    6a94:	ddca      	ble.n	6a2c <__ieee754_pow+0x38>
    6a96:	484d      	ldr	r0, [pc, #308]	; (6bcc <__ieee754_pow+0x1d8>)
    6a98:	f000 ff6e 	bl	7978 <nan>
    6a9c:	e7f2      	b.n	6a84 <__ieee754_pow+0x90>
    6a9e:	0038      	movs	r0, r7
    6aa0:	0031      	movs	r1, r6
    6aa2:	f000 ff59 	bl	7958 <fabs>
    6aa6:	4643      	mov	r3, r8
    6aa8:	2b00      	cmp	r3, #0
    6aaa:	d11d      	bne.n	6ae8 <__ieee754_pow+0xf4>
    6aac:	2c00      	cmp	r4, #0
    6aae:	d004      	beq.n	6aba <__ieee754_pow+0xc6>
    6ab0:	4a43      	ldr	r2, [pc, #268]	; (6bc0 <__ieee754_pow+0x1cc>)
    6ab2:	00b3      	lsls	r3, r6, #2
    6ab4:	089b      	lsrs	r3, r3, #2
    6ab6:	4293      	cmp	r3, r2
    6ab8:	d116      	bne.n	6ae8 <__ieee754_pow+0xf4>
    6aba:	4653      	mov	r3, sl
    6abc:	2b00      	cmp	r3, #0
    6abe:	da00      	bge.n	6ac2 <__ieee754_pow+0xce>
    6ac0:	e3c5      	b.n	724e <__ieee754_pow+0x85a>
    6ac2:	464b      	mov	r3, r9
    6ac4:	2b00      	cmp	r3, #0
    6ac6:	dadd      	bge.n	6a84 <__ieee754_pow+0x90>
    6ac8:	4b3f      	ldr	r3, [pc, #252]	; (6bc8 <__ieee754_pow+0x1d4>)
    6aca:	469c      	mov	ip, r3
    6acc:	465b      	mov	r3, fp
    6ace:	4464      	add	r4, ip
    6ad0:	431c      	orrs	r4, r3
    6ad2:	d101      	bne.n	6ad8 <__ieee754_pow+0xe4>
    6ad4:	f000 fc53 	bl	737e <__ieee754_pow+0x98a>
    6ad8:	465b      	mov	r3, fp
    6ada:	2b01      	cmp	r3, #1
    6adc:	d1d2      	bne.n	6a84 <__ieee754_pow+0x90>
    6ade:	2480      	movs	r4, #128	; 0x80
    6ae0:	0624      	lsls	r4, r4, #24
    6ae2:	190b      	adds	r3, r1, r4
    6ae4:	0019      	movs	r1, r3
    6ae6:	e7cd      	b.n	6a84 <__ieee754_pow+0x90>
    6ae8:	0ff3      	lsrs	r3, r6, #31
    6aea:	3b01      	subs	r3, #1
    6aec:	4698      	mov	r8, r3
    6aee:	465b      	mov	r3, fp
    6af0:	4642      	mov	r2, r8
    6af2:	4313      	orrs	r3, r2
    6af4:	d057      	beq.n	6ba6 <__ieee754_pow+0x1b2>
    6af6:	4b36      	ldr	r3, [pc, #216]	; (6bd0 <__ieee754_pow+0x1dc>)
    6af8:	429d      	cmp	r5, r3
    6afa:	dd77      	ble.n	6bec <__ieee754_pow+0x1f8>
    6afc:	4b35      	ldr	r3, [pc, #212]	; (6bd4 <__ieee754_pow+0x1e0>)
    6afe:	429d      	cmp	r5, r3
    6b00:	dc00      	bgt.n	6b04 <__ieee754_pow+0x110>
    6b02:	e3b1      	b.n	7268 <__ieee754_pow+0x874>
    6b04:	4b34      	ldr	r3, [pc, #208]	; (6bd8 <__ieee754_pow+0x1e4>)
    6b06:	429c      	cmp	r4, r3
    6b08:	dc00      	bgt.n	6b0c <__ieee754_pow+0x118>
    6b0a:	e3a8      	b.n	725e <__ieee754_pow+0x86a>
    6b0c:	4653      	mov	r3, sl
    6b0e:	2b00      	cmp	r3, #0
    6b10:	dd43      	ble.n	6b9a <__ieee754_pow+0x1a6>
    6b12:	4a32      	ldr	r2, [pc, #200]	; (6bdc <__ieee754_pow+0x1e8>)
    6b14:	4b32      	ldr	r3, [pc, #200]	; (6be0 <__ieee754_pow+0x1ec>)
    6b16:	0010      	movs	r0, r2
    6b18:	0019      	movs	r1, r3
    6b1a:	f002 fdc5 	bl	96a8 <__aeabi_dmul>
    6b1e:	e7b1      	b.n	6a84 <__ieee754_pow+0x90>
    6b20:	4653      	mov	r3, sl
    6b22:	0038      	movs	r0, r7
    6b24:	0031      	movs	r1, r6
    6b26:	2b00      	cmp	r3, #0
    6b28:	daac      	bge.n	6a84 <__ieee754_pow+0x90>
    6b2a:	003a      	movs	r2, r7
    6b2c:	0033      	movs	r3, r6
    6b2e:	2000      	movs	r0, #0
    6b30:	4923      	ldr	r1, [pc, #140]	; (6bc0 <__ieee754_pow+0x1cc>)
    6b32:	f002 f985 	bl	8e40 <__aeabi_ddiv>
    6b36:	e7a5      	b.n	6a84 <__ieee754_pow+0x90>
    6b38:	2a00      	cmp	r2, #0
    6b3a:	d100      	bne.n	6b3e <__ieee754_pow+0x14a>
    6b3c:	e77a      	b.n	6a34 <__ieee754_pow+0x40>
    6b3e:	e79a      	b.n	6a76 <__ieee754_pow+0x82>
    6b40:	4b28      	ldr	r3, [pc, #160]	; (6be4 <__ieee754_pow+0x1f0>)
    6b42:	429d      	cmp	r5, r3
    6b44:	dc2c      	bgt.n	6ba0 <__ieee754_pow+0x1ac>
    6b46:	4b24      	ldr	r3, [pc, #144]	; (6bd8 <__ieee754_pow+0x1e4>)
    6b48:	429d      	cmp	r5, r3
    6b4a:	dc00      	bgt.n	6b4e <__ieee754_pow+0x15a>
    6b4c:	e778      	b.n	6a40 <__ieee754_pow+0x4c>
    6b4e:	4926      	ldr	r1, [pc, #152]	; (6be8 <__ieee754_pow+0x1f4>)
    6b50:	152b      	asrs	r3, r5, #20
    6b52:	468c      	mov	ip, r1
    6b54:	4463      	add	r3, ip
    6b56:	2b14      	cmp	r3, #20
    6b58:	dc01      	bgt.n	6b5e <__ieee754_pow+0x16a>
    6b5a:	f000 fbf3 	bl	7344 <__ieee754_pow+0x950>
    6b5e:	2134      	movs	r1, #52	; 0x34
    6b60:	1acb      	subs	r3, r1, r3
    6b62:	9900      	ldr	r1, [sp, #0]
    6b64:	40d9      	lsrs	r1, r3
    6b66:	0008      	movs	r0, r1
    6b68:	4098      	lsls	r0, r3
    6b6a:	4282      	cmp	r2, r0
    6b6c:	d000      	beq.n	6b70 <__ieee754_pow+0x17c>
    6b6e:	e767      	b.n	6a40 <__ieee754_pow+0x4c>
    6b70:	2301      	movs	r3, #1
    6b72:	4019      	ands	r1, r3
    6b74:	3301      	adds	r3, #1
    6b76:	1a5b      	subs	r3, r3, r1
    6b78:	469b      	mov	fp, r3
    6b7a:	e761      	b.n	6a40 <__ieee754_pow+0x4c>
    6b7c:	4b12      	ldr	r3, [pc, #72]	; (6bc8 <__ieee754_pow+0x1d4>)
    6b7e:	18e3      	adds	r3, r4, r3
    6b80:	431f      	orrs	r7, r3
    6b82:	d100      	bne.n	6b86 <__ieee754_pow+0x192>
    6b84:	e77c      	b.n	6a80 <__ieee754_pow+0x8c>
    6b86:	4b14      	ldr	r3, [pc, #80]	; (6bd8 <__ieee754_pow+0x1e4>)
    6b88:	429c      	cmp	r4, r3
    6b8a:	dc00      	bgt.n	6b8e <__ieee754_pow+0x19a>
    6b8c:	e327      	b.n	71de <__ieee754_pow+0x7ea>
    6b8e:	9800      	ldr	r0, [sp, #0]
    6b90:	9901      	ldr	r1, [sp, #4]
    6b92:	4653      	mov	r3, sl
    6b94:	2b00      	cmp	r3, #0
    6b96:	db00      	blt.n	6b9a <__ieee754_pow+0x1a6>
    6b98:	e774      	b.n	6a84 <__ieee754_pow+0x90>
    6b9a:	2000      	movs	r0, #0
    6b9c:	2100      	movs	r1, #0
    6b9e:	e771      	b.n	6a84 <__ieee754_pow+0x90>
    6ba0:	2302      	movs	r3, #2
    6ba2:	469b      	mov	fp, r3
    6ba4:	e74c      	b.n	6a40 <__ieee754_pow+0x4c>
    6ba6:	003a      	movs	r2, r7
    6ba8:	0033      	movs	r3, r6
    6baa:	0038      	movs	r0, r7
    6bac:	0031      	movs	r1, r6
    6bae:	f002 fffb 	bl	9ba8 <__aeabi_dsub>
    6bb2:	0002      	movs	r2, r0
    6bb4:	000b      	movs	r3, r1
    6bb6:	f002 f943 	bl	8e40 <__aeabi_ddiv>
    6bba:	e763      	b.n	6a84 <__ieee754_pow+0x90>
    6bbc:	7ff00000 	.word	0x7ff00000
    6bc0:	3ff00000 	.word	0x3ff00000
    6bc4:	3fe00000 	.word	0x3fe00000
    6bc8:	c0100000 	.word	0xc0100000
    6bcc:	0000c01c 	.word	0x0000c01c
    6bd0:	41e00000 	.word	0x41e00000
    6bd4:	43f00000 	.word	0x43f00000
    6bd8:	3fefffff 	.word	0x3fefffff
    6bdc:	8800759c 	.word	0x8800759c
    6be0:	7e37e43c 	.word	0x7e37e43c
    6be4:	433fffff 	.word	0x433fffff
    6be8:	fffffc01 	.word	0xfffffc01
    6bec:	4be9      	ldr	r3, [pc, #932]	; (6f94 <__ieee754_pow+0x5a0>)
    6bee:	2200      	movs	r2, #0
    6bf0:	429c      	cmp	r4, r3
    6bf2:	dc06      	bgt.n	6c02 <__ieee754_pow+0x20e>
    6bf4:	2200      	movs	r2, #0
    6bf6:	4be8      	ldr	r3, [pc, #928]	; (6f98 <__ieee754_pow+0x5a4>)
    6bf8:	f002 fd56 	bl	96a8 <__aeabi_dmul>
    6bfc:	2235      	movs	r2, #53	; 0x35
    6bfe:	000c      	movs	r4, r1
    6c00:	4252      	negs	r2, r2
    6c02:	4de6      	ldr	r5, [pc, #920]	; (6f9c <__ieee754_pow+0x5a8>)
    6c04:	1523      	asrs	r3, r4, #20
    6c06:	46ac      	mov	ip, r5
    6c08:	4463      	add	r3, ip
    6c0a:	4699      	mov	r9, r3
    6c0c:	0324      	lsls	r4, r4, #12
    6c0e:	4de4      	ldr	r5, [pc, #912]	; (6fa0 <__ieee754_pow+0x5ac>)
    6c10:	4be4      	ldr	r3, [pc, #912]	; (6fa4 <__ieee754_pow+0x5b0>)
    6c12:	0b24      	lsrs	r4, r4, #12
    6c14:	4491      	add	r9, r2
    6c16:	4325      	orrs	r5, r4
    6c18:	429c      	cmp	r4, r3
    6c1a:	dd09      	ble.n	6c30 <__ieee754_pow+0x23c>
    6c1c:	4be2      	ldr	r3, [pc, #904]	; (6fa8 <__ieee754_pow+0x5b4>)
    6c1e:	429c      	cmp	r4, r3
    6c20:	dc00      	bgt.n	6c24 <__ieee754_pow+0x230>
    6c22:	e3b6      	b.n	7392 <__ieee754_pow+0x99e>
    6c24:	2301      	movs	r3, #1
    6c26:	469c      	mov	ip, r3
    6c28:	4be0      	ldr	r3, [pc, #896]	; (6fac <__ieee754_pow+0x5b8>)
    6c2a:	44e1      	add	r9, ip
    6c2c:	469c      	mov	ip, r3
    6c2e:	4465      	add	r5, ip
    6c30:	2300      	movs	r3, #0
    6c32:	2400      	movs	r4, #0
    6c34:	2200      	movs	r2, #0
    6c36:	9308      	str	r3, [sp, #32]
    6c38:	9409      	str	r4, [sp, #36]	; 0x24
    6c3a:	930c      	str	r3, [sp, #48]	; 0x30
    6c3c:	940d      	str	r4, [sp, #52]	; 0x34
    6c3e:	2400      	movs	r4, #0
    6c40:	4bd7      	ldr	r3, [pc, #860]	; (6fa0 <__ieee754_pow+0x5ac>)
    6c42:	9206      	str	r2, [sp, #24]
    6c44:	9307      	str	r3, [sp, #28]
    6c46:	9a06      	ldr	r2, [sp, #24]
    6c48:	9b07      	ldr	r3, [sp, #28]
    6c4a:	0029      	movs	r1, r5
    6c4c:	900a      	str	r0, [sp, #40]	; 0x28
    6c4e:	910b      	str	r1, [sp, #44]	; 0x2c
    6c50:	f002 ffaa 	bl	9ba8 <__aeabi_dsub>
    6c54:	9a06      	ldr	r2, [sp, #24]
    6c56:	9b07      	ldr	r3, [sp, #28]
    6c58:	0006      	movs	r6, r0
    6c5a:	000f      	movs	r7, r1
    6c5c:	980a      	ldr	r0, [sp, #40]	; 0x28
    6c5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6c60:	f001 fdde 	bl	8820 <__aeabi_dadd>
    6c64:	0002      	movs	r2, r0
    6c66:	000b      	movs	r3, r1
    6c68:	2000      	movs	r0, #0
    6c6a:	49cd      	ldr	r1, [pc, #820]	; (6fa0 <__ieee754_pow+0x5ac>)
    6c6c:	f002 f8e8 	bl	8e40 <__aeabi_ddiv>
    6c70:	000a      	movs	r2, r1
    6c72:	0001      	movs	r1, r0
    6c74:	0013      	movs	r3, r2
    6c76:	910e      	str	r1, [sp, #56]	; 0x38
    6c78:	920f      	str	r2, [sp, #60]	; 0x3c
    6c7a:	0002      	movs	r2, r0
    6c7c:	0039      	movs	r1, r7
    6c7e:	0030      	movs	r0, r6
    6c80:	f002 fd12 	bl	96a8 <__aeabi_dmul>
    6c84:	000a      	movs	r2, r1
    6c86:	0001      	movs	r1, r0
    6c88:	2080      	movs	r0, #128	; 0x80
    6c8a:	9104      	str	r1, [sp, #16]
    6c8c:	9205      	str	r2, [sp, #20]
    6c8e:	0013      	movs	r3, r2
    6c90:	2200      	movs	r2, #0
    6c92:	1069      	asrs	r1, r5, #1
    6c94:	2580      	movs	r5, #128	; 0x80
    6c96:	0300      	lsls	r0, r0, #12
    6c98:	4684      	mov	ip, r0
    6c9a:	9202      	str	r2, [sp, #8]
    6c9c:	9303      	str	r3, [sp, #12]
    6c9e:	2200      	movs	r2, #0
    6ca0:	05ad      	lsls	r5, r5, #22
    6ca2:	430d      	orrs	r5, r1
    6ca4:	4465      	add	r5, ip
    6ca6:	192b      	adds	r3, r5, r4
    6ca8:	9802      	ldr	r0, [sp, #8]
    6caa:	9903      	ldr	r1, [sp, #12]
    6cac:	0014      	movs	r4, r2
    6cae:	001d      	movs	r5, r3
    6cb0:	f002 fcfa 	bl	96a8 <__aeabi_dmul>
    6cb4:	0002      	movs	r2, r0
    6cb6:	000b      	movs	r3, r1
    6cb8:	0030      	movs	r0, r6
    6cba:	0039      	movs	r1, r7
    6cbc:	f002 ff74 	bl	9ba8 <__aeabi_dsub>
    6cc0:	9a06      	ldr	r2, [sp, #24]
    6cc2:	9b07      	ldr	r3, [sp, #28]
    6cc4:	0006      	movs	r6, r0
    6cc6:	000f      	movs	r7, r1
    6cc8:	0020      	movs	r0, r4
    6cca:	0029      	movs	r1, r5
    6ccc:	f002 ff6c 	bl	9ba8 <__aeabi_dsub>
    6cd0:	0002      	movs	r2, r0
    6cd2:	000b      	movs	r3, r1
    6cd4:	980a      	ldr	r0, [sp, #40]	; 0x28
    6cd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6cd8:	f002 ff66 	bl	9ba8 <__aeabi_dsub>
    6cdc:	9a02      	ldr	r2, [sp, #8]
    6cde:	9b03      	ldr	r3, [sp, #12]
    6ce0:	f002 fce2 	bl	96a8 <__aeabi_dmul>
    6ce4:	0002      	movs	r2, r0
    6ce6:	000b      	movs	r3, r1
    6ce8:	0030      	movs	r0, r6
    6cea:	0039      	movs	r1, r7
    6cec:	f002 ff5c 	bl	9ba8 <__aeabi_dsub>
    6cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6cf4:	f002 fcd8 	bl	96a8 <__aeabi_dmul>
    6cf8:	9d04      	ldr	r5, [sp, #16]
    6cfa:	9e05      	ldr	r6, [sp, #20]
    6cfc:	9006      	str	r0, [sp, #24]
    6cfe:	9107      	str	r1, [sp, #28]
    6d00:	002a      	movs	r2, r5
    6d02:	0033      	movs	r3, r6
    6d04:	0028      	movs	r0, r5
    6d06:	0031      	movs	r1, r6
    6d08:	f002 fcce 	bl	96a8 <__aeabi_dmul>
    6d0c:	0006      	movs	r6, r0
    6d0e:	000f      	movs	r7, r1
    6d10:	4aa7      	ldr	r2, [pc, #668]	; (6fb0 <__ieee754_pow+0x5bc>)
    6d12:	4ba8      	ldr	r3, [pc, #672]	; (6fb4 <__ieee754_pow+0x5c0>)
    6d14:	f002 fcc8 	bl	96a8 <__aeabi_dmul>
    6d18:	4aa7      	ldr	r2, [pc, #668]	; (6fb8 <__ieee754_pow+0x5c4>)
    6d1a:	4ba8      	ldr	r3, [pc, #672]	; (6fbc <__ieee754_pow+0x5c8>)
    6d1c:	f001 fd80 	bl	8820 <__aeabi_dadd>
    6d20:	0032      	movs	r2, r6
    6d22:	003b      	movs	r3, r7
    6d24:	f002 fcc0 	bl	96a8 <__aeabi_dmul>
    6d28:	4aa5      	ldr	r2, [pc, #660]	; (6fc0 <__ieee754_pow+0x5cc>)
    6d2a:	4ba6      	ldr	r3, [pc, #664]	; (6fc4 <__ieee754_pow+0x5d0>)
    6d2c:	f001 fd78 	bl	8820 <__aeabi_dadd>
    6d30:	0032      	movs	r2, r6
    6d32:	003b      	movs	r3, r7
    6d34:	f002 fcb8 	bl	96a8 <__aeabi_dmul>
    6d38:	4aa3      	ldr	r2, [pc, #652]	; (6fc8 <__ieee754_pow+0x5d4>)
    6d3a:	4ba4      	ldr	r3, [pc, #656]	; (6fcc <__ieee754_pow+0x5d8>)
    6d3c:	f001 fd70 	bl	8820 <__aeabi_dadd>
    6d40:	0032      	movs	r2, r6
    6d42:	003b      	movs	r3, r7
    6d44:	f002 fcb0 	bl	96a8 <__aeabi_dmul>
    6d48:	4aa1      	ldr	r2, [pc, #644]	; (6fd0 <__ieee754_pow+0x5dc>)
    6d4a:	4ba2      	ldr	r3, [pc, #648]	; (6fd4 <__ieee754_pow+0x5e0>)
    6d4c:	f001 fd68 	bl	8820 <__aeabi_dadd>
    6d50:	0032      	movs	r2, r6
    6d52:	003b      	movs	r3, r7
    6d54:	f002 fca8 	bl	96a8 <__aeabi_dmul>
    6d58:	4a9f      	ldr	r2, [pc, #636]	; (6fd8 <__ieee754_pow+0x5e4>)
    6d5a:	4ba0      	ldr	r3, [pc, #640]	; (6fdc <__ieee754_pow+0x5e8>)
    6d5c:	f001 fd60 	bl	8820 <__aeabi_dadd>
    6d60:	0032      	movs	r2, r6
    6d62:	0004      	movs	r4, r0
    6d64:	000d      	movs	r5, r1
    6d66:	003b      	movs	r3, r7
    6d68:	0030      	movs	r0, r6
    6d6a:	0039      	movs	r1, r7
    6d6c:	f002 fc9c 	bl	96a8 <__aeabi_dmul>
    6d70:	0002      	movs	r2, r0
    6d72:	000b      	movs	r3, r1
    6d74:	0020      	movs	r0, r4
    6d76:	0029      	movs	r1, r5
    6d78:	f002 fc96 	bl	96a8 <__aeabi_dmul>
    6d7c:	9e02      	ldr	r6, [sp, #8]
    6d7e:	9f03      	ldr	r7, [sp, #12]
    6d80:	0004      	movs	r4, r0
    6d82:	000d      	movs	r5, r1
    6d84:	9804      	ldr	r0, [sp, #16]
    6d86:	9905      	ldr	r1, [sp, #20]
    6d88:	0032      	movs	r2, r6
    6d8a:	003b      	movs	r3, r7
    6d8c:	f001 fd48 	bl	8820 <__aeabi_dadd>
    6d90:	9a06      	ldr	r2, [sp, #24]
    6d92:	9b07      	ldr	r3, [sp, #28]
    6d94:	f002 fc88 	bl	96a8 <__aeabi_dmul>
    6d98:	0022      	movs	r2, r4
    6d9a:	002b      	movs	r3, r5
    6d9c:	f001 fd40 	bl	8820 <__aeabi_dadd>
    6da0:	0032      	movs	r2, r6
    6da2:	900a      	str	r0, [sp, #40]	; 0x28
    6da4:	910b      	str	r1, [sp, #44]	; 0x2c
    6da6:	003b      	movs	r3, r7
    6da8:	0030      	movs	r0, r6
    6daa:	0039      	movs	r1, r7
    6dac:	9602      	str	r6, [sp, #8]
    6dae:	9703      	str	r7, [sp, #12]
    6db0:	f002 fc7a 	bl	96a8 <__aeabi_dmul>
    6db4:	2200      	movs	r2, #0
    6db6:	4b8a      	ldr	r3, [pc, #552]	; (6fe0 <__ieee754_pow+0x5ec>)
    6db8:	0004      	movs	r4, r0
    6dba:	000d      	movs	r5, r1
    6dbc:	f001 fd30 	bl	8820 <__aeabi_dadd>
    6dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6dc4:	f001 fd2c 	bl	8820 <__aeabi_dadd>
    6dc8:	2600      	movs	r6, #0
    6dca:	000f      	movs	r7, r1
    6dcc:	0032      	movs	r2, r6
    6dce:	000b      	movs	r3, r1
    6dd0:	9802      	ldr	r0, [sp, #8]
    6dd2:	9903      	ldr	r1, [sp, #12]
    6dd4:	f002 fc68 	bl	96a8 <__aeabi_dmul>
    6dd8:	2200      	movs	r2, #0
    6dda:	9002      	str	r0, [sp, #8]
    6ddc:	9103      	str	r1, [sp, #12]
    6dde:	4b80      	ldr	r3, [pc, #512]	; (6fe0 <__ieee754_pow+0x5ec>)
    6de0:	0030      	movs	r0, r6
    6de2:	0039      	movs	r1, r7
    6de4:	f002 fee0 	bl	9ba8 <__aeabi_dsub>
    6de8:	0022      	movs	r2, r4
    6dea:	002b      	movs	r3, r5
    6dec:	f002 fedc 	bl	9ba8 <__aeabi_dsub>
    6df0:	0002      	movs	r2, r0
    6df2:	000b      	movs	r3, r1
    6df4:	980a      	ldr	r0, [sp, #40]	; 0x28
    6df6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6df8:	f002 fed6 	bl	9ba8 <__aeabi_dsub>
    6dfc:	9a04      	ldr	r2, [sp, #16]
    6dfe:	9b05      	ldr	r3, [sp, #20]
    6e00:	f002 fc52 	bl	96a8 <__aeabi_dmul>
    6e04:	0032      	movs	r2, r6
    6e06:	0004      	movs	r4, r0
    6e08:	000d      	movs	r5, r1
    6e0a:	9806      	ldr	r0, [sp, #24]
    6e0c:	9907      	ldr	r1, [sp, #28]
    6e0e:	003b      	movs	r3, r7
    6e10:	f002 fc4a 	bl	96a8 <__aeabi_dmul>
    6e14:	0002      	movs	r2, r0
    6e16:	000b      	movs	r3, r1
    6e18:	0020      	movs	r0, r4
    6e1a:	0029      	movs	r1, r5
    6e1c:	f001 fd00 	bl	8820 <__aeabi_dadd>
    6e20:	0004      	movs	r4, r0
    6e22:	000d      	movs	r5, r1
    6e24:	0002      	movs	r2, r0
    6e26:	000b      	movs	r3, r1
    6e28:	9802      	ldr	r0, [sp, #8]
    6e2a:	9903      	ldr	r1, [sp, #12]
    6e2c:	f001 fcf8 	bl	8820 <__aeabi_dadd>
    6e30:	2600      	movs	r6, #0
    6e32:	22e0      	movs	r2, #224	; 0xe0
    6e34:	4b6b      	ldr	r3, [pc, #428]	; (6fe4 <__ieee754_pow+0x5f0>)
    6e36:	0612      	lsls	r2, r2, #24
    6e38:	0030      	movs	r0, r6
    6e3a:	000f      	movs	r7, r1
    6e3c:	f002 fc34 	bl	96a8 <__aeabi_dmul>
    6e40:	9a02      	ldr	r2, [sp, #8]
    6e42:	9b03      	ldr	r3, [sp, #12]
    6e44:	9004      	str	r0, [sp, #16]
    6e46:	9105      	str	r1, [sp, #20]
    6e48:	0030      	movs	r0, r6
    6e4a:	0039      	movs	r1, r7
    6e4c:	f002 feac 	bl	9ba8 <__aeabi_dsub>
    6e50:	0002      	movs	r2, r0
    6e52:	000b      	movs	r3, r1
    6e54:	0020      	movs	r0, r4
    6e56:	0029      	movs	r1, r5
    6e58:	f002 fea6 	bl	9ba8 <__aeabi_dsub>
    6e5c:	4a62      	ldr	r2, [pc, #392]	; (6fe8 <__ieee754_pow+0x5f4>)
    6e5e:	4b61      	ldr	r3, [pc, #388]	; (6fe4 <__ieee754_pow+0x5f0>)
    6e60:	f002 fc22 	bl	96a8 <__aeabi_dmul>
    6e64:	4a61      	ldr	r2, [pc, #388]	; (6fec <__ieee754_pow+0x5f8>)
    6e66:	0004      	movs	r4, r0
    6e68:	000d      	movs	r5, r1
    6e6a:	4b61      	ldr	r3, [pc, #388]	; (6ff0 <__ieee754_pow+0x5fc>)
    6e6c:	0030      	movs	r0, r6
    6e6e:	0039      	movs	r1, r7
    6e70:	f002 fc1a 	bl	96a8 <__aeabi_dmul>
    6e74:	0002      	movs	r2, r0
    6e76:	000b      	movs	r3, r1
    6e78:	0020      	movs	r0, r4
    6e7a:	0029      	movs	r1, r5
    6e7c:	f001 fcd0 	bl	8820 <__aeabi_dadd>
    6e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6e84:	f001 fccc 	bl	8820 <__aeabi_dadd>
    6e88:	0006      	movs	r6, r0
    6e8a:	4648      	mov	r0, r9
    6e8c:	000f      	movs	r7, r1
    6e8e:	f003 f9f5 	bl	a27c <__aeabi_i2d>
    6e92:	0004      	movs	r4, r0
    6e94:	000d      	movs	r5, r1
    6e96:	9804      	ldr	r0, [sp, #16]
    6e98:	9905      	ldr	r1, [sp, #20]
    6e9a:	0032      	movs	r2, r6
    6e9c:	003b      	movs	r3, r7
    6e9e:	f001 fcbf 	bl	8820 <__aeabi_dadd>
    6ea2:	9a08      	ldr	r2, [sp, #32]
    6ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6ea6:	f001 fcbb 	bl	8820 <__aeabi_dadd>
    6eaa:	0022      	movs	r2, r4
    6eac:	002b      	movs	r3, r5
    6eae:	f001 fcb7 	bl	8820 <__aeabi_dadd>
    6eb2:	2000      	movs	r0, #0
    6eb4:	0022      	movs	r2, r4
    6eb6:	002b      	movs	r3, r5
    6eb8:	9002      	str	r0, [sp, #8]
    6eba:	9103      	str	r1, [sp, #12]
    6ebc:	f002 fe74 	bl	9ba8 <__aeabi_dsub>
    6ec0:	9a08      	ldr	r2, [sp, #32]
    6ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6ec4:	f002 fe70 	bl	9ba8 <__aeabi_dsub>
    6ec8:	9a04      	ldr	r2, [sp, #16]
    6eca:	9b05      	ldr	r3, [sp, #20]
    6ecc:	f002 fe6c 	bl	9ba8 <__aeabi_dsub>
    6ed0:	0002      	movs	r2, r0
    6ed2:	000b      	movs	r3, r1
    6ed4:	0030      	movs	r0, r6
    6ed6:	0039      	movs	r1, r7
    6ed8:	f002 fe66 	bl	9ba8 <__aeabi_dsub>
    6edc:	9004      	str	r0, [sp, #16]
    6ede:	9105      	str	r1, [sp, #20]
    6ee0:	465b      	mov	r3, fp
    6ee2:	4642      	mov	r2, r8
    6ee4:	3b01      	subs	r3, #1
    6ee6:	4313      	orrs	r3, r2
    6ee8:	d100      	bne.n	6eec <__ieee754_pow+0x4f8>
    6eea:	e1ab      	b.n	7244 <__ieee754_pow+0x850>
    6eec:	2300      	movs	r3, #0
    6eee:	4c2c      	ldr	r4, [pc, #176]	; (6fa0 <__ieee754_pow+0x5ac>)
    6ef0:	9306      	str	r3, [sp, #24]
    6ef2:	9407      	str	r4, [sp, #28]
    6ef4:	9800      	ldr	r0, [sp, #0]
    6ef6:	9901      	ldr	r1, [sp, #4]
    6ef8:	2600      	movs	r6, #0
    6efa:	000b      	movs	r3, r1
    6efc:	0032      	movs	r2, r6
    6efe:	000f      	movs	r7, r1
    6f00:	f002 fe52 	bl	9ba8 <__aeabi_dsub>
    6f04:	9a02      	ldr	r2, [sp, #8]
    6f06:	9b03      	ldr	r3, [sp, #12]
    6f08:	f002 fbce 	bl	96a8 <__aeabi_dmul>
    6f0c:	9a00      	ldr	r2, [sp, #0]
    6f0e:	9b01      	ldr	r3, [sp, #4]
    6f10:	0004      	movs	r4, r0
    6f12:	000d      	movs	r5, r1
    6f14:	9804      	ldr	r0, [sp, #16]
    6f16:	9905      	ldr	r1, [sp, #20]
    6f18:	f002 fbc6 	bl	96a8 <__aeabi_dmul>
    6f1c:	0002      	movs	r2, r0
    6f1e:	000b      	movs	r3, r1
    6f20:	0020      	movs	r0, r4
    6f22:	0029      	movs	r1, r5
    6f24:	f001 fc7c 	bl	8820 <__aeabi_dadd>
    6f28:	0004      	movs	r4, r0
    6f2a:	000d      	movs	r5, r1
    6f2c:	9802      	ldr	r0, [sp, #8]
    6f2e:	9903      	ldr	r1, [sp, #12]
    6f30:	0032      	movs	r2, r6
    6f32:	003b      	movs	r3, r7
    6f34:	9400      	str	r4, [sp, #0]
    6f36:	9501      	str	r5, [sp, #4]
    6f38:	f002 fbb6 	bl	96a8 <__aeabi_dmul>
    6f3c:	0002      	movs	r2, r0
    6f3e:	000b      	movs	r3, r1
    6f40:	0006      	movs	r6, r0
    6f42:	000f      	movs	r7, r1
    6f44:	0020      	movs	r0, r4
    6f46:	0029      	movs	r1, r5
    6f48:	f001 fc6a 	bl	8820 <__aeabi_dadd>
    6f4c:	4b29      	ldr	r3, [pc, #164]	; (6ff4 <__ieee754_pow+0x600>)
    6f4e:	0004      	movs	r4, r0
    6f50:	000d      	movs	r5, r1
    6f52:	0002      	movs	r2, r0
    6f54:	468b      	mov	fp, r1
    6f56:	4299      	cmp	r1, r3
    6f58:	dc00      	bgt.n	6f5c <__ieee754_pow+0x568>
    6f5a:	e14f      	b.n	71fc <__ieee754_pow+0x808>
    6f5c:	4b26      	ldr	r3, [pc, #152]	; (6ff8 <__ieee754_pow+0x604>)
    6f5e:	18cb      	adds	r3, r1, r3
    6f60:	4303      	orrs	r3, r0
    6f62:	d000      	beq.n	6f66 <__ieee754_pow+0x572>
    6f64:	e1e2      	b.n	732c <__ieee754_pow+0x938>
    6f66:	9800      	ldr	r0, [sp, #0]
    6f68:	9901      	ldr	r1, [sp, #4]
    6f6a:	4a24      	ldr	r2, [pc, #144]	; (6ffc <__ieee754_pow+0x608>)
    6f6c:	4b24      	ldr	r3, [pc, #144]	; (7000 <__ieee754_pow+0x60c>)
    6f6e:	f001 fc57 	bl	8820 <__aeabi_dadd>
    6f72:	0032      	movs	r2, r6
    6f74:	9002      	str	r0, [sp, #8]
    6f76:	9103      	str	r1, [sp, #12]
    6f78:	003b      	movs	r3, r7
    6f7a:	0020      	movs	r0, r4
    6f7c:	0029      	movs	r1, r5
    6f7e:	f002 fe13 	bl	9ba8 <__aeabi_dsub>
    6f82:	0002      	movs	r2, r0
    6f84:	000b      	movs	r3, r1
    6f86:	9802      	ldr	r0, [sp, #8]
    6f88:	9903      	ldr	r1, [sp, #12]
    6f8a:	f000 ffad 	bl	7ee8 <__aeabi_dcmpgt>
    6f8e:	46aa      	mov	sl, r5
    6f90:	e038      	b.n	7004 <__ieee754_pow+0x610>
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	000fffff 	.word	0x000fffff
    6f98:	43400000 	.word	0x43400000
    6f9c:	fffffc01 	.word	0xfffffc01
    6fa0:	3ff00000 	.word	0x3ff00000
    6fa4:	0003988e 	.word	0x0003988e
    6fa8:	000bb679 	.word	0x000bb679
    6fac:	fff00000 	.word	0xfff00000
    6fb0:	4a454eef 	.word	0x4a454eef
    6fb4:	3fca7e28 	.word	0x3fca7e28
    6fb8:	93c9db65 	.word	0x93c9db65
    6fbc:	3fcd864a 	.word	0x3fcd864a
    6fc0:	a91d4101 	.word	0xa91d4101
    6fc4:	3fd17460 	.word	0x3fd17460
    6fc8:	518f264d 	.word	0x518f264d
    6fcc:	3fd55555 	.word	0x3fd55555
    6fd0:	db6fabff 	.word	0xdb6fabff
    6fd4:	3fdb6db6 	.word	0x3fdb6db6
    6fd8:	33333303 	.word	0x33333303
    6fdc:	3fe33333 	.word	0x3fe33333
    6fe0:	40080000 	.word	0x40080000
    6fe4:	3feec709 	.word	0x3feec709
    6fe8:	dc3a03fd 	.word	0xdc3a03fd
    6fec:	145b01f5 	.word	0x145b01f5
    6ff0:	be3e2fe0 	.word	0xbe3e2fe0
    6ff4:	408fffff 	.word	0x408fffff
    6ff8:	bf700000 	.word	0xbf700000
    6ffc:	652b82fe 	.word	0x652b82fe
    7000:	3c971547 	.word	0x3c971547
    7004:	2800      	cmp	r0, #0
    7006:	d000      	beq.n	700a <__ieee754_pow+0x616>
    7008:	e190      	b.n	732c <__ieee754_pow+0x938>
    700a:	4aec      	ldr	r2, [pc, #944]	; (73bc <__ieee754_pow+0x9c8>)
    700c:	4653      	mov	r3, sl
    700e:	4694      	mov	ip, r2
    7010:	2280      	movs	r2, #128	; 0x80
    7012:	0352      	lsls	r2, r2, #13
    7014:	0011      	movs	r1, r2
    7016:	151b      	asrs	r3, r3, #20
    7018:	4463      	add	r3, ip
    701a:	4119      	asrs	r1, r3
    701c:	000b      	movs	r3, r1
    701e:	4690      	mov	r8, r2
    7020:	4ae7      	ldr	r2, [pc, #924]	; (73c0 <__ieee754_pow+0x9cc>)
    7022:	445b      	add	r3, fp
    7024:	4694      	mov	ip, r2
    7026:	005c      	lsls	r4, r3, #1
    7028:	0d64      	lsrs	r4, r4, #21
    702a:	4de6      	ldr	r5, [pc, #920]	; (73c4 <__ieee754_pow+0x9d0>)
    702c:	4464      	add	r4, ip
    702e:	4125      	asrs	r5, r4
    7030:	001a      	movs	r2, r3
    7032:	43aa      	bics	r2, r5
    7034:	0011      	movs	r1, r2
    7036:	4642      	mov	r2, r8
    7038:	031b      	lsls	r3, r3, #12
    703a:	0b1b      	lsrs	r3, r3, #12
    703c:	4313      	orrs	r3, r2
    703e:	2214      	movs	r2, #20
    7040:	1b14      	subs	r4, r2, r4
    7042:	4123      	asrs	r3, r4
    7044:	4699      	mov	r9, r3
    7046:	465b      	mov	r3, fp
    7048:	2000      	movs	r0, #0
    704a:	2b00      	cmp	r3, #0
    704c:	da00      	bge.n	7050 <__ieee754_pow+0x65c>
    704e:	e1b0      	b.n	73b2 <__ieee754_pow+0x9be>
    7050:	0002      	movs	r2, r0
    7052:	000b      	movs	r3, r1
    7054:	0030      	movs	r0, r6
    7056:	0039      	movs	r1, r7
    7058:	f002 fda6 	bl	9ba8 <__aeabi_dsub>
    705c:	000b      	movs	r3, r1
    705e:	0002      	movs	r2, r0
    7060:	0006      	movs	r6, r0
    7062:	000f      	movs	r7, r1
    7064:	9800      	ldr	r0, [sp, #0]
    7066:	9901      	ldr	r1, [sp, #4]
    7068:	f001 fbda 	bl	8820 <__aeabi_dadd>
    706c:	464b      	mov	r3, r9
    706e:	051b      	lsls	r3, r3, #20
    7070:	000d      	movs	r5, r1
    7072:	4698      	mov	r8, r3
    7074:	2400      	movs	r4, #0
    7076:	2200      	movs	r2, #0
    7078:	4bd3      	ldr	r3, [pc, #844]	; (73c8 <__ieee754_pow+0x9d4>)
    707a:	0020      	movs	r0, r4
    707c:	0029      	movs	r1, r5
    707e:	f002 fb13 	bl	96a8 <__aeabi_dmul>
    7082:	0032      	movs	r2, r6
    7084:	9002      	str	r0, [sp, #8]
    7086:	9103      	str	r1, [sp, #12]
    7088:	003b      	movs	r3, r7
    708a:	0020      	movs	r0, r4
    708c:	0029      	movs	r1, r5
    708e:	f002 fd8b 	bl	9ba8 <__aeabi_dsub>
    7092:	0002      	movs	r2, r0
    7094:	000b      	movs	r3, r1
    7096:	9800      	ldr	r0, [sp, #0]
    7098:	9901      	ldr	r1, [sp, #4]
    709a:	f002 fd85 	bl	9ba8 <__aeabi_dsub>
    709e:	4acb      	ldr	r2, [pc, #812]	; (73cc <__ieee754_pow+0x9d8>)
    70a0:	4bcb      	ldr	r3, [pc, #812]	; (73d0 <__ieee754_pow+0x9dc>)
    70a2:	f002 fb01 	bl	96a8 <__aeabi_dmul>
    70a6:	4acb      	ldr	r2, [pc, #812]	; (73d4 <__ieee754_pow+0x9e0>)
    70a8:	0006      	movs	r6, r0
    70aa:	000f      	movs	r7, r1
    70ac:	4bca      	ldr	r3, [pc, #808]	; (73d8 <__ieee754_pow+0x9e4>)
    70ae:	0020      	movs	r0, r4
    70b0:	0029      	movs	r1, r5
    70b2:	f002 faf9 	bl	96a8 <__aeabi_dmul>
    70b6:	0002      	movs	r2, r0
    70b8:	000b      	movs	r3, r1
    70ba:	0030      	movs	r0, r6
    70bc:	0039      	movs	r1, r7
    70be:	f001 fbaf 	bl	8820 <__aeabi_dadd>
    70c2:	0004      	movs	r4, r0
    70c4:	000d      	movs	r5, r1
    70c6:	0002      	movs	r2, r0
    70c8:	000b      	movs	r3, r1
    70ca:	9802      	ldr	r0, [sp, #8]
    70cc:	9903      	ldr	r1, [sp, #12]
    70ce:	f001 fba7 	bl	8820 <__aeabi_dadd>
    70d2:	9a02      	ldr	r2, [sp, #8]
    70d4:	9b03      	ldr	r3, [sp, #12]
    70d6:	0006      	movs	r6, r0
    70d8:	000f      	movs	r7, r1
    70da:	f002 fd65 	bl	9ba8 <__aeabi_dsub>
    70de:	0002      	movs	r2, r0
    70e0:	000b      	movs	r3, r1
    70e2:	0020      	movs	r0, r4
    70e4:	0029      	movs	r1, r5
    70e6:	f002 fd5f 	bl	9ba8 <__aeabi_dsub>
    70ea:	0032      	movs	r2, r6
    70ec:	9000      	str	r0, [sp, #0]
    70ee:	9101      	str	r1, [sp, #4]
    70f0:	003b      	movs	r3, r7
    70f2:	0030      	movs	r0, r6
    70f4:	0039      	movs	r1, r7
    70f6:	f002 fad7 	bl	96a8 <__aeabi_dmul>
    70fa:	0004      	movs	r4, r0
    70fc:	000d      	movs	r5, r1
    70fe:	4ab7      	ldr	r2, [pc, #732]	; (73dc <__ieee754_pow+0x9e8>)
    7100:	4bb7      	ldr	r3, [pc, #732]	; (73e0 <__ieee754_pow+0x9ec>)
    7102:	f002 fad1 	bl	96a8 <__aeabi_dmul>
    7106:	4ab7      	ldr	r2, [pc, #732]	; (73e4 <__ieee754_pow+0x9f0>)
    7108:	4bb7      	ldr	r3, [pc, #732]	; (73e8 <__ieee754_pow+0x9f4>)
    710a:	f002 fd4d 	bl	9ba8 <__aeabi_dsub>
    710e:	0022      	movs	r2, r4
    7110:	002b      	movs	r3, r5
    7112:	f002 fac9 	bl	96a8 <__aeabi_dmul>
    7116:	4ab5      	ldr	r2, [pc, #724]	; (73ec <__ieee754_pow+0x9f8>)
    7118:	4bb5      	ldr	r3, [pc, #724]	; (73f0 <__ieee754_pow+0x9fc>)
    711a:	f001 fb81 	bl	8820 <__aeabi_dadd>
    711e:	0022      	movs	r2, r4
    7120:	002b      	movs	r3, r5
    7122:	f002 fac1 	bl	96a8 <__aeabi_dmul>
    7126:	4ab3      	ldr	r2, [pc, #716]	; (73f4 <__ieee754_pow+0xa00>)
    7128:	4bb3      	ldr	r3, [pc, #716]	; (73f8 <__ieee754_pow+0xa04>)
    712a:	f002 fd3d 	bl	9ba8 <__aeabi_dsub>
    712e:	0022      	movs	r2, r4
    7130:	002b      	movs	r3, r5
    7132:	f002 fab9 	bl	96a8 <__aeabi_dmul>
    7136:	4ab1      	ldr	r2, [pc, #708]	; (73fc <__ieee754_pow+0xa08>)
    7138:	4bb1      	ldr	r3, [pc, #708]	; (7400 <__ieee754_pow+0xa0c>)
    713a:	f001 fb71 	bl	8820 <__aeabi_dadd>
    713e:	0022      	movs	r2, r4
    7140:	002b      	movs	r3, r5
    7142:	f002 fab1 	bl	96a8 <__aeabi_dmul>
    7146:	0002      	movs	r2, r0
    7148:	000b      	movs	r3, r1
    714a:	0030      	movs	r0, r6
    714c:	0039      	movs	r1, r7
    714e:	f002 fd2b 	bl	9ba8 <__aeabi_dsub>
    7152:	0004      	movs	r4, r0
    7154:	000d      	movs	r5, r1
    7156:	0002      	movs	r2, r0
    7158:	000b      	movs	r3, r1
    715a:	0030      	movs	r0, r6
    715c:	0039      	movs	r1, r7
    715e:	f002 faa3 	bl	96a8 <__aeabi_dmul>
    7162:	2380      	movs	r3, #128	; 0x80
    7164:	9002      	str	r0, [sp, #8]
    7166:	9103      	str	r1, [sp, #12]
    7168:	2200      	movs	r2, #0
    716a:	05db      	lsls	r3, r3, #23
    716c:	0020      	movs	r0, r4
    716e:	0029      	movs	r1, r5
    7170:	f002 fd1a 	bl	9ba8 <__aeabi_dsub>
    7174:	0002      	movs	r2, r0
    7176:	000b      	movs	r3, r1
    7178:	9802      	ldr	r0, [sp, #8]
    717a:	9903      	ldr	r1, [sp, #12]
    717c:	f001 fe60 	bl	8e40 <__aeabi_ddiv>
    7180:	9a00      	ldr	r2, [sp, #0]
    7182:	9b01      	ldr	r3, [sp, #4]
    7184:	0004      	movs	r4, r0
    7186:	000d      	movs	r5, r1
    7188:	0030      	movs	r0, r6
    718a:	0039      	movs	r1, r7
    718c:	f002 fa8c 	bl	96a8 <__aeabi_dmul>
    7190:	9a00      	ldr	r2, [sp, #0]
    7192:	9b01      	ldr	r3, [sp, #4]
    7194:	f001 fb44 	bl	8820 <__aeabi_dadd>
    7198:	0002      	movs	r2, r0
    719a:	000b      	movs	r3, r1
    719c:	0020      	movs	r0, r4
    719e:	0029      	movs	r1, r5
    71a0:	f002 fd02 	bl	9ba8 <__aeabi_dsub>
    71a4:	0032      	movs	r2, r6
    71a6:	003b      	movs	r3, r7
    71a8:	f002 fcfe 	bl	9ba8 <__aeabi_dsub>
    71ac:	0002      	movs	r2, r0
    71ae:	000b      	movs	r3, r1
    71b0:	2000      	movs	r0, #0
    71b2:	4994      	ldr	r1, [pc, #592]	; (7404 <__ieee754_pow+0xa10>)
    71b4:	f002 fcf8 	bl	9ba8 <__aeabi_dsub>
    71b8:	4643      	mov	r3, r8
    71ba:	185b      	adds	r3, r3, r1
    71bc:	151a      	asrs	r2, r3, #20
    71be:	2a00      	cmp	r2, #0
    71c0:	dc00      	bgt.n	71c4 <__ieee754_pow+0x7d0>
    71c2:	e149      	b.n	7458 <__ieee754_pow+0xa64>
    71c4:	0019      	movs	r1, r3
    71c6:	9a06      	ldr	r2, [sp, #24]
    71c8:	9b07      	ldr	r3, [sp, #28]
    71ca:	f002 fa6d 	bl	96a8 <__aeabi_dmul>
    71ce:	e459      	b.n	6a84 <__ieee754_pow+0x90>
    71d0:	003a      	movs	r2, r7
    71d2:	0033      	movs	r3, r6
    71d4:	0038      	movs	r0, r7
    71d6:	0031      	movs	r1, r6
    71d8:	f002 fa66 	bl	96a8 <__aeabi_dmul>
    71dc:	e452      	b.n	6a84 <__ieee754_pow+0x90>
    71de:	4653      	mov	r3, sl
    71e0:	2b00      	cmp	r3, #0
    71e2:	db00      	blt.n	71e6 <__ieee754_pow+0x7f2>
    71e4:	e4d9      	b.n	6b9a <__ieee754_pow+0x1a6>
    71e6:	9c00      	ldr	r4, [sp, #0]
    71e8:	9d01      	ldr	r5, [sp, #4]
    71ea:	2280      	movs	r2, #128	; 0x80
    71ec:	0612      	lsls	r2, r2, #24
    71ee:	002b      	movs	r3, r5
    71f0:	4694      	mov	ip, r2
    71f2:	4463      	add	r3, ip
    71f4:	0020      	movs	r0, r4
    71f6:	0019      	movs	r1, r3
    71f8:	f7ff fc44 	bl	6a84 <__ieee754_pow+0x90>
    71fc:	004b      	lsls	r3, r1, #1
    71fe:	085b      	lsrs	r3, r3, #1
    7200:	469a      	mov	sl, r3
    7202:	4b81      	ldr	r3, [pc, #516]	; (7408 <__ieee754_pow+0xa14>)
    7204:	459a      	cmp	sl, r3
    7206:	dc00      	bgt.n	720a <__ieee754_pow+0x816>
    7208:	e0b1      	b.n	736e <__ieee754_pow+0x97a>
    720a:	4b80      	ldr	r3, [pc, #512]	; (740c <__ieee754_pow+0xa18>)
    720c:	445b      	add	r3, fp
    720e:	431a      	orrs	r2, r3
    7210:	d10c      	bne.n	722c <__ieee754_pow+0x838>
    7212:	0032      	movs	r2, r6
    7214:	003b      	movs	r3, r7
    7216:	f002 fcc7 	bl	9ba8 <__aeabi_dsub>
    721a:	0002      	movs	r2, r0
    721c:	000b      	movs	r3, r1
    721e:	9800      	ldr	r0, [sp, #0]
    7220:	9901      	ldr	r1, [sp, #4]
    7222:	f000 fe57 	bl	7ed4 <__aeabi_dcmple>
    7226:	2800      	cmp	r0, #0
    7228:	d100      	bne.n	722c <__ieee754_pow+0x838>
    722a:	e6ee      	b.n	700a <__ieee754_pow+0x616>
    722c:	9806      	ldr	r0, [sp, #24]
    722e:	9907      	ldr	r1, [sp, #28]
    7230:	4a77      	ldr	r2, [pc, #476]	; (7410 <__ieee754_pow+0xa1c>)
    7232:	4b78      	ldr	r3, [pc, #480]	; (7414 <__ieee754_pow+0xa20>)
    7234:	f002 fa38 	bl	96a8 <__aeabi_dmul>
    7238:	4a75      	ldr	r2, [pc, #468]	; (7410 <__ieee754_pow+0xa1c>)
    723a:	4b76      	ldr	r3, [pc, #472]	; (7414 <__ieee754_pow+0xa20>)
    723c:	f002 fa34 	bl	96a8 <__aeabi_dmul>
    7240:	f7ff fc20 	bl	6a84 <__ieee754_pow+0x90>
    7244:	2300      	movs	r3, #0
    7246:	4c74      	ldr	r4, [pc, #464]	; (7418 <__ieee754_pow+0xa24>)
    7248:	9306      	str	r3, [sp, #24]
    724a:	9407      	str	r4, [sp, #28]
    724c:	e652      	b.n	6ef4 <__ieee754_pow+0x500>
    724e:	0002      	movs	r2, r0
    7250:	000b      	movs	r3, r1
    7252:	2000      	movs	r0, #0
    7254:	496b      	ldr	r1, [pc, #428]	; (7404 <__ieee754_pow+0xa10>)
    7256:	f001 fdf3 	bl	8e40 <__aeabi_ddiv>
    725a:	f7ff fc32 	bl	6ac2 <__ieee754_pow+0xce>
    725e:	4653      	mov	r3, sl
    7260:	2b00      	cmp	r3, #0
    7262:	db00      	blt.n	7266 <__ieee754_pow+0x872>
    7264:	e499      	b.n	6b9a <__ieee754_pow+0x1a6>
    7266:	e454      	b.n	6b12 <__ieee754_pow+0x11e>
    7268:	4b6c      	ldr	r3, [pc, #432]	; (741c <__ieee754_pow+0xa28>)
    726a:	429c      	cmp	r4, r3
    726c:	ddf7      	ble.n	725e <__ieee754_pow+0x86a>
    726e:	4b65      	ldr	r3, [pc, #404]	; (7404 <__ieee754_pow+0xa10>)
    7270:	429c      	cmp	r4, r3
    7272:	dd00      	ble.n	7276 <__ieee754_pow+0x882>
    7274:	e44a      	b.n	6b0c <__ieee754_pow+0x118>
    7276:	2200      	movs	r2, #0
    7278:	4b62      	ldr	r3, [pc, #392]	; (7404 <__ieee754_pow+0xa10>)
    727a:	f002 fc95 	bl	9ba8 <__aeabi_dsub>
    727e:	22c0      	movs	r2, #192	; 0xc0
    7280:	4b67      	ldr	r3, [pc, #412]	; (7420 <__ieee754_pow+0xa2c>)
    7282:	05d2      	lsls	r2, r2, #23
    7284:	0004      	movs	r4, r0
    7286:	000d      	movs	r5, r1
    7288:	f002 fa0e 	bl	96a8 <__aeabi_dmul>
    728c:	4a65      	ldr	r2, [pc, #404]	; (7424 <__ieee754_pow+0xa30>)
    728e:	0006      	movs	r6, r0
    7290:	000f      	movs	r7, r1
    7292:	4b65      	ldr	r3, [pc, #404]	; (7428 <__ieee754_pow+0xa34>)
    7294:	0020      	movs	r0, r4
    7296:	0029      	movs	r1, r5
    7298:	f002 fa06 	bl	96a8 <__aeabi_dmul>
    729c:	2200      	movs	r2, #0
    729e:	9002      	str	r0, [sp, #8]
    72a0:	9103      	str	r1, [sp, #12]
    72a2:	4b62      	ldr	r3, [pc, #392]	; (742c <__ieee754_pow+0xa38>)
    72a4:	0020      	movs	r0, r4
    72a6:	0029      	movs	r1, r5
    72a8:	f002 f9fe 	bl	96a8 <__aeabi_dmul>
    72ac:	0002      	movs	r2, r0
    72ae:	000b      	movs	r3, r1
    72b0:	485f      	ldr	r0, [pc, #380]	; (7430 <__ieee754_pow+0xa3c>)
    72b2:	4960      	ldr	r1, [pc, #384]	; (7434 <__ieee754_pow+0xa40>)
    72b4:	f002 fc78 	bl	9ba8 <__aeabi_dsub>
    72b8:	0022      	movs	r2, r4
    72ba:	002b      	movs	r3, r5
    72bc:	f002 f9f4 	bl	96a8 <__aeabi_dmul>
    72c0:	0002      	movs	r2, r0
    72c2:	000b      	movs	r3, r1
    72c4:	2000      	movs	r0, #0
    72c6:	495c      	ldr	r1, [pc, #368]	; (7438 <__ieee754_pow+0xa44>)
    72c8:	f002 fc6e 	bl	9ba8 <__aeabi_dsub>
    72cc:	0022      	movs	r2, r4
    72ce:	9004      	str	r0, [sp, #16]
    72d0:	9105      	str	r1, [sp, #20]
    72d2:	002b      	movs	r3, r5
    72d4:	0020      	movs	r0, r4
    72d6:	0029      	movs	r1, r5
    72d8:	f002 f9e6 	bl	96a8 <__aeabi_dmul>
    72dc:	0002      	movs	r2, r0
    72de:	000b      	movs	r3, r1
    72e0:	9804      	ldr	r0, [sp, #16]
    72e2:	9905      	ldr	r1, [sp, #20]
    72e4:	f002 f9e0 	bl	96a8 <__aeabi_dmul>
    72e8:	4a54      	ldr	r2, [pc, #336]	; (743c <__ieee754_pow+0xa48>)
    72ea:	4b4d      	ldr	r3, [pc, #308]	; (7420 <__ieee754_pow+0xa2c>)
    72ec:	f002 f9dc 	bl	96a8 <__aeabi_dmul>
    72f0:	0002      	movs	r2, r0
    72f2:	000b      	movs	r3, r1
    72f4:	9802      	ldr	r0, [sp, #8]
    72f6:	9903      	ldr	r1, [sp, #12]
    72f8:	f002 fc56 	bl	9ba8 <__aeabi_dsub>
    72fc:	0002      	movs	r2, r0
    72fe:	000b      	movs	r3, r1
    7300:	0004      	movs	r4, r0
    7302:	000d      	movs	r5, r1
    7304:	0030      	movs	r0, r6
    7306:	0039      	movs	r1, r7
    7308:	f001 fa8a 	bl	8820 <__aeabi_dadd>
    730c:	2000      	movs	r0, #0
    730e:	0032      	movs	r2, r6
    7310:	003b      	movs	r3, r7
    7312:	9002      	str	r0, [sp, #8]
    7314:	9103      	str	r1, [sp, #12]
    7316:	f002 fc47 	bl	9ba8 <__aeabi_dsub>
    731a:	0002      	movs	r2, r0
    731c:	000b      	movs	r3, r1
    731e:	0020      	movs	r0, r4
    7320:	0029      	movs	r1, r5
    7322:	f002 fc41 	bl	9ba8 <__aeabi_dsub>
    7326:	9004      	str	r0, [sp, #16]
    7328:	9105      	str	r1, [sp, #20]
    732a:	e5d9      	b.n	6ee0 <__ieee754_pow+0x4ec>
    732c:	4a44      	ldr	r2, [pc, #272]	; (7440 <__ieee754_pow+0xa4c>)
    732e:	4b45      	ldr	r3, [pc, #276]	; (7444 <__ieee754_pow+0xa50>)
    7330:	9806      	ldr	r0, [sp, #24]
    7332:	9907      	ldr	r1, [sp, #28]
    7334:	f002 f9b8 	bl	96a8 <__aeabi_dmul>
    7338:	4a41      	ldr	r2, [pc, #260]	; (7440 <__ieee754_pow+0xa4c>)
    733a:	4b42      	ldr	r3, [pc, #264]	; (7444 <__ieee754_pow+0xa50>)
    733c:	f002 f9b4 	bl	96a8 <__aeabi_dmul>
    7340:	f7ff fba0 	bl	6a84 <__ieee754_pow+0x90>
    7344:	2a00      	cmp	r2, #0
    7346:	d001      	beq.n	734c <__ieee754_pow+0x958>
    7348:	f7ff fba9 	bl	6a9e <__ieee754_pow+0xaa>
    734c:	3214      	adds	r2, #20
    734e:	1ad3      	subs	r3, r2, r3
    7350:	002a      	movs	r2, r5
    7352:	411a      	asrs	r2, r3
    7354:	0011      	movs	r1, r2
    7356:	4099      	lsls	r1, r3
    7358:	428d      	cmp	r5, r1
    735a:	d001      	beq.n	7360 <__ieee754_pow+0x96c>
    735c:	f7ff fb76 	bl	6a4c <__ieee754_pow+0x58>
    7360:	2301      	movs	r3, #1
    7362:	401a      	ands	r2, r3
    7364:	18db      	adds	r3, r3, r3
    7366:	1a9b      	subs	r3, r3, r2
    7368:	469b      	mov	fp, r3
    736a:	f7ff fb6f 	bl	6a4c <__ieee754_pow+0x58>
    736e:	2200      	movs	r2, #0
    7370:	4b31      	ldr	r3, [pc, #196]	; (7438 <__ieee754_pow+0xa44>)
    7372:	4690      	mov	r8, r2
    7374:	4691      	mov	r9, r2
    7376:	459a      	cmp	sl, r3
    7378:	dc00      	bgt.n	737c <__ieee754_pow+0x988>
    737a:	e67b      	b.n	7074 <__ieee754_pow+0x680>
    737c:	e645      	b.n	700a <__ieee754_pow+0x616>
    737e:	0002      	movs	r2, r0
    7380:	000b      	movs	r3, r1
    7382:	f002 fc11 	bl	9ba8 <__aeabi_dsub>
    7386:	0002      	movs	r2, r0
    7388:	000b      	movs	r3, r1
    738a:	f001 fd59 	bl	8e40 <__aeabi_ddiv>
    738e:	f7ff fb79 	bl	6a84 <__ieee754_pow+0x90>
    7392:	2380      	movs	r3, #128	; 0x80
    7394:	4c2c      	ldr	r4, [pc, #176]	; (7448 <__ieee754_pow+0xa54>)
    7396:	05db      	lsls	r3, r3, #23
    7398:	9308      	str	r3, [sp, #32]
    739a:	9409      	str	r4, [sp, #36]	; 0x24
    739c:	4b2b      	ldr	r3, [pc, #172]	; (744c <__ieee754_pow+0xa58>)
    739e:	4c2c      	ldr	r4, [pc, #176]	; (7450 <__ieee754_pow+0xa5c>)
    73a0:	2200      	movs	r2, #0
    73a2:	930c      	str	r3, [sp, #48]	; 0x30
    73a4:	940d      	str	r4, [sp, #52]	; 0x34
    73a6:	2480      	movs	r4, #128	; 0x80
    73a8:	4b2a      	ldr	r3, [pc, #168]	; (7454 <__ieee754_pow+0xa60>)
    73aa:	02e4      	lsls	r4, r4, #11
    73ac:	9206      	str	r2, [sp, #24]
    73ae:	9307      	str	r3, [sp, #28]
    73b0:	e449      	b.n	6c46 <__ieee754_pow+0x252>
    73b2:	464b      	mov	r3, r9
    73b4:	425b      	negs	r3, r3
    73b6:	4699      	mov	r9, r3
    73b8:	e64a      	b.n	7050 <__ieee754_pow+0x65c>
    73ba:	46c0      	nop			; (mov r8, r8)
    73bc:	fffffc02 	.word	0xfffffc02
    73c0:	fffffc01 	.word	0xfffffc01
    73c4:	000fffff 	.word	0x000fffff
    73c8:	3fe62e43 	.word	0x3fe62e43
    73cc:	fefa39ef 	.word	0xfefa39ef
    73d0:	3fe62e42 	.word	0x3fe62e42
    73d4:	0ca86c39 	.word	0x0ca86c39
    73d8:	be205c61 	.word	0xbe205c61
    73dc:	72bea4d0 	.word	0x72bea4d0
    73e0:	3e663769 	.word	0x3e663769
    73e4:	c5d26bf1 	.word	0xc5d26bf1
    73e8:	3ebbbd41 	.word	0x3ebbbd41
    73ec:	af25de2c 	.word	0xaf25de2c
    73f0:	3f11566a 	.word	0x3f11566a
    73f4:	16bebd93 	.word	0x16bebd93
    73f8:	3f66c16c 	.word	0x3f66c16c
    73fc:	5555553e 	.word	0x5555553e
    7400:	3fc55555 	.word	0x3fc55555
    7404:	3ff00000 	.word	0x3ff00000
    7408:	4090cbff 	.word	0x4090cbff
    740c:	3f6f3400 	.word	0x3f6f3400
    7410:	c2f8f359 	.word	0xc2f8f359
    7414:	01a56e1f 	.word	0x01a56e1f
    7418:	bff00000 	.word	0xbff00000
    741c:	3feffffe 	.word	0x3feffffe
    7420:	3ff71547 	.word	0x3ff71547
    7424:	f85ddf44 	.word	0xf85ddf44
    7428:	3e54ae0b 	.word	0x3e54ae0b
    742c:	3fd00000 	.word	0x3fd00000
    7430:	55555555 	.word	0x55555555
    7434:	3fd55555 	.word	0x3fd55555
    7438:	3fe00000 	.word	0x3fe00000
    743c:	652b82fe 	.word	0x652b82fe
    7440:	8800759c 	.word	0x8800759c
    7444:	7e37e43c 	.word	0x7e37e43c
    7448:	3fe2b803 	.word	0x3fe2b803
    744c:	43cfd006 	.word	0x43cfd006
    7450:	3e4cfdeb 	.word	0x3e4cfdeb
    7454:	3ff80000 	.word	0x3ff80000
    7458:	464a      	mov	r2, r9
    745a:	f000 fb35 	bl	7ac8 <scalbn>
    745e:	e6b2      	b.n	71c6 <__ieee754_pow+0x7d2>

00007460 <__ieee754_sqrt>:
    7460:	4b6c      	ldr	r3, [pc, #432]	; (7614 <__ieee754_sqrt+0x1b4>)
    7462:	b5f0      	push	{r4, r5, r6, r7, lr}
    7464:	000a      	movs	r2, r1
    7466:	4646      	mov	r6, r8
    7468:	000d      	movs	r5, r1
    746a:	46d6      	mov	lr, sl
    746c:	464f      	mov	r7, r9
    746e:	0019      	movs	r1, r3
    7470:	b5c0      	push	{r6, r7, lr}
    7472:	0004      	movs	r4, r0
    7474:	0006      	movs	r6, r0
    7476:	4029      	ands	r1, r5
    7478:	4299      	cmp	r1, r3
    747a:	d100      	bne.n	747e <__ieee754_sqrt+0x1e>
    747c:	e0a7      	b.n	75ce <__ieee754_sqrt+0x16e>
    747e:	2d00      	cmp	r5, #0
    7480:	dc00      	bgt.n	7484 <__ieee754_sqrt+0x24>
    7482:	e081      	b.n	7588 <__ieee754_sqrt+0x128>
    7484:	152f      	asrs	r7, r5, #20
    7486:	d100      	bne.n	748a <__ieee754_sqrt+0x2a>
    7488:	e08e      	b.n	75a8 <__ieee754_sqrt+0x148>
    748a:	4b63      	ldr	r3, [pc, #396]	; (7618 <__ieee754_sqrt+0x1b8>)
    748c:	0312      	lsls	r2, r2, #12
    748e:	469c      	mov	ip, r3
    7490:	2380      	movs	r3, #128	; 0x80
    7492:	0b12      	lsrs	r2, r2, #12
    7494:	035b      	lsls	r3, r3, #13
    7496:	4467      	add	r7, ip
    7498:	431a      	orrs	r2, r3
    749a:	07fb      	lsls	r3, r7, #31
    749c:	d468      	bmi.n	7570 <__ieee754_sqrt+0x110>
    749e:	107b      	asrs	r3, r7, #1
    74a0:	469c      	mov	ip, r3
    74a2:	0fe3      	lsrs	r3, r4, #31
    74a4:	189b      	adds	r3, r3, r2
    74a6:	189b      	adds	r3, r3, r2
    74a8:	2280      	movs	r2, #128	; 0x80
    74aa:	2116      	movs	r1, #22
    74ac:	2600      	movs	r6, #0
    74ae:	2500      	movs	r5, #0
    74b0:	0064      	lsls	r4, r4, #1
    74b2:	0392      	lsls	r2, r2, #14
    74b4:	18a8      	adds	r0, r5, r2
    74b6:	4298      	cmp	r0, r3
    74b8:	dc02      	bgt.n	74c0 <__ieee754_sqrt+0x60>
    74ba:	1885      	adds	r5, r0, r2
    74bc:	1a1b      	subs	r3, r3, r0
    74be:	18b6      	adds	r6, r6, r2
    74c0:	0fe0      	lsrs	r0, r4, #31
    74c2:	005b      	lsls	r3, r3, #1
    74c4:	3901      	subs	r1, #1
    74c6:	181b      	adds	r3, r3, r0
    74c8:	0064      	lsls	r4, r4, #1
    74ca:	0852      	lsrs	r2, r2, #1
    74cc:	2900      	cmp	r1, #0
    74ce:	d1f1      	bne.n	74b4 <__ieee754_sqrt+0x54>
    74d0:	2200      	movs	r2, #0
    74d2:	4692      	mov	sl, r2
    74d4:	4690      	mov	r8, r2
    74d6:	2280      	movs	r2, #128	; 0x80
    74d8:	2020      	movs	r0, #32
    74da:	0612      	lsls	r2, r2, #24
    74dc:	e009      	b.n	74f2 <__ieee754_sqrt+0x92>
    74de:	42ab      	cmp	r3, r5
    74e0:	d038      	beq.n	7554 <__ieee754_sqrt+0xf4>
    74e2:	0fe1      	lsrs	r1, r4, #31
    74e4:	18c9      	adds	r1, r1, r3
    74e6:	3801      	subs	r0, #1
    74e8:	18cb      	adds	r3, r1, r3
    74ea:	0064      	lsls	r4, r4, #1
    74ec:	0852      	lsrs	r2, r2, #1
    74ee:	2800      	cmp	r0, #0
    74f0:	d018      	beq.n	7524 <__ieee754_sqrt+0xc4>
    74f2:	4641      	mov	r1, r8
    74f4:	1851      	adds	r1, r2, r1
    74f6:	42ab      	cmp	r3, r5
    74f8:	ddf1      	ble.n	74de <__ieee754_sqrt+0x7e>
    74fa:	188f      	adds	r7, r1, r2
    74fc:	46b8      	mov	r8, r7
    74fe:	46a9      	mov	r9, r5
    7500:	2900      	cmp	r1, #0
    7502:	db30      	blt.n	7566 <__ieee754_sqrt+0x106>
    7504:	1b5b      	subs	r3, r3, r5
    7506:	428c      	cmp	r4, r1
    7508:	41ad      	sbcs	r5, r5
    750a:	426d      	negs	r5, r5
    750c:	1b5b      	subs	r3, r3, r5
    750e:	1a64      	subs	r4, r4, r1
    7510:	0fe1      	lsrs	r1, r4, #31
    7512:	18c9      	adds	r1, r1, r3
    7514:	3801      	subs	r0, #1
    7516:	4492      	add	sl, r2
    7518:	464d      	mov	r5, r9
    751a:	18cb      	adds	r3, r1, r3
    751c:	0064      	lsls	r4, r4, #1
    751e:	0852      	lsrs	r2, r2, #1
    7520:	2800      	cmp	r0, #0
    7522:	d1e6      	bne.n	74f2 <__ieee754_sqrt+0x92>
    7524:	4323      	orrs	r3, r4
    7526:	d128      	bne.n	757a <__ieee754_sqrt+0x11a>
    7528:	4653      	mov	r3, sl
    752a:	085b      	lsrs	r3, r3, #1
    752c:	493b      	ldr	r1, [pc, #236]	; (761c <__ieee754_sqrt+0x1bc>)
    752e:	1072      	asrs	r2, r6, #1
    7530:	4688      	mov	r8, r1
    7532:	4442      	add	r2, r8
    7534:	07f1      	lsls	r1, r6, #31
    7536:	d502      	bpl.n	753e <__ieee754_sqrt+0xde>
    7538:	2180      	movs	r1, #128	; 0x80
    753a:	0609      	lsls	r1, r1, #24
    753c:	430b      	orrs	r3, r1
    753e:	4661      	mov	r1, ip
    7540:	001e      	movs	r6, r3
    7542:	050f      	lsls	r7, r1, #20
    7544:	18bd      	adds	r5, r7, r2
    7546:	0030      	movs	r0, r6
    7548:	0029      	movs	r1, r5
    754a:	bc1c      	pop	{r2, r3, r4}
    754c:	4690      	mov	r8, r2
    754e:	4699      	mov	r9, r3
    7550:	46a2      	mov	sl, r4
    7552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7554:	42a1      	cmp	r1, r4
    7556:	d8c4      	bhi.n	74e2 <__ieee754_sqrt+0x82>
    7558:	188f      	adds	r7, r1, r2
    755a:	46b8      	mov	r8, r7
    755c:	2900      	cmp	r1, #0
    755e:	db42      	blt.n	75e6 <__ieee754_sqrt+0x186>
    7560:	4699      	mov	r9, r3
    7562:	2300      	movs	r3, #0
    7564:	e7d3      	b.n	750e <__ieee754_sqrt+0xae>
    7566:	2f00      	cmp	r7, #0
    7568:	db2f      	blt.n	75ca <__ieee754_sqrt+0x16a>
    756a:	1c6f      	adds	r7, r5, #1
    756c:	46b9      	mov	r9, r7
    756e:	e7c9      	b.n	7504 <__ieee754_sqrt+0xa4>
    7570:	0fe1      	lsrs	r1, r4, #31
    7572:	0052      	lsls	r2, r2, #1
    7574:	188a      	adds	r2, r1, r2
    7576:	0064      	lsls	r4, r4, #1
    7578:	e791      	b.n	749e <__ieee754_sqrt+0x3e>
    757a:	4653      	mov	r3, sl
    757c:	3301      	adds	r3, #1
    757e:	d035      	beq.n	75ec <__ieee754_sqrt+0x18c>
    7580:	4653      	mov	r3, sl
    7582:	3301      	adds	r3, #1
    7584:	085b      	lsrs	r3, r3, #1
    7586:	e7d1      	b.n	752c <__ieee754_sqrt+0xcc>
    7588:	006b      	lsls	r3, r5, #1
    758a:	085b      	lsrs	r3, r3, #1
    758c:	4303      	orrs	r3, r0
    758e:	d0da      	beq.n	7546 <__ieee754_sqrt+0xe6>
    7590:	2700      	movs	r7, #0
    7592:	2d00      	cmp	r5, #0
    7594:	d132      	bne.n	75fc <__ieee754_sqrt+0x19c>
    7596:	0ae2      	lsrs	r2, r4, #11
    7598:	3f15      	subs	r7, #21
    759a:	0564      	lsls	r4, r4, #21
    759c:	2a00      	cmp	r2, #0
    759e:	d0fa      	beq.n	7596 <__ieee754_sqrt+0x136>
    75a0:	2380      	movs	r3, #128	; 0x80
    75a2:	035b      	lsls	r3, r3, #13
    75a4:	421a      	tst	r2, r3
    75a6:	d124      	bne.n	75f2 <__ieee754_sqrt+0x192>
    75a8:	2080      	movs	r0, #128	; 0x80
    75aa:	2300      	movs	r3, #0
    75ac:	0340      	lsls	r0, r0, #13
    75ae:	e000      	b.n	75b2 <__ieee754_sqrt+0x152>
    75b0:	000b      	movs	r3, r1
    75b2:	0052      	lsls	r2, r2, #1
    75b4:	1c59      	adds	r1, r3, #1
    75b6:	4202      	tst	r2, r0
    75b8:	d0fa      	beq.n	75b0 <__ieee754_sqrt+0x150>
    75ba:	2020      	movs	r0, #32
    75bc:	1a40      	subs	r0, r0, r1
    75be:	1aff      	subs	r7, r7, r3
    75c0:	0023      	movs	r3, r4
    75c2:	40c3      	lsrs	r3, r0
    75c4:	408c      	lsls	r4, r1
    75c6:	431a      	orrs	r2, r3
    75c8:	e75f      	b.n	748a <__ieee754_sqrt+0x2a>
    75ca:	46a9      	mov	r9, r5
    75cc:	e79a      	b.n	7504 <__ieee754_sqrt+0xa4>
    75ce:	002b      	movs	r3, r5
    75d0:	0002      	movs	r2, r0
    75d2:	0029      	movs	r1, r5
    75d4:	f002 f868 	bl	96a8 <__aeabi_dmul>
    75d8:	0032      	movs	r2, r6
    75da:	002b      	movs	r3, r5
    75dc:	f001 f920 	bl	8820 <__aeabi_dadd>
    75e0:	0006      	movs	r6, r0
    75e2:	000d      	movs	r5, r1
    75e4:	e7af      	b.n	7546 <__ieee754_sqrt+0xe6>
    75e6:	2f00      	cmp	r7, #0
    75e8:	dabf      	bge.n	756a <__ieee754_sqrt+0x10a>
    75ea:	e7b9      	b.n	7560 <__ieee754_sqrt+0x100>
    75ec:	3601      	adds	r6, #1
    75ee:	2300      	movs	r3, #0
    75f0:	e79c      	b.n	752c <__ieee754_sqrt+0xcc>
    75f2:	2301      	movs	r3, #1
    75f4:	2100      	movs	r1, #0
    75f6:	2020      	movs	r0, #32
    75f8:	425b      	negs	r3, r3
    75fa:	e7e0      	b.n	75be <__ieee754_sqrt+0x15e>
    75fc:	002b      	movs	r3, r5
    75fe:	0002      	movs	r2, r0
    7600:	0029      	movs	r1, r5
    7602:	f002 fad1 	bl	9ba8 <__aeabi_dsub>
    7606:	0002      	movs	r2, r0
    7608:	000b      	movs	r3, r1
    760a:	f001 fc19 	bl	8e40 <__aeabi_ddiv>
    760e:	0006      	movs	r6, r0
    7610:	000d      	movs	r5, r1
    7612:	e798      	b.n	7546 <__ieee754_sqrt+0xe6>
    7614:	7ff00000 	.word	0x7ff00000
    7618:	fffffc01 	.word	0xfffffc01
    761c:	3fe00000 	.word	0x3fe00000

00007620 <atan>:
    7620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7622:	464e      	mov	r6, r9
    7624:	4657      	mov	r7, sl
    7626:	4645      	mov	r5, r8
    7628:	46de      	mov	lr, fp
    762a:	4ba4      	ldr	r3, [pc, #656]	; (78bc <atan+0x29c>)
    762c:	b5e0      	push	{r5, r6, r7, lr}
    762e:	004e      	lsls	r6, r1, #1
    7630:	4680      	mov	r8, r0
    7632:	4689      	mov	r9, r1
    7634:	468a      	mov	sl, r1
    7636:	0876      	lsrs	r6, r6, #1
    7638:	429e      	cmp	r6, r3
    763a:	dd0c      	ble.n	7656 <atan+0x36>
    763c:	4ba0      	ldr	r3, [pc, #640]	; (78c0 <atan+0x2a0>)
    763e:	429e      	cmp	r6, r3
    7640:	dd00      	ble.n	7644 <atan+0x24>
    7642:	e0a3      	b.n	778c <atan+0x16c>
    7644:	d100      	bne.n	7648 <atan+0x28>
    7646:	e09e      	b.n	7786 <atan+0x166>
    7648:	4653      	mov	r3, sl
    764a:	2b00      	cmp	r3, #0
    764c:	dc00      	bgt.n	7650 <atan+0x30>
    764e:	e0e1      	b.n	7814 <atan+0x1f4>
    7650:	4b9c      	ldr	r3, [pc, #624]	; (78c4 <atan+0x2a4>)
    7652:	4a9d      	ldr	r2, [pc, #628]	; (78c8 <atan+0x2a8>)
    7654:	e0a2      	b.n	779c <atan+0x17c>
    7656:	4b9d      	ldr	r3, [pc, #628]	; (78cc <atan+0x2ac>)
    7658:	429e      	cmp	r6, r3
    765a:	dd00      	ble.n	765e <atan+0x3e>
    765c:	e0b4      	b.n	77c8 <atan+0x1a8>
    765e:	4b9c      	ldr	r3, [pc, #624]	; (78d0 <atan+0x2b0>)
    7660:	429e      	cmp	r6, r3
    7662:	dc00      	bgt.n	7666 <atan+0x46>
    7664:	e0a2      	b.n	77ac <atan+0x18c>
    7666:	2301      	movs	r3, #1
    7668:	425b      	negs	r3, r3
    766a:	469b      	mov	fp, r3
    766c:	4642      	mov	r2, r8
    766e:	464b      	mov	r3, r9
    7670:	4640      	mov	r0, r8
    7672:	4649      	mov	r1, r9
    7674:	f002 f818 	bl	96a8 <__aeabi_dmul>
    7678:	0002      	movs	r2, r0
    767a:	000b      	movs	r3, r1
    767c:	0006      	movs	r6, r0
    767e:	000f      	movs	r7, r1
    7680:	f002 f812 	bl	96a8 <__aeabi_dmul>
    7684:	0004      	movs	r4, r0
    7686:	000d      	movs	r5, r1
    7688:	4a92      	ldr	r2, [pc, #584]	; (78d4 <atan+0x2b4>)
    768a:	4b93      	ldr	r3, [pc, #588]	; (78d8 <atan+0x2b8>)
    768c:	f002 f80c 	bl	96a8 <__aeabi_dmul>
    7690:	4a92      	ldr	r2, [pc, #584]	; (78dc <atan+0x2bc>)
    7692:	4b93      	ldr	r3, [pc, #588]	; (78e0 <atan+0x2c0>)
    7694:	f001 f8c4 	bl	8820 <__aeabi_dadd>
    7698:	0022      	movs	r2, r4
    769a:	002b      	movs	r3, r5
    769c:	f002 f804 	bl	96a8 <__aeabi_dmul>
    76a0:	4a90      	ldr	r2, [pc, #576]	; (78e4 <atan+0x2c4>)
    76a2:	4b91      	ldr	r3, [pc, #580]	; (78e8 <atan+0x2c8>)
    76a4:	f001 f8bc 	bl	8820 <__aeabi_dadd>
    76a8:	0022      	movs	r2, r4
    76aa:	002b      	movs	r3, r5
    76ac:	f001 fffc 	bl	96a8 <__aeabi_dmul>
    76b0:	4a8e      	ldr	r2, [pc, #568]	; (78ec <atan+0x2cc>)
    76b2:	4b8f      	ldr	r3, [pc, #572]	; (78f0 <atan+0x2d0>)
    76b4:	f001 f8b4 	bl	8820 <__aeabi_dadd>
    76b8:	0022      	movs	r2, r4
    76ba:	002b      	movs	r3, r5
    76bc:	f001 fff4 	bl	96a8 <__aeabi_dmul>
    76c0:	4a8c      	ldr	r2, [pc, #560]	; (78f4 <atan+0x2d4>)
    76c2:	4b8d      	ldr	r3, [pc, #564]	; (78f8 <atan+0x2d8>)
    76c4:	f001 f8ac 	bl	8820 <__aeabi_dadd>
    76c8:	0022      	movs	r2, r4
    76ca:	002b      	movs	r3, r5
    76cc:	f001 ffec 	bl	96a8 <__aeabi_dmul>
    76d0:	4a8a      	ldr	r2, [pc, #552]	; (78fc <atan+0x2dc>)
    76d2:	4b8b      	ldr	r3, [pc, #556]	; (7900 <atan+0x2e0>)
    76d4:	f001 f8a4 	bl	8820 <__aeabi_dadd>
    76d8:	0032      	movs	r2, r6
    76da:	003b      	movs	r3, r7
    76dc:	f001 ffe4 	bl	96a8 <__aeabi_dmul>
    76e0:	4a88      	ldr	r2, [pc, #544]	; (7904 <atan+0x2e4>)
    76e2:	4b89      	ldr	r3, [pc, #548]	; (7908 <atan+0x2e8>)
    76e4:	0006      	movs	r6, r0
    76e6:	000f      	movs	r7, r1
    76e8:	0020      	movs	r0, r4
    76ea:	0029      	movs	r1, r5
    76ec:	f001 ffdc 	bl	96a8 <__aeabi_dmul>
    76f0:	4a86      	ldr	r2, [pc, #536]	; (790c <atan+0x2ec>)
    76f2:	4b87      	ldr	r3, [pc, #540]	; (7910 <atan+0x2f0>)
    76f4:	f002 fa58 	bl	9ba8 <__aeabi_dsub>
    76f8:	0022      	movs	r2, r4
    76fa:	002b      	movs	r3, r5
    76fc:	f001 ffd4 	bl	96a8 <__aeabi_dmul>
    7700:	4a84      	ldr	r2, [pc, #528]	; (7914 <atan+0x2f4>)
    7702:	4b85      	ldr	r3, [pc, #532]	; (7918 <atan+0x2f8>)
    7704:	f002 fa50 	bl	9ba8 <__aeabi_dsub>
    7708:	0022      	movs	r2, r4
    770a:	002b      	movs	r3, r5
    770c:	f001 ffcc 	bl	96a8 <__aeabi_dmul>
    7710:	4a82      	ldr	r2, [pc, #520]	; (791c <atan+0x2fc>)
    7712:	4b83      	ldr	r3, [pc, #524]	; (7920 <atan+0x300>)
    7714:	f002 fa48 	bl	9ba8 <__aeabi_dsub>
    7718:	0022      	movs	r2, r4
    771a:	002b      	movs	r3, r5
    771c:	f001 ffc4 	bl	96a8 <__aeabi_dmul>
    7720:	4a80      	ldr	r2, [pc, #512]	; (7924 <atan+0x304>)
    7722:	4b81      	ldr	r3, [pc, #516]	; (7928 <atan+0x308>)
    7724:	f002 fa40 	bl	9ba8 <__aeabi_dsub>
    7728:	0022      	movs	r2, r4
    772a:	002b      	movs	r3, r5
    772c:	f001 ffbc 	bl	96a8 <__aeabi_dmul>
    7730:	000b      	movs	r3, r1
    7732:	4659      	mov	r1, fp
    7734:	0002      	movs	r2, r0
    7736:	3101      	adds	r1, #1
    7738:	d100      	bne.n	773c <atan+0x11c>
    773a:	e06e      	b.n	781a <atan+0x1fa>
    773c:	4659      	mov	r1, fp
    773e:	0030      	movs	r0, r6
    7740:	00cc      	lsls	r4, r1, #3
    7742:	0039      	movs	r1, r7
    7744:	f001 f86c 	bl	8820 <__aeabi_dadd>
    7748:	4642      	mov	r2, r8
    774a:	464b      	mov	r3, r9
    774c:	f001 ffac 	bl	96a8 <__aeabi_dmul>
    7750:	4d76      	ldr	r5, [pc, #472]	; (792c <atan+0x30c>)
    7752:	4b77      	ldr	r3, [pc, #476]	; (7930 <atan+0x310>)
    7754:	192d      	adds	r5, r5, r4
    7756:	191c      	adds	r4, r3, r4
    7758:	6822      	ldr	r2, [r4, #0]
    775a:	6863      	ldr	r3, [r4, #4]
    775c:	f002 fa24 	bl	9ba8 <__aeabi_dsub>
    7760:	4642      	mov	r2, r8
    7762:	464b      	mov	r3, r9
    7764:	f002 fa20 	bl	9ba8 <__aeabi_dsub>
    7768:	0002      	movs	r2, r0
    776a:	000b      	movs	r3, r1
    776c:	6828      	ldr	r0, [r5, #0]
    776e:	6869      	ldr	r1, [r5, #4]
    7770:	f002 fa1a 	bl	9ba8 <__aeabi_dsub>
    7774:	0003      	movs	r3, r0
    7776:	4650      	mov	r0, sl
    7778:	000a      	movs	r2, r1
    777a:	2800      	cmp	r0, #0
    777c:	da0e      	bge.n	779c <atan+0x17c>
    777e:	2280      	movs	r2, #128	; 0x80
    7780:	0612      	lsls	r2, r2, #24
    7782:	188a      	adds	r2, r1, r2
    7784:	e00a      	b.n	779c <atan+0x17c>
    7786:	2800      	cmp	r0, #0
    7788:	d100      	bne.n	778c <atan+0x16c>
    778a:	e75d      	b.n	7648 <atan+0x28>
    778c:	4642      	mov	r2, r8
    778e:	464b      	mov	r3, r9
    7790:	4640      	mov	r0, r8
    7792:	4649      	mov	r1, r9
    7794:	f001 f844 	bl	8820 <__aeabi_dadd>
    7798:	0003      	movs	r3, r0
    779a:	000a      	movs	r2, r1
    779c:	0018      	movs	r0, r3
    779e:	0011      	movs	r1, r2
    77a0:	bc3c      	pop	{r2, r3, r4, r5}
    77a2:	4690      	mov	r8, r2
    77a4:	4699      	mov	r9, r3
    77a6:	46a2      	mov	sl, r4
    77a8:	46ab      	mov	fp, r5
    77aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77ac:	4a61      	ldr	r2, [pc, #388]	; (7934 <atan+0x314>)
    77ae:	4b62      	ldr	r3, [pc, #392]	; (7938 <atan+0x318>)
    77b0:	f001 f836 	bl	8820 <__aeabi_dadd>
    77b4:	2200      	movs	r2, #0
    77b6:	4b61      	ldr	r3, [pc, #388]	; (793c <atan+0x31c>)
    77b8:	f000 fb96 	bl	7ee8 <__aeabi_dcmpgt>
    77bc:	2800      	cmp	r0, #0
    77be:	d100      	bne.n	77c2 <atan+0x1a2>
    77c0:	e751      	b.n	7666 <atan+0x46>
    77c2:	4643      	mov	r3, r8
    77c4:	464a      	mov	r2, r9
    77c6:	e7e9      	b.n	779c <atan+0x17c>
    77c8:	f000 f8c6 	bl	7958 <fabs>
    77cc:	4b5c      	ldr	r3, [pc, #368]	; (7940 <atan+0x320>)
    77ce:	0004      	movs	r4, r0
    77d0:	000d      	movs	r5, r1
    77d2:	429e      	cmp	r6, r3
    77d4:	dc32      	bgt.n	783c <atan+0x21c>
    77d6:	4b5b      	ldr	r3, [pc, #364]	; (7944 <atan+0x324>)
    77d8:	429e      	cmp	r6, r3
    77da:	dc58      	bgt.n	788e <atan+0x26e>
    77dc:	0002      	movs	r2, r0
    77de:	000b      	movs	r3, r1
    77e0:	f001 f81e 	bl	8820 <__aeabi_dadd>
    77e4:	2200      	movs	r2, #0
    77e6:	4b55      	ldr	r3, [pc, #340]	; (793c <atan+0x31c>)
    77e8:	f002 f9de 	bl	9ba8 <__aeabi_dsub>
    77ec:	2380      	movs	r3, #128	; 0x80
    77ee:	0006      	movs	r6, r0
    77f0:	000f      	movs	r7, r1
    77f2:	2200      	movs	r2, #0
    77f4:	05db      	lsls	r3, r3, #23
    77f6:	0020      	movs	r0, r4
    77f8:	0029      	movs	r1, r5
    77fa:	f001 f811 	bl	8820 <__aeabi_dadd>
    77fe:	000b      	movs	r3, r1
    7800:	0002      	movs	r2, r0
    7802:	0039      	movs	r1, r7
    7804:	0030      	movs	r0, r6
    7806:	f001 fb1b 	bl	8e40 <__aeabi_ddiv>
    780a:	2300      	movs	r3, #0
    780c:	4680      	mov	r8, r0
    780e:	4689      	mov	r9, r1
    7810:	469b      	mov	fp, r3
    7812:	e72b      	b.n	766c <atan+0x4c>
    7814:	4b2b      	ldr	r3, [pc, #172]	; (78c4 <atan+0x2a4>)
    7816:	4a4c      	ldr	r2, [pc, #304]	; (7948 <atan+0x328>)
    7818:	e7c0      	b.n	779c <atan+0x17c>
    781a:	0030      	movs	r0, r6
    781c:	0039      	movs	r1, r7
    781e:	f000 ffff 	bl	8820 <__aeabi_dadd>
    7822:	4642      	mov	r2, r8
    7824:	464b      	mov	r3, r9
    7826:	f001 ff3f 	bl	96a8 <__aeabi_dmul>
    782a:	0002      	movs	r2, r0
    782c:	000b      	movs	r3, r1
    782e:	4640      	mov	r0, r8
    7830:	4649      	mov	r1, r9
    7832:	f002 f9b9 	bl	9ba8 <__aeabi_dsub>
    7836:	0003      	movs	r3, r0
    7838:	000a      	movs	r2, r1
    783a:	e7af      	b.n	779c <atan+0x17c>
    783c:	4b43      	ldr	r3, [pc, #268]	; (794c <atan+0x32c>)
    783e:	429e      	cmp	r6, r3
    7840:	dc1a      	bgt.n	7878 <atan+0x258>
    7842:	2200      	movs	r2, #0
    7844:	4b42      	ldr	r3, [pc, #264]	; (7950 <atan+0x330>)
    7846:	f002 f9af 	bl	9ba8 <__aeabi_dsub>
    784a:	2200      	movs	r2, #0
    784c:	0006      	movs	r6, r0
    784e:	000f      	movs	r7, r1
    7850:	4b3f      	ldr	r3, [pc, #252]	; (7950 <atan+0x330>)
    7852:	0020      	movs	r0, r4
    7854:	0029      	movs	r1, r5
    7856:	f001 ff27 	bl	96a8 <__aeabi_dmul>
    785a:	2200      	movs	r2, #0
    785c:	4b37      	ldr	r3, [pc, #220]	; (793c <atan+0x31c>)
    785e:	f000 ffdf 	bl	8820 <__aeabi_dadd>
    7862:	000b      	movs	r3, r1
    7864:	0002      	movs	r2, r0
    7866:	0039      	movs	r1, r7
    7868:	0030      	movs	r0, r6
    786a:	f001 fae9 	bl	8e40 <__aeabi_ddiv>
    786e:	2302      	movs	r3, #2
    7870:	4680      	mov	r8, r0
    7872:	4689      	mov	r9, r1
    7874:	469b      	mov	fp, r3
    7876:	e6f9      	b.n	766c <atan+0x4c>
    7878:	000b      	movs	r3, r1
    787a:	0002      	movs	r2, r0
    787c:	4935      	ldr	r1, [pc, #212]	; (7954 <atan+0x334>)
    787e:	2000      	movs	r0, #0
    7880:	f001 fade 	bl	8e40 <__aeabi_ddiv>
    7884:	2303      	movs	r3, #3
    7886:	4680      	mov	r8, r0
    7888:	4689      	mov	r9, r1
    788a:	469b      	mov	fp, r3
    788c:	e6ee      	b.n	766c <atan+0x4c>
    788e:	2200      	movs	r2, #0
    7890:	4b2a      	ldr	r3, [pc, #168]	; (793c <atan+0x31c>)
    7892:	f002 f989 	bl	9ba8 <__aeabi_dsub>
    7896:	2200      	movs	r2, #0
    7898:	0006      	movs	r6, r0
    789a:	000f      	movs	r7, r1
    789c:	4b27      	ldr	r3, [pc, #156]	; (793c <atan+0x31c>)
    789e:	0020      	movs	r0, r4
    78a0:	0029      	movs	r1, r5
    78a2:	f000 ffbd 	bl	8820 <__aeabi_dadd>
    78a6:	000b      	movs	r3, r1
    78a8:	0002      	movs	r2, r0
    78aa:	0039      	movs	r1, r7
    78ac:	0030      	movs	r0, r6
    78ae:	f001 fac7 	bl	8e40 <__aeabi_ddiv>
    78b2:	2301      	movs	r3, #1
    78b4:	4680      	mov	r8, r0
    78b6:	4689      	mov	r9, r1
    78b8:	469b      	mov	fp, r3
    78ba:	e6d7      	b.n	766c <atan+0x4c>
    78bc:	440fffff 	.word	0x440fffff
    78c0:	7ff00000 	.word	0x7ff00000
    78c4:	54442d18 	.word	0x54442d18
    78c8:	3ff921fb 	.word	0x3ff921fb
    78cc:	3fdbffff 	.word	0x3fdbffff
    78d0:	3e1fffff 	.word	0x3e1fffff
    78d4:	e322da11 	.word	0xe322da11
    78d8:	3f90ad3a 	.word	0x3f90ad3a
    78dc:	24760deb 	.word	0x24760deb
    78e0:	3fa97b4b 	.word	0x3fa97b4b
    78e4:	a0d03d51 	.word	0xa0d03d51
    78e8:	3fb10d66 	.word	0x3fb10d66
    78ec:	c54c206e 	.word	0xc54c206e
    78f0:	3fb745cd 	.word	0x3fb745cd
    78f4:	920083ff 	.word	0x920083ff
    78f8:	3fc24924 	.word	0x3fc24924
    78fc:	5555550d 	.word	0x5555550d
    7900:	3fd55555 	.word	0x3fd55555
    7904:	2c6a6c2f 	.word	0x2c6a6c2f
    7908:	bfa2b444 	.word	0xbfa2b444
    790c:	52defd9a 	.word	0x52defd9a
    7910:	3fadde2d 	.word	0x3fadde2d
    7914:	af749a6d 	.word	0xaf749a6d
    7918:	3fb3b0f2 	.word	0x3fb3b0f2
    791c:	fe231671 	.word	0xfe231671
    7920:	3fbc71c6 	.word	0x3fbc71c6
    7924:	9998ebc4 	.word	0x9998ebc4
    7928:	3fc99999 	.word	0x3fc99999
    792c:	0000c0d8 	.word	0x0000c0d8
    7930:	0000c0f8 	.word	0x0000c0f8
    7934:	8800759c 	.word	0x8800759c
    7938:	7e37e43c 	.word	0x7e37e43c
    793c:	3ff00000 	.word	0x3ff00000
    7940:	3ff2ffff 	.word	0x3ff2ffff
    7944:	3fe5ffff 	.word	0x3fe5ffff
    7948:	bff921fb 	.word	0xbff921fb
    794c:	40037fff 	.word	0x40037fff
    7950:	3ff80000 	.word	0x3ff80000
    7954:	bff00000 	.word	0xbff00000

00007958 <fabs>:
    7958:	0049      	lsls	r1, r1, #1
    795a:	084b      	lsrs	r3, r1, #1
    795c:	0019      	movs	r1, r3
    795e:	4770      	bx	lr

00007960 <finite>:
    7960:	4b03      	ldr	r3, [pc, #12]	; (7970 <finite+0x10>)
    7962:	0048      	lsls	r0, r1, #1
    7964:	469c      	mov	ip, r3
    7966:	0840      	lsrs	r0, r0, #1
    7968:	4460      	add	r0, ip
    796a:	0fc0      	lsrs	r0, r0, #31
    796c:	4770      	bx	lr
    796e:	46c0      	nop			; (mov r8, r8)
    7970:	80100000 	.word	0x80100000

00007974 <matherr>:
    7974:	2000      	movs	r0, #0
    7976:	4770      	bx	lr

00007978 <nan>:
    7978:	2000      	movs	r0, #0
    797a:	4901      	ldr	r1, [pc, #4]	; (7980 <nan+0x8>)
    797c:	4770      	bx	lr
    797e:	46c0      	nop			; (mov r8, r8)
    7980:	7ff80000 	.word	0x7ff80000

00007984 <rint>:
    7984:	b5f0      	push	{r4, r5, r6, r7, lr}
    7986:	46c6      	mov	lr, r8
    7988:	b500      	push	{lr}
    798a:	0fcb      	lsrs	r3, r1, #31
    798c:	4698      	mov	r8, r3
    798e:	4c4a      	ldr	r4, [pc, #296]	; (7ab8 <rint+0x134>)
    7990:	004b      	lsls	r3, r1, #1
    7992:	0d5b      	lsrs	r3, r3, #21
    7994:	191e      	adds	r6, r3, r4
    7996:	b082      	sub	sp, #8
    7998:	0007      	movs	r7, r0
    799a:	000a      	movs	r2, r1
    799c:	2e13      	cmp	r6, #19
    799e:	dc35      	bgt.n	7a0c <rint+0x88>
    79a0:	2e00      	cmp	r6, #0
    79a2:	db57      	blt.n	7a54 <rint+0xd0>
    79a4:	4b45      	ldr	r3, [pc, #276]	; (7abc <rint+0x138>)
    79a6:	0004      	movs	r4, r0
    79a8:	4133      	asrs	r3, r6
    79aa:	001f      	movs	r7, r3
    79ac:	400f      	ands	r7, r1
    79ae:	4307      	orrs	r7, r0
    79b0:	000d      	movs	r5, r1
    79b2:	2f00      	cmp	r7, #0
    79b4:	d024      	beq.n	7a00 <rint+0x7c>
    79b6:	085b      	lsrs	r3, r3, #1
    79b8:	001c      	movs	r4, r3
    79ba:	400c      	ands	r4, r1
    79bc:	4320      	orrs	r0, r4
    79be:	2700      	movs	r7, #0
    79c0:	2800      	cmp	r0, #0
    79c2:	d007      	beq.n	79d4 <rint+0x50>
    79c4:	2e13      	cmp	r6, #19
    79c6:	d100      	bne.n	79ca <rint+0x46>
    79c8:	e073      	b.n	7ab2 <rint+0x12e>
    79ca:	2280      	movs	r2, #128	; 0x80
    79cc:	02d2      	lsls	r2, r2, #11
    79ce:	4132      	asrs	r2, r6
    79d0:	4399      	bics	r1, r3
    79d2:	430a      	orrs	r2, r1
    79d4:	4643      	mov	r3, r8
    79d6:	00de      	lsls	r6, r3, #3
    79d8:	4b39      	ldr	r3, [pc, #228]	; (7ac0 <rint+0x13c>)
    79da:	0011      	movs	r1, r2
    79dc:	199e      	adds	r6, r3, r6
    79de:	6834      	ldr	r4, [r6, #0]
    79e0:	6875      	ldr	r5, [r6, #4]
    79e2:	0038      	movs	r0, r7
    79e4:	0022      	movs	r2, r4
    79e6:	002b      	movs	r3, r5
    79e8:	f000 ff1a 	bl	8820 <__aeabi_dadd>
    79ec:	9000      	str	r0, [sp, #0]
    79ee:	9101      	str	r1, [sp, #4]
    79f0:	9800      	ldr	r0, [sp, #0]
    79f2:	9901      	ldr	r1, [sp, #4]
    79f4:	0022      	movs	r2, r4
    79f6:	002b      	movs	r3, r5
    79f8:	f002 f8d6 	bl	9ba8 <__aeabi_dsub>
    79fc:	0004      	movs	r4, r0
    79fe:	000d      	movs	r5, r1
    7a00:	0020      	movs	r0, r4
    7a02:	0029      	movs	r1, r5
    7a04:	b002      	add	sp, #8
    7a06:	bc04      	pop	{r2}
    7a08:	4690      	mov	r8, r2
    7a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a0c:	2e33      	cmp	r6, #51	; 0x33
    7a0e:	dd0c      	ble.n	7a2a <rint+0xa6>
    7a10:	2380      	movs	r3, #128	; 0x80
    7a12:	0004      	movs	r4, r0
    7a14:	00db      	lsls	r3, r3, #3
    7a16:	000d      	movs	r5, r1
    7a18:	429e      	cmp	r6, r3
    7a1a:	d1f1      	bne.n	7a00 <rint+0x7c>
    7a1c:	0002      	movs	r2, r0
    7a1e:	000b      	movs	r3, r1
    7a20:	f000 fefe 	bl	8820 <__aeabi_dadd>
    7a24:	0004      	movs	r4, r0
    7a26:	000d      	movs	r5, r1
    7a28:	e7ea      	b.n	7a00 <rint+0x7c>
    7a2a:	4c26      	ldr	r4, [pc, #152]	; (7ac4 <rint+0x140>)
    7a2c:	000d      	movs	r5, r1
    7a2e:	46a4      	mov	ip, r4
    7a30:	2401      	movs	r4, #1
    7a32:	4463      	add	r3, ip
    7a34:	4264      	negs	r4, r4
    7a36:	40dc      	lsrs	r4, r3
    7a38:	46a4      	mov	ip, r4
    7a3a:	4661      	mov	r1, ip
    7a3c:	0004      	movs	r4, r0
    7a3e:	4201      	tst	r1, r0
    7a40:	d0de      	beq.n	7a00 <rint+0x7c>
    7a42:	0849      	lsrs	r1, r1, #1
    7a44:	4201      	tst	r1, r0
    7a46:	d0c5      	beq.n	79d4 <rint+0x50>
    7a48:	2780      	movs	r7, #128	; 0x80
    7a4a:	05ff      	lsls	r7, r7, #23
    7a4c:	411f      	asrs	r7, r3
    7a4e:	4388      	bics	r0, r1
    7a50:	4307      	orrs	r7, r0
    7a52:	e7bf      	b.n	79d4 <rint+0x50>
    7a54:	004b      	lsls	r3, r1, #1
    7a56:	085b      	lsrs	r3, r3, #1
    7a58:	4303      	orrs	r3, r0
    7a5a:	0004      	movs	r4, r0
    7a5c:	000d      	movs	r5, r1
    7a5e:	2b00      	cmp	r3, #0
    7a60:	d0ce      	beq.n	7a00 <rint+0x7c>
    7a62:	030b      	lsls	r3, r1, #12
    7a64:	0b1b      	lsrs	r3, r3, #12
    7a66:	4303      	orrs	r3, r0
    7a68:	001a      	movs	r2, r3
    7a6a:	425b      	negs	r3, r3
    7a6c:	4313      	orrs	r3, r2
    7a6e:	2280      	movs	r2, #128	; 0x80
    7a70:	0b1b      	lsrs	r3, r3, #12
    7a72:	0312      	lsls	r2, r2, #12
    7a74:	4013      	ands	r3, r2
    7a76:	0c4a      	lsrs	r2, r1, #17
    7a78:	0452      	lsls	r2, r2, #17
    7a7a:	4313      	orrs	r3, r2
    7a7c:	0019      	movs	r1, r3
    7a7e:	4643      	mov	r3, r8
    7a80:	00da      	lsls	r2, r3, #3
    7a82:	4b0f      	ldr	r3, [pc, #60]	; (7ac0 <rint+0x13c>)
    7a84:	189b      	adds	r3, r3, r2
    7a86:	681c      	ldr	r4, [r3, #0]
    7a88:	685d      	ldr	r5, [r3, #4]
    7a8a:	0022      	movs	r2, r4
    7a8c:	002b      	movs	r3, r5
    7a8e:	f000 fec7 	bl	8820 <__aeabi_dadd>
    7a92:	9000      	str	r0, [sp, #0]
    7a94:	9101      	str	r1, [sp, #4]
    7a96:	9800      	ldr	r0, [sp, #0]
    7a98:	9901      	ldr	r1, [sp, #4]
    7a9a:	0022      	movs	r2, r4
    7a9c:	002b      	movs	r3, r5
    7a9e:	f002 f883 	bl	9ba8 <__aeabi_dsub>
    7aa2:	4642      	mov	r2, r8
    7aa4:	004b      	lsls	r3, r1, #1
    7aa6:	085b      	lsrs	r3, r3, #1
    7aa8:	07d6      	lsls	r6, r2, #31
    7aaa:	4333      	orrs	r3, r6
    7aac:	0004      	movs	r4, r0
    7aae:	001d      	movs	r5, r3
    7ab0:	e7a6      	b.n	7a00 <rint+0x7c>
    7ab2:	2780      	movs	r7, #128	; 0x80
    7ab4:	063f      	lsls	r7, r7, #24
    7ab6:	e788      	b.n	79ca <rint+0x46>
    7ab8:	fffffc01 	.word	0xfffffc01
    7abc:	000fffff 	.word	0x000fffff
    7ac0:	0000c118 	.word	0x0000c118
    7ac4:	fffffbed 	.word	0xfffffbed

00007ac8 <scalbn>:
    7ac8:	004b      	lsls	r3, r1, #1
    7aca:	b570      	push	{r4, r5, r6, lr}
    7acc:	0d5b      	lsrs	r3, r3, #21
    7ace:	0014      	movs	r4, r2
    7ad0:	000a      	movs	r2, r1
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d11a      	bne.n	7b0c <scalbn+0x44>
    7ad6:	004b      	lsls	r3, r1, #1
    7ad8:	085b      	lsrs	r3, r3, #1
    7ada:	4303      	orrs	r3, r0
    7adc:	d015      	beq.n	7b0a <scalbn+0x42>
    7ade:	2200      	movs	r2, #0
    7ae0:	4b22      	ldr	r3, [pc, #136]	; (7b6c <scalbn+0xa4>)
    7ae2:	f001 fde1 	bl	96a8 <__aeabi_dmul>
    7ae6:	4b22      	ldr	r3, [pc, #136]	; (7b70 <scalbn+0xa8>)
    7ae8:	000a      	movs	r2, r1
    7aea:	429c      	cmp	r4, r3
    7aec:	db22      	blt.n	7b34 <scalbn+0x6c>
    7aee:	004b      	lsls	r3, r1, #1
    7af0:	0d5b      	lsrs	r3, r3, #21
    7af2:	3b36      	subs	r3, #54	; 0x36
    7af4:	4d1f      	ldr	r5, [pc, #124]	; (7b74 <scalbn+0xac>)
    7af6:	18e3      	adds	r3, r4, r3
    7af8:	42ab      	cmp	r3, r5
    7afa:	dc20      	bgt.n	7b3e <scalbn+0x76>
    7afc:	2b00      	cmp	r3, #0
    7afe:	dd0d      	ble.n	7b1c <scalbn+0x54>
    7b00:	4c1d      	ldr	r4, [pc, #116]	; (7b78 <scalbn+0xb0>)
    7b02:	051b      	lsls	r3, r3, #20
    7b04:	4022      	ands	r2, r4
    7b06:	431a      	orrs	r2, r3
    7b08:	0011      	movs	r1, r2
    7b0a:	bd70      	pop	{r4, r5, r6, pc}
    7b0c:	4d1b      	ldr	r5, [pc, #108]	; (7b7c <scalbn+0xb4>)
    7b0e:	42ab      	cmp	r3, r5
    7b10:	d1f0      	bne.n	7af4 <scalbn+0x2c>
    7b12:	0002      	movs	r2, r0
    7b14:	000b      	movs	r3, r1
    7b16:	f000 fe83 	bl	8820 <__aeabi_dadd>
    7b1a:	e7f6      	b.n	7b0a <scalbn+0x42>
    7b1c:	001d      	movs	r5, r3
    7b1e:	3535      	adds	r5, #53	; 0x35
    7b20:	da18      	bge.n	7b54 <scalbn+0x8c>
    7b22:	4b17      	ldr	r3, [pc, #92]	; (7b80 <scalbn+0xb8>)
    7b24:	0002      	movs	r2, r0
    7b26:	429c      	cmp	r4, r3
    7b28:	dc0a      	bgt.n	7b40 <scalbn+0x78>
    7b2a:	000b      	movs	r3, r1
    7b2c:	4815      	ldr	r0, [pc, #84]	; (7b84 <scalbn+0xbc>)
    7b2e:	4916      	ldr	r1, [pc, #88]	; (7b88 <scalbn+0xc0>)
    7b30:	f000 f832 	bl	7b98 <copysign>
    7b34:	4a13      	ldr	r2, [pc, #76]	; (7b84 <scalbn+0xbc>)
    7b36:	4b14      	ldr	r3, [pc, #80]	; (7b88 <scalbn+0xc0>)
    7b38:	f001 fdb6 	bl	96a8 <__aeabi_dmul>
    7b3c:	e7e5      	b.n	7b0a <scalbn+0x42>
    7b3e:	0002      	movs	r2, r0
    7b40:	000b      	movs	r3, r1
    7b42:	4812      	ldr	r0, [pc, #72]	; (7b8c <scalbn+0xc4>)
    7b44:	4912      	ldr	r1, [pc, #72]	; (7b90 <scalbn+0xc8>)
    7b46:	f000 f827 	bl	7b98 <copysign>
    7b4a:	4a10      	ldr	r2, [pc, #64]	; (7b8c <scalbn+0xc4>)
    7b4c:	4b10      	ldr	r3, [pc, #64]	; (7b90 <scalbn+0xc8>)
    7b4e:	f001 fdab 	bl	96a8 <__aeabi_dmul>
    7b52:	e7da      	b.n	7b0a <scalbn+0x42>
    7b54:	4c08      	ldr	r4, [pc, #32]	; (7b78 <scalbn+0xb0>)
    7b56:	3336      	adds	r3, #54	; 0x36
    7b58:	4022      	ands	r2, r4
    7b5a:	051b      	lsls	r3, r3, #20
    7b5c:	4313      	orrs	r3, r2
    7b5e:	0019      	movs	r1, r3
    7b60:	2200      	movs	r2, #0
    7b62:	4b0c      	ldr	r3, [pc, #48]	; (7b94 <scalbn+0xcc>)
    7b64:	f001 fda0 	bl	96a8 <__aeabi_dmul>
    7b68:	e7cf      	b.n	7b0a <scalbn+0x42>
    7b6a:	46c0      	nop			; (mov r8, r8)
    7b6c:	43500000 	.word	0x43500000
    7b70:	ffff3cb0 	.word	0xffff3cb0
    7b74:	000007fe 	.word	0x000007fe
    7b78:	800fffff 	.word	0x800fffff
    7b7c:	000007ff 	.word	0x000007ff
    7b80:	0000c350 	.word	0x0000c350
    7b84:	c2f8f359 	.word	0xc2f8f359
    7b88:	01a56e1f 	.word	0x01a56e1f
    7b8c:	8800759c 	.word	0x8800759c
    7b90:	7e37e43c 	.word	0x7e37e43c
    7b94:	3c900000 	.word	0x3c900000

00007b98 <copysign>:
    7b98:	b530      	push	{r4, r5, lr}
    7b9a:	004a      	lsls	r2, r1, #1
    7b9c:	0fdb      	lsrs	r3, r3, #31
    7b9e:	07db      	lsls	r3, r3, #31
    7ba0:	0852      	lsrs	r2, r2, #1
    7ba2:	431a      	orrs	r2, r3
    7ba4:	0011      	movs	r1, r2
    7ba6:	bd30      	pop	{r4, r5, pc}

00007ba8 <__udivsi3>:
    7ba8:	2200      	movs	r2, #0
    7baa:	0843      	lsrs	r3, r0, #1
    7bac:	428b      	cmp	r3, r1
    7bae:	d374      	bcc.n	7c9a <__udivsi3+0xf2>
    7bb0:	0903      	lsrs	r3, r0, #4
    7bb2:	428b      	cmp	r3, r1
    7bb4:	d35f      	bcc.n	7c76 <__udivsi3+0xce>
    7bb6:	0a03      	lsrs	r3, r0, #8
    7bb8:	428b      	cmp	r3, r1
    7bba:	d344      	bcc.n	7c46 <__udivsi3+0x9e>
    7bbc:	0b03      	lsrs	r3, r0, #12
    7bbe:	428b      	cmp	r3, r1
    7bc0:	d328      	bcc.n	7c14 <__udivsi3+0x6c>
    7bc2:	0c03      	lsrs	r3, r0, #16
    7bc4:	428b      	cmp	r3, r1
    7bc6:	d30d      	bcc.n	7be4 <__udivsi3+0x3c>
    7bc8:	22ff      	movs	r2, #255	; 0xff
    7bca:	0209      	lsls	r1, r1, #8
    7bcc:	ba12      	rev	r2, r2
    7bce:	0c03      	lsrs	r3, r0, #16
    7bd0:	428b      	cmp	r3, r1
    7bd2:	d302      	bcc.n	7bda <__udivsi3+0x32>
    7bd4:	1212      	asrs	r2, r2, #8
    7bd6:	0209      	lsls	r1, r1, #8
    7bd8:	d065      	beq.n	7ca6 <__udivsi3+0xfe>
    7bda:	0b03      	lsrs	r3, r0, #12
    7bdc:	428b      	cmp	r3, r1
    7bde:	d319      	bcc.n	7c14 <__udivsi3+0x6c>
    7be0:	e000      	b.n	7be4 <__udivsi3+0x3c>
    7be2:	0a09      	lsrs	r1, r1, #8
    7be4:	0bc3      	lsrs	r3, r0, #15
    7be6:	428b      	cmp	r3, r1
    7be8:	d301      	bcc.n	7bee <__udivsi3+0x46>
    7bea:	03cb      	lsls	r3, r1, #15
    7bec:	1ac0      	subs	r0, r0, r3
    7bee:	4152      	adcs	r2, r2
    7bf0:	0b83      	lsrs	r3, r0, #14
    7bf2:	428b      	cmp	r3, r1
    7bf4:	d301      	bcc.n	7bfa <__udivsi3+0x52>
    7bf6:	038b      	lsls	r3, r1, #14
    7bf8:	1ac0      	subs	r0, r0, r3
    7bfa:	4152      	adcs	r2, r2
    7bfc:	0b43      	lsrs	r3, r0, #13
    7bfe:	428b      	cmp	r3, r1
    7c00:	d301      	bcc.n	7c06 <__udivsi3+0x5e>
    7c02:	034b      	lsls	r3, r1, #13
    7c04:	1ac0      	subs	r0, r0, r3
    7c06:	4152      	adcs	r2, r2
    7c08:	0b03      	lsrs	r3, r0, #12
    7c0a:	428b      	cmp	r3, r1
    7c0c:	d301      	bcc.n	7c12 <__udivsi3+0x6a>
    7c0e:	030b      	lsls	r3, r1, #12
    7c10:	1ac0      	subs	r0, r0, r3
    7c12:	4152      	adcs	r2, r2
    7c14:	0ac3      	lsrs	r3, r0, #11
    7c16:	428b      	cmp	r3, r1
    7c18:	d301      	bcc.n	7c1e <__udivsi3+0x76>
    7c1a:	02cb      	lsls	r3, r1, #11
    7c1c:	1ac0      	subs	r0, r0, r3
    7c1e:	4152      	adcs	r2, r2
    7c20:	0a83      	lsrs	r3, r0, #10
    7c22:	428b      	cmp	r3, r1
    7c24:	d301      	bcc.n	7c2a <__udivsi3+0x82>
    7c26:	028b      	lsls	r3, r1, #10
    7c28:	1ac0      	subs	r0, r0, r3
    7c2a:	4152      	adcs	r2, r2
    7c2c:	0a43      	lsrs	r3, r0, #9
    7c2e:	428b      	cmp	r3, r1
    7c30:	d301      	bcc.n	7c36 <__udivsi3+0x8e>
    7c32:	024b      	lsls	r3, r1, #9
    7c34:	1ac0      	subs	r0, r0, r3
    7c36:	4152      	adcs	r2, r2
    7c38:	0a03      	lsrs	r3, r0, #8
    7c3a:	428b      	cmp	r3, r1
    7c3c:	d301      	bcc.n	7c42 <__udivsi3+0x9a>
    7c3e:	020b      	lsls	r3, r1, #8
    7c40:	1ac0      	subs	r0, r0, r3
    7c42:	4152      	adcs	r2, r2
    7c44:	d2cd      	bcs.n	7be2 <__udivsi3+0x3a>
    7c46:	09c3      	lsrs	r3, r0, #7
    7c48:	428b      	cmp	r3, r1
    7c4a:	d301      	bcc.n	7c50 <__udivsi3+0xa8>
    7c4c:	01cb      	lsls	r3, r1, #7
    7c4e:	1ac0      	subs	r0, r0, r3
    7c50:	4152      	adcs	r2, r2
    7c52:	0983      	lsrs	r3, r0, #6
    7c54:	428b      	cmp	r3, r1
    7c56:	d301      	bcc.n	7c5c <__udivsi3+0xb4>
    7c58:	018b      	lsls	r3, r1, #6
    7c5a:	1ac0      	subs	r0, r0, r3
    7c5c:	4152      	adcs	r2, r2
    7c5e:	0943      	lsrs	r3, r0, #5
    7c60:	428b      	cmp	r3, r1
    7c62:	d301      	bcc.n	7c68 <__udivsi3+0xc0>
    7c64:	014b      	lsls	r3, r1, #5
    7c66:	1ac0      	subs	r0, r0, r3
    7c68:	4152      	adcs	r2, r2
    7c6a:	0903      	lsrs	r3, r0, #4
    7c6c:	428b      	cmp	r3, r1
    7c6e:	d301      	bcc.n	7c74 <__udivsi3+0xcc>
    7c70:	010b      	lsls	r3, r1, #4
    7c72:	1ac0      	subs	r0, r0, r3
    7c74:	4152      	adcs	r2, r2
    7c76:	08c3      	lsrs	r3, r0, #3
    7c78:	428b      	cmp	r3, r1
    7c7a:	d301      	bcc.n	7c80 <__udivsi3+0xd8>
    7c7c:	00cb      	lsls	r3, r1, #3
    7c7e:	1ac0      	subs	r0, r0, r3
    7c80:	4152      	adcs	r2, r2
    7c82:	0883      	lsrs	r3, r0, #2
    7c84:	428b      	cmp	r3, r1
    7c86:	d301      	bcc.n	7c8c <__udivsi3+0xe4>
    7c88:	008b      	lsls	r3, r1, #2
    7c8a:	1ac0      	subs	r0, r0, r3
    7c8c:	4152      	adcs	r2, r2
    7c8e:	0843      	lsrs	r3, r0, #1
    7c90:	428b      	cmp	r3, r1
    7c92:	d301      	bcc.n	7c98 <__udivsi3+0xf0>
    7c94:	004b      	lsls	r3, r1, #1
    7c96:	1ac0      	subs	r0, r0, r3
    7c98:	4152      	adcs	r2, r2
    7c9a:	1a41      	subs	r1, r0, r1
    7c9c:	d200      	bcs.n	7ca0 <__udivsi3+0xf8>
    7c9e:	4601      	mov	r1, r0
    7ca0:	4152      	adcs	r2, r2
    7ca2:	4610      	mov	r0, r2
    7ca4:	4770      	bx	lr
    7ca6:	e7ff      	b.n	7ca8 <__udivsi3+0x100>
    7ca8:	b501      	push	{r0, lr}
    7caa:	2000      	movs	r0, #0
    7cac:	f000 f8f0 	bl	7e90 <__aeabi_idiv0>
    7cb0:	bd02      	pop	{r1, pc}
    7cb2:	46c0      	nop			; (mov r8, r8)

00007cb4 <__aeabi_uidivmod>:
    7cb4:	2900      	cmp	r1, #0
    7cb6:	d0f7      	beq.n	7ca8 <__udivsi3+0x100>
    7cb8:	e776      	b.n	7ba8 <__udivsi3>
    7cba:	4770      	bx	lr

00007cbc <__divsi3>:
    7cbc:	4603      	mov	r3, r0
    7cbe:	430b      	orrs	r3, r1
    7cc0:	d47f      	bmi.n	7dc2 <__divsi3+0x106>
    7cc2:	2200      	movs	r2, #0
    7cc4:	0843      	lsrs	r3, r0, #1
    7cc6:	428b      	cmp	r3, r1
    7cc8:	d374      	bcc.n	7db4 <__divsi3+0xf8>
    7cca:	0903      	lsrs	r3, r0, #4
    7ccc:	428b      	cmp	r3, r1
    7cce:	d35f      	bcc.n	7d90 <__divsi3+0xd4>
    7cd0:	0a03      	lsrs	r3, r0, #8
    7cd2:	428b      	cmp	r3, r1
    7cd4:	d344      	bcc.n	7d60 <__divsi3+0xa4>
    7cd6:	0b03      	lsrs	r3, r0, #12
    7cd8:	428b      	cmp	r3, r1
    7cda:	d328      	bcc.n	7d2e <__divsi3+0x72>
    7cdc:	0c03      	lsrs	r3, r0, #16
    7cde:	428b      	cmp	r3, r1
    7ce0:	d30d      	bcc.n	7cfe <__divsi3+0x42>
    7ce2:	22ff      	movs	r2, #255	; 0xff
    7ce4:	0209      	lsls	r1, r1, #8
    7ce6:	ba12      	rev	r2, r2
    7ce8:	0c03      	lsrs	r3, r0, #16
    7cea:	428b      	cmp	r3, r1
    7cec:	d302      	bcc.n	7cf4 <__divsi3+0x38>
    7cee:	1212      	asrs	r2, r2, #8
    7cf0:	0209      	lsls	r1, r1, #8
    7cf2:	d065      	beq.n	7dc0 <__divsi3+0x104>
    7cf4:	0b03      	lsrs	r3, r0, #12
    7cf6:	428b      	cmp	r3, r1
    7cf8:	d319      	bcc.n	7d2e <__divsi3+0x72>
    7cfa:	e000      	b.n	7cfe <__divsi3+0x42>
    7cfc:	0a09      	lsrs	r1, r1, #8
    7cfe:	0bc3      	lsrs	r3, r0, #15
    7d00:	428b      	cmp	r3, r1
    7d02:	d301      	bcc.n	7d08 <__divsi3+0x4c>
    7d04:	03cb      	lsls	r3, r1, #15
    7d06:	1ac0      	subs	r0, r0, r3
    7d08:	4152      	adcs	r2, r2
    7d0a:	0b83      	lsrs	r3, r0, #14
    7d0c:	428b      	cmp	r3, r1
    7d0e:	d301      	bcc.n	7d14 <__divsi3+0x58>
    7d10:	038b      	lsls	r3, r1, #14
    7d12:	1ac0      	subs	r0, r0, r3
    7d14:	4152      	adcs	r2, r2
    7d16:	0b43      	lsrs	r3, r0, #13
    7d18:	428b      	cmp	r3, r1
    7d1a:	d301      	bcc.n	7d20 <__divsi3+0x64>
    7d1c:	034b      	lsls	r3, r1, #13
    7d1e:	1ac0      	subs	r0, r0, r3
    7d20:	4152      	adcs	r2, r2
    7d22:	0b03      	lsrs	r3, r0, #12
    7d24:	428b      	cmp	r3, r1
    7d26:	d301      	bcc.n	7d2c <__divsi3+0x70>
    7d28:	030b      	lsls	r3, r1, #12
    7d2a:	1ac0      	subs	r0, r0, r3
    7d2c:	4152      	adcs	r2, r2
    7d2e:	0ac3      	lsrs	r3, r0, #11
    7d30:	428b      	cmp	r3, r1
    7d32:	d301      	bcc.n	7d38 <__divsi3+0x7c>
    7d34:	02cb      	lsls	r3, r1, #11
    7d36:	1ac0      	subs	r0, r0, r3
    7d38:	4152      	adcs	r2, r2
    7d3a:	0a83      	lsrs	r3, r0, #10
    7d3c:	428b      	cmp	r3, r1
    7d3e:	d301      	bcc.n	7d44 <__divsi3+0x88>
    7d40:	028b      	lsls	r3, r1, #10
    7d42:	1ac0      	subs	r0, r0, r3
    7d44:	4152      	adcs	r2, r2
    7d46:	0a43      	lsrs	r3, r0, #9
    7d48:	428b      	cmp	r3, r1
    7d4a:	d301      	bcc.n	7d50 <__divsi3+0x94>
    7d4c:	024b      	lsls	r3, r1, #9
    7d4e:	1ac0      	subs	r0, r0, r3
    7d50:	4152      	adcs	r2, r2
    7d52:	0a03      	lsrs	r3, r0, #8
    7d54:	428b      	cmp	r3, r1
    7d56:	d301      	bcc.n	7d5c <__divsi3+0xa0>
    7d58:	020b      	lsls	r3, r1, #8
    7d5a:	1ac0      	subs	r0, r0, r3
    7d5c:	4152      	adcs	r2, r2
    7d5e:	d2cd      	bcs.n	7cfc <__divsi3+0x40>
    7d60:	09c3      	lsrs	r3, r0, #7
    7d62:	428b      	cmp	r3, r1
    7d64:	d301      	bcc.n	7d6a <__divsi3+0xae>
    7d66:	01cb      	lsls	r3, r1, #7
    7d68:	1ac0      	subs	r0, r0, r3
    7d6a:	4152      	adcs	r2, r2
    7d6c:	0983      	lsrs	r3, r0, #6
    7d6e:	428b      	cmp	r3, r1
    7d70:	d301      	bcc.n	7d76 <__divsi3+0xba>
    7d72:	018b      	lsls	r3, r1, #6
    7d74:	1ac0      	subs	r0, r0, r3
    7d76:	4152      	adcs	r2, r2
    7d78:	0943      	lsrs	r3, r0, #5
    7d7a:	428b      	cmp	r3, r1
    7d7c:	d301      	bcc.n	7d82 <__divsi3+0xc6>
    7d7e:	014b      	lsls	r3, r1, #5
    7d80:	1ac0      	subs	r0, r0, r3
    7d82:	4152      	adcs	r2, r2
    7d84:	0903      	lsrs	r3, r0, #4
    7d86:	428b      	cmp	r3, r1
    7d88:	d301      	bcc.n	7d8e <__divsi3+0xd2>
    7d8a:	010b      	lsls	r3, r1, #4
    7d8c:	1ac0      	subs	r0, r0, r3
    7d8e:	4152      	adcs	r2, r2
    7d90:	08c3      	lsrs	r3, r0, #3
    7d92:	428b      	cmp	r3, r1
    7d94:	d301      	bcc.n	7d9a <__divsi3+0xde>
    7d96:	00cb      	lsls	r3, r1, #3
    7d98:	1ac0      	subs	r0, r0, r3
    7d9a:	4152      	adcs	r2, r2
    7d9c:	0883      	lsrs	r3, r0, #2
    7d9e:	428b      	cmp	r3, r1
    7da0:	d301      	bcc.n	7da6 <__divsi3+0xea>
    7da2:	008b      	lsls	r3, r1, #2
    7da4:	1ac0      	subs	r0, r0, r3
    7da6:	4152      	adcs	r2, r2
    7da8:	0843      	lsrs	r3, r0, #1
    7daa:	428b      	cmp	r3, r1
    7dac:	d301      	bcc.n	7db2 <__divsi3+0xf6>
    7dae:	004b      	lsls	r3, r1, #1
    7db0:	1ac0      	subs	r0, r0, r3
    7db2:	4152      	adcs	r2, r2
    7db4:	1a41      	subs	r1, r0, r1
    7db6:	d200      	bcs.n	7dba <__divsi3+0xfe>
    7db8:	4601      	mov	r1, r0
    7dba:	4152      	adcs	r2, r2
    7dbc:	4610      	mov	r0, r2
    7dbe:	4770      	bx	lr
    7dc0:	e05d      	b.n	7e7e <__divsi3+0x1c2>
    7dc2:	0fca      	lsrs	r2, r1, #31
    7dc4:	d000      	beq.n	7dc8 <__divsi3+0x10c>
    7dc6:	4249      	negs	r1, r1
    7dc8:	1003      	asrs	r3, r0, #32
    7dca:	d300      	bcc.n	7dce <__divsi3+0x112>
    7dcc:	4240      	negs	r0, r0
    7dce:	4053      	eors	r3, r2
    7dd0:	2200      	movs	r2, #0
    7dd2:	469c      	mov	ip, r3
    7dd4:	0903      	lsrs	r3, r0, #4
    7dd6:	428b      	cmp	r3, r1
    7dd8:	d32d      	bcc.n	7e36 <__divsi3+0x17a>
    7dda:	0a03      	lsrs	r3, r0, #8
    7ddc:	428b      	cmp	r3, r1
    7dde:	d312      	bcc.n	7e06 <__divsi3+0x14a>
    7de0:	22fc      	movs	r2, #252	; 0xfc
    7de2:	0189      	lsls	r1, r1, #6
    7de4:	ba12      	rev	r2, r2
    7de6:	0a03      	lsrs	r3, r0, #8
    7de8:	428b      	cmp	r3, r1
    7dea:	d30c      	bcc.n	7e06 <__divsi3+0x14a>
    7dec:	0189      	lsls	r1, r1, #6
    7dee:	1192      	asrs	r2, r2, #6
    7df0:	428b      	cmp	r3, r1
    7df2:	d308      	bcc.n	7e06 <__divsi3+0x14a>
    7df4:	0189      	lsls	r1, r1, #6
    7df6:	1192      	asrs	r2, r2, #6
    7df8:	428b      	cmp	r3, r1
    7dfa:	d304      	bcc.n	7e06 <__divsi3+0x14a>
    7dfc:	0189      	lsls	r1, r1, #6
    7dfe:	d03a      	beq.n	7e76 <__divsi3+0x1ba>
    7e00:	1192      	asrs	r2, r2, #6
    7e02:	e000      	b.n	7e06 <__divsi3+0x14a>
    7e04:	0989      	lsrs	r1, r1, #6
    7e06:	09c3      	lsrs	r3, r0, #7
    7e08:	428b      	cmp	r3, r1
    7e0a:	d301      	bcc.n	7e10 <__divsi3+0x154>
    7e0c:	01cb      	lsls	r3, r1, #7
    7e0e:	1ac0      	subs	r0, r0, r3
    7e10:	4152      	adcs	r2, r2
    7e12:	0983      	lsrs	r3, r0, #6
    7e14:	428b      	cmp	r3, r1
    7e16:	d301      	bcc.n	7e1c <__divsi3+0x160>
    7e18:	018b      	lsls	r3, r1, #6
    7e1a:	1ac0      	subs	r0, r0, r3
    7e1c:	4152      	adcs	r2, r2
    7e1e:	0943      	lsrs	r3, r0, #5
    7e20:	428b      	cmp	r3, r1
    7e22:	d301      	bcc.n	7e28 <__divsi3+0x16c>
    7e24:	014b      	lsls	r3, r1, #5
    7e26:	1ac0      	subs	r0, r0, r3
    7e28:	4152      	adcs	r2, r2
    7e2a:	0903      	lsrs	r3, r0, #4
    7e2c:	428b      	cmp	r3, r1
    7e2e:	d301      	bcc.n	7e34 <__divsi3+0x178>
    7e30:	010b      	lsls	r3, r1, #4
    7e32:	1ac0      	subs	r0, r0, r3
    7e34:	4152      	adcs	r2, r2
    7e36:	08c3      	lsrs	r3, r0, #3
    7e38:	428b      	cmp	r3, r1
    7e3a:	d301      	bcc.n	7e40 <__divsi3+0x184>
    7e3c:	00cb      	lsls	r3, r1, #3
    7e3e:	1ac0      	subs	r0, r0, r3
    7e40:	4152      	adcs	r2, r2
    7e42:	0883      	lsrs	r3, r0, #2
    7e44:	428b      	cmp	r3, r1
    7e46:	d301      	bcc.n	7e4c <__divsi3+0x190>
    7e48:	008b      	lsls	r3, r1, #2
    7e4a:	1ac0      	subs	r0, r0, r3
    7e4c:	4152      	adcs	r2, r2
    7e4e:	d2d9      	bcs.n	7e04 <__divsi3+0x148>
    7e50:	0843      	lsrs	r3, r0, #1
    7e52:	428b      	cmp	r3, r1
    7e54:	d301      	bcc.n	7e5a <__divsi3+0x19e>
    7e56:	004b      	lsls	r3, r1, #1
    7e58:	1ac0      	subs	r0, r0, r3
    7e5a:	4152      	adcs	r2, r2
    7e5c:	1a41      	subs	r1, r0, r1
    7e5e:	d200      	bcs.n	7e62 <__divsi3+0x1a6>
    7e60:	4601      	mov	r1, r0
    7e62:	4663      	mov	r3, ip
    7e64:	4152      	adcs	r2, r2
    7e66:	105b      	asrs	r3, r3, #1
    7e68:	4610      	mov	r0, r2
    7e6a:	d301      	bcc.n	7e70 <__divsi3+0x1b4>
    7e6c:	4240      	negs	r0, r0
    7e6e:	2b00      	cmp	r3, #0
    7e70:	d500      	bpl.n	7e74 <__divsi3+0x1b8>
    7e72:	4249      	negs	r1, r1
    7e74:	4770      	bx	lr
    7e76:	4663      	mov	r3, ip
    7e78:	105b      	asrs	r3, r3, #1
    7e7a:	d300      	bcc.n	7e7e <__divsi3+0x1c2>
    7e7c:	4240      	negs	r0, r0
    7e7e:	b501      	push	{r0, lr}
    7e80:	2000      	movs	r0, #0
    7e82:	f000 f805 	bl	7e90 <__aeabi_idiv0>
    7e86:	bd02      	pop	{r1, pc}

00007e88 <__aeabi_idivmod>:
    7e88:	2900      	cmp	r1, #0
    7e8a:	d0f8      	beq.n	7e7e <__divsi3+0x1c2>
    7e8c:	e716      	b.n	7cbc <__divsi3>
    7e8e:	4770      	bx	lr

00007e90 <__aeabi_idiv0>:
    7e90:	4770      	bx	lr
    7e92:	46c0      	nop			; (mov r8, r8)

00007e94 <__aeabi_cdrcmple>:
    7e94:	4684      	mov	ip, r0
    7e96:	1c10      	adds	r0, r2, #0
    7e98:	4662      	mov	r2, ip
    7e9a:	468c      	mov	ip, r1
    7e9c:	1c19      	adds	r1, r3, #0
    7e9e:	4663      	mov	r3, ip
    7ea0:	e000      	b.n	7ea4 <__aeabi_cdcmpeq>
    7ea2:	46c0      	nop			; (mov r8, r8)

00007ea4 <__aeabi_cdcmpeq>:
    7ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7ea6:	f001 fb9d 	bl	95e4 <__ledf2>
    7eaa:	2800      	cmp	r0, #0
    7eac:	d401      	bmi.n	7eb2 <__aeabi_cdcmpeq+0xe>
    7eae:	2100      	movs	r1, #0
    7eb0:	42c8      	cmn	r0, r1
    7eb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007eb4 <__aeabi_dcmpeq>:
    7eb4:	b510      	push	{r4, lr}
    7eb6:	f001 faf7 	bl	94a8 <__eqdf2>
    7eba:	4240      	negs	r0, r0
    7ebc:	3001      	adds	r0, #1
    7ebe:	bd10      	pop	{r4, pc}

00007ec0 <__aeabi_dcmplt>:
    7ec0:	b510      	push	{r4, lr}
    7ec2:	f001 fb8f 	bl	95e4 <__ledf2>
    7ec6:	2800      	cmp	r0, #0
    7ec8:	db01      	blt.n	7ece <__aeabi_dcmplt+0xe>
    7eca:	2000      	movs	r0, #0
    7ecc:	bd10      	pop	{r4, pc}
    7ece:	2001      	movs	r0, #1
    7ed0:	bd10      	pop	{r4, pc}
    7ed2:	46c0      	nop			; (mov r8, r8)

00007ed4 <__aeabi_dcmple>:
    7ed4:	b510      	push	{r4, lr}
    7ed6:	f001 fb85 	bl	95e4 <__ledf2>
    7eda:	2800      	cmp	r0, #0
    7edc:	dd01      	ble.n	7ee2 <__aeabi_dcmple+0xe>
    7ede:	2000      	movs	r0, #0
    7ee0:	bd10      	pop	{r4, pc}
    7ee2:	2001      	movs	r0, #1
    7ee4:	bd10      	pop	{r4, pc}
    7ee6:	46c0      	nop			; (mov r8, r8)

00007ee8 <__aeabi_dcmpgt>:
    7ee8:	b510      	push	{r4, lr}
    7eea:	f001 fb17 	bl	951c <__gedf2>
    7eee:	2800      	cmp	r0, #0
    7ef0:	dc01      	bgt.n	7ef6 <__aeabi_dcmpgt+0xe>
    7ef2:	2000      	movs	r0, #0
    7ef4:	bd10      	pop	{r4, pc}
    7ef6:	2001      	movs	r0, #1
    7ef8:	bd10      	pop	{r4, pc}
    7efa:	46c0      	nop			; (mov r8, r8)

00007efc <__aeabi_dcmpge>:
    7efc:	b510      	push	{r4, lr}
    7efe:	f001 fb0d 	bl	951c <__gedf2>
    7f02:	2800      	cmp	r0, #0
    7f04:	da01      	bge.n	7f0a <__aeabi_dcmpge+0xe>
    7f06:	2000      	movs	r0, #0
    7f08:	bd10      	pop	{r4, pc}
    7f0a:	2001      	movs	r0, #1
    7f0c:	bd10      	pop	{r4, pc}
    7f0e:	46c0      	nop			; (mov r8, r8)

00007f10 <__clzsi2>:
    7f10:	211c      	movs	r1, #28
    7f12:	2301      	movs	r3, #1
    7f14:	041b      	lsls	r3, r3, #16
    7f16:	4298      	cmp	r0, r3
    7f18:	d301      	bcc.n	7f1e <__clzsi2+0xe>
    7f1a:	0c00      	lsrs	r0, r0, #16
    7f1c:	3910      	subs	r1, #16
    7f1e:	0a1b      	lsrs	r3, r3, #8
    7f20:	4298      	cmp	r0, r3
    7f22:	d301      	bcc.n	7f28 <__clzsi2+0x18>
    7f24:	0a00      	lsrs	r0, r0, #8
    7f26:	3908      	subs	r1, #8
    7f28:	091b      	lsrs	r3, r3, #4
    7f2a:	4298      	cmp	r0, r3
    7f2c:	d301      	bcc.n	7f32 <__clzsi2+0x22>
    7f2e:	0900      	lsrs	r0, r0, #4
    7f30:	3904      	subs	r1, #4
    7f32:	a202      	add	r2, pc, #8	; (adr r2, 7f3c <__clzsi2+0x2c>)
    7f34:	5c10      	ldrb	r0, [r2, r0]
    7f36:	1840      	adds	r0, r0, r1
    7f38:	4770      	bx	lr
    7f3a:	46c0      	nop			; (mov r8, r8)
    7f3c:	02020304 	.word	0x02020304
    7f40:	01010101 	.word	0x01010101
	...

00007f4c <__ctzsi2>:
    7f4c:	4241      	negs	r1, r0
    7f4e:	4008      	ands	r0, r1
    7f50:	211c      	movs	r1, #28
    7f52:	2301      	movs	r3, #1
    7f54:	041b      	lsls	r3, r3, #16
    7f56:	4298      	cmp	r0, r3
    7f58:	d301      	bcc.n	7f5e <__ctzsi2+0x12>
    7f5a:	0c00      	lsrs	r0, r0, #16
    7f5c:	3910      	subs	r1, #16
    7f5e:	0a1b      	lsrs	r3, r3, #8
    7f60:	4298      	cmp	r0, r3
    7f62:	d301      	bcc.n	7f68 <__ctzsi2+0x1c>
    7f64:	0a00      	lsrs	r0, r0, #8
    7f66:	3908      	subs	r1, #8
    7f68:	091b      	lsrs	r3, r3, #4
    7f6a:	4298      	cmp	r0, r3
    7f6c:	d301      	bcc.n	7f72 <__ctzsi2+0x26>
    7f6e:	0900      	lsrs	r0, r0, #4
    7f70:	3904      	subs	r1, #4
    7f72:	a202      	add	r2, pc, #8	; (adr r2, 7f7c <__ctzsi2+0x30>)
    7f74:	5c10      	ldrb	r0, [r2, r0]
    7f76:	1a40      	subs	r0, r0, r1
    7f78:	4770      	bx	lr
    7f7a:	46c0      	nop			; (mov r8, r8)
    7f7c:	1d1d1c1b 	.word	0x1d1d1c1b
    7f80:	1e1e1e1e 	.word	0x1e1e1e1e
    7f84:	1f1f1f1f 	.word	0x1f1f1f1f
    7f88:	1f1f1f1f 	.word	0x1f1f1f1f

00007f8c <__aeabi_uldivmod>:
    7f8c:	2b00      	cmp	r3, #0
    7f8e:	d111      	bne.n	7fb4 <__aeabi_uldivmod+0x28>
    7f90:	2a00      	cmp	r2, #0
    7f92:	d10f      	bne.n	7fb4 <__aeabi_uldivmod+0x28>
    7f94:	2900      	cmp	r1, #0
    7f96:	d100      	bne.n	7f9a <__aeabi_uldivmod+0xe>
    7f98:	2800      	cmp	r0, #0
    7f9a:	d002      	beq.n	7fa2 <__aeabi_uldivmod+0x16>
    7f9c:	2100      	movs	r1, #0
    7f9e:	43c9      	mvns	r1, r1
    7fa0:	1c08      	adds	r0, r1, #0
    7fa2:	b407      	push	{r0, r1, r2}
    7fa4:	4802      	ldr	r0, [pc, #8]	; (7fb0 <__aeabi_uldivmod+0x24>)
    7fa6:	a102      	add	r1, pc, #8	; (adr r1, 7fb0 <__aeabi_uldivmod+0x24>)
    7fa8:	1840      	adds	r0, r0, r1
    7faa:	9002      	str	r0, [sp, #8]
    7fac:	bd03      	pop	{r0, r1, pc}
    7fae:	46c0      	nop			; (mov r8, r8)
    7fb0:	fffffee1 	.word	0xfffffee1
    7fb4:	b403      	push	{r0, r1}
    7fb6:	4668      	mov	r0, sp
    7fb8:	b501      	push	{r0, lr}
    7fba:	9802      	ldr	r0, [sp, #8]
    7fbc:	f000 f84e 	bl	805c <__udivmoddi4>
    7fc0:	9b01      	ldr	r3, [sp, #4]
    7fc2:	469e      	mov	lr, r3
    7fc4:	b002      	add	sp, #8
    7fc6:	bc0c      	pop	{r2, r3}
    7fc8:	4770      	bx	lr
    7fca:	46c0      	nop			; (mov r8, r8)

00007fcc <__aeabi_lmul>:
    7fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fce:	46ce      	mov	lr, r9
    7fd0:	4647      	mov	r7, r8
    7fd2:	0415      	lsls	r5, r2, #16
    7fd4:	0c2d      	lsrs	r5, r5, #16
    7fd6:	002e      	movs	r6, r5
    7fd8:	b580      	push	{r7, lr}
    7fda:	0407      	lsls	r7, r0, #16
    7fdc:	0c14      	lsrs	r4, r2, #16
    7fde:	0c3f      	lsrs	r7, r7, #16
    7fe0:	4699      	mov	r9, r3
    7fe2:	0c03      	lsrs	r3, r0, #16
    7fe4:	437e      	muls	r6, r7
    7fe6:	435d      	muls	r5, r3
    7fe8:	4367      	muls	r7, r4
    7fea:	4363      	muls	r3, r4
    7fec:	197f      	adds	r7, r7, r5
    7fee:	0c34      	lsrs	r4, r6, #16
    7ff0:	19e4      	adds	r4, r4, r7
    7ff2:	469c      	mov	ip, r3
    7ff4:	42a5      	cmp	r5, r4
    7ff6:	d903      	bls.n	8000 <__aeabi_lmul+0x34>
    7ff8:	2380      	movs	r3, #128	; 0x80
    7ffa:	025b      	lsls	r3, r3, #9
    7ffc:	4698      	mov	r8, r3
    7ffe:	44c4      	add	ip, r8
    8000:	464b      	mov	r3, r9
    8002:	4351      	muls	r1, r2
    8004:	4343      	muls	r3, r0
    8006:	0436      	lsls	r6, r6, #16
    8008:	0c36      	lsrs	r6, r6, #16
    800a:	0c25      	lsrs	r5, r4, #16
    800c:	0424      	lsls	r4, r4, #16
    800e:	4465      	add	r5, ip
    8010:	19a4      	adds	r4, r4, r6
    8012:	1859      	adds	r1, r3, r1
    8014:	1949      	adds	r1, r1, r5
    8016:	0020      	movs	r0, r4
    8018:	bc0c      	pop	{r2, r3}
    801a:	4690      	mov	r8, r2
    801c:	4699      	mov	r9, r3
    801e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008020 <__aeabi_d2uiz>:
    8020:	b570      	push	{r4, r5, r6, lr}
    8022:	2200      	movs	r2, #0
    8024:	4b0c      	ldr	r3, [pc, #48]	; (8058 <__aeabi_d2uiz+0x38>)
    8026:	0004      	movs	r4, r0
    8028:	000d      	movs	r5, r1
    802a:	f7ff ff67 	bl	7efc <__aeabi_dcmpge>
    802e:	2800      	cmp	r0, #0
    8030:	d104      	bne.n	803c <__aeabi_d2uiz+0x1c>
    8032:	0020      	movs	r0, r4
    8034:	0029      	movs	r1, r5
    8036:	f002 f8ed 	bl	a214 <__aeabi_d2iz>
    803a:	bd70      	pop	{r4, r5, r6, pc}
    803c:	4b06      	ldr	r3, [pc, #24]	; (8058 <__aeabi_d2uiz+0x38>)
    803e:	2200      	movs	r2, #0
    8040:	0020      	movs	r0, r4
    8042:	0029      	movs	r1, r5
    8044:	f001 fdb0 	bl	9ba8 <__aeabi_dsub>
    8048:	f002 f8e4 	bl	a214 <__aeabi_d2iz>
    804c:	2380      	movs	r3, #128	; 0x80
    804e:	061b      	lsls	r3, r3, #24
    8050:	469c      	mov	ip, r3
    8052:	4460      	add	r0, ip
    8054:	e7f1      	b.n	803a <__aeabi_d2uiz+0x1a>
    8056:	46c0      	nop			; (mov r8, r8)
    8058:	41e00000 	.word	0x41e00000

0000805c <__udivmoddi4>:
    805c:	b5f0      	push	{r4, r5, r6, r7, lr}
    805e:	4657      	mov	r7, sl
    8060:	464e      	mov	r6, r9
    8062:	4645      	mov	r5, r8
    8064:	46de      	mov	lr, fp
    8066:	b5e0      	push	{r5, r6, r7, lr}
    8068:	0004      	movs	r4, r0
    806a:	b083      	sub	sp, #12
    806c:	000d      	movs	r5, r1
    806e:	4692      	mov	sl, r2
    8070:	4699      	mov	r9, r3
    8072:	428b      	cmp	r3, r1
    8074:	d82f      	bhi.n	80d6 <__udivmoddi4+0x7a>
    8076:	d02c      	beq.n	80d2 <__udivmoddi4+0x76>
    8078:	4649      	mov	r1, r9
    807a:	4650      	mov	r0, sl
    807c:	f002 fa54 	bl	a528 <__clzdi2>
    8080:	0029      	movs	r1, r5
    8082:	0006      	movs	r6, r0
    8084:	0020      	movs	r0, r4
    8086:	f002 fa4f 	bl	a528 <__clzdi2>
    808a:	1a33      	subs	r3, r6, r0
    808c:	4698      	mov	r8, r3
    808e:	3b20      	subs	r3, #32
    8090:	469b      	mov	fp, r3
    8092:	d500      	bpl.n	8096 <__udivmoddi4+0x3a>
    8094:	e074      	b.n	8180 <__udivmoddi4+0x124>
    8096:	4653      	mov	r3, sl
    8098:	465a      	mov	r2, fp
    809a:	4093      	lsls	r3, r2
    809c:	001f      	movs	r7, r3
    809e:	4653      	mov	r3, sl
    80a0:	4642      	mov	r2, r8
    80a2:	4093      	lsls	r3, r2
    80a4:	001e      	movs	r6, r3
    80a6:	42af      	cmp	r7, r5
    80a8:	d829      	bhi.n	80fe <__udivmoddi4+0xa2>
    80aa:	d026      	beq.n	80fa <__udivmoddi4+0x9e>
    80ac:	465b      	mov	r3, fp
    80ae:	1ba4      	subs	r4, r4, r6
    80b0:	41bd      	sbcs	r5, r7
    80b2:	2b00      	cmp	r3, #0
    80b4:	da00      	bge.n	80b8 <__udivmoddi4+0x5c>
    80b6:	e079      	b.n	81ac <__udivmoddi4+0x150>
    80b8:	2200      	movs	r2, #0
    80ba:	2300      	movs	r3, #0
    80bc:	9200      	str	r2, [sp, #0]
    80be:	9301      	str	r3, [sp, #4]
    80c0:	2301      	movs	r3, #1
    80c2:	465a      	mov	r2, fp
    80c4:	4093      	lsls	r3, r2
    80c6:	9301      	str	r3, [sp, #4]
    80c8:	2301      	movs	r3, #1
    80ca:	4642      	mov	r2, r8
    80cc:	4093      	lsls	r3, r2
    80ce:	9300      	str	r3, [sp, #0]
    80d0:	e019      	b.n	8106 <__udivmoddi4+0xaa>
    80d2:	4282      	cmp	r2, r0
    80d4:	d9d0      	bls.n	8078 <__udivmoddi4+0x1c>
    80d6:	2200      	movs	r2, #0
    80d8:	2300      	movs	r3, #0
    80da:	9200      	str	r2, [sp, #0]
    80dc:	9301      	str	r3, [sp, #4]
    80de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    80e0:	2b00      	cmp	r3, #0
    80e2:	d001      	beq.n	80e8 <__udivmoddi4+0x8c>
    80e4:	601c      	str	r4, [r3, #0]
    80e6:	605d      	str	r5, [r3, #4]
    80e8:	9800      	ldr	r0, [sp, #0]
    80ea:	9901      	ldr	r1, [sp, #4]
    80ec:	b003      	add	sp, #12
    80ee:	bc3c      	pop	{r2, r3, r4, r5}
    80f0:	4690      	mov	r8, r2
    80f2:	4699      	mov	r9, r3
    80f4:	46a2      	mov	sl, r4
    80f6:	46ab      	mov	fp, r5
    80f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80fa:	42a3      	cmp	r3, r4
    80fc:	d9d6      	bls.n	80ac <__udivmoddi4+0x50>
    80fe:	2200      	movs	r2, #0
    8100:	2300      	movs	r3, #0
    8102:	9200      	str	r2, [sp, #0]
    8104:	9301      	str	r3, [sp, #4]
    8106:	4643      	mov	r3, r8
    8108:	2b00      	cmp	r3, #0
    810a:	d0e8      	beq.n	80de <__udivmoddi4+0x82>
    810c:	07fb      	lsls	r3, r7, #31
    810e:	0872      	lsrs	r2, r6, #1
    8110:	431a      	orrs	r2, r3
    8112:	4646      	mov	r6, r8
    8114:	087b      	lsrs	r3, r7, #1
    8116:	e00e      	b.n	8136 <__udivmoddi4+0xda>
    8118:	42ab      	cmp	r3, r5
    811a:	d101      	bne.n	8120 <__udivmoddi4+0xc4>
    811c:	42a2      	cmp	r2, r4
    811e:	d80c      	bhi.n	813a <__udivmoddi4+0xde>
    8120:	1aa4      	subs	r4, r4, r2
    8122:	419d      	sbcs	r5, r3
    8124:	2001      	movs	r0, #1
    8126:	1924      	adds	r4, r4, r4
    8128:	416d      	adcs	r5, r5
    812a:	2100      	movs	r1, #0
    812c:	3e01      	subs	r6, #1
    812e:	1824      	adds	r4, r4, r0
    8130:	414d      	adcs	r5, r1
    8132:	2e00      	cmp	r6, #0
    8134:	d006      	beq.n	8144 <__udivmoddi4+0xe8>
    8136:	42ab      	cmp	r3, r5
    8138:	d9ee      	bls.n	8118 <__udivmoddi4+0xbc>
    813a:	3e01      	subs	r6, #1
    813c:	1924      	adds	r4, r4, r4
    813e:	416d      	adcs	r5, r5
    8140:	2e00      	cmp	r6, #0
    8142:	d1f8      	bne.n	8136 <__udivmoddi4+0xda>
    8144:	465b      	mov	r3, fp
    8146:	9800      	ldr	r0, [sp, #0]
    8148:	9901      	ldr	r1, [sp, #4]
    814a:	1900      	adds	r0, r0, r4
    814c:	4169      	adcs	r1, r5
    814e:	2b00      	cmp	r3, #0
    8150:	db22      	blt.n	8198 <__udivmoddi4+0x13c>
    8152:	002b      	movs	r3, r5
    8154:	465a      	mov	r2, fp
    8156:	40d3      	lsrs	r3, r2
    8158:	002a      	movs	r2, r5
    815a:	4644      	mov	r4, r8
    815c:	40e2      	lsrs	r2, r4
    815e:	001c      	movs	r4, r3
    8160:	465b      	mov	r3, fp
    8162:	0015      	movs	r5, r2
    8164:	2b00      	cmp	r3, #0
    8166:	db2c      	blt.n	81c2 <__udivmoddi4+0x166>
    8168:	0026      	movs	r6, r4
    816a:	409e      	lsls	r6, r3
    816c:	0033      	movs	r3, r6
    816e:	0026      	movs	r6, r4
    8170:	4647      	mov	r7, r8
    8172:	40be      	lsls	r6, r7
    8174:	0032      	movs	r2, r6
    8176:	1a80      	subs	r0, r0, r2
    8178:	4199      	sbcs	r1, r3
    817a:	9000      	str	r0, [sp, #0]
    817c:	9101      	str	r1, [sp, #4]
    817e:	e7ae      	b.n	80de <__udivmoddi4+0x82>
    8180:	4642      	mov	r2, r8
    8182:	2320      	movs	r3, #32
    8184:	1a9b      	subs	r3, r3, r2
    8186:	4652      	mov	r2, sl
    8188:	40da      	lsrs	r2, r3
    818a:	4641      	mov	r1, r8
    818c:	0013      	movs	r3, r2
    818e:	464a      	mov	r2, r9
    8190:	408a      	lsls	r2, r1
    8192:	0017      	movs	r7, r2
    8194:	431f      	orrs	r7, r3
    8196:	e782      	b.n	809e <__udivmoddi4+0x42>
    8198:	4642      	mov	r2, r8
    819a:	2320      	movs	r3, #32
    819c:	1a9b      	subs	r3, r3, r2
    819e:	002a      	movs	r2, r5
    81a0:	4646      	mov	r6, r8
    81a2:	409a      	lsls	r2, r3
    81a4:	0023      	movs	r3, r4
    81a6:	40f3      	lsrs	r3, r6
    81a8:	4313      	orrs	r3, r2
    81aa:	e7d5      	b.n	8158 <__udivmoddi4+0xfc>
    81ac:	4642      	mov	r2, r8
    81ae:	2320      	movs	r3, #32
    81b0:	2100      	movs	r1, #0
    81b2:	1a9b      	subs	r3, r3, r2
    81b4:	2200      	movs	r2, #0
    81b6:	9100      	str	r1, [sp, #0]
    81b8:	9201      	str	r2, [sp, #4]
    81ba:	2201      	movs	r2, #1
    81bc:	40da      	lsrs	r2, r3
    81be:	9201      	str	r2, [sp, #4]
    81c0:	e782      	b.n	80c8 <__udivmoddi4+0x6c>
    81c2:	4642      	mov	r2, r8
    81c4:	2320      	movs	r3, #32
    81c6:	0026      	movs	r6, r4
    81c8:	1a9b      	subs	r3, r3, r2
    81ca:	40de      	lsrs	r6, r3
    81cc:	002f      	movs	r7, r5
    81ce:	46b4      	mov	ip, r6
    81d0:	4097      	lsls	r7, r2
    81d2:	4666      	mov	r6, ip
    81d4:	003b      	movs	r3, r7
    81d6:	4333      	orrs	r3, r6
    81d8:	e7c9      	b.n	816e <__udivmoddi4+0x112>
    81da:	46c0      	nop			; (mov r8, r8)

000081dc <__aeabi_fadd>:
    81dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    81de:	46c6      	mov	lr, r8
    81e0:	024e      	lsls	r6, r1, #9
    81e2:	0247      	lsls	r7, r0, #9
    81e4:	0a76      	lsrs	r6, r6, #9
    81e6:	0a7b      	lsrs	r3, r7, #9
    81e8:	0044      	lsls	r4, r0, #1
    81ea:	0fc5      	lsrs	r5, r0, #31
    81ec:	00f7      	lsls	r7, r6, #3
    81ee:	0048      	lsls	r0, r1, #1
    81f0:	4698      	mov	r8, r3
    81f2:	b500      	push	{lr}
    81f4:	0e24      	lsrs	r4, r4, #24
    81f6:	002a      	movs	r2, r5
    81f8:	00db      	lsls	r3, r3, #3
    81fa:	0e00      	lsrs	r0, r0, #24
    81fc:	0fc9      	lsrs	r1, r1, #31
    81fe:	46bc      	mov	ip, r7
    8200:	428d      	cmp	r5, r1
    8202:	d067      	beq.n	82d4 <__aeabi_fadd+0xf8>
    8204:	1a22      	subs	r2, r4, r0
    8206:	2a00      	cmp	r2, #0
    8208:	dc00      	bgt.n	820c <__aeabi_fadd+0x30>
    820a:	e0a5      	b.n	8358 <__aeabi_fadd+0x17c>
    820c:	2800      	cmp	r0, #0
    820e:	d13a      	bne.n	8286 <__aeabi_fadd+0xaa>
    8210:	2f00      	cmp	r7, #0
    8212:	d100      	bne.n	8216 <__aeabi_fadd+0x3a>
    8214:	e093      	b.n	833e <__aeabi_fadd+0x162>
    8216:	1e51      	subs	r1, r2, #1
    8218:	2900      	cmp	r1, #0
    821a:	d000      	beq.n	821e <__aeabi_fadd+0x42>
    821c:	e0bc      	b.n	8398 <__aeabi_fadd+0x1bc>
    821e:	2401      	movs	r4, #1
    8220:	1bdb      	subs	r3, r3, r7
    8222:	015a      	lsls	r2, r3, #5
    8224:	d546      	bpl.n	82b4 <__aeabi_fadd+0xd8>
    8226:	019b      	lsls	r3, r3, #6
    8228:	099e      	lsrs	r6, r3, #6
    822a:	0030      	movs	r0, r6
    822c:	f7ff fe70 	bl	7f10 <__clzsi2>
    8230:	3805      	subs	r0, #5
    8232:	4086      	lsls	r6, r0
    8234:	4284      	cmp	r4, r0
    8236:	dd00      	ble.n	823a <__aeabi_fadd+0x5e>
    8238:	e09d      	b.n	8376 <__aeabi_fadd+0x19a>
    823a:	1b04      	subs	r4, r0, r4
    823c:	0032      	movs	r2, r6
    823e:	2020      	movs	r0, #32
    8240:	3401      	adds	r4, #1
    8242:	40e2      	lsrs	r2, r4
    8244:	1b04      	subs	r4, r0, r4
    8246:	40a6      	lsls	r6, r4
    8248:	0033      	movs	r3, r6
    824a:	1e5e      	subs	r6, r3, #1
    824c:	41b3      	sbcs	r3, r6
    824e:	2400      	movs	r4, #0
    8250:	4313      	orrs	r3, r2
    8252:	075a      	lsls	r2, r3, #29
    8254:	d004      	beq.n	8260 <__aeabi_fadd+0x84>
    8256:	220f      	movs	r2, #15
    8258:	401a      	ands	r2, r3
    825a:	2a04      	cmp	r2, #4
    825c:	d000      	beq.n	8260 <__aeabi_fadd+0x84>
    825e:	3304      	adds	r3, #4
    8260:	015a      	lsls	r2, r3, #5
    8262:	d529      	bpl.n	82b8 <__aeabi_fadd+0xdc>
    8264:	3401      	adds	r4, #1
    8266:	2cff      	cmp	r4, #255	; 0xff
    8268:	d100      	bne.n	826c <__aeabi_fadd+0x90>
    826a:	e081      	b.n	8370 <__aeabi_fadd+0x194>
    826c:	002a      	movs	r2, r5
    826e:	019b      	lsls	r3, r3, #6
    8270:	0a5b      	lsrs	r3, r3, #9
    8272:	b2e4      	uxtb	r4, r4
    8274:	025b      	lsls	r3, r3, #9
    8276:	05e4      	lsls	r4, r4, #23
    8278:	0a58      	lsrs	r0, r3, #9
    827a:	07d2      	lsls	r2, r2, #31
    827c:	4320      	orrs	r0, r4
    827e:	4310      	orrs	r0, r2
    8280:	bc04      	pop	{r2}
    8282:	4690      	mov	r8, r2
    8284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8286:	2cff      	cmp	r4, #255	; 0xff
    8288:	d0e3      	beq.n	8252 <__aeabi_fadd+0x76>
    828a:	2180      	movs	r1, #128	; 0x80
    828c:	0038      	movs	r0, r7
    828e:	04c9      	lsls	r1, r1, #19
    8290:	4308      	orrs	r0, r1
    8292:	4684      	mov	ip, r0
    8294:	2a1b      	cmp	r2, #27
    8296:	dd00      	ble.n	829a <__aeabi_fadd+0xbe>
    8298:	e082      	b.n	83a0 <__aeabi_fadd+0x1c4>
    829a:	2020      	movs	r0, #32
    829c:	4661      	mov	r1, ip
    829e:	40d1      	lsrs	r1, r2
    82a0:	1a82      	subs	r2, r0, r2
    82a2:	4660      	mov	r0, ip
    82a4:	4090      	lsls	r0, r2
    82a6:	0002      	movs	r2, r0
    82a8:	1e50      	subs	r0, r2, #1
    82aa:	4182      	sbcs	r2, r0
    82ac:	430a      	orrs	r2, r1
    82ae:	1a9b      	subs	r3, r3, r2
    82b0:	015a      	lsls	r2, r3, #5
    82b2:	d4b8      	bmi.n	8226 <__aeabi_fadd+0x4a>
    82b4:	075a      	lsls	r2, r3, #29
    82b6:	d1ce      	bne.n	8256 <__aeabi_fadd+0x7a>
    82b8:	08de      	lsrs	r6, r3, #3
    82ba:	002a      	movs	r2, r5
    82bc:	2cff      	cmp	r4, #255	; 0xff
    82be:	d13a      	bne.n	8336 <__aeabi_fadd+0x15a>
    82c0:	2e00      	cmp	r6, #0
    82c2:	d100      	bne.n	82c6 <__aeabi_fadd+0xea>
    82c4:	e0ae      	b.n	8424 <__aeabi_fadd+0x248>
    82c6:	2380      	movs	r3, #128	; 0x80
    82c8:	03db      	lsls	r3, r3, #15
    82ca:	4333      	orrs	r3, r6
    82cc:	025b      	lsls	r3, r3, #9
    82ce:	0a5b      	lsrs	r3, r3, #9
    82d0:	24ff      	movs	r4, #255	; 0xff
    82d2:	e7cf      	b.n	8274 <__aeabi_fadd+0x98>
    82d4:	1a21      	subs	r1, r4, r0
    82d6:	2900      	cmp	r1, #0
    82d8:	dd52      	ble.n	8380 <__aeabi_fadd+0x1a4>
    82da:	2800      	cmp	r0, #0
    82dc:	d031      	beq.n	8342 <__aeabi_fadd+0x166>
    82de:	2cff      	cmp	r4, #255	; 0xff
    82e0:	d0b7      	beq.n	8252 <__aeabi_fadd+0x76>
    82e2:	2080      	movs	r0, #128	; 0x80
    82e4:	003e      	movs	r6, r7
    82e6:	04c0      	lsls	r0, r0, #19
    82e8:	4306      	orrs	r6, r0
    82ea:	46b4      	mov	ip, r6
    82ec:	291b      	cmp	r1, #27
    82ee:	dd00      	ble.n	82f2 <__aeabi_fadd+0x116>
    82f0:	e0aa      	b.n	8448 <__aeabi_fadd+0x26c>
    82f2:	2620      	movs	r6, #32
    82f4:	4660      	mov	r0, ip
    82f6:	40c8      	lsrs	r0, r1
    82f8:	1a71      	subs	r1, r6, r1
    82fa:	4666      	mov	r6, ip
    82fc:	408e      	lsls	r6, r1
    82fe:	0031      	movs	r1, r6
    8300:	1e4e      	subs	r6, r1, #1
    8302:	41b1      	sbcs	r1, r6
    8304:	4301      	orrs	r1, r0
    8306:	185b      	adds	r3, r3, r1
    8308:	0159      	lsls	r1, r3, #5
    830a:	d5d3      	bpl.n	82b4 <__aeabi_fadd+0xd8>
    830c:	3401      	adds	r4, #1
    830e:	2cff      	cmp	r4, #255	; 0xff
    8310:	d100      	bne.n	8314 <__aeabi_fadd+0x138>
    8312:	e087      	b.n	8424 <__aeabi_fadd+0x248>
    8314:	2201      	movs	r2, #1
    8316:	4978      	ldr	r1, [pc, #480]	; (84f8 <__aeabi_fadd+0x31c>)
    8318:	401a      	ands	r2, r3
    831a:	085b      	lsrs	r3, r3, #1
    831c:	400b      	ands	r3, r1
    831e:	4313      	orrs	r3, r2
    8320:	e797      	b.n	8252 <__aeabi_fadd+0x76>
    8322:	2c00      	cmp	r4, #0
    8324:	d000      	beq.n	8328 <__aeabi_fadd+0x14c>
    8326:	e0a7      	b.n	8478 <__aeabi_fadd+0x29c>
    8328:	2b00      	cmp	r3, #0
    832a:	d000      	beq.n	832e <__aeabi_fadd+0x152>
    832c:	e0b6      	b.n	849c <__aeabi_fadd+0x2c0>
    832e:	1e3b      	subs	r3, r7, #0
    8330:	d162      	bne.n	83f8 <__aeabi_fadd+0x21c>
    8332:	2600      	movs	r6, #0
    8334:	2200      	movs	r2, #0
    8336:	0273      	lsls	r3, r6, #9
    8338:	0a5b      	lsrs	r3, r3, #9
    833a:	b2e4      	uxtb	r4, r4
    833c:	e79a      	b.n	8274 <__aeabi_fadd+0x98>
    833e:	0014      	movs	r4, r2
    8340:	e787      	b.n	8252 <__aeabi_fadd+0x76>
    8342:	2f00      	cmp	r7, #0
    8344:	d04d      	beq.n	83e2 <__aeabi_fadd+0x206>
    8346:	1e48      	subs	r0, r1, #1
    8348:	2800      	cmp	r0, #0
    834a:	d157      	bne.n	83fc <__aeabi_fadd+0x220>
    834c:	4463      	add	r3, ip
    834e:	2401      	movs	r4, #1
    8350:	015a      	lsls	r2, r3, #5
    8352:	d5af      	bpl.n	82b4 <__aeabi_fadd+0xd8>
    8354:	2402      	movs	r4, #2
    8356:	e7dd      	b.n	8314 <__aeabi_fadd+0x138>
    8358:	2a00      	cmp	r2, #0
    835a:	d124      	bne.n	83a6 <__aeabi_fadd+0x1ca>
    835c:	1c62      	adds	r2, r4, #1
    835e:	b2d2      	uxtb	r2, r2
    8360:	2a01      	cmp	r2, #1
    8362:	ddde      	ble.n	8322 <__aeabi_fadd+0x146>
    8364:	1bde      	subs	r6, r3, r7
    8366:	0172      	lsls	r2, r6, #5
    8368:	d535      	bpl.n	83d6 <__aeabi_fadd+0x1fa>
    836a:	1afe      	subs	r6, r7, r3
    836c:	000d      	movs	r5, r1
    836e:	e75c      	b.n	822a <__aeabi_fadd+0x4e>
    8370:	002a      	movs	r2, r5
    8372:	2300      	movs	r3, #0
    8374:	e77e      	b.n	8274 <__aeabi_fadd+0x98>
    8376:	0033      	movs	r3, r6
    8378:	4a60      	ldr	r2, [pc, #384]	; (84fc <__aeabi_fadd+0x320>)
    837a:	1a24      	subs	r4, r4, r0
    837c:	4013      	ands	r3, r2
    837e:	e768      	b.n	8252 <__aeabi_fadd+0x76>
    8380:	2900      	cmp	r1, #0
    8382:	d163      	bne.n	844c <__aeabi_fadd+0x270>
    8384:	1c61      	adds	r1, r4, #1
    8386:	b2c8      	uxtb	r0, r1
    8388:	2801      	cmp	r0, #1
    838a:	dd4e      	ble.n	842a <__aeabi_fadd+0x24e>
    838c:	29ff      	cmp	r1, #255	; 0xff
    838e:	d049      	beq.n	8424 <__aeabi_fadd+0x248>
    8390:	4463      	add	r3, ip
    8392:	085b      	lsrs	r3, r3, #1
    8394:	000c      	movs	r4, r1
    8396:	e75c      	b.n	8252 <__aeabi_fadd+0x76>
    8398:	2aff      	cmp	r2, #255	; 0xff
    839a:	d041      	beq.n	8420 <__aeabi_fadd+0x244>
    839c:	000a      	movs	r2, r1
    839e:	e779      	b.n	8294 <__aeabi_fadd+0xb8>
    83a0:	2201      	movs	r2, #1
    83a2:	1a9b      	subs	r3, r3, r2
    83a4:	e784      	b.n	82b0 <__aeabi_fadd+0xd4>
    83a6:	2c00      	cmp	r4, #0
    83a8:	d01d      	beq.n	83e6 <__aeabi_fadd+0x20a>
    83aa:	28ff      	cmp	r0, #255	; 0xff
    83ac:	d022      	beq.n	83f4 <__aeabi_fadd+0x218>
    83ae:	2480      	movs	r4, #128	; 0x80
    83b0:	04e4      	lsls	r4, r4, #19
    83b2:	4252      	negs	r2, r2
    83b4:	4323      	orrs	r3, r4
    83b6:	2a1b      	cmp	r2, #27
    83b8:	dd00      	ble.n	83bc <__aeabi_fadd+0x1e0>
    83ba:	e08a      	b.n	84d2 <__aeabi_fadd+0x2f6>
    83bc:	001c      	movs	r4, r3
    83be:	2520      	movs	r5, #32
    83c0:	40d4      	lsrs	r4, r2
    83c2:	1aaa      	subs	r2, r5, r2
    83c4:	4093      	lsls	r3, r2
    83c6:	1e5a      	subs	r2, r3, #1
    83c8:	4193      	sbcs	r3, r2
    83ca:	4323      	orrs	r3, r4
    83cc:	4662      	mov	r2, ip
    83ce:	0004      	movs	r4, r0
    83d0:	1ad3      	subs	r3, r2, r3
    83d2:	000d      	movs	r5, r1
    83d4:	e725      	b.n	8222 <__aeabi_fadd+0x46>
    83d6:	2e00      	cmp	r6, #0
    83d8:	d000      	beq.n	83dc <__aeabi_fadd+0x200>
    83da:	e726      	b.n	822a <__aeabi_fadd+0x4e>
    83dc:	2200      	movs	r2, #0
    83de:	2400      	movs	r4, #0
    83e0:	e7a9      	b.n	8336 <__aeabi_fadd+0x15a>
    83e2:	000c      	movs	r4, r1
    83e4:	e735      	b.n	8252 <__aeabi_fadd+0x76>
    83e6:	2b00      	cmp	r3, #0
    83e8:	d04d      	beq.n	8486 <__aeabi_fadd+0x2aa>
    83ea:	43d2      	mvns	r2, r2
    83ec:	2a00      	cmp	r2, #0
    83ee:	d0ed      	beq.n	83cc <__aeabi_fadd+0x1f0>
    83f0:	28ff      	cmp	r0, #255	; 0xff
    83f2:	d1e0      	bne.n	83b6 <__aeabi_fadd+0x1da>
    83f4:	4663      	mov	r3, ip
    83f6:	24ff      	movs	r4, #255	; 0xff
    83f8:	000d      	movs	r5, r1
    83fa:	e72a      	b.n	8252 <__aeabi_fadd+0x76>
    83fc:	29ff      	cmp	r1, #255	; 0xff
    83fe:	d00f      	beq.n	8420 <__aeabi_fadd+0x244>
    8400:	0001      	movs	r1, r0
    8402:	e773      	b.n	82ec <__aeabi_fadd+0x110>
    8404:	2b00      	cmp	r3, #0
    8406:	d061      	beq.n	84cc <__aeabi_fadd+0x2f0>
    8408:	24ff      	movs	r4, #255	; 0xff
    840a:	2f00      	cmp	r7, #0
    840c:	d100      	bne.n	8410 <__aeabi_fadd+0x234>
    840e:	e720      	b.n	8252 <__aeabi_fadd+0x76>
    8410:	2280      	movs	r2, #128	; 0x80
    8412:	4641      	mov	r1, r8
    8414:	03d2      	lsls	r2, r2, #15
    8416:	4211      	tst	r1, r2
    8418:	d002      	beq.n	8420 <__aeabi_fadd+0x244>
    841a:	4216      	tst	r6, r2
    841c:	d100      	bne.n	8420 <__aeabi_fadd+0x244>
    841e:	003b      	movs	r3, r7
    8420:	24ff      	movs	r4, #255	; 0xff
    8422:	e716      	b.n	8252 <__aeabi_fadd+0x76>
    8424:	24ff      	movs	r4, #255	; 0xff
    8426:	2300      	movs	r3, #0
    8428:	e724      	b.n	8274 <__aeabi_fadd+0x98>
    842a:	2c00      	cmp	r4, #0
    842c:	d1ea      	bne.n	8404 <__aeabi_fadd+0x228>
    842e:	2b00      	cmp	r3, #0
    8430:	d058      	beq.n	84e4 <__aeabi_fadd+0x308>
    8432:	2f00      	cmp	r7, #0
    8434:	d100      	bne.n	8438 <__aeabi_fadd+0x25c>
    8436:	e70c      	b.n	8252 <__aeabi_fadd+0x76>
    8438:	4463      	add	r3, ip
    843a:	015a      	lsls	r2, r3, #5
    843c:	d400      	bmi.n	8440 <__aeabi_fadd+0x264>
    843e:	e739      	b.n	82b4 <__aeabi_fadd+0xd8>
    8440:	4a2e      	ldr	r2, [pc, #184]	; (84fc <__aeabi_fadd+0x320>)
    8442:	000c      	movs	r4, r1
    8444:	4013      	ands	r3, r2
    8446:	e704      	b.n	8252 <__aeabi_fadd+0x76>
    8448:	2101      	movs	r1, #1
    844a:	e75c      	b.n	8306 <__aeabi_fadd+0x12a>
    844c:	2c00      	cmp	r4, #0
    844e:	d11e      	bne.n	848e <__aeabi_fadd+0x2b2>
    8450:	2b00      	cmp	r3, #0
    8452:	d040      	beq.n	84d6 <__aeabi_fadd+0x2fa>
    8454:	43c9      	mvns	r1, r1
    8456:	2900      	cmp	r1, #0
    8458:	d00b      	beq.n	8472 <__aeabi_fadd+0x296>
    845a:	28ff      	cmp	r0, #255	; 0xff
    845c:	d036      	beq.n	84cc <__aeabi_fadd+0x2f0>
    845e:	291b      	cmp	r1, #27
    8460:	dc47      	bgt.n	84f2 <__aeabi_fadd+0x316>
    8462:	001c      	movs	r4, r3
    8464:	2620      	movs	r6, #32
    8466:	40cc      	lsrs	r4, r1
    8468:	1a71      	subs	r1, r6, r1
    846a:	408b      	lsls	r3, r1
    846c:	1e59      	subs	r1, r3, #1
    846e:	418b      	sbcs	r3, r1
    8470:	4323      	orrs	r3, r4
    8472:	4463      	add	r3, ip
    8474:	0004      	movs	r4, r0
    8476:	e747      	b.n	8308 <__aeabi_fadd+0x12c>
    8478:	2b00      	cmp	r3, #0
    847a:	d118      	bne.n	84ae <__aeabi_fadd+0x2d2>
    847c:	1e3b      	subs	r3, r7, #0
    847e:	d02d      	beq.n	84dc <__aeabi_fadd+0x300>
    8480:	000d      	movs	r5, r1
    8482:	24ff      	movs	r4, #255	; 0xff
    8484:	e6e5      	b.n	8252 <__aeabi_fadd+0x76>
    8486:	003b      	movs	r3, r7
    8488:	0004      	movs	r4, r0
    848a:	000d      	movs	r5, r1
    848c:	e6e1      	b.n	8252 <__aeabi_fadd+0x76>
    848e:	28ff      	cmp	r0, #255	; 0xff
    8490:	d01c      	beq.n	84cc <__aeabi_fadd+0x2f0>
    8492:	2480      	movs	r4, #128	; 0x80
    8494:	04e4      	lsls	r4, r4, #19
    8496:	4249      	negs	r1, r1
    8498:	4323      	orrs	r3, r4
    849a:	e7e0      	b.n	845e <__aeabi_fadd+0x282>
    849c:	2f00      	cmp	r7, #0
    849e:	d100      	bne.n	84a2 <__aeabi_fadd+0x2c6>
    84a0:	e6d7      	b.n	8252 <__aeabi_fadd+0x76>
    84a2:	1bde      	subs	r6, r3, r7
    84a4:	0172      	lsls	r2, r6, #5
    84a6:	d51f      	bpl.n	84e8 <__aeabi_fadd+0x30c>
    84a8:	1afb      	subs	r3, r7, r3
    84aa:	000d      	movs	r5, r1
    84ac:	e6d1      	b.n	8252 <__aeabi_fadd+0x76>
    84ae:	24ff      	movs	r4, #255	; 0xff
    84b0:	2f00      	cmp	r7, #0
    84b2:	d100      	bne.n	84b6 <__aeabi_fadd+0x2da>
    84b4:	e6cd      	b.n	8252 <__aeabi_fadd+0x76>
    84b6:	2280      	movs	r2, #128	; 0x80
    84b8:	4640      	mov	r0, r8
    84ba:	03d2      	lsls	r2, r2, #15
    84bc:	4210      	tst	r0, r2
    84be:	d0af      	beq.n	8420 <__aeabi_fadd+0x244>
    84c0:	4216      	tst	r6, r2
    84c2:	d1ad      	bne.n	8420 <__aeabi_fadd+0x244>
    84c4:	003b      	movs	r3, r7
    84c6:	000d      	movs	r5, r1
    84c8:	24ff      	movs	r4, #255	; 0xff
    84ca:	e6c2      	b.n	8252 <__aeabi_fadd+0x76>
    84cc:	4663      	mov	r3, ip
    84ce:	24ff      	movs	r4, #255	; 0xff
    84d0:	e6bf      	b.n	8252 <__aeabi_fadd+0x76>
    84d2:	2301      	movs	r3, #1
    84d4:	e77a      	b.n	83cc <__aeabi_fadd+0x1f0>
    84d6:	003b      	movs	r3, r7
    84d8:	0004      	movs	r4, r0
    84da:	e6ba      	b.n	8252 <__aeabi_fadd+0x76>
    84dc:	2680      	movs	r6, #128	; 0x80
    84de:	2200      	movs	r2, #0
    84e0:	03f6      	lsls	r6, r6, #15
    84e2:	e6f0      	b.n	82c6 <__aeabi_fadd+0xea>
    84e4:	003b      	movs	r3, r7
    84e6:	e6b4      	b.n	8252 <__aeabi_fadd+0x76>
    84e8:	1e33      	subs	r3, r6, #0
    84ea:	d000      	beq.n	84ee <__aeabi_fadd+0x312>
    84ec:	e6e2      	b.n	82b4 <__aeabi_fadd+0xd8>
    84ee:	2200      	movs	r2, #0
    84f0:	e721      	b.n	8336 <__aeabi_fadd+0x15a>
    84f2:	2301      	movs	r3, #1
    84f4:	e7bd      	b.n	8472 <__aeabi_fadd+0x296>
    84f6:	46c0      	nop			; (mov r8, r8)
    84f8:	7dffffff 	.word	0x7dffffff
    84fc:	fbffffff 	.word	0xfbffffff

00008500 <__aeabi_fmul>:
    8500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8502:	4657      	mov	r7, sl
    8504:	464e      	mov	r6, r9
    8506:	4645      	mov	r5, r8
    8508:	46de      	mov	lr, fp
    850a:	b5e0      	push	{r5, r6, r7, lr}
    850c:	0247      	lsls	r7, r0, #9
    850e:	0046      	lsls	r6, r0, #1
    8510:	4688      	mov	r8, r1
    8512:	0a7f      	lsrs	r7, r7, #9
    8514:	0e36      	lsrs	r6, r6, #24
    8516:	0fc4      	lsrs	r4, r0, #31
    8518:	2e00      	cmp	r6, #0
    851a:	d047      	beq.n	85ac <__aeabi_fmul+0xac>
    851c:	2eff      	cmp	r6, #255	; 0xff
    851e:	d024      	beq.n	856a <__aeabi_fmul+0x6a>
    8520:	00fb      	lsls	r3, r7, #3
    8522:	2780      	movs	r7, #128	; 0x80
    8524:	04ff      	lsls	r7, r7, #19
    8526:	431f      	orrs	r7, r3
    8528:	2300      	movs	r3, #0
    852a:	4699      	mov	r9, r3
    852c:	469a      	mov	sl, r3
    852e:	3e7f      	subs	r6, #127	; 0x7f
    8530:	4643      	mov	r3, r8
    8532:	025d      	lsls	r5, r3, #9
    8534:	0058      	lsls	r0, r3, #1
    8536:	0fdb      	lsrs	r3, r3, #31
    8538:	0a6d      	lsrs	r5, r5, #9
    853a:	0e00      	lsrs	r0, r0, #24
    853c:	4698      	mov	r8, r3
    853e:	d043      	beq.n	85c8 <__aeabi_fmul+0xc8>
    8540:	28ff      	cmp	r0, #255	; 0xff
    8542:	d03b      	beq.n	85bc <__aeabi_fmul+0xbc>
    8544:	00eb      	lsls	r3, r5, #3
    8546:	2580      	movs	r5, #128	; 0x80
    8548:	2200      	movs	r2, #0
    854a:	04ed      	lsls	r5, r5, #19
    854c:	431d      	orrs	r5, r3
    854e:	387f      	subs	r0, #127	; 0x7f
    8550:	1836      	adds	r6, r6, r0
    8552:	1c73      	adds	r3, r6, #1
    8554:	4641      	mov	r1, r8
    8556:	469b      	mov	fp, r3
    8558:	464b      	mov	r3, r9
    855a:	4061      	eors	r1, r4
    855c:	4313      	orrs	r3, r2
    855e:	2b0f      	cmp	r3, #15
    8560:	d864      	bhi.n	862c <__aeabi_fmul+0x12c>
    8562:	4875      	ldr	r0, [pc, #468]	; (8738 <__aeabi_fmul+0x238>)
    8564:	009b      	lsls	r3, r3, #2
    8566:	58c3      	ldr	r3, [r0, r3]
    8568:	469f      	mov	pc, r3
    856a:	2f00      	cmp	r7, #0
    856c:	d142      	bne.n	85f4 <__aeabi_fmul+0xf4>
    856e:	2308      	movs	r3, #8
    8570:	4699      	mov	r9, r3
    8572:	3b06      	subs	r3, #6
    8574:	26ff      	movs	r6, #255	; 0xff
    8576:	469a      	mov	sl, r3
    8578:	e7da      	b.n	8530 <__aeabi_fmul+0x30>
    857a:	4641      	mov	r1, r8
    857c:	2a02      	cmp	r2, #2
    857e:	d028      	beq.n	85d2 <__aeabi_fmul+0xd2>
    8580:	2a03      	cmp	r2, #3
    8582:	d100      	bne.n	8586 <__aeabi_fmul+0x86>
    8584:	e0ce      	b.n	8724 <__aeabi_fmul+0x224>
    8586:	2a01      	cmp	r2, #1
    8588:	d000      	beq.n	858c <__aeabi_fmul+0x8c>
    858a:	e0ac      	b.n	86e6 <__aeabi_fmul+0x1e6>
    858c:	4011      	ands	r1, r2
    858e:	2000      	movs	r0, #0
    8590:	2200      	movs	r2, #0
    8592:	b2cc      	uxtb	r4, r1
    8594:	0240      	lsls	r0, r0, #9
    8596:	05d2      	lsls	r2, r2, #23
    8598:	0a40      	lsrs	r0, r0, #9
    859a:	07e4      	lsls	r4, r4, #31
    859c:	4310      	orrs	r0, r2
    859e:	4320      	orrs	r0, r4
    85a0:	bc3c      	pop	{r2, r3, r4, r5}
    85a2:	4690      	mov	r8, r2
    85a4:	4699      	mov	r9, r3
    85a6:	46a2      	mov	sl, r4
    85a8:	46ab      	mov	fp, r5
    85aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85ac:	2f00      	cmp	r7, #0
    85ae:	d115      	bne.n	85dc <__aeabi_fmul+0xdc>
    85b0:	2304      	movs	r3, #4
    85b2:	4699      	mov	r9, r3
    85b4:	3b03      	subs	r3, #3
    85b6:	2600      	movs	r6, #0
    85b8:	469a      	mov	sl, r3
    85ba:	e7b9      	b.n	8530 <__aeabi_fmul+0x30>
    85bc:	20ff      	movs	r0, #255	; 0xff
    85be:	2202      	movs	r2, #2
    85c0:	2d00      	cmp	r5, #0
    85c2:	d0c5      	beq.n	8550 <__aeabi_fmul+0x50>
    85c4:	2203      	movs	r2, #3
    85c6:	e7c3      	b.n	8550 <__aeabi_fmul+0x50>
    85c8:	2d00      	cmp	r5, #0
    85ca:	d119      	bne.n	8600 <__aeabi_fmul+0x100>
    85cc:	2000      	movs	r0, #0
    85ce:	2201      	movs	r2, #1
    85d0:	e7be      	b.n	8550 <__aeabi_fmul+0x50>
    85d2:	2401      	movs	r4, #1
    85d4:	22ff      	movs	r2, #255	; 0xff
    85d6:	400c      	ands	r4, r1
    85d8:	2000      	movs	r0, #0
    85da:	e7db      	b.n	8594 <__aeabi_fmul+0x94>
    85dc:	0038      	movs	r0, r7
    85de:	f7ff fc97 	bl	7f10 <__clzsi2>
    85e2:	2676      	movs	r6, #118	; 0x76
    85e4:	1f43      	subs	r3, r0, #5
    85e6:	409f      	lsls	r7, r3
    85e8:	2300      	movs	r3, #0
    85ea:	4276      	negs	r6, r6
    85ec:	1a36      	subs	r6, r6, r0
    85ee:	4699      	mov	r9, r3
    85f0:	469a      	mov	sl, r3
    85f2:	e79d      	b.n	8530 <__aeabi_fmul+0x30>
    85f4:	230c      	movs	r3, #12
    85f6:	4699      	mov	r9, r3
    85f8:	3b09      	subs	r3, #9
    85fa:	26ff      	movs	r6, #255	; 0xff
    85fc:	469a      	mov	sl, r3
    85fe:	e797      	b.n	8530 <__aeabi_fmul+0x30>
    8600:	0028      	movs	r0, r5
    8602:	f7ff fc85 	bl	7f10 <__clzsi2>
    8606:	1f43      	subs	r3, r0, #5
    8608:	409d      	lsls	r5, r3
    860a:	2376      	movs	r3, #118	; 0x76
    860c:	425b      	negs	r3, r3
    860e:	1a18      	subs	r0, r3, r0
    8610:	2200      	movs	r2, #0
    8612:	e79d      	b.n	8550 <__aeabi_fmul+0x50>
    8614:	2080      	movs	r0, #128	; 0x80
    8616:	2400      	movs	r4, #0
    8618:	03c0      	lsls	r0, r0, #15
    861a:	22ff      	movs	r2, #255	; 0xff
    861c:	e7ba      	b.n	8594 <__aeabi_fmul+0x94>
    861e:	003d      	movs	r5, r7
    8620:	4652      	mov	r2, sl
    8622:	e7ab      	b.n	857c <__aeabi_fmul+0x7c>
    8624:	003d      	movs	r5, r7
    8626:	0021      	movs	r1, r4
    8628:	4652      	mov	r2, sl
    862a:	e7a7      	b.n	857c <__aeabi_fmul+0x7c>
    862c:	0c3b      	lsrs	r3, r7, #16
    862e:	469c      	mov	ip, r3
    8630:	042a      	lsls	r2, r5, #16
    8632:	0c12      	lsrs	r2, r2, #16
    8634:	0c2b      	lsrs	r3, r5, #16
    8636:	0014      	movs	r4, r2
    8638:	4660      	mov	r0, ip
    863a:	4665      	mov	r5, ip
    863c:	043f      	lsls	r7, r7, #16
    863e:	0c3f      	lsrs	r7, r7, #16
    8640:	437c      	muls	r4, r7
    8642:	4342      	muls	r2, r0
    8644:	435d      	muls	r5, r3
    8646:	437b      	muls	r3, r7
    8648:	0c27      	lsrs	r7, r4, #16
    864a:	189b      	adds	r3, r3, r2
    864c:	18ff      	adds	r7, r7, r3
    864e:	42ba      	cmp	r2, r7
    8650:	d903      	bls.n	865a <__aeabi_fmul+0x15a>
    8652:	2380      	movs	r3, #128	; 0x80
    8654:	025b      	lsls	r3, r3, #9
    8656:	469c      	mov	ip, r3
    8658:	4465      	add	r5, ip
    865a:	0424      	lsls	r4, r4, #16
    865c:	043a      	lsls	r2, r7, #16
    865e:	0c24      	lsrs	r4, r4, #16
    8660:	1912      	adds	r2, r2, r4
    8662:	0193      	lsls	r3, r2, #6
    8664:	1e5c      	subs	r4, r3, #1
    8666:	41a3      	sbcs	r3, r4
    8668:	0c3f      	lsrs	r7, r7, #16
    866a:	0e92      	lsrs	r2, r2, #26
    866c:	197d      	adds	r5, r7, r5
    866e:	431a      	orrs	r2, r3
    8670:	01ad      	lsls	r5, r5, #6
    8672:	4315      	orrs	r5, r2
    8674:	012b      	lsls	r3, r5, #4
    8676:	d504      	bpl.n	8682 <__aeabi_fmul+0x182>
    8678:	2301      	movs	r3, #1
    867a:	465e      	mov	r6, fp
    867c:	086a      	lsrs	r2, r5, #1
    867e:	401d      	ands	r5, r3
    8680:	4315      	orrs	r5, r2
    8682:	0032      	movs	r2, r6
    8684:	327f      	adds	r2, #127	; 0x7f
    8686:	2a00      	cmp	r2, #0
    8688:	dd25      	ble.n	86d6 <__aeabi_fmul+0x1d6>
    868a:	076b      	lsls	r3, r5, #29
    868c:	d004      	beq.n	8698 <__aeabi_fmul+0x198>
    868e:	230f      	movs	r3, #15
    8690:	402b      	ands	r3, r5
    8692:	2b04      	cmp	r3, #4
    8694:	d000      	beq.n	8698 <__aeabi_fmul+0x198>
    8696:	3504      	adds	r5, #4
    8698:	012b      	lsls	r3, r5, #4
    869a:	d503      	bpl.n	86a4 <__aeabi_fmul+0x1a4>
    869c:	0032      	movs	r2, r6
    869e:	4b27      	ldr	r3, [pc, #156]	; (873c <__aeabi_fmul+0x23c>)
    86a0:	3280      	adds	r2, #128	; 0x80
    86a2:	401d      	ands	r5, r3
    86a4:	2afe      	cmp	r2, #254	; 0xfe
    86a6:	dc94      	bgt.n	85d2 <__aeabi_fmul+0xd2>
    86a8:	2401      	movs	r4, #1
    86aa:	01a8      	lsls	r0, r5, #6
    86ac:	0a40      	lsrs	r0, r0, #9
    86ae:	b2d2      	uxtb	r2, r2
    86b0:	400c      	ands	r4, r1
    86b2:	e76f      	b.n	8594 <__aeabi_fmul+0x94>
    86b4:	2080      	movs	r0, #128	; 0x80
    86b6:	03c0      	lsls	r0, r0, #15
    86b8:	4207      	tst	r7, r0
    86ba:	d007      	beq.n	86cc <__aeabi_fmul+0x1cc>
    86bc:	4205      	tst	r5, r0
    86be:	d105      	bne.n	86cc <__aeabi_fmul+0x1cc>
    86c0:	4328      	orrs	r0, r5
    86c2:	0240      	lsls	r0, r0, #9
    86c4:	0a40      	lsrs	r0, r0, #9
    86c6:	4644      	mov	r4, r8
    86c8:	22ff      	movs	r2, #255	; 0xff
    86ca:	e763      	b.n	8594 <__aeabi_fmul+0x94>
    86cc:	4338      	orrs	r0, r7
    86ce:	0240      	lsls	r0, r0, #9
    86d0:	0a40      	lsrs	r0, r0, #9
    86d2:	22ff      	movs	r2, #255	; 0xff
    86d4:	e75e      	b.n	8594 <__aeabi_fmul+0x94>
    86d6:	2401      	movs	r4, #1
    86d8:	1aa3      	subs	r3, r4, r2
    86da:	2b1b      	cmp	r3, #27
    86dc:	dd05      	ble.n	86ea <__aeabi_fmul+0x1ea>
    86de:	400c      	ands	r4, r1
    86e0:	2200      	movs	r2, #0
    86e2:	2000      	movs	r0, #0
    86e4:	e756      	b.n	8594 <__aeabi_fmul+0x94>
    86e6:	465e      	mov	r6, fp
    86e8:	e7cb      	b.n	8682 <__aeabi_fmul+0x182>
    86ea:	002a      	movs	r2, r5
    86ec:	2020      	movs	r0, #32
    86ee:	40da      	lsrs	r2, r3
    86f0:	1ac3      	subs	r3, r0, r3
    86f2:	409d      	lsls	r5, r3
    86f4:	002b      	movs	r3, r5
    86f6:	1e5d      	subs	r5, r3, #1
    86f8:	41ab      	sbcs	r3, r5
    86fa:	4313      	orrs	r3, r2
    86fc:	075a      	lsls	r2, r3, #29
    86fe:	d004      	beq.n	870a <__aeabi_fmul+0x20a>
    8700:	220f      	movs	r2, #15
    8702:	401a      	ands	r2, r3
    8704:	2a04      	cmp	r2, #4
    8706:	d000      	beq.n	870a <__aeabi_fmul+0x20a>
    8708:	3304      	adds	r3, #4
    870a:	015a      	lsls	r2, r3, #5
    870c:	d504      	bpl.n	8718 <__aeabi_fmul+0x218>
    870e:	2401      	movs	r4, #1
    8710:	2201      	movs	r2, #1
    8712:	400c      	ands	r4, r1
    8714:	2000      	movs	r0, #0
    8716:	e73d      	b.n	8594 <__aeabi_fmul+0x94>
    8718:	2401      	movs	r4, #1
    871a:	019b      	lsls	r3, r3, #6
    871c:	0a58      	lsrs	r0, r3, #9
    871e:	400c      	ands	r4, r1
    8720:	2200      	movs	r2, #0
    8722:	e737      	b.n	8594 <__aeabi_fmul+0x94>
    8724:	2080      	movs	r0, #128	; 0x80
    8726:	2401      	movs	r4, #1
    8728:	03c0      	lsls	r0, r0, #15
    872a:	4328      	orrs	r0, r5
    872c:	0240      	lsls	r0, r0, #9
    872e:	0a40      	lsrs	r0, r0, #9
    8730:	400c      	ands	r4, r1
    8732:	22ff      	movs	r2, #255	; 0xff
    8734:	e72e      	b.n	8594 <__aeabi_fmul+0x94>
    8736:	46c0      	nop			; (mov r8, r8)
    8738:	0000c128 	.word	0x0000c128
    873c:	f7ffffff 	.word	0xf7ffffff

00008740 <__aeabi_f2iz>:
    8740:	0241      	lsls	r1, r0, #9
    8742:	0043      	lsls	r3, r0, #1
    8744:	0fc2      	lsrs	r2, r0, #31
    8746:	0a49      	lsrs	r1, r1, #9
    8748:	0e1b      	lsrs	r3, r3, #24
    874a:	2000      	movs	r0, #0
    874c:	2b7e      	cmp	r3, #126	; 0x7e
    874e:	dd0d      	ble.n	876c <__aeabi_f2iz+0x2c>
    8750:	2b9d      	cmp	r3, #157	; 0x9d
    8752:	dc0c      	bgt.n	876e <__aeabi_f2iz+0x2e>
    8754:	2080      	movs	r0, #128	; 0x80
    8756:	0400      	lsls	r0, r0, #16
    8758:	4301      	orrs	r1, r0
    875a:	2b95      	cmp	r3, #149	; 0x95
    875c:	dc0a      	bgt.n	8774 <__aeabi_f2iz+0x34>
    875e:	2096      	movs	r0, #150	; 0x96
    8760:	1ac3      	subs	r3, r0, r3
    8762:	40d9      	lsrs	r1, r3
    8764:	4248      	negs	r0, r1
    8766:	2a00      	cmp	r2, #0
    8768:	d100      	bne.n	876c <__aeabi_f2iz+0x2c>
    876a:	0008      	movs	r0, r1
    876c:	4770      	bx	lr
    876e:	4b03      	ldr	r3, [pc, #12]	; (877c <__aeabi_f2iz+0x3c>)
    8770:	18d0      	adds	r0, r2, r3
    8772:	e7fb      	b.n	876c <__aeabi_f2iz+0x2c>
    8774:	3b96      	subs	r3, #150	; 0x96
    8776:	4099      	lsls	r1, r3
    8778:	e7f4      	b.n	8764 <__aeabi_f2iz+0x24>
    877a:	46c0      	nop			; (mov r8, r8)
    877c:	7fffffff 	.word	0x7fffffff

00008780 <__aeabi_i2f>:
    8780:	b570      	push	{r4, r5, r6, lr}
    8782:	2800      	cmp	r0, #0
    8784:	d030      	beq.n	87e8 <__aeabi_i2f+0x68>
    8786:	17c3      	asrs	r3, r0, #31
    8788:	18c4      	adds	r4, r0, r3
    878a:	405c      	eors	r4, r3
    878c:	0fc5      	lsrs	r5, r0, #31
    878e:	0020      	movs	r0, r4
    8790:	f7ff fbbe 	bl	7f10 <__clzsi2>
    8794:	239e      	movs	r3, #158	; 0x9e
    8796:	1a1b      	subs	r3, r3, r0
    8798:	2b96      	cmp	r3, #150	; 0x96
    879a:	dc0d      	bgt.n	87b8 <__aeabi_i2f+0x38>
    879c:	2296      	movs	r2, #150	; 0x96
    879e:	1ad2      	subs	r2, r2, r3
    87a0:	4094      	lsls	r4, r2
    87a2:	002a      	movs	r2, r5
    87a4:	0264      	lsls	r4, r4, #9
    87a6:	0a64      	lsrs	r4, r4, #9
    87a8:	b2db      	uxtb	r3, r3
    87aa:	0264      	lsls	r4, r4, #9
    87ac:	05db      	lsls	r3, r3, #23
    87ae:	0a60      	lsrs	r0, r4, #9
    87b0:	07d2      	lsls	r2, r2, #31
    87b2:	4318      	orrs	r0, r3
    87b4:	4310      	orrs	r0, r2
    87b6:	bd70      	pop	{r4, r5, r6, pc}
    87b8:	2b99      	cmp	r3, #153	; 0x99
    87ba:	dc19      	bgt.n	87f0 <__aeabi_i2f+0x70>
    87bc:	2299      	movs	r2, #153	; 0x99
    87be:	1ad2      	subs	r2, r2, r3
    87c0:	2a00      	cmp	r2, #0
    87c2:	dd29      	ble.n	8818 <__aeabi_i2f+0x98>
    87c4:	4094      	lsls	r4, r2
    87c6:	0022      	movs	r2, r4
    87c8:	4c14      	ldr	r4, [pc, #80]	; (881c <__aeabi_i2f+0x9c>)
    87ca:	4014      	ands	r4, r2
    87cc:	0751      	lsls	r1, r2, #29
    87ce:	d004      	beq.n	87da <__aeabi_i2f+0x5a>
    87d0:	210f      	movs	r1, #15
    87d2:	400a      	ands	r2, r1
    87d4:	2a04      	cmp	r2, #4
    87d6:	d000      	beq.n	87da <__aeabi_i2f+0x5a>
    87d8:	3404      	adds	r4, #4
    87da:	0162      	lsls	r2, r4, #5
    87dc:	d413      	bmi.n	8806 <__aeabi_i2f+0x86>
    87de:	01a4      	lsls	r4, r4, #6
    87e0:	0a64      	lsrs	r4, r4, #9
    87e2:	b2db      	uxtb	r3, r3
    87e4:	002a      	movs	r2, r5
    87e6:	e7e0      	b.n	87aa <__aeabi_i2f+0x2a>
    87e8:	2200      	movs	r2, #0
    87ea:	2300      	movs	r3, #0
    87ec:	2400      	movs	r4, #0
    87ee:	e7dc      	b.n	87aa <__aeabi_i2f+0x2a>
    87f0:	2205      	movs	r2, #5
    87f2:	0021      	movs	r1, r4
    87f4:	1a12      	subs	r2, r2, r0
    87f6:	40d1      	lsrs	r1, r2
    87f8:	22b9      	movs	r2, #185	; 0xb9
    87fa:	1ad2      	subs	r2, r2, r3
    87fc:	4094      	lsls	r4, r2
    87fe:	1e62      	subs	r2, r4, #1
    8800:	4194      	sbcs	r4, r2
    8802:	430c      	orrs	r4, r1
    8804:	e7da      	b.n	87bc <__aeabi_i2f+0x3c>
    8806:	4b05      	ldr	r3, [pc, #20]	; (881c <__aeabi_i2f+0x9c>)
    8808:	002a      	movs	r2, r5
    880a:	401c      	ands	r4, r3
    880c:	239f      	movs	r3, #159	; 0x9f
    880e:	01a4      	lsls	r4, r4, #6
    8810:	1a1b      	subs	r3, r3, r0
    8812:	0a64      	lsrs	r4, r4, #9
    8814:	b2db      	uxtb	r3, r3
    8816:	e7c8      	b.n	87aa <__aeabi_i2f+0x2a>
    8818:	0022      	movs	r2, r4
    881a:	e7d5      	b.n	87c8 <__aeabi_i2f+0x48>
    881c:	fbffffff 	.word	0xfbffffff

00008820 <__aeabi_dadd>:
    8820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8822:	4645      	mov	r5, r8
    8824:	46de      	mov	lr, fp
    8826:	4657      	mov	r7, sl
    8828:	464e      	mov	r6, r9
    882a:	030c      	lsls	r4, r1, #12
    882c:	b5e0      	push	{r5, r6, r7, lr}
    882e:	004e      	lsls	r6, r1, #1
    8830:	0fc9      	lsrs	r1, r1, #31
    8832:	4688      	mov	r8, r1
    8834:	000d      	movs	r5, r1
    8836:	0a61      	lsrs	r1, r4, #9
    8838:	0f44      	lsrs	r4, r0, #29
    883a:	430c      	orrs	r4, r1
    883c:	00c7      	lsls	r7, r0, #3
    883e:	0319      	lsls	r1, r3, #12
    8840:	0058      	lsls	r0, r3, #1
    8842:	0fdb      	lsrs	r3, r3, #31
    8844:	469b      	mov	fp, r3
    8846:	0a4b      	lsrs	r3, r1, #9
    8848:	0f51      	lsrs	r1, r2, #29
    884a:	430b      	orrs	r3, r1
    884c:	0d76      	lsrs	r6, r6, #21
    884e:	0d40      	lsrs	r0, r0, #21
    8850:	0019      	movs	r1, r3
    8852:	00d2      	lsls	r2, r2, #3
    8854:	45d8      	cmp	r8, fp
    8856:	d100      	bne.n	885a <__aeabi_dadd+0x3a>
    8858:	e0ae      	b.n	89b8 <__aeabi_dadd+0x198>
    885a:	1a35      	subs	r5, r6, r0
    885c:	2d00      	cmp	r5, #0
    885e:	dc00      	bgt.n	8862 <__aeabi_dadd+0x42>
    8860:	e0f6      	b.n	8a50 <__aeabi_dadd+0x230>
    8862:	2800      	cmp	r0, #0
    8864:	d10f      	bne.n	8886 <__aeabi_dadd+0x66>
    8866:	4313      	orrs	r3, r2
    8868:	d100      	bne.n	886c <__aeabi_dadd+0x4c>
    886a:	e0db      	b.n	8a24 <__aeabi_dadd+0x204>
    886c:	1e6b      	subs	r3, r5, #1
    886e:	2b00      	cmp	r3, #0
    8870:	d000      	beq.n	8874 <__aeabi_dadd+0x54>
    8872:	e137      	b.n	8ae4 <__aeabi_dadd+0x2c4>
    8874:	1aba      	subs	r2, r7, r2
    8876:	4297      	cmp	r7, r2
    8878:	41bf      	sbcs	r7, r7
    887a:	1a64      	subs	r4, r4, r1
    887c:	427f      	negs	r7, r7
    887e:	1be4      	subs	r4, r4, r7
    8880:	2601      	movs	r6, #1
    8882:	0017      	movs	r7, r2
    8884:	e024      	b.n	88d0 <__aeabi_dadd+0xb0>
    8886:	4bc6      	ldr	r3, [pc, #792]	; (8ba0 <__aeabi_dadd+0x380>)
    8888:	429e      	cmp	r6, r3
    888a:	d04d      	beq.n	8928 <__aeabi_dadd+0x108>
    888c:	2380      	movs	r3, #128	; 0x80
    888e:	041b      	lsls	r3, r3, #16
    8890:	4319      	orrs	r1, r3
    8892:	2d38      	cmp	r5, #56	; 0x38
    8894:	dd00      	ble.n	8898 <__aeabi_dadd+0x78>
    8896:	e107      	b.n	8aa8 <__aeabi_dadd+0x288>
    8898:	2d1f      	cmp	r5, #31
    889a:	dd00      	ble.n	889e <__aeabi_dadd+0x7e>
    889c:	e138      	b.n	8b10 <__aeabi_dadd+0x2f0>
    889e:	2020      	movs	r0, #32
    88a0:	1b43      	subs	r3, r0, r5
    88a2:	469a      	mov	sl, r3
    88a4:	000b      	movs	r3, r1
    88a6:	4650      	mov	r0, sl
    88a8:	4083      	lsls	r3, r0
    88aa:	4699      	mov	r9, r3
    88ac:	0013      	movs	r3, r2
    88ae:	4648      	mov	r0, r9
    88b0:	40eb      	lsrs	r3, r5
    88b2:	4318      	orrs	r0, r3
    88b4:	0003      	movs	r3, r0
    88b6:	4650      	mov	r0, sl
    88b8:	4082      	lsls	r2, r0
    88ba:	1e50      	subs	r0, r2, #1
    88bc:	4182      	sbcs	r2, r0
    88be:	40e9      	lsrs	r1, r5
    88c0:	431a      	orrs	r2, r3
    88c2:	1aba      	subs	r2, r7, r2
    88c4:	1a61      	subs	r1, r4, r1
    88c6:	4297      	cmp	r7, r2
    88c8:	41a4      	sbcs	r4, r4
    88ca:	0017      	movs	r7, r2
    88cc:	4264      	negs	r4, r4
    88ce:	1b0c      	subs	r4, r1, r4
    88d0:	0223      	lsls	r3, r4, #8
    88d2:	d562      	bpl.n	899a <__aeabi_dadd+0x17a>
    88d4:	0264      	lsls	r4, r4, #9
    88d6:	0a65      	lsrs	r5, r4, #9
    88d8:	2d00      	cmp	r5, #0
    88da:	d100      	bne.n	88de <__aeabi_dadd+0xbe>
    88dc:	e0df      	b.n	8a9e <__aeabi_dadd+0x27e>
    88de:	0028      	movs	r0, r5
    88e0:	f7ff fb16 	bl	7f10 <__clzsi2>
    88e4:	0003      	movs	r3, r0
    88e6:	3b08      	subs	r3, #8
    88e8:	2b1f      	cmp	r3, #31
    88ea:	dd00      	ble.n	88ee <__aeabi_dadd+0xce>
    88ec:	e0d2      	b.n	8a94 <__aeabi_dadd+0x274>
    88ee:	2220      	movs	r2, #32
    88f0:	003c      	movs	r4, r7
    88f2:	1ad2      	subs	r2, r2, r3
    88f4:	409d      	lsls	r5, r3
    88f6:	40d4      	lsrs	r4, r2
    88f8:	409f      	lsls	r7, r3
    88fa:	4325      	orrs	r5, r4
    88fc:	429e      	cmp	r6, r3
    88fe:	dd00      	ble.n	8902 <__aeabi_dadd+0xe2>
    8900:	e0c4      	b.n	8a8c <__aeabi_dadd+0x26c>
    8902:	1b9e      	subs	r6, r3, r6
    8904:	1c73      	adds	r3, r6, #1
    8906:	2b1f      	cmp	r3, #31
    8908:	dd00      	ble.n	890c <__aeabi_dadd+0xec>
    890a:	e0f1      	b.n	8af0 <__aeabi_dadd+0x2d0>
    890c:	2220      	movs	r2, #32
    890e:	0038      	movs	r0, r7
    8910:	0029      	movs	r1, r5
    8912:	1ad2      	subs	r2, r2, r3
    8914:	40d8      	lsrs	r0, r3
    8916:	4091      	lsls	r1, r2
    8918:	4097      	lsls	r7, r2
    891a:	002c      	movs	r4, r5
    891c:	4301      	orrs	r1, r0
    891e:	1e78      	subs	r0, r7, #1
    8920:	4187      	sbcs	r7, r0
    8922:	40dc      	lsrs	r4, r3
    8924:	2600      	movs	r6, #0
    8926:	430f      	orrs	r7, r1
    8928:	077b      	lsls	r3, r7, #29
    892a:	d009      	beq.n	8940 <__aeabi_dadd+0x120>
    892c:	230f      	movs	r3, #15
    892e:	403b      	ands	r3, r7
    8930:	2b04      	cmp	r3, #4
    8932:	d005      	beq.n	8940 <__aeabi_dadd+0x120>
    8934:	1d3b      	adds	r3, r7, #4
    8936:	42bb      	cmp	r3, r7
    8938:	41bf      	sbcs	r7, r7
    893a:	427f      	negs	r7, r7
    893c:	19e4      	adds	r4, r4, r7
    893e:	001f      	movs	r7, r3
    8940:	0223      	lsls	r3, r4, #8
    8942:	d52c      	bpl.n	899e <__aeabi_dadd+0x17e>
    8944:	4b96      	ldr	r3, [pc, #600]	; (8ba0 <__aeabi_dadd+0x380>)
    8946:	3601      	adds	r6, #1
    8948:	429e      	cmp	r6, r3
    894a:	d100      	bne.n	894e <__aeabi_dadd+0x12e>
    894c:	e09a      	b.n	8a84 <__aeabi_dadd+0x264>
    894e:	4645      	mov	r5, r8
    8950:	4b94      	ldr	r3, [pc, #592]	; (8ba4 <__aeabi_dadd+0x384>)
    8952:	08ff      	lsrs	r7, r7, #3
    8954:	401c      	ands	r4, r3
    8956:	0760      	lsls	r0, r4, #29
    8958:	0576      	lsls	r6, r6, #21
    895a:	0264      	lsls	r4, r4, #9
    895c:	4307      	orrs	r7, r0
    895e:	0b24      	lsrs	r4, r4, #12
    8960:	0d76      	lsrs	r6, r6, #21
    8962:	2100      	movs	r1, #0
    8964:	0324      	lsls	r4, r4, #12
    8966:	0b23      	lsrs	r3, r4, #12
    8968:	0d0c      	lsrs	r4, r1, #20
    896a:	4a8f      	ldr	r2, [pc, #572]	; (8ba8 <__aeabi_dadd+0x388>)
    896c:	0524      	lsls	r4, r4, #20
    896e:	431c      	orrs	r4, r3
    8970:	4014      	ands	r4, r2
    8972:	0533      	lsls	r3, r6, #20
    8974:	4323      	orrs	r3, r4
    8976:	005b      	lsls	r3, r3, #1
    8978:	07ed      	lsls	r5, r5, #31
    897a:	085b      	lsrs	r3, r3, #1
    897c:	432b      	orrs	r3, r5
    897e:	0038      	movs	r0, r7
    8980:	0019      	movs	r1, r3
    8982:	bc3c      	pop	{r2, r3, r4, r5}
    8984:	4690      	mov	r8, r2
    8986:	4699      	mov	r9, r3
    8988:	46a2      	mov	sl, r4
    898a:	46ab      	mov	fp, r5
    898c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    898e:	4664      	mov	r4, ip
    8990:	4304      	orrs	r4, r0
    8992:	d100      	bne.n	8996 <__aeabi_dadd+0x176>
    8994:	e211      	b.n	8dba <__aeabi_dadd+0x59a>
    8996:	0004      	movs	r4, r0
    8998:	4667      	mov	r7, ip
    899a:	077b      	lsls	r3, r7, #29
    899c:	d1c6      	bne.n	892c <__aeabi_dadd+0x10c>
    899e:	4645      	mov	r5, r8
    89a0:	0760      	lsls	r0, r4, #29
    89a2:	08ff      	lsrs	r7, r7, #3
    89a4:	4307      	orrs	r7, r0
    89a6:	08e4      	lsrs	r4, r4, #3
    89a8:	4b7d      	ldr	r3, [pc, #500]	; (8ba0 <__aeabi_dadd+0x380>)
    89aa:	429e      	cmp	r6, r3
    89ac:	d030      	beq.n	8a10 <__aeabi_dadd+0x1f0>
    89ae:	0324      	lsls	r4, r4, #12
    89b0:	0576      	lsls	r6, r6, #21
    89b2:	0b24      	lsrs	r4, r4, #12
    89b4:	0d76      	lsrs	r6, r6, #21
    89b6:	e7d4      	b.n	8962 <__aeabi_dadd+0x142>
    89b8:	1a33      	subs	r3, r6, r0
    89ba:	469a      	mov	sl, r3
    89bc:	2b00      	cmp	r3, #0
    89be:	dd78      	ble.n	8ab2 <__aeabi_dadd+0x292>
    89c0:	2800      	cmp	r0, #0
    89c2:	d031      	beq.n	8a28 <__aeabi_dadd+0x208>
    89c4:	4876      	ldr	r0, [pc, #472]	; (8ba0 <__aeabi_dadd+0x380>)
    89c6:	4286      	cmp	r6, r0
    89c8:	d0ae      	beq.n	8928 <__aeabi_dadd+0x108>
    89ca:	2080      	movs	r0, #128	; 0x80
    89cc:	0400      	lsls	r0, r0, #16
    89ce:	4301      	orrs	r1, r0
    89d0:	4653      	mov	r3, sl
    89d2:	2b38      	cmp	r3, #56	; 0x38
    89d4:	dc00      	bgt.n	89d8 <__aeabi_dadd+0x1b8>
    89d6:	e0e9      	b.n	8bac <__aeabi_dadd+0x38c>
    89d8:	430a      	orrs	r2, r1
    89da:	1e51      	subs	r1, r2, #1
    89dc:	418a      	sbcs	r2, r1
    89de:	2100      	movs	r1, #0
    89e0:	19d2      	adds	r2, r2, r7
    89e2:	42ba      	cmp	r2, r7
    89e4:	41bf      	sbcs	r7, r7
    89e6:	1909      	adds	r1, r1, r4
    89e8:	427c      	negs	r4, r7
    89ea:	0017      	movs	r7, r2
    89ec:	190c      	adds	r4, r1, r4
    89ee:	0223      	lsls	r3, r4, #8
    89f0:	d5d3      	bpl.n	899a <__aeabi_dadd+0x17a>
    89f2:	4b6b      	ldr	r3, [pc, #428]	; (8ba0 <__aeabi_dadd+0x380>)
    89f4:	3601      	adds	r6, #1
    89f6:	429e      	cmp	r6, r3
    89f8:	d100      	bne.n	89fc <__aeabi_dadd+0x1dc>
    89fa:	e13a      	b.n	8c72 <__aeabi_dadd+0x452>
    89fc:	2001      	movs	r0, #1
    89fe:	4b69      	ldr	r3, [pc, #420]	; (8ba4 <__aeabi_dadd+0x384>)
    8a00:	401c      	ands	r4, r3
    8a02:	087b      	lsrs	r3, r7, #1
    8a04:	4007      	ands	r7, r0
    8a06:	431f      	orrs	r7, r3
    8a08:	07e0      	lsls	r0, r4, #31
    8a0a:	4307      	orrs	r7, r0
    8a0c:	0864      	lsrs	r4, r4, #1
    8a0e:	e78b      	b.n	8928 <__aeabi_dadd+0x108>
    8a10:	0023      	movs	r3, r4
    8a12:	433b      	orrs	r3, r7
    8a14:	d100      	bne.n	8a18 <__aeabi_dadd+0x1f8>
    8a16:	e1cb      	b.n	8db0 <__aeabi_dadd+0x590>
    8a18:	2280      	movs	r2, #128	; 0x80
    8a1a:	0312      	lsls	r2, r2, #12
    8a1c:	4314      	orrs	r4, r2
    8a1e:	0324      	lsls	r4, r4, #12
    8a20:	0b24      	lsrs	r4, r4, #12
    8a22:	e79e      	b.n	8962 <__aeabi_dadd+0x142>
    8a24:	002e      	movs	r6, r5
    8a26:	e77f      	b.n	8928 <__aeabi_dadd+0x108>
    8a28:	0008      	movs	r0, r1
    8a2a:	4310      	orrs	r0, r2
    8a2c:	d100      	bne.n	8a30 <__aeabi_dadd+0x210>
    8a2e:	e0b4      	b.n	8b9a <__aeabi_dadd+0x37a>
    8a30:	1e58      	subs	r0, r3, #1
    8a32:	2800      	cmp	r0, #0
    8a34:	d000      	beq.n	8a38 <__aeabi_dadd+0x218>
    8a36:	e0de      	b.n	8bf6 <__aeabi_dadd+0x3d6>
    8a38:	18ba      	adds	r2, r7, r2
    8a3a:	42ba      	cmp	r2, r7
    8a3c:	419b      	sbcs	r3, r3
    8a3e:	1864      	adds	r4, r4, r1
    8a40:	425b      	negs	r3, r3
    8a42:	18e4      	adds	r4, r4, r3
    8a44:	0017      	movs	r7, r2
    8a46:	2601      	movs	r6, #1
    8a48:	0223      	lsls	r3, r4, #8
    8a4a:	d5a6      	bpl.n	899a <__aeabi_dadd+0x17a>
    8a4c:	2602      	movs	r6, #2
    8a4e:	e7d5      	b.n	89fc <__aeabi_dadd+0x1dc>
    8a50:	2d00      	cmp	r5, #0
    8a52:	d16e      	bne.n	8b32 <__aeabi_dadd+0x312>
    8a54:	1c70      	adds	r0, r6, #1
    8a56:	0540      	lsls	r0, r0, #21
    8a58:	0d40      	lsrs	r0, r0, #21
    8a5a:	2801      	cmp	r0, #1
    8a5c:	dc00      	bgt.n	8a60 <__aeabi_dadd+0x240>
    8a5e:	e0f9      	b.n	8c54 <__aeabi_dadd+0x434>
    8a60:	1ab8      	subs	r0, r7, r2
    8a62:	4684      	mov	ip, r0
    8a64:	4287      	cmp	r7, r0
    8a66:	4180      	sbcs	r0, r0
    8a68:	1ae5      	subs	r5, r4, r3
    8a6a:	4240      	negs	r0, r0
    8a6c:	1a2d      	subs	r5, r5, r0
    8a6e:	0228      	lsls	r0, r5, #8
    8a70:	d400      	bmi.n	8a74 <__aeabi_dadd+0x254>
    8a72:	e089      	b.n	8b88 <__aeabi_dadd+0x368>
    8a74:	1bd7      	subs	r7, r2, r7
    8a76:	42ba      	cmp	r2, r7
    8a78:	4192      	sbcs	r2, r2
    8a7a:	1b1c      	subs	r4, r3, r4
    8a7c:	4252      	negs	r2, r2
    8a7e:	1aa5      	subs	r5, r4, r2
    8a80:	46d8      	mov	r8, fp
    8a82:	e729      	b.n	88d8 <__aeabi_dadd+0xb8>
    8a84:	4645      	mov	r5, r8
    8a86:	2400      	movs	r4, #0
    8a88:	2700      	movs	r7, #0
    8a8a:	e76a      	b.n	8962 <__aeabi_dadd+0x142>
    8a8c:	4c45      	ldr	r4, [pc, #276]	; (8ba4 <__aeabi_dadd+0x384>)
    8a8e:	1af6      	subs	r6, r6, r3
    8a90:	402c      	ands	r4, r5
    8a92:	e749      	b.n	8928 <__aeabi_dadd+0x108>
    8a94:	003d      	movs	r5, r7
    8a96:	3828      	subs	r0, #40	; 0x28
    8a98:	4085      	lsls	r5, r0
    8a9a:	2700      	movs	r7, #0
    8a9c:	e72e      	b.n	88fc <__aeabi_dadd+0xdc>
    8a9e:	0038      	movs	r0, r7
    8aa0:	f7ff fa36 	bl	7f10 <__clzsi2>
    8aa4:	3020      	adds	r0, #32
    8aa6:	e71d      	b.n	88e4 <__aeabi_dadd+0xc4>
    8aa8:	430a      	orrs	r2, r1
    8aaa:	1e51      	subs	r1, r2, #1
    8aac:	418a      	sbcs	r2, r1
    8aae:	2100      	movs	r1, #0
    8ab0:	e707      	b.n	88c2 <__aeabi_dadd+0xa2>
    8ab2:	2b00      	cmp	r3, #0
    8ab4:	d000      	beq.n	8ab8 <__aeabi_dadd+0x298>
    8ab6:	e0f3      	b.n	8ca0 <__aeabi_dadd+0x480>
    8ab8:	1c70      	adds	r0, r6, #1
    8aba:	0543      	lsls	r3, r0, #21
    8abc:	0d5b      	lsrs	r3, r3, #21
    8abe:	2b01      	cmp	r3, #1
    8ac0:	dc00      	bgt.n	8ac4 <__aeabi_dadd+0x2a4>
    8ac2:	e0ad      	b.n	8c20 <__aeabi_dadd+0x400>
    8ac4:	4b36      	ldr	r3, [pc, #216]	; (8ba0 <__aeabi_dadd+0x380>)
    8ac6:	4298      	cmp	r0, r3
    8ac8:	d100      	bne.n	8acc <__aeabi_dadd+0x2ac>
    8aca:	e0d1      	b.n	8c70 <__aeabi_dadd+0x450>
    8acc:	18ba      	adds	r2, r7, r2
    8ace:	42ba      	cmp	r2, r7
    8ad0:	41bf      	sbcs	r7, r7
    8ad2:	1864      	adds	r4, r4, r1
    8ad4:	427f      	negs	r7, r7
    8ad6:	19e4      	adds	r4, r4, r7
    8ad8:	07e7      	lsls	r7, r4, #31
    8ada:	0852      	lsrs	r2, r2, #1
    8adc:	4317      	orrs	r7, r2
    8ade:	0864      	lsrs	r4, r4, #1
    8ae0:	0006      	movs	r6, r0
    8ae2:	e721      	b.n	8928 <__aeabi_dadd+0x108>
    8ae4:	482e      	ldr	r0, [pc, #184]	; (8ba0 <__aeabi_dadd+0x380>)
    8ae6:	4285      	cmp	r5, r0
    8ae8:	d100      	bne.n	8aec <__aeabi_dadd+0x2cc>
    8aea:	e093      	b.n	8c14 <__aeabi_dadd+0x3f4>
    8aec:	001d      	movs	r5, r3
    8aee:	e6d0      	b.n	8892 <__aeabi_dadd+0x72>
    8af0:	0029      	movs	r1, r5
    8af2:	3e1f      	subs	r6, #31
    8af4:	40f1      	lsrs	r1, r6
    8af6:	2b20      	cmp	r3, #32
    8af8:	d100      	bne.n	8afc <__aeabi_dadd+0x2dc>
    8afa:	e08d      	b.n	8c18 <__aeabi_dadd+0x3f8>
    8afc:	2240      	movs	r2, #64	; 0x40
    8afe:	1ad3      	subs	r3, r2, r3
    8b00:	409d      	lsls	r5, r3
    8b02:	432f      	orrs	r7, r5
    8b04:	1e7d      	subs	r5, r7, #1
    8b06:	41af      	sbcs	r7, r5
    8b08:	2400      	movs	r4, #0
    8b0a:	430f      	orrs	r7, r1
    8b0c:	2600      	movs	r6, #0
    8b0e:	e744      	b.n	899a <__aeabi_dadd+0x17a>
    8b10:	002b      	movs	r3, r5
    8b12:	0008      	movs	r0, r1
    8b14:	3b20      	subs	r3, #32
    8b16:	40d8      	lsrs	r0, r3
    8b18:	0003      	movs	r3, r0
    8b1a:	2d20      	cmp	r5, #32
    8b1c:	d100      	bne.n	8b20 <__aeabi_dadd+0x300>
    8b1e:	e07d      	b.n	8c1c <__aeabi_dadd+0x3fc>
    8b20:	2040      	movs	r0, #64	; 0x40
    8b22:	1b45      	subs	r5, r0, r5
    8b24:	40a9      	lsls	r1, r5
    8b26:	430a      	orrs	r2, r1
    8b28:	1e51      	subs	r1, r2, #1
    8b2a:	418a      	sbcs	r2, r1
    8b2c:	2100      	movs	r1, #0
    8b2e:	431a      	orrs	r2, r3
    8b30:	e6c7      	b.n	88c2 <__aeabi_dadd+0xa2>
    8b32:	2e00      	cmp	r6, #0
    8b34:	d050      	beq.n	8bd8 <__aeabi_dadd+0x3b8>
    8b36:	4e1a      	ldr	r6, [pc, #104]	; (8ba0 <__aeabi_dadd+0x380>)
    8b38:	42b0      	cmp	r0, r6
    8b3a:	d057      	beq.n	8bec <__aeabi_dadd+0x3cc>
    8b3c:	2680      	movs	r6, #128	; 0x80
    8b3e:	426b      	negs	r3, r5
    8b40:	4699      	mov	r9, r3
    8b42:	0436      	lsls	r6, r6, #16
    8b44:	4334      	orrs	r4, r6
    8b46:	464b      	mov	r3, r9
    8b48:	2b38      	cmp	r3, #56	; 0x38
    8b4a:	dd00      	ble.n	8b4e <__aeabi_dadd+0x32e>
    8b4c:	e0d6      	b.n	8cfc <__aeabi_dadd+0x4dc>
    8b4e:	2b1f      	cmp	r3, #31
    8b50:	dd00      	ble.n	8b54 <__aeabi_dadd+0x334>
    8b52:	e135      	b.n	8dc0 <__aeabi_dadd+0x5a0>
    8b54:	2620      	movs	r6, #32
    8b56:	1af5      	subs	r5, r6, r3
    8b58:	0026      	movs	r6, r4
    8b5a:	40ae      	lsls	r6, r5
    8b5c:	46b2      	mov	sl, r6
    8b5e:	003e      	movs	r6, r7
    8b60:	40de      	lsrs	r6, r3
    8b62:	46ac      	mov	ip, r5
    8b64:	0035      	movs	r5, r6
    8b66:	4656      	mov	r6, sl
    8b68:	432e      	orrs	r6, r5
    8b6a:	4665      	mov	r5, ip
    8b6c:	40af      	lsls	r7, r5
    8b6e:	1e7d      	subs	r5, r7, #1
    8b70:	41af      	sbcs	r7, r5
    8b72:	40dc      	lsrs	r4, r3
    8b74:	4337      	orrs	r7, r6
    8b76:	1bd7      	subs	r7, r2, r7
    8b78:	42ba      	cmp	r2, r7
    8b7a:	4192      	sbcs	r2, r2
    8b7c:	1b0c      	subs	r4, r1, r4
    8b7e:	4252      	negs	r2, r2
    8b80:	1aa4      	subs	r4, r4, r2
    8b82:	0006      	movs	r6, r0
    8b84:	46d8      	mov	r8, fp
    8b86:	e6a3      	b.n	88d0 <__aeabi_dadd+0xb0>
    8b88:	4664      	mov	r4, ip
    8b8a:	4667      	mov	r7, ip
    8b8c:	432c      	orrs	r4, r5
    8b8e:	d000      	beq.n	8b92 <__aeabi_dadd+0x372>
    8b90:	e6a2      	b.n	88d8 <__aeabi_dadd+0xb8>
    8b92:	2500      	movs	r5, #0
    8b94:	2600      	movs	r6, #0
    8b96:	2700      	movs	r7, #0
    8b98:	e706      	b.n	89a8 <__aeabi_dadd+0x188>
    8b9a:	001e      	movs	r6, r3
    8b9c:	e6c4      	b.n	8928 <__aeabi_dadd+0x108>
    8b9e:	46c0      	nop			; (mov r8, r8)
    8ba0:	000007ff 	.word	0x000007ff
    8ba4:	ff7fffff 	.word	0xff7fffff
    8ba8:	800fffff 	.word	0x800fffff
    8bac:	2b1f      	cmp	r3, #31
    8bae:	dc63      	bgt.n	8c78 <__aeabi_dadd+0x458>
    8bb0:	2020      	movs	r0, #32
    8bb2:	1ac3      	subs	r3, r0, r3
    8bb4:	0008      	movs	r0, r1
    8bb6:	4098      	lsls	r0, r3
    8bb8:	469c      	mov	ip, r3
    8bba:	4683      	mov	fp, r0
    8bbc:	4653      	mov	r3, sl
    8bbe:	0010      	movs	r0, r2
    8bc0:	40d8      	lsrs	r0, r3
    8bc2:	0003      	movs	r3, r0
    8bc4:	4658      	mov	r0, fp
    8bc6:	4318      	orrs	r0, r3
    8bc8:	4663      	mov	r3, ip
    8bca:	409a      	lsls	r2, r3
    8bcc:	1e53      	subs	r3, r2, #1
    8bce:	419a      	sbcs	r2, r3
    8bd0:	4653      	mov	r3, sl
    8bd2:	4302      	orrs	r2, r0
    8bd4:	40d9      	lsrs	r1, r3
    8bd6:	e703      	b.n	89e0 <__aeabi_dadd+0x1c0>
    8bd8:	0026      	movs	r6, r4
    8bda:	433e      	orrs	r6, r7
    8bdc:	d006      	beq.n	8bec <__aeabi_dadd+0x3cc>
    8bde:	43eb      	mvns	r3, r5
    8be0:	4699      	mov	r9, r3
    8be2:	2b00      	cmp	r3, #0
    8be4:	d0c7      	beq.n	8b76 <__aeabi_dadd+0x356>
    8be6:	4e94      	ldr	r6, [pc, #592]	; (8e38 <__aeabi_dadd+0x618>)
    8be8:	42b0      	cmp	r0, r6
    8bea:	d1ac      	bne.n	8b46 <__aeabi_dadd+0x326>
    8bec:	000c      	movs	r4, r1
    8bee:	0017      	movs	r7, r2
    8bf0:	0006      	movs	r6, r0
    8bf2:	46d8      	mov	r8, fp
    8bf4:	e698      	b.n	8928 <__aeabi_dadd+0x108>
    8bf6:	4b90      	ldr	r3, [pc, #576]	; (8e38 <__aeabi_dadd+0x618>)
    8bf8:	459a      	cmp	sl, r3
    8bfa:	d00b      	beq.n	8c14 <__aeabi_dadd+0x3f4>
    8bfc:	4682      	mov	sl, r0
    8bfe:	e6e7      	b.n	89d0 <__aeabi_dadd+0x1b0>
    8c00:	2800      	cmp	r0, #0
    8c02:	d000      	beq.n	8c06 <__aeabi_dadd+0x3e6>
    8c04:	e09e      	b.n	8d44 <__aeabi_dadd+0x524>
    8c06:	0018      	movs	r0, r3
    8c08:	4310      	orrs	r0, r2
    8c0a:	d100      	bne.n	8c0e <__aeabi_dadd+0x3ee>
    8c0c:	e0e9      	b.n	8de2 <__aeabi_dadd+0x5c2>
    8c0e:	001c      	movs	r4, r3
    8c10:	0017      	movs	r7, r2
    8c12:	46d8      	mov	r8, fp
    8c14:	4e88      	ldr	r6, [pc, #544]	; (8e38 <__aeabi_dadd+0x618>)
    8c16:	e687      	b.n	8928 <__aeabi_dadd+0x108>
    8c18:	2500      	movs	r5, #0
    8c1a:	e772      	b.n	8b02 <__aeabi_dadd+0x2e2>
    8c1c:	2100      	movs	r1, #0
    8c1e:	e782      	b.n	8b26 <__aeabi_dadd+0x306>
    8c20:	0023      	movs	r3, r4
    8c22:	433b      	orrs	r3, r7
    8c24:	2e00      	cmp	r6, #0
    8c26:	d000      	beq.n	8c2a <__aeabi_dadd+0x40a>
    8c28:	e0ab      	b.n	8d82 <__aeabi_dadd+0x562>
    8c2a:	2b00      	cmp	r3, #0
    8c2c:	d100      	bne.n	8c30 <__aeabi_dadd+0x410>
    8c2e:	e0e7      	b.n	8e00 <__aeabi_dadd+0x5e0>
    8c30:	000b      	movs	r3, r1
    8c32:	4313      	orrs	r3, r2
    8c34:	d100      	bne.n	8c38 <__aeabi_dadd+0x418>
    8c36:	e677      	b.n	8928 <__aeabi_dadd+0x108>
    8c38:	18ba      	adds	r2, r7, r2
    8c3a:	42ba      	cmp	r2, r7
    8c3c:	41bf      	sbcs	r7, r7
    8c3e:	1864      	adds	r4, r4, r1
    8c40:	427f      	negs	r7, r7
    8c42:	19e4      	adds	r4, r4, r7
    8c44:	0223      	lsls	r3, r4, #8
    8c46:	d400      	bmi.n	8c4a <__aeabi_dadd+0x42a>
    8c48:	e0f2      	b.n	8e30 <__aeabi_dadd+0x610>
    8c4a:	4b7c      	ldr	r3, [pc, #496]	; (8e3c <__aeabi_dadd+0x61c>)
    8c4c:	0017      	movs	r7, r2
    8c4e:	401c      	ands	r4, r3
    8c50:	0006      	movs	r6, r0
    8c52:	e669      	b.n	8928 <__aeabi_dadd+0x108>
    8c54:	0020      	movs	r0, r4
    8c56:	4338      	orrs	r0, r7
    8c58:	2e00      	cmp	r6, #0
    8c5a:	d1d1      	bne.n	8c00 <__aeabi_dadd+0x3e0>
    8c5c:	2800      	cmp	r0, #0
    8c5e:	d15b      	bne.n	8d18 <__aeabi_dadd+0x4f8>
    8c60:	001c      	movs	r4, r3
    8c62:	4314      	orrs	r4, r2
    8c64:	d100      	bne.n	8c68 <__aeabi_dadd+0x448>
    8c66:	e0a8      	b.n	8dba <__aeabi_dadd+0x59a>
    8c68:	001c      	movs	r4, r3
    8c6a:	0017      	movs	r7, r2
    8c6c:	46d8      	mov	r8, fp
    8c6e:	e65b      	b.n	8928 <__aeabi_dadd+0x108>
    8c70:	0006      	movs	r6, r0
    8c72:	2400      	movs	r4, #0
    8c74:	2700      	movs	r7, #0
    8c76:	e697      	b.n	89a8 <__aeabi_dadd+0x188>
    8c78:	4650      	mov	r0, sl
    8c7a:	000b      	movs	r3, r1
    8c7c:	3820      	subs	r0, #32
    8c7e:	40c3      	lsrs	r3, r0
    8c80:	4699      	mov	r9, r3
    8c82:	4653      	mov	r3, sl
    8c84:	2b20      	cmp	r3, #32
    8c86:	d100      	bne.n	8c8a <__aeabi_dadd+0x46a>
    8c88:	e095      	b.n	8db6 <__aeabi_dadd+0x596>
    8c8a:	2340      	movs	r3, #64	; 0x40
    8c8c:	4650      	mov	r0, sl
    8c8e:	1a1b      	subs	r3, r3, r0
    8c90:	4099      	lsls	r1, r3
    8c92:	430a      	orrs	r2, r1
    8c94:	1e51      	subs	r1, r2, #1
    8c96:	418a      	sbcs	r2, r1
    8c98:	464b      	mov	r3, r9
    8c9a:	2100      	movs	r1, #0
    8c9c:	431a      	orrs	r2, r3
    8c9e:	e69f      	b.n	89e0 <__aeabi_dadd+0x1c0>
    8ca0:	2e00      	cmp	r6, #0
    8ca2:	d130      	bne.n	8d06 <__aeabi_dadd+0x4e6>
    8ca4:	0026      	movs	r6, r4
    8ca6:	433e      	orrs	r6, r7
    8ca8:	d067      	beq.n	8d7a <__aeabi_dadd+0x55a>
    8caa:	43db      	mvns	r3, r3
    8cac:	469a      	mov	sl, r3
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d01c      	beq.n	8cec <__aeabi_dadd+0x4cc>
    8cb2:	4e61      	ldr	r6, [pc, #388]	; (8e38 <__aeabi_dadd+0x618>)
    8cb4:	42b0      	cmp	r0, r6
    8cb6:	d060      	beq.n	8d7a <__aeabi_dadd+0x55a>
    8cb8:	4653      	mov	r3, sl
    8cba:	2b38      	cmp	r3, #56	; 0x38
    8cbc:	dd00      	ble.n	8cc0 <__aeabi_dadd+0x4a0>
    8cbe:	e096      	b.n	8dee <__aeabi_dadd+0x5ce>
    8cc0:	2b1f      	cmp	r3, #31
    8cc2:	dd00      	ble.n	8cc6 <__aeabi_dadd+0x4a6>
    8cc4:	e09f      	b.n	8e06 <__aeabi_dadd+0x5e6>
    8cc6:	2620      	movs	r6, #32
    8cc8:	1af3      	subs	r3, r6, r3
    8cca:	0026      	movs	r6, r4
    8ccc:	409e      	lsls	r6, r3
    8cce:	469c      	mov	ip, r3
    8cd0:	46b3      	mov	fp, r6
    8cd2:	4653      	mov	r3, sl
    8cd4:	003e      	movs	r6, r7
    8cd6:	40de      	lsrs	r6, r3
    8cd8:	0033      	movs	r3, r6
    8cda:	465e      	mov	r6, fp
    8cdc:	431e      	orrs	r6, r3
    8cde:	4663      	mov	r3, ip
    8ce0:	409f      	lsls	r7, r3
    8ce2:	1e7b      	subs	r3, r7, #1
    8ce4:	419f      	sbcs	r7, r3
    8ce6:	4653      	mov	r3, sl
    8ce8:	40dc      	lsrs	r4, r3
    8cea:	4337      	orrs	r7, r6
    8cec:	18bf      	adds	r7, r7, r2
    8cee:	4297      	cmp	r7, r2
    8cf0:	4192      	sbcs	r2, r2
    8cf2:	1864      	adds	r4, r4, r1
    8cf4:	4252      	negs	r2, r2
    8cf6:	18a4      	adds	r4, r4, r2
    8cf8:	0006      	movs	r6, r0
    8cfa:	e678      	b.n	89ee <__aeabi_dadd+0x1ce>
    8cfc:	4327      	orrs	r7, r4
    8cfe:	1e7c      	subs	r4, r7, #1
    8d00:	41a7      	sbcs	r7, r4
    8d02:	2400      	movs	r4, #0
    8d04:	e737      	b.n	8b76 <__aeabi_dadd+0x356>
    8d06:	4e4c      	ldr	r6, [pc, #304]	; (8e38 <__aeabi_dadd+0x618>)
    8d08:	42b0      	cmp	r0, r6
    8d0a:	d036      	beq.n	8d7a <__aeabi_dadd+0x55a>
    8d0c:	2680      	movs	r6, #128	; 0x80
    8d0e:	425b      	negs	r3, r3
    8d10:	0436      	lsls	r6, r6, #16
    8d12:	469a      	mov	sl, r3
    8d14:	4334      	orrs	r4, r6
    8d16:	e7cf      	b.n	8cb8 <__aeabi_dadd+0x498>
    8d18:	0018      	movs	r0, r3
    8d1a:	4310      	orrs	r0, r2
    8d1c:	d100      	bne.n	8d20 <__aeabi_dadd+0x500>
    8d1e:	e603      	b.n	8928 <__aeabi_dadd+0x108>
    8d20:	1ab8      	subs	r0, r7, r2
    8d22:	4684      	mov	ip, r0
    8d24:	4567      	cmp	r7, ip
    8d26:	41ad      	sbcs	r5, r5
    8d28:	1ae0      	subs	r0, r4, r3
    8d2a:	426d      	negs	r5, r5
    8d2c:	1b40      	subs	r0, r0, r5
    8d2e:	0205      	lsls	r5, r0, #8
    8d30:	d400      	bmi.n	8d34 <__aeabi_dadd+0x514>
    8d32:	e62c      	b.n	898e <__aeabi_dadd+0x16e>
    8d34:	1bd7      	subs	r7, r2, r7
    8d36:	42ba      	cmp	r2, r7
    8d38:	4192      	sbcs	r2, r2
    8d3a:	1b1c      	subs	r4, r3, r4
    8d3c:	4252      	negs	r2, r2
    8d3e:	1aa4      	subs	r4, r4, r2
    8d40:	46d8      	mov	r8, fp
    8d42:	e5f1      	b.n	8928 <__aeabi_dadd+0x108>
    8d44:	0018      	movs	r0, r3
    8d46:	4310      	orrs	r0, r2
    8d48:	d100      	bne.n	8d4c <__aeabi_dadd+0x52c>
    8d4a:	e763      	b.n	8c14 <__aeabi_dadd+0x3f4>
    8d4c:	08f8      	lsrs	r0, r7, #3
    8d4e:	0767      	lsls	r7, r4, #29
    8d50:	4307      	orrs	r7, r0
    8d52:	2080      	movs	r0, #128	; 0x80
    8d54:	08e4      	lsrs	r4, r4, #3
    8d56:	0300      	lsls	r0, r0, #12
    8d58:	4204      	tst	r4, r0
    8d5a:	d008      	beq.n	8d6e <__aeabi_dadd+0x54e>
    8d5c:	08dd      	lsrs	r5, r3, #3
    8d5e:	4205      	tst	r5, r0
    8d60:	d105      	bne.n	8d6e <__aeabi_dadd+0x54e>
    8d62:	08d2      	lsrs	r2, r2, #3
    8d64:	0759      	lsls	r1, r3, #29
    8d66:	4311      	orrs	r1, r2
    8d68:	000f      	movs	r7, r1
    8d6a:	002c      	movs	r4, r5
    8d6c:	46d8      	mov	r8, fp
    8d6e:	0f7b      	lsrs	r3, r7, #29
    8d70:	00e4      	lsls	r4, r4, #3
    8d72:	431c      	orrs	r4, r3
    8d74:	00ff      	lsls	r7, r7, #3
    8d76:	4e30      	ldr	r6, [pc, #192]	; (8e38 <__aeabi_dadd+0x618>)
    8d78:	e5d6      	b.n	8928 <__aeabi_dadd+0x108>
    8d7a:	000c      	movs	r4, r1
    8d7c:	0017      	movs	r7, r2
    8d7e:	0006      	movs	r6, r0
    8d80:	e5d2      	b.n	8928 <__aeabi_dadd+0x108>
    8d82:	2b00      	cmp	r3, #0
    8d84:	d038      	beq.n	8df8 <__aeabi_dadd+0x5d8>
    8d86:	000b      	movs	r3, r1
    8d88:	4313      	orrs	r3, r2
    8d8a:	d100      	bne.n	8d8e <__aeabi_dadd+0x56e>
    8d8c:	e742      	b.n	8c14 <__aeabi_dadd+0x3f4>
    8d8e:	08f8      	lsrs	r0, r7, #3
    8d90:	0767      	lsls	r7, r4, #29
    8d92:	4307      	orrs	r7, r0
    8d94:	2080      	movs	r0, #128	; 0x80
    8d96:	08e4      	lsrs	r4, r4, #3
    8d98:	0300      	lsls	r0, r0, #12
    8d9a:	4204      	tst	r4, r0
    8d9c:	d0e7      	beq.n	8d6e <__aeabi_dadd+0x54e>
    8d9e:	08cb      	lsrs	r3, r1, #3
    8da0:	4203      	tst	r3, r0
    8da2:	d1e4      	bne.n	8d6e <__aeabi_dadd+0x54e>
    8da4:	08d2      	lsrs	r2, r2, #3
    8da6:	0749      	lsls	r1, r1, #29
    8da8:	4311      	orrs	r1, r2
    8daa:	000f      	movs	r7, r1
    8dac:	001c      	movs	r4, r3
    8dae:	e7de      	b.n	8d6e <__aeabi_dadd+0x54e>
    8db0:	2700      	movs	r7, #0
    8db2:	2400      	movs	r4, #0
    8db4:	e5d5      	b.n	8962 <__aeabi_dadd+0x142>
    8db6:	2100      	movs	r1, #0
    8db8:	e76b      	b.n	8c92 <__aeabi_dadd+0x472>
    8dba:	2500      	movs	r5, #0
    8dbc:	2700      	movs	r7, #0
    8dbe:	e5f3      	b.n	89a8 <__aeabi_dadd+0x188>
    8dc0:	464e      	mov	r6, r9
    8dc2:	0025      	movs	r5, r4
    8dc4:	3e20      	subs	r6, #32
    8dc6:	40f5      	lsrs	r5, r6
    8dc8:	464b      	mov	r3, r9
    8dca:	002e      	movs	r6, r5
    8dcc:	2b20      	cmp	r3, #32
    8dce:	d02d      	beq.n	8e2c <__aeabi_dadd+0x60c>
    8dd0:	2540      	movs	r5, #64	; 0x40
    8dd2:	1aed      	subs	r5, r5, r3
    8dd4:	40ac      	lsls	r4, r5
    8dd6:	4327      	orrs	r7, r4
    8dd8:	1e7c      	subs	r4, r7, #1
    8dda:	41a7      	sbcs	r7, r4
    8ddc:	2400      	movs	r4, #0
    8dde:	4337      	orrs	r7, r6
    8de0:	e6c9      	b.n	8b76 <__aeabi_dadd+0x356>
    8de2:	2480      	movs	r4, #128	; 0x80
    8de4:	2500      	movs	r5, #0
    8de6:	0324      	lsls	r4, r4, #12
    8de8:	4e13      	ldr	r6, [pc, #76]	; (8e38 <__aeabi_dadd+0x618>)
    8dea:	2700      	movs	r7, #0
    8dec:	e5dc      	b.n	89a8 <__aeabi_dadd+0x188>
    8dee:	4327      	orrs	r7, r4
    8df0:	1e7c      	subs	r4, r7, #1
    8df2:	41a7      	sbcs	r7, r4
    8df4:	2400      	movs	r4, #0
    8df6:	e779      	b.n	8cec <__aeabi_dadd+0x4cc>
    8df8:	000c      	movs	r4, r1
    8dfa:	0017      	movs	r7, r2
    8dfc:	4e0e      	ldr	r6, [pc, #56]	; (8e38 <__aeabi_dadd+0x618>)
    8dfe:	e593      	b.n	8928 <__aeabi_dadd+0x108>
    8e00:	000c      	movs	r4, r1
    8e02:	0017      	movs	r7, r2
    8e04:	e590      	b.n	8928 <__aeabi_dadd+0x108>
    8e06:	4656      	mov	r6, sl
    8e08:	0023      	movs	r3, r4
    8e0a:	3e20      	subs	r6, #32
    8e0c:	40f3      	lsrs	r3, r6
    8e0e:	4699      	mov	r9, r3
    8e10:	4653      	mov	r3, sl
    8e12:	2b20      	cmp	r3, #32
    8e14:	d00e      	beq.n	8e34 <__aeabi_dadd+0x614>
    8e16:	2340      	movs	r3, #64	; 0x40
    8e18:	4656      	mov	r6, sl
    8e1a:	1b9b      	subs	r3, r3, r6
    8e1c:	409c      	lsls	r4, r3
    8e1e:	4327      	orrs	r7, r4
    8e20:	1e7c      	subs	r4, r7, #1
    8e22:	41a7      	sbcs	r7, r4
    8e24:	464b      	mov	r3, r9
    8e26:	2400      	movs	r4, #0
    8e28:	431f      	orrs	r7, r3
    8e2a:	e75f      	b.n	8cec <__aeabi_dadd+0x4cc>
    8e2c:	2400      	movs	r4, #0
    8e2e:	e7d2      	b.n	8dd6 <__aeabi_dadd+0x5b6>
    8e30:	0017      	movs	r7, r2
    8e32:	e5b2      	b.n	899a <__aeabi_dadd+0x17a>
    8e34:	2400      	movs	r4, #0
    8e36:	e7f2      	b.n	8e1e <__aeabi_dadd+0x5fe>
    8e38:	000007ff 	.word	0x000007ff
    8e3c:	ff7fffff 	.word	0xff7fffff

00008e40 <__aeabi_ddiv>:
    8e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e42:	4657      	mov	r7, sl
    8e44:	4645      	mov	r5, r8
    8e46:	46de      	mov	lr, fp
    8e48:	464e      	mov	r6, r9
    8e4a:	b5e0      	push	{r5, r6, r7, lr}
    8e4c:	004c      	lsls	r4, r1, #1
    8e4e:	030e      	lsls	r6, r1, #12
    8e50:	b087      	sub	sp, #28
    8e52:	4683      	mov	fp, r0
    8e54:	4692      	mov	sl, r2
    8e56:	001d      	movs	r5, r3
    8e58:	4680      	mov	r8, r0
    8e5a:	0b36      	lsrs	r6, r6, #12
    8e5c:	0d64      	lsrs	r4, r4, #21
    8e5e:	0fcf      	lsrs	r7, r1, #31
    8e60:	2c00      	cmp	r4, #0
    8e62:	d04f      	beq.n	8f04 <__aeabi_ddiv+0xc4>
    8e64:	4b6f      	ldr	r3, [pc, #444]	; (9024 <__aeabi_ddiv+0x1e4>)
    8e66:	429c      	cmp	r4, r3
    8e68:	d035      	beq.n	8ed6 <__aeabi_ddiv+0x96>
    8e6a:	2380      	movs	r3, #128	; 0x80
    8e6c:	0f42      	lsrs	r2, r0, #29
    8e6e:	041b      	lsls	r3, r3, #16
    8e70:	00f6      	lsls	r6, r6, #3
    8e72:	4313      	orrs	r3, r2
    8e74:	4333      	orrs	r3, r6
    8e76:	4699      	mov	r9, r3
    8e78:	00c3      	lsls	r3, r0, #3
    8e7a:	4698      	mov	r8, r3
    8e7c:	4b6a      	ldr	r3, [pc, #424]	; (9028 <__aeabi_ddiv+0x1e8>)
    8e7e:	2600      	movs	r6, #0
    8e80:	469c      	mov	ip, r3
    8e82:	2300      	movs	r3, #0
    8e84:	4464      	add	r4, ip
    8e86:	9303      	str	r3, [sp, #12]
    8e88:	032b      	lsls	r3, r5, #12
    8e8a:	0b1b      	lsrs	r3, r3, #12
    8e8c:	469b      	mov	fp, r3
    8e8e:	006b      	lsls	r3, r5, #1
    8e90:	0fed      	lsrs	r5, r5, #31
    8e92:	4650      	mov	r0, sl
    8e94:	0d5b      	lsrs	r3, r3, #21
    8e96:	9501      	str	r5, [sp, #4]
    8e98:	d05e      	beq.n	8f58 <__aeabi_ddiv+0x118>
    8e9a:	4a62      	ldr	r2, [pc, #392]	; (9024 <__aeabi_ddiv+0x1e4>)
    8e9c:	4293      	cmp	r3, r2
    8e9e:	d053      	beq.n	8f48 <__aeabi_ddiv+0x108>
    8ea0:	465a      	mov	r2, fp
    8ea2:	00d1      	lsls	r1, r2, #3
    8ea4:	2280      	movs	r2, #128	; 0x80
    8ea6:	0f40      	lsrs	r0, r0, #29
    8ea8:	0412      	lsls	r2, r2, #16
    8eaa:	4302      	orrs	r2, r0
    8eac:	430a      	orrs	r2, r1
    8eae:	4693      	mov	fp, r2
    8eb0:	4652      	mov	r2, sl
    8eb2:	00d1      	lsls	r1, r2, #3
    8eb4:	4a5c      	ldr	r2, [pc, #368]	; (9028 <__aeabi_ddiv+0x1e8>)
    8eb6:	4694      	mov	ip, r2
    8eb8:	2200      	movs	r2, #0
    8eba:	4463      	add	r3, ip
    8ebc:	0038      	movs	r0, r7
    8ebe:	4068      	eors	r0, r5
    8ec0:	4684      	mov	ip, r0
    8ec2:	9002      	str	r0, [sp, #8]
    8ec4:	1ae4      	subs	r4, r4, r3
    8ec6:	4316      	orrs	r6, r2
    8ec8:	2e0f      	cmp	r6, #15
    8eca:	d900      	bls.n	8ece <__aeabi_ddiv+0x8e>
    8ecc:	e0b4      	b.n	9038 <__aeabi_ddiv+0x1f8>
    8ece:	4b57      	ldr	r3, [pc, #348]	; (902c <__aeabi_ddiv+0x1ec>)
    8ed0:	00b6      	lsls	r6, r6, #2
    8ed2:	599b      	ldr	r3, [r3, r6]
    8ed4:	469f      	mov	pc, r3
    8ed6:	0003      	movs	r3, r0
    8ed8:	4333      	orrs	r3, r6
    8eda:	4699      	mov	r9, r3
    8edc:	d16c      	bne.n	8fb8 <__aeabi_ddiv+0x178>
    8ede:	2300      	movs	r3, #0
    8ee0:	4698      	mov	r8, r3
    8ee2:	3302      	adds	r3, #2
    8ee4:	2608      	movs	r6, #8
    8ee6:	9303      	str	r3, [sp, #12]
    8ee8:	e7ce      	b.n	8e88 <__aeabi_ddiv+0x48>
    8eea:	46cb      	mov	fp, r9
    8eec:	4641      	mov	r1, r8
    8eee:	9a03      	ldr	r2, [sp, #12]
    8ef0:	9701      	str	r7, [sp, #4]
    8ef2:	2a02      	cmp	r2, #2
    8ef4:	d165      	bne.n	8fc2 <__aeabi_ddiv+0x182>
    8ef6:	9b01      	ldr	r3, [sp, #4]
    8ef8:	4c4a      	ldr	r4, [pc, #296]	; (9024 <__aeabi_ddiv+0x1e4>)
    8efa:	469c      	mov	ip, r3
    8efc:	2300      	movs	r3, #0
    8efe:	2200      	movs	r2, #0
    8f00:	4698      	mov	r8, r3
    8f02:	e06b      	b.n	8fdc <__aeabi_ddiv+0x19c>
    8f04:	0003      	movs	r3, r0
    8f06:	4333      	orrs	r3, r6
    8f08:	4699      	mov	r9, r3
    8f0a:	d04e      	beq.n	8faa <__aeabi_ddiv+0x16a>
    8f0c:	2e00      	cmp	r6, #0
    8f0e:	d100      	bne.n	8f12 <__aeabi_ddiv+0xd2>
    8f10:	e1bc      	b.n	928c <__aeabi_ddiv+0x44c>
    8f12:	0030      	movs	r0, r6
    8f14:	f7fe fffc 	bl	7f10 <__clzsi2>
    8f18:	0003      	movs	r3, r0
    8f1a:	3b0b      	subs	r3, #11
    8f1c:	2b1c      	cmp	r3, #28
    8f1e:	dd00      	ble.n	8f22 <__aeabi_ddiv+0xe2>
    8f20:	e1ac      	b.n	927c <__aeabi_ddiv+0x43c>
    8f22:	221d      	movs	r2, #29
    8f24:	1ad3      	subs	r3, r2, r3
    8f26:	465a      	mov	r2, fp
    8f28:	0001      	movs	r1, r0
    8f2a:	40da      	lsrs	r2, r3
    8f2c:	3908      	subs	r1, #8
    8f2e:	408e      	lsls	r6, r1
    8f30:	0013      	movs	r3, r2
    8f32:	4333      	orrs	r3, r6
    8f34:	4699      	mov	r9, r3
    8f36:	465b      	mov	r3, fp
    8f38:	408b      	lsls	r3, r1
    8f3a:	4698      	mov	r8, r3
    8f3c:	2300      	movs	r3, #0
    8f3e:	4c3c      	ldr	r4, [pc, #240]	; (9030 <__aeabi_ddiv+0x1f0>)
    8f40:	2600      	movs	r6, #0
    8f42:	1a24      	subs	r4, r4, r0
    8f44:	9303      	str	r3, [sp, #12]
    8f46:	e79f      	b.n	8e88 <__aeabi_ddiv+0x48>
    8f48:	4651      	mov	r1, sl
    8f4a:	465a      	mov	r2, fp
    8f4c:	4311      	orrs	r1, r2
    8f4e:	d129      	bne.n	8fa4 <__aeabi_ddiv+0x164>
    8f50:	2200      	movs	r2, #0
    8f52:	4693      	mov	fp, r2
    8f54:	3202      	adds	r2, #2
    8f56:	e7b1      	b.n	8ebc <__aeabi_ddiv+0x7c>
    8f58:	4659      	mov	r1, fp
    8f5a:	4301      	orrs	r1, r0
    8f5c:	d01e      	beq.n	8f9c <__aeabi_ddiv+0x15c>
    8f5e:	465b      	mov	r3, fp
    8f60:	2b00      	cmp	r3, #0
    8f62:	d100      	bne.n	8f66 <__aeabi_ddiv+0x126>
    8f64:	e19e      	b.n	92a4 <__aeabi_ddiv+0x464>
    8f66:	4658      	mov	r0, fp
    8f68:	f7fe ffd2 	bl	7f10 <__clzsi2>
    8f6c:	0003      	movs	r3, r0
    8f6e:	3b0b      	subs	r3, #11
    8f70:	2b1c      	cmp	r3, #28
    8f72:	dd00      	ble.n	8f76 <__aeabi_ddiv+0x136>
    8f74:	e18f      	b.n	9296 <__aeabi_ddiv+0x456>
    8f76:	0002      	movs	r2, r0
    8f78:	4659      	mov	r1, fp
    8f7a:	3a08      	subs	r2, #8
    8f7c:	4091      	lsls	r1, r2
    8f7e:	468b      	mov	fp, r1
    8f80:	211d      	movs	r1, #29
    8f82:	1acb      	subs	r3, r1, r3
    8f84:	4651      	mov	r1, sl
    8f86:	40d9      	lsrs	r1, r3
    8f88:	000b      	movs	r3, r1
    8f8a:	4659      	mov	r1, fp
    8f8c:	430b      	orrs	r3, r1
    8f8e:	4651      	mov	r1, sl
    8f90:	469b      	mov	fp, r3
    8f92:	4091      	lsls	r1, r2
    8f94:	4b26      	ldr	r3, [pc, #152]	; (9030 <__aeabi_ddiv+0x1f0>)
    8f96:	2200      	movs	r2, #0
    8f98:	1a1b      	subs	r3, r3, r0
    8f9a:	e78f      	b.n	8ebc <__aeabi_ddiv+0x7c>
    8f9c:	2300      	movs	r3, #0
    8f9e:	2201      	movs	r2, #1
    8fa0:	469b      	mov	fp, r3
    8fa2:	e78b      	b.n	8ebc <__aeabi_ddiv+0x7c>
    8fa4:	4651      	mov	r1, sl
    8fa6:	2203      	movs	r2, #3
    8fa8:	e788      	b.n	8ebc <__aeabi_ddiv+0x7c>
    8faa:	2300      	movs	r3, #0
    8fac:	4698      	mov	r8, r3
    8fae:	3301      	adds	r3, #1
    8fb0:	2604      	movs	r6, #4
    8fb2:	2400      	movs	r4, #0
    8fb4:	9303      	str	r3, [sp, #12]
    8fb6:	e767      	b.n	8e88 <__aeabi_ddiv+0x48>
    8fb8:	2303      	movs	r3, #3
    8fba:	46b1      	mov	r9, r6
    8fbc:	9303      	str	r3, [sp, #12]
    8fbe:	260c      	movs	r6, #12
    8fc0:	e762      	b.n	8e88 <__aeabi_ddiv+0x48>
    8fc2:	2a03      	cmp	r2, #3
    8fc4:	d100      	bne.n	8fc8 <__aeabi_ddiv+0x188>
    8fc6:	e25c      	b.n	9482 <__aeabi_ddiv+0x642>
    8fc8:	9b01      	ldr	r3, [sp, #4]
    8fca:	2a01      	cmp	r2, #1
    8fcc:	d000      	beq.n	8fd0 <__aeabi_ddiv+0x190>
    8fce:	e1e4      	b.n	939a <__aeabi_ddiv+0x55a>
    8fd0:	4013      	ands	r3, r2
    8fd2:	469c      	mov	ip, r3
    8fd4:	2300      	movs	r3, #0
    8fd6:	2400      	movs	r4, #0
    8fd8:	2200      	movs	r2, #0
    8fda:	4698      	mov	r8, r3
    8fdc:	2100      	movs	r1, #0
    8fde:	0312      	lsls	r2, r2, #12
    8fe0:	0b13      	lsrs	r3, r2, #12
    8fe2:	0d0a      	lsrs	r2, r1, #20
    8fe4:	0512      	lsls	r2, r2, #20
    8fe6:	431a      	orrs	r2, r3
    8fe8:	0523      	lsls	r3, r4, #20
    8fea:	4c12      	ldr	r4, [pc, #72]	; (9034 <__aeabi_ddiv+0x1f4>)
    8fec:	4640      	mov	r0, r8
    8fee:	4022      	ands	r2, r4
    8ff0:	4313      	orrs	r3, r2
    8ff2:	4662      	mov	r2, ip
    8ff4:	005b      	lsls	r3, r3, #1
    8ff6:	07d2      	lsls	r2, r2, #31
    8ff8:	085b      	lsrs	r3, r3, #1
    8ffa:	4313      	orrs	r3, r2
    8ffc:	0019      	movs	r1, r3
    8ffe:	b007      	add	sp, #28
    9000:	bc3c      	pop	{r2, r3, r4, r5}
    9002:	4690      	mov	r8, r2
    9004:	4699      	mov	r9, r3
    9006:	46a2      	mov	sl, r4
    9008:	46ab      	mov	fp, r5
    900a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    900c:	2300      	movs	r3, #0
    900e:	2280      	movs	r2, #128	; 0x80
    9010:	469c      	mov	ip, r3
    9012:	0312      	lsls	r2, r2, #12
    9014:	4698      	mov	r8, r3
    9016:	4c03      	ldr	r4, [pc, #12]	; (9024 <__aeabi_ddiv+0x1e4>)
    9018:	e7e0      	b.n	8fdc <__aeabi_ddiv+0x19c>
    901a:	2300      	movs	r3, #0
    901c:	4c01      	ldr	r4, [pc, #4]	; (9024 <__aeabi_ddiv+0x1e4>)
    901e:	2200      	movs	r2, #0
    9020:	4698      	mov	r8, r3
    9022:	e7db      	b.n	8fdc <__aeabi_ddiv+0x19c>
    9024:	000007ff 	.word	0x000007ff
    9028:	fffffc01 	.word	0xfffffc01
    902c:	0000c168 	.word	0x0000c168
    9030:	fffffc0d 	.word	0xfffffc0d
    9034:	800fffff 	.word	0x800fffff
    9038:	45d9      	cmp	r9, fp
    903a:	d900      	bls.n	903e <__aeabi_ddiv+0x1fe>
    903c:	e139      	b.n	92b2 <__aeabi_ddiv+0x472>
    903e:	d100      	bne.n	9042 <__aeabi_ddiv+0x202>
    9040:	e134      	b.n	92ac <__aeabi_ddiv+0x46c>
    9042:	2300      	movs	r3, #0
    9044:	4646      	mov	r6, r8
    9046:	464d      	mov	r5, r9
    9048:	469a      	mov	sl, r3
    904a:	3c01      	subs	r4, #1
    904c:	465b      	mov	r3, fp
    904e:	0e0a      	lsrs	r2, r1, #24
    9050:	021b      	lsls	r3, r3, #8
    9052:	431a      	orrs	r2, r3
    9054:	020b      	lsls	r3, r1, #8
    9056:	0c17      	lsrs	r7, r2, #16
    9058:	9303      	str	r3, [sp, #12]
    905a:	0413      	lsls	r3, r2, #16
    905c:	0c1b      	lsrs	r3, r3, #16
    905e:	0039      	movs	r1, r7
    9060:	0028      	movs	r0, r5
    9062:	4690      	mov	r8, r2
    9064:	9301      	str	r3, [sp, #4]
    9066:	f7fe fd9f 	bl	7ba8 <__udivsi3>
    906a:	0002      	movs	r2, r0
    906c:	9b01      	ldr	r3, [sp, #4]
    906e:	4683      	mov	fp, r0
    9070:	435a      	muls	r2, r3
    9072:	0028      	movs	r0, r5
    9074:	0039      	movs	r1, r7
    9076:	4691      	mov	r9, r2
    9078:	f7fe fe1c 	bl	7cb4 <__aeabi_uidivmod>
    907c:	0c35      	lsrs	r5, r6, #16
    907e:	0409      	lsls	r1, r1, #16
    9080:	430d      	orrs	r5, r1
    9082:	45a9      	cmp	r9, r5
    9084:	d90d      	bls.n	90a2 <__aeabi_ddiv+0x262>
    9086:	465b      	mov	r3, fp
    9088:	4445      	add	r5, r8
    908a:	3b01      	subs	r3, #1
    908c:	45a8      	cmp	r8, r5
    908e:	d900      	bls.n	9092 <__aeabi_ddiv+0x252>
    9090:	e13a      	b.n	9308 <__aeabi_ddiv+0x4c8>
    9092:	45a9      	cmp	r9, r5
    9094:	d800      	bhi.n	9098 <__aeabi_ddiv+0x258>
    9096:	e137      	b.n	9308 <__aeabi_ddiv+0x4c8>
    9098:	2302      	movs	r3, #2
    909a:	425b      	negs	r3, r3
    909c:	469c      	mov	ip, r3
    909e:	4445      	add	r5, r8
    90a0:	44e3      	add	fp, ip
    90a2:	464b      	mov	r3, r9
    90a4:	1aeb      	subs	r3, r5, r3
    90a6:	0039      	movs	r1, r7
    90a8:	0018      	movs	r0, r3
    90aa:	9304      	str	r3, [sp, #16]
    90ac:	f7fe fd7c 	bl	7ba8 <__udivsi3>
    90b0:	9b01      	ldr	r3, [sp, #4]
    90b2:	0005      	movs	r5, r0
    90b4:	4343      	muls	r3, r0
    90b6:	0039      	movs	r1, r7
    90b8:	9804      	ldr	r0, [sp, #16]
    90ba:	4699      	mov	r9, r3
    90bc:	f7fe fdfa 	bl	7cb4 <__aeabi_uidivmod>
    90c0:	0433      	lsls	r3, r6, #16
    90c2:	0409      	lsls	r1, r1, #16
    90c4:	0c1b      	lsrs	r3, r3, #16
    90c6:	430b      	orrs	r3, r1
    90c8:	4599      	cmp	r9, r3
    90ca:	d909      	bls.n	90e0 <__aeabi_ddiv+0x2a0>
    90cc:	4443      	add	r3, r8
    90ce:	1e6a      	subs	r2, r5, #1
    90d0:	4598      	cmp	r8, r3
    90d2:	d900      	bls.n	90d6 <__aeabi_ddiv+0x296>
    90d4:	e11a      	b.n	930c <__aeabi_ddiv+0x4cc>
    90d6:	4599      	cmp	r9, r3
    90d8:	d800      	bhi.n	90dc <__aeabi_ddiv+0x29c>
    90da:	e117      	b.n	930c <__aeabi_ddiv+0x4cc>
    90dc:	3d02      	subs	r5, #2
    90de:	4443      	add	r3, r8
    90e0:	464a      	mov	r2, r9
    90e2:	1a9b      	subs	r3, r3, r2
    90e4:	465a      	mov	r2, fp
    90e6:	0412      	lsls	r2, r2, #16
    90e8:	432a      	orrs	r2, r5
    90ea:	9903      	ldr	r1, [sp, #12]
    90ec:	4693      	mov	fp, r2
    90ee:	0c10      	lsrs	r0, r2, #16
    90f0:	0c0a      	lsrs	r2, r1, #16
    90f2:	4691      	mov	r9, r2
    90f4:	0409      	lsls	r1, r1, #16
    90f6:	465a      	mov	r2, fp
    90f8:	0c09      	lsrs	r1, r1, #16
    90fa:	464e      	mov	r6, r9
    90fc:	000d      	movs	r5, r1
    90fe:	0412      	lsls	r2, r2, #16
    9100:	0c12      	lsrs	r2, r2, #16
    9102:	4345      	muls	r5, r0
    9104:	9105      	str	r1, [sp, #20]
    9106:	4351      	muls	r1, r2
    9108:	4372      	muls	r2, r6
    910a:	4370      	muls	r0, r6
    910c:	1952      	adds	r2, r2, r5
    910e:	0c0e      	lsrs	r6, r1, #16
    9110:	18b2      	adds	r2, r6, r2
    9112:	4295      	cmp	r5, r2
    9114:	d903      	bls.n	911e <__aeabi_ddiv+0x2de>
    9116:	2580      	movs	r5, #128	; 0x80
    9118:	026d      	lsls	r5, r5, #9
    911a:	46ac      	mov	ip, r5
    911c:	4460      	add	r0, ip
    911e:	0c15      	lsrs	r5, r2, #16
    9120:	0409      	lsls	r1, r1, #16
    9122:	0412      	lsls	r2, r2, #16
    9124:	0c09      	lsrs	r1, r1, #16
    9126:	1828      	adds	r0, r5, r0
    9128:	1852      	adds	r2, r2, r1
    912a:	4283      	cmp	r3, r0
    912c:	d200      	bcs.n	9130 <__aeabi_ddiv+0x2f0>
    912e:	e0ce      	b.n	92ce <__aeabi_ddiv+0x48e>
    9130:	d100      	bne.n	9134 <__aeabi_ddiv+0x2f4>
    9132:	e0c8      	b.n	92c6 <__aeabi_ddiv+0x486>
    9134:	1a1d      	subs	r5, r3, r0
    9136:	4653      	mov	r3, sl
    9138:	1a9e      	subs	r6, r3, r2
    913a:	45b2      	cmp	sl, r6
    913c:	4192      	sbcs	r2, r2
    913e:	4252      	negs	r2, r2
    9140:	1aab      	subs	r3, r5, r2
    9142:	469a      	mov	sl, r3
    9144:	4598      	cmp	r8, r3
    9146:	d100      	bne.n	914a <__aeabi_ddiv+0x30a>
    9148:	e117      	b.n	937a <__aeabi_ddiv+0x53a>
    914a:	0039      	movs	r1, r7
    914c:	0018      	movs	r0, r3
    914e:	f7fe fd2b 	bl	7ba8 <__udivsi3>
    9152:	9b01      	ldr	r3, [sp, #4]
    9154:	0005      	movs	r5, r0
    9156:	4343      	muls	r3, r0
    9158:	0039      	movs	r1, r7
    915a:	4650      	mov	r0, sl
    915c:	9304      	str	r3, [sp, #16]
    915e:	f7fe fda9 	bl	7cb4 <__aeabi_uidivmod>
    9162:	9804      	ldr	r0, [sp, #16]
    9164:	040b      	lsls	r3, r1, #16
    9166:	0c31      	lsrs	r1, r6, #16
    9168:	4319      	orrs	r1, r3
    916a:	4288      	cmp	r0, r1
    916c:	d909      	bls.n	9182 <__aeabi_ddiv+0x342>
    916e:	4441      	add	r1, r8
    9170:	1e6b      	subs	r3, r5, #1
    9172:	4588      	cmp	r8, r1
    9174:	d900      	bls.n	9178 <__aeabi_ddiv+0x338>
    9176:	e107      	b.n	9388 <__aeabi_ddiv+0x548>
    9178:	4288      	cmp	r0, r1
    917a:	d800      	bhi.n	917e <__aeabi_ddiv+0x33e>
    917c:	e104      	b.n	9388 <__aeabi_ddiv+0x548>
    917e:	3d02      	subs	r5, #2
    9180:	4441      	add	r1, r8
    9182:	9b04      	ldr	r3, [sp, #16]
    9184:	1acb      	subs	r3, r1, r3
    9186:	0018      	movs	r0, r3
    9188:	0039      	movs	r1, r7
    918a:	9304      	str	r3, [sp, #16]
    918c:	f7fe fd0c 	bl	7ba8 <__udivsi3>
    9190:	9b01      	ldr	r3, [sp, #4]
    9192:	4682      	mov	sl, r0
    9194:	4343      	muls	r3, r0
    9196:	0039      	movs	r1, r7
    9198:	9804      	ldr	r0, [sp, #16]
    919a:	9301      	str	r3, [sp, #4]
    919c:	f7fe fd8a 	bl	7cb4 <__aeabi_uidivmod>
    91a0:	9801      	ldr	r0, [sp, #4]
    91a2:	040b      	lsls	r3, r1, #16
    91a4:	0431      	lsls	r1, r6, #16
    91a6:	0c09      	lsrs	r1, r1, #16
    91a8:	4319      	orrs	r1, r3
    91aa:	4288      	cmp	r0, r1
    91ac:	d90d      	bls.n	91ca <__aeabi_ddiv+0x38a>
    91ae:	4653      	mov	r3, sl
    91b0:	4441      	add	r1, r8
    91b2:	3b01      	subs	r3, #1
    91b4:	4588      	cmp	r8, r1
    91b6:	d900      	bls.n	91ba <__aeabi_ddiv+0x37a>
    91b8:	e0e8      	b.n	938c <__aeabi_ddiv+0x54c>
    91ba:	4288      	cmp	r0, r1
    91bc:	d800      	bhi.n	91c0 <__aeabi_ddiv+0x380>
    91be:	e0e5      	b.n	938c <__aeabi_ddiv+0x54c>
    91c0:	2302      	movs	r3, #2
    91c2:	425b      	negs	r3, r3
    91c4:	469c      	mov	ip, r3
    91c6:	4441      	add	r1, r8
    91c8:	44e2      	add	sl, ip
    91ca:	9b01      	ldr	r3, [sp, #4]
    91cc:	042d      	lsls	r5, r5, #16
    91ce:	1ace      	subs	r6, r1, r3
    91d0:	4651      	mov	r1, sl
    91d2:	4329      	orrs	r1, r5
    91d4:	9d05      	ldr	r5, [sp, #20]
    91d6:	464f      	mov	r7, r9
    91d8:	002a      	movs	r2, r5
    91da:	040b      	lsls	r3, r1, #16
    91dc:	0c08      	lsrs	r0, r1, #16
    91de:	0c1b      	lsrs	r3, r3, #16
    91e0:	435a      	muls	r2, r3
    91e2:	4345      	muls	r5, r0
    91e4:	437b      	muls	r3, r7
    91e6:	4378      	muls	r0, r7
    91e8:	195b      	adds	r3, r3, r5
    91ea:	0c17      	lsrs	r7, r2, #16
    91ec:	18fb      	adds	r3, r7, r3
    91ee:	429d      	cmp	r5, r3
    91f0:	d903      	bls.n	91fa <__aeabi_ddiv+0x3ba>
    91f2:	2580      	movs	r5, #128	; 0x80
    91f4:	026d      	lsls	r5, r5, #9
    91f6:	46ac      	mov	ip, r5
    91f8:	4460      	add	r0, ip
    91fa:	0c1d      	lsrs	r5, r3, #16
    91fc:	0412      	lsls	r2, r2, #16
    91fe:	041b      	lsls	r3, r3, #16
    9200:	0c12      	lsrs	r2, r2, #16
    9202:	1828      	adds	r0, r5, r0
    9204:	189b      	adds	r3, r3, r2
    9206:	4286      	cmp	r6, r0
    9208:	d200      	bcs.n	920c <__aeabi_ddiv+0x3cc>
    920a:	e093      	b.n	9334 <__aeabi_ddiv+0x4f4>
    920c:	d100      	bne.n	9210 <__aeabi_ddiv+0x3d0>
    920e:	e08e      	b.n	932e <__aeabi_ddiv+0x4ee>
    9210:	2301      	movs	r3, #1
    9212:	4319      	orrs	r1, r3
    9214:	4ba0      	ldr	r3, [pc, #640]	; (9498 <__aeabi_ddiv+0x658>)
    9216:	18e3      	adds	r3, r4, r3
    9218:	2b00      	cmp	r3, #0
    921a:	dc00      	bgt.n	921e <__aeabi_ddiv+0x3de>
    921c:	e099      	b.n	9352 <__aeabi_ddiv+0x512>
    921e:	074a      	lsls	r2, r1, #29
    9220:	d000      	beq.n	9224 <__aeabi_ddiv+0x3e4>
    9222:	e09e      	b.n	9362 <__aeabi_ddiv+0x522>
    9224:	465a      	mov	r2, fp
    9226:	01d2      	lsls	r2, r2, #7
    9228:	d506      	bpl.n	9238 <__aeabi_ddiv+0x3f8>
    922a:	465a      	mov	r2, fp
    922c:	4b9b      	ldr	r3, [pc, #620]	; (949c <__aeabi_ddiv+0x65c>)
    922e:	401a      	ands	r2, r3
    9230:	2380      	movs	r3, #128	; 0x80
    9232:	4693      	mov	fp, r2
    9234:	00db      	lsls	r3, r3, #3
    9236:	18e3      	adds	r3, r4, r3
    9238:	4a99      	ldr	r2, [pc, #612]	; (94a0 <__aeabi_ddiv+0x660>)
    923a:	4293      	cmp	r3, r2
    923c:	dd68      	ble.n	9310 <__aeabi_ddiv+0x4d0>
    923e:	2301      	movs	r3, #1
    9240:	9a02      	ldr	r2, [sp, #8]
    9242:	4c98      	ldr	r4, [pc, #608]	; (94a4 <__aeabi_ddiv+0x664>)
    9244:	401a      	ands	r2, r3
    9246:	2300      	movs	r3, #0
    9248:	4694      	mov	ip, r2
    924a:	4698      	mov	r8, r3
    924c:	2200      	movs	r2, #0
    924e:	e6c5      	b.n	8fdc <__aeabi_ddiv+0x19c>
    9250:	2280      	movs	r2, #128	; 0x80
    9252:	464b      	mov	r3, r9
    9254:	0312      	lsls	r2, r2, #12
    9256:	4213      	tst	r3, r2
    9258:	d00a      	beq.n	9270 <__aeabi_ddiv+0x430>
    925a:	465b      	mov	r3, fp
    925c:	4213      	tst	r3, r2
    925e:	d106      	bne.n	926e <__aeabi_ddiv+0x42e>
    9260:	431a      	orrs	r2, r3
    9262:	0312      	lsls	r2, r2, #12
    9264:	0b12      	lsrs	r2, r2, #12
    9266:	46ac      	mov	ip, r5
    9268:	4688      	mov	r8, r1
    926a:	4c8e      	ldr	r4, [pc, #568]	; (94a4 <__aeabi_ddiv+0x664>)
    926c:	e6b6      	b.n	8fdc <__aeabi_ddiv+0x19c>
    926e:	464b      	mov	r3, r9
    9270:	431a      	orrs	r2, r3
    9272:	0312      	lsls	r2, r2, #12
    9274:	0b12      	lsrs	r2, r2, #12
    9276:	46bc      	mov	ip, r7
    9278:	4c8a      	ldr	r4, [pc, #552]	; (94a4 <__aeabi_ddiv+0x664>)
    927a:	e6af      	b.n	8fdc <__aeabi_ddiv+0x19c>
    927c:	0003      	movs	r3, r0
    927e:	465a      	mov	r2, fp
    9280:	3b28      	subs	r3, #40	; 0x28
    9282:	409a      	lsls	r2, r3
    9284:	2300      	movs	r3, #0
    9286:	4691      	mov	r9, r2
    9288:	4698      	mov	r8, r3
    928a:	e657      	b.n	8f3c <__aeabi_ddiv+0xfc>
    928c:	4658      	mov	r0, fp
    928e:	f7fe fe3f 	bl	7f10 <__clzsi2>
    9292:	3020      	adds	r0, #32
    9294:	e640      	b.n	8f18 <__aeabi_ddiv+0xd8>
    9296:	0003      	movs	r3, r0
    9298:	4652      	mov	r2, sl
    929a:	3b28      	subs	r3, #40	; 0x28
    929c:	409a      	lsls	r2, r3
    929e:	2100      	movs	r1, #0
    92a0:	4693      	mov	fp, r2
    92a2:	e677      	b.n	8f94 <__aeabi_ddiv+0x154>
    92a4:	f7fe fe34 	bl	7f10 <__clzsi2>
    92a8:	3020      	adds	r0, #32
    92aa:	e65f      	b.n	8f6c <__aeabi_ddiv+0x12c>
    92ac:	4588      	cmp	r8, r1
    92ae:	d200      	bcs.n	92b2 <__aeabi_ddiv+0x472>
    92b0:	e6c7      	b.n	9042 <__aeabi_ddiv+0x202>
    92b2:	464b      	mov	r3, r9
    92b4:	07de      	lsls	r6, r3, #31
    92b6:	085d      	lsrs	r5, r3, #1
    92b8:	4643      	mov	r3, r8
    92ba:	085b      	lsrs	r3, r3, #1
    92bc:	431e      	orrs	r6, r3
    92be:	4643      	mov	r3, r8
    92c0:	07db      	lsls	r3, r3, #31
    92c2:	469a      	mov	sl, r3
    92c4:	e6c2      	b.n	904c <__aeabi_ddiv+0x20c>
    92c6:	2500      	movs	r5, #0
    92c8:	4592      	cmp	sl, r2
    92ca:	d300      	bcc.n	92ce <__aeabi_ddiv+0x48e>
    92cc:	e733      	b.n	9136 <__aeabi_ddiv+0x2f6>
    92ce:	9e03      	ldr	r6, [sp, #12]
    92d0:	4659      	mov	r1, fp
    92d2:	46b4      	mov	ip, r6
    92d4:	44e2      	add	sl, ip
    92d6:	45b2      	cmp	sl, r6
    92d8:	41ad      	sbcs	r5, r5
    92da:	426d      	negs	r5, r5
    92dc:	4445      	add	r5, r8
    92de:	18eb      	adds	r3, r5, r3
    92e0:	3901      	subs	r1, #1
    92e2:	4598      	cmp	r8, r3
    92e4:	d207      	bcs.n	92f6 <__aeabi_ddiv+0x4b6>
    92e6:	4298      	cmp	r0, r3
    92e8:	d900      	bls.n	92ec <__aeabi_ddiv+0x4ac>
    92ea:	e07f      	b.n	93ec <__aeabi_ddiv+0x5ac>
    92ec:	d100      	bne.n	92f0 <__aeabi_ddiv+0x4b0>
    92ee:	e0bc      	b.n	946a <__aeabi_ddiv+0x62a>
    92f0:	1a1d      	subs	r5, r3, r0
    92f2:	468b      	mov	fp, r1
    92f4:	e71f      	b.n	9136 <__aeabi_ddiv+0x2f6>
    92f6:	4598      	cmp	r8, r3
    92f8:	d1fa      	bne.n	92f0 <__aeabi_ddiv+0x4b0>
    92fa:	9d03      	ldr	r5, [sp, #12]
    92fc:	4555      	cmp	r5, sl
    92fe:	d9f2      	bls.n	92e6 <__aeabi_ddiv+0x4a6>
    9300:	4643      	mov	r3, r8
    9302:	468b      	mov	fp, r1
    9304:	1a1d      	subs	r5, r3, r0
    9306:	e716      	b.n	9136 <__aeabi_ddiv+0x2f6>
    9308:	469b      	mov	fp, r3
    930a:	e6ca      	b.n	90a2 <__aeabi_ddiv+0x262>
    930c:	0015      	movs	r5, r2
    930e:	e6e7      	b.n	90e0 <__aeabi_ddiv+0x2a0>
    9310:	465a      	mov	r2, fp
    9312:	08c9      	lsrs	r1, r1, #3
    9314:	0752      	lsls	r2, r2, #29
    9316:	430a      	orrs	r2, r1
    9318:	055b      	lsls	r3, r3, #21
    931a:	4690      	mov	r8, r2
    931c:	0d5c      	lsrs	r4, r3, #21
    931e:	465a      	mov	r2, fp
    9320:	2301      	movs	r3, #1
    9322:	9902      	ldr	r1, [sp, #8]
    9324:	0252      	lsls	r2, r2, #9
    9326:	4019      	ands	r1, r3
    9328:	0b12      	lsrs	r2, r2, #12
    932a:	468c      	mov	ip, r1
    932c:	e656      	b.n	8fdc <__aeabi_ddiv+0x19c>
    932e:	2b00      	cmp	r3, #0
    9330:	d100      	bne.n	9334 <__aeabi_ddiv+0x4f4>
    9332:	e76f      	b.n	9214 <__aeabi_ddiv+0x3d4>
    9334:	4446      	add	r6, r8
    9336:	1e4a      	subs	r2, r1, #1
    9338:	45b0      	cmp	r8, r6
    933a:	d929      	bls.n	9390 <__aeabi_ddiv+0x550>
    933c:	0011      	movs	r1, r2
    933e:	4286      	cmp	r6, r0
    9340:	d000      	beq.n	9344 <__aeabi_ddiv+0x504>
    9342:	e765      	b.n	9210 <__aeabi_ddiv+0x3d0>
    9344:	9a03      	ldr	r2, [sp, #12]
    9346:	4293      	cmp	r3, r2
    9348:	d000      	beq.n	934c <__aeabi_ddiv+0x50c>
    934a:	e761      	b.n	9210 <__aeabi_ddiv+0x3d0>
    934c:	e762      	b.n	9214 <__aeabi_ddiv+0x3d4>
    934e:	2101      	movs	r1, #1
    9350:	4249      	negs	r1, r1
    9352:	2001      	movs	r0, #1
    9354:	1ac2      	subs	r2, r0, r3
    9356:	2a38      	cmp	r2, #56	; 0x38
    9358:	dd21      	ble.n	939e <__aeabi_ddiv+0x55e>
    935a:	9b02      	ldr	r3, [sp, #8]
    935c:	4003      	ands	r3, r0
    935e:	469c      	mov	ip, r3
    9360:	e638      	b.n	8fd4 <__aeabi_ddiv+0x194>
    9362:	220f      	movs	r2, #15
    9364:	400a      	ands	r2, r1
    9366:	2a04      	cmp	r2, #4
    9368:	d100      	bne.n	936c <__aeabi_ddiv+0x52c>
    936a:	e75b      	b.n	9224 <__aeabi_ddiv+0x3e4>
    936c:	000a      	movs	r2, r1
    936e:	1d11      	adds	r1, r2, #4
    9370:	4291      	cmp	r1, r2
    9372:	4192      	sbcs	r2, r2
    9374:	4252      	negs	r2, r2
    9376:	4493      	add	fp, r2
    9378:	e754      	b.n	9224 <__aeabi_ddiv+0x3e4>
    937a:	4b47      	ldr	r3, [pc, #284]	; (9498 <__aeabi_ddiv+0x658>)
    937c:	18e3      	adds	r3, r4, r3
    937e:	2b00      	cmp	r3, #0
    9380:	dde5      	ble.n	934e <__aeabi_ddiv+0x50e>
    9382:	2201      	movs	r2, #1
    9384:	4252      	negs	r2, r2
    9386:	e7f2      	b.n	936e <__aeabi_ddiv+0x52e>
    9388:	001d      	movs	r5, r3
    938a:	e6fa      	b.n	9182 <__aeabi_ddiv+0x342>
    938c:	469a      	mov	sl, r3
    938e:	e71c      	b.n	91ca <__aeabi_ddiv+0x38a>
    9390:	42b0      	cmp	r0, r6
    9392:	d839      	bhi.n	9408 <__aeabi_ddiv+0x5c8>
    9394:	d06e      	beq.n	9474 <__aeabi_ddiv+0x634>
    9396:	0011      	movs	r1, r2
    9398:	e73a      	b.n	9210 <__aeabi_ddiv+0x3d0>
    939a:	9302      	str	r3, [sp, #8]
    939c:	e73a      	b.n	9214 <__aeabi_ddiv+0x3d4>
    939e:	2a1f      	cmp	r2, #31
    93a0:	dc3c      	bgt.n	941c <__aeabi_ddiv+0x5dc>
    93a2:	2320      	movs	r3, #32
    93a4:	1a9b      	subs	r3, r3, r2
    93a6:	000c      	movs	r4, r1
    93a8:	4658      	mov	r0, fp
    93aa:	4099      	lsls	r1, r3
    93ac:	4098      	lsls	r0, r3
    93ae:	1e4b      	subs	r3, r1, #1
    93b0:	4199      	sbcs	r1, r3
    93b2:	465b      	mov	r3, fp
    93b4:	40d4      	lsrs	r4, r2
    93b6:	40d3      	lsrs	r3, r2
    93b8:	4320      	orrs	r0, r4
    93ba:	4308      	orrs	r0, r1
    93bc:	001a      	movs	r2, r3
    93be:	0743      	lsls	r3, r0, #29
    93c0:	d009      	beq.n	93d6 <__aeabi_ddiv+0x596>
    93c2:	230f      	movs	r3, #15
    93c4:	4003      	ands	r3, r0
    93c6:	2b04      	cmp	r3, #4
    93c8:	d005      	beq.n	93d6 <__aeabi_ddiv+0x596>
    93ca:	0001      	movs	r1, r0
    93cc:	1d08      	adds	r0, r1, #4
    93ce:	4288      	cmp	r0, r1
    93d0:	419b      	sbcs	r3, r3
    93d2:	425b      	negs	r3, r3
    93d4:	18d2      	adds	r2, r2, r3
    93d6:	0213      	lsls	r3, r2, #8
    93d8:	d53a      	bpl.n	9450 <__aeabi_ddiv+0x610>
    93da:	2301      	movs	r3, #1
    93dc:	9a02      	ldr	r2, [sp, #8]
    93de:	2401      	movs	r4, #1
    93e0:	401a      	ands	r2, r3
    93e2:	2300      	movs	r3, #0
    93e4:	4694      	mov	ip, r2
    93e6:	4698      	mov	r8, r3
    93e8:	2200      	movs	r2, #0
    93ea:	e5f7      	b.n	8fdc <__aeabi_ddiv+0x19c>
    93ec:	2102      	movs	r1, #2
    93ee:	4249      	negs	r1, r1
    93f0:	468c      	mov	ip, r1
    93f2:	9d03      	ldr	r5, [sp, #12]
    93f4:	44e3      	add	fp, ip
    93f6:	46ac      	mov	ip, r5
    93f8:	44e2      	add	sl, ip
    93fa:	45aa      	cmp	sl, r5
    93fc:	41ad      	sbcs	r5, r5
    93fe:	426d      	negs	r5, r5
    9400:	4445      	add	r5, r8
    9402:	18ed      	adds	r5, r5, r3
    9404:	1a2d      	subs	r5, r5, r0
    9406:	e696      	b.n	9136 <__aeabi_ddiv+0x2f6>
    9408:	1e8a      	subs	r2, r1, #2
    940a:	9903      	ldr	r1, [sp, #12]
    940c:	004d      	lsls	r5, r1, #1
    940e:	428d      	cmp	r5, r1
    9410:	4189      	sbcs	r1, r1
    9412:	4249      	negs	r1, r1
    9414:	4441      	add	r1, r8
    9416:	1876      	adds	r6, r6, r1
    9418:	9503      	str	r5, [sp, #12]
    941a:	e78f      	b.n	933c <__aeabi_ddiv+0x4fc>
    941c:	201f      	movs	r0, #31
    941e:	4240      	negs	r0, r0
    9420:	1ac3      	subs	r3, r0, r3
    9422:	4658      	mov	r0, fp
    9424:	40d8      	lsrs	r0, r3
    9426:	0003      	movs	r3, r0
    9428:	2a20      	cmp	r2, #32
    942a:	d028      	beq.n	947e <__aeabi_ddiv+0x63e>
    942c:	2040      	movs	r0, #64	; 0x40
    942e:	465d      	mov	r5, fp
    9430:	1a82      	subs	r2, r0, r2
    9432:	4095      	lsls	r5, r2
    9434:	4329      	orrs	r1, r5
    9436:	1e4a      	subs	r2, r1, #1
    9438:	4191      	sbcs	r1, r2
    943a:	4319      	orrs	r1, r3
    943c:	2307      	movs	r3, #7
    943e:	2200      	movs	r2, #0
    9440:	400b      	ands	r3, r1
    9442:	d009      	beq.n	9458 <__aeabi_ddiv+0x618>
    9444:	230f      	movs	r3, #15
    9446:	2200      	movs	r2, #0
    9448:	400b      	ands	r3, r1
    944a:	0008      	movs	r0, r1
    944c:	2b04      	cmp	r3, #4
    944e:	d1bd      	bne.n	93cc <__aeabi_ddiv+0x58c>
    9450:	0001      	movs	r1, r0
    9452:	0753      	lsls	r3, r2, #29
    9454:	0252      	lsls	r2, r2, #9
    9456:	0b12      	lsrs	r2, r2, #12
    9458:	08c9      	lsrs	r1, r1, #3
    945a:	4319      	orrs	r1, r3
    945c:	2301      	movs	r3, #1
    945e:	4688      	mov	r8, r1
    9460:	9902      	ldr	r1, [sp, #8]
    9462:	2400      	movs	r4, #0
    9464:	4019      	ands	r1, r3
    9466:	468c      	mov	ip, r1
    9468:	e5b8      	b.n	8fdc <__aeabi_ddiv+0x19c>
    946a:	4552      	cmp	r2, sl
    946c:	d8be      	bhi.n	93ec <__aeabi_ddiv+0x5ac>
    946e:	468b      	mov	fp, r1
    9470:	2500      	movs	r5, #0
    9472:	e660      	b.n	9136 <__aeabi_ddiv+0x2f6>
    9474:	9d03      	ldr	r5, [sp, #12]
    9476:	429d      	cmp	r5, r3
    9478:	d3c6      	bcc.n	9408 <__aeabi_ddiv+0x5c8>
    947a:	0011      	movs	r1, r2
    947c:	e762      	b.n	9344 <__aeabi_ddiv+0x504>
    947e:	2500      	movs	r5, #0
    9480:	e7d8      	b.n	9434 <__aeabi_ddiv+0x5f4>
    9482:	2280      	movs	r2, #128	; 0x80
    9484:	465b      	mov	r3, fp
    9486:	0312      	lsls	r2, r2, #12
    9488:	431a      	orrs	r2, r3
    948a:	9b01      	ldr	r3, [sp, #4]
    948c:	0312      	lsls	r2, r2, #12
    948e:	0b12      	lsrs	r2, r2, #12
    9490:	469c      	mov	ip, r3
    9492:	4688      	mov	r8, r1
    9494:	4c03      	ldr	r4, [pc, #12]	; (94a4 <__aeabi_ddiv+0x664>)
    9496:	e5a1      	b.n	8fdc <__aeabi_ddiv+0x19c>
    9498:	000003ff 	.word	0x000003ff
    949c:	feffffff 	.word	0xfeffffff
    94a0:	000007fe 	.word	0x000007fe
    94a4:	000007ff 	.word	0x000007ff

000094a8 <__eqdf2>:
    94a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94aa:	464f      	mov	r7, r9
    94ac:	4646      	mov	r6, r8
    94ae:	46d6      	mov	lr, sl
    94b0:	005c      	lsls	r4, r3, #1
    94b2:	b5c0      	push	{r6, r7, lr}
    94b4:	031f      	lsls	r7, r3, #12
    94b6:	0fdb      	lsrs	r3, r3, #31
    94b8:	469a      	mov	sl, r3
    94ba:	4b17      	ldr	r3, [pc, #92]	; (9518 <__eqdf2+0x70>)
    94bc:	030e      	lsls	r6, r1, #12
    94be:	004d      	lsls	r5, r1, #1
    94c0:	4684      	mov	ip, r0
    94c2:	4680      	mov	r8, r0
    94c4:	0b36      	lsrs	r6, r6, #12
    94c6:	0d6d      	lsrs	r5, r5, #21
    94c8:	0fc9      	lsrs	r1, r1, #31
    94ca:	4691      	mov	r9, r2
    94cc:	0b3f      	lsrs	r7, r7, #12
    94ce:	0d64      	lsrs	r4, r4, #21
    94d0:	2001      	movs	r0, #1
    94d2:	429d      	cmp	r5, r3
    94d4:	d008      	beq.n	94e8 <__eqdf2+0x40>
    94d6:	429c      	cmp	r4, r3
    94d8:	d001      	beq.n	94de <__eqdf2+0x36>
    94da:	42a5      	cmp	r5, r4
    94dc:	d00b      	beq.n	94f6 <__eqdf2+0x4e>
    94de:	bc1c      	pop	{r2, r3, r4}
    94e0:	4690      	mov	r8, r2
    94e2:	4699      	mov	r9, r3
    94e4:	46a2      	mov	sl, r4
    94e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94e8:	4663      	mov	r3, ip
    94ea:	4333      	orrs	r3, r6
    94ec:	d1f7      	bne.n	94de <__eqdf2+0x36>
    94ee:	42ac      	cmp	r4, r5
    94f0:	d1f5      	bne.n	94de <__eqdf2+0x36>
    94f2:	433a      	orrs	r2, r7
    94f4:	d1f3      	bne.n	94de <__eqdf2+0x36>
    94f6:	2001      	movs	r0, #1
    94f8:	42be      	cmp	r6, r7
    94fa:	d1f0      	bne.n	94de <__eqdf2+0x36>
    94fc:	45c8      	cmp	r8, r9
    94fe:	d1ee      	bne.n	94de <__eqdf2+0x36>
    9500:	4551      	cmp	r1, sl
    9502:	d007      	beq.n	9514 <__eqdf2+0x6c>
    9504:	2d00      	cmp	r5, #0
    9506:	d1ea      	bne.n	94de <__eqdf2+0x36>
    9508:	4663      	mov	r3, ip
    950a:	431e      	orrs	r6, r3
    950c:	0030      	movs	r0, r6
    950e:	1e46      	subs	r6, r0, #1
    9510:	41b0      	sbcs	r0, r6
    9512:	e7e4      	b.n	94de <__eqdf2+0x36>
    9514:	2000      	movs	r0, #0
    9516:	e7e2      	b.n	94de <__eqdf2+0x36>
    9518:	000007ff 	.word	0x000007ff

0000951c <__gedf2>:
    951c:	b5f0      	push	{r4, r5, r6, r7, lr}
    951e:	4645      	mov	r5, r8
    9520:	46de      	mov	lr, fp
    9522:	4657      	mov	r7, sl
    9524:	464e      	mov	r6, r9
    9526:	b5e0      	push	{r5, r6, r7, lr}
    9528:	031f      	lsls	r7, r3, #12
    952a:	0b3d      	lsrs	r5, r7, #12
    952c:	4f2c      	ldr	r7, [pc, #176]	; (95e0 <__gedf2+0xc4>)
    952e:	030e      	lsls	r6, r1, #12
    9530:	004c      	lsls	r4, r1, #1
    9532:	46ab      	mov	fp, r5
    9534:	005d      	lsls	r5, r3, #1
    9536:	4684      	mov	ip, r0
    9538:	0b36      	lsrs	r6, r6, #12
    953a:	0d64      	lsrs	r4, r4, #21
    953c:	0fc9      	lsrs	r1, r1, #31
    953e:	4690      	mov	r8, r2
    9540:	0d6d      	lsrs	r5, r5, #21
    9542:	0fdb      	lsrs	r3, r3, #31
    9544:	42bc      	cmp	r4, r7
    9546:	d02a      	beq.n	959e <__gedf2+0x82>
    9548:	4f25      	ldr	r7, [pc, #148]	; (95e0 <__gedf2+0xc4>)
    954a:	42bd      	cmp	r5, r7
    954c:	d02d      	beq.n	95aa <__gedf2+0x8e>
    954e:	2c00      	cmp	r4, #0
    9550:	d10f      	bne.n	9572 <__gedf2+0x56>
    9552:	4330      	orrs	r0, r6
    9554:	0007      	movs	r7, r0
    9556:	4681      	mov	r9, r0
    9558:	4278      	negs	r0, r7
    955a:	4178      	adcs	r0, r7
    955c:	b2c0      	uxtb	r0, r0
    955e:	2d00      	cmp	r5, #0
    9560:	d117      	bne.n	9592 <__gedf2+0x76>
    9562:	465f      	mov	r7, fp
    9564:	433a      	orrs	r2, r7
    9566:	d114      	bne.n	9592 <__gedf2+0x76>
    9568:	464b      	mov	r3, r9
    956a:	2000      	movs	r0, #0
    956c:	2b00      	cmp	r3, #0
    956e:	d00a      	beq.n	9586 <__gedf2+0x6a>
    9570:	e006      	b.n	9580 <__gedf2+0x64>
    9572:	2d00      	cmp	r5, #0
    9574:	d102      	bne.n	957c <__gedf2+0x60>
    9576:	4658      	mov	r0, fp
    9578:	4302      	orrs	r2, r0
    957a:	d001      	beq.n	9580 <__gedf2+0x64>
    957c:	4299      	cmp	r1, r3
    957e:	d018      	beq.n	95b2 <__gedf2+0x96>
    9580:	4248      	negs	r0, r1
    9582:	2101      	movs	r1, #1
    9584:	4308      	orrs	r0, r1
    9586:	bc3c      	pop	{r2, r3, r4, r5}
    9588:	4690      	mov	r8, r2
    958a:	4699      	mov	r9, r3
    958c:	46a2      	mov	sl, r4
    958e:	46ab      	mov	fp, r5
    9590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9592:	2800      	cmp	r0, #0
    9594:	d0f2      	beq.n	957c <__gedf2+0x60>
    9596:	2001      	movs	r0, #1
    9598:	3b01      	subs	r3, #1
    959a:	4318      	orrs	r0, r3
    959c:	e7f3      	b.n	9586 <__gedf2+0x6a>
    959e:	0037      	movs	r7, r6
    95a0:	4307      	orrs	r7, r0
    95a2:	d0d1      	beq.n	9548 <__gedf2+0x2c>
    95a4:	2002      	movs	r0, #2
    95a6:	4240      	negs	r0, r0
    95a8:	e7ed      	b.n	9586 <__gedf2+0x6a>
    95aa:	465f      	mov	r7, fp
    95ac:	4317      	orrs	r7, r2
    95ae:	d0ce      	beq.n	954e <__gedf2+0x32>
    95b0:	e7f8      	b.n	95a4 <__gedf2+0x88>
    95b2:	42ac      	cmp	r4, r5
    95b4:	dce4      	bgt.n	9580 <__gedf2+0x64>
    95b6:	da03      	bge.n	95c0 <__gedf2+0xa4>
    95b8:	1e48      	subs	r0, r1, #1
    95ba:	2101      	movs	r1, #1
    95bc:	4308      	orrs	r0, r1
    95be:	e7e2      	b.n	9586 <__gedf2+0x6a>
    95c0:	455e      	cmp	r6, fp
    95c2:	d8dd      	bhi.n	9580 <__gedf2+0x64>
    95c4:	d006      	beq.n	95d4 <__gedf2+0xb8>
    95c6:	2000      	movs	r0, #0
    95c8:	455e      	cmp	r6, fp
    95ca:	d2dc      	bcs.n	9586 <__gedf2+0x6a>
    95cc:	2301      	movs	r3, #1
    95ce:	1e48      	subs	r0, r1, #1
    95d0:	4318      	orrs	r0, r3
    95d2:	e7d8      	b.n	9586 <__gedf2+0x6a>
    95d4:	45c4      	cmp	ip, r8
    95d6:	d8d3      	bhi.n	9580 <__gedf2+0x64>
    95d8:	2000      	movs	r0, #0
    95da:	45c4      	cmp	ip, r8
    95dc:	d3f6      	bcc.n	95cc <__gedf2+0xb0>
    95de:	e7d2      	b.n	9586 <__gedf2+0x6a>
    95e0:	000007ff 	.word	0x000007ff

000095e4 <__ledf2>:
    95e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    95e6:	464e      	mov	r6, r9
    95e8:	4645      	mov	r5, r8
    95ea:	46de      	mov	lr, fp
    95ec:	4657      	mov	r7, sl
    95ee:	005c      	lsls	r4, r3, #1
    95f0:	b5e0      	push	{r5, r6, r7, lr}
    95f2:	031f      	lsls	r7, r3, #12
    95f4:	0fdb      	lsrs	r3, r3, #31
    95f6:	4699      	mov	r9, r3
    95f8:	4b2a      	ldr	r3, [pc, #168]	; (96a4 <__ledf2+0xc0>)
    95fa:	030e      	lsls	r6, r1, #12
    95fc:	004d      	lsls	r5, r1, #1
    95fe:	0fc9      	lsrs	r1, r1, #31
    9600:	4684      	mov	ip, r0
    9602:	0b36      	lsrs	r6, r6, #12
    9604:	0d6d      	lsrs	r5, r5, #21
    9606:	468b      	mov	fp, r1
    9608:	4690      	mov	r8, r2
    960a:	0b3f      	lsrs	r7, r7, #12
    960c:	0d64      	lsrs	r4, r4, #21
    960e:	429d      	cmp	r5, r3
    9610:	d020      	beq.n	9654 <__ledf2+0x70>
    9612:	4b24      	ldr	r3, [pc, #144]	; (96a4 <__ledf2+0xc0>)
    9614:	429c      	cmp	r4, r3
    9616:	d022      	beq.n	965e <__ledf2+0x7a>
    9618:	2d00      	cmp	r5, #0
    961a:	d112      	bne.n	9642 <__ledf2+0x5e>
    961c:	4330      	orrs	r0, r6
    961e:	4243      	negs	r3, r0
    9620:	4143      	adcs	r3, r0
    9622:	b2db      	uxtb	r3, r3
    9624:	2c00      	cmp	r4, #0
    9626:	d01f      	beq.n	9668 <__ledf2+0x84>
    9628:	2b00      	cmp	r3, #0
    962a:	d00c      	beq.n	9646 <__ledf2+0x62>
    962c:	464b      	mov	r3, r9
    962e:	2001      	movs	r0, #1
    9630:	3b01      	subs	r3, #1
    9632:	4303      	orrs	r3, r0
    9634:	0018      	movs	r0, r3
    9636:	bc3c      	pop	{r2, r3, r4, r5}
    9638:	4690      	mov	r8, r2
    963a:	4699      	mov	r9, r3
    963c:	46a2      	mov	sl, r4
    963e:	46ab      	mov	fp, r5
    9640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9642:	2c00      	cmp	r4, #0
    9644:	d016      	beq.n	9674 <__ledf2+0x90>
    9646:	45cb      	cmp	fp, r9
    9648:	d017      	beq.n	967a <__ledf2+0x96>
    964a:	465b      	mov	r3, fp
    964c:	4259      	negs	r1, r3
    964e:	2301      	movs	r3, #1
    9650:	430b      	orrs	r3, r1
    9652:	e7ef      	b.n	9634 <__ledf2+0x50>
    9654:	0031      	movs	r1, r6
    9656:	2302      	movs	r3, #2
    9658:	4301      	orrs	r1, r0
    965a:	d1eb      	bne.n	9634 <__ledf2+0x50>
    965c:	e7d9      	b.n	9612 <__ledf2+0x2e>
    965e:	0039      	movs	r1, r7
    9660:	2302      	movs	r3, #2
    9662:	4311      	orrs	r1, r2
    9664:	d1e6      	bne.n	9634 <__ledf2+0x50>
    9666:	e7d7      	b.n	9618 <__ledf2+0x34>
    9668:	433a      	orrs	r2, r7
    966a:	d1dd      	bne.n	9628 <__ledf2+0x44>
    966c:	2300      	movs	r3, #0
    966e:	2800      	cmp	r0, #0
    9670:	d0e0      	beq.n	9634 <__ledf2+0x50>
    9672:	e7ea      	b.n	964a <__ledf2+0x66>
    9674:	433a      	orrs	r2, r7
    9676:	d1e6      	bne.n	9646 <__ledf2+0x62>
    9678:	e7e7      	b.n	964a <__ledf2+0x66>
    967a:	42a5      	cmp	r5, r4
    967c:	dce5      	bgt.n	964a <__ledf2+0x66>
    967e:	db05      	blt.n	968c <__ledf2+0xa8>
    9680:	42be      	cmp	r6, r7
    9682:	d8e2      	bhi.n	964a <__ledf2+0x66>
    9684:	d007      	beq.n	9696 <__ledf2+0xb2>
    9686:	2300      	movs	r3, #0
    9688:	42be      	cmp	r6, r7
    968a:	d2d3      	bcs.n	9634 <__ledf2+0x50>
    968c:	4659      	mov	r1, fp
    968e:	2301      	movs	r3, #1
    9690:	3901      	subs	r1, #1
    9692:	430b      	orrs	r3, r1
    9694:	e7ce      	b.n	9634 <__ledf2+0x50>
    9696:	45c4      	cmp	ip, r8
    9698:	d8d7      	bhi.n	964a <__ledf2+0x66>
    969a:	2300      	movs	r3, #0
    969c:	45c4      	cmp	ip, r8
    969e:	d3f5      	bcc.n	968c <__ledf2+0xa8>
    96a0:	e7c8      	b.n	9634 <__ledf2+0x50>
    96a2:	46c0      	nop			; (mov r8, r8)
    96a4:	000007ff 	.word	0x000007ff

000096a8 <__aeabi_dmul>:
    96a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    96aa:	4657      	mov	r7, sl
    96ac:	4645      	mov	r5, r8
    96ae:	46de      	mov	lr, fp
    96b0:	464e      	mov	r6, r9
    96b2:	b5e0      	push	{r5, r6, r7, lr}
    96b4:	030c      	lsls	r4, r1, #12
    96b6:	4698      	mov	r8, r3
    96b8:	004e      	lsls	r6, r1, #1
    96ba:	0b23      	lsrs	r3, r4, #12
    96bc:	b087      	sub	sp, #28
    96be:	0007      	movs	r7, r0
    96c0:	4692      	mov	sl, r2
    96c2:	469b      	mov	fp, r3
    96c4:	0d76      	lsrs	r6, r6, #21
    96c6:	0fcd      	lsrs	r5, r1, #31
    96c8:	2e00      	cmp	r6, #0
    96ca:	d06b      	beq.n	97a4 <__aeabi_dmul+0xfc>
    96cc:	4b6d      	ldr	r3, [pc, #436]	; (9884 <__aeabi_dmul+0x1dc>)
    96ce:	429e      	cmp	r6, r3
    96d0:	d035      	beq.n	973e <__aeabi_dmul+0x96>
    96d2:	2480      	movs	r4, #128	; 0x80
    96d4:	465b      	mov	r3, fp
    96d6:	0f42      	lsrs	r2, r0, #29
    96d8:	0424      	lsls	r4, r4, #16
    96da:	00db      	lsls	r3, r3, #3
    96dc:	4314      	orrs	r4, r2
    96de:	431c      	orrs	r4, r3
    96e0:	00c3      	lsls	r3, r0, #3
    96e2:	4699      	mov	r9, r3
    96e4:	4b68      	ldr	r3, [pc, #416]	; (9888 <__aeabi_dmul+0x1e0>)
    96e6:	46a3      	mov	fp, r4
    96e8:	469c      	mov	ip, r3
    96ea:	2300      	movs	r3, #0
    96ec:	2700      	movs	r7, #0
    96ee:	4466      	add	r6, ip
    96f0:	9302      	str	r3, [sp, #8]
    96f2:	4643      	mov	r3, r8
    96f4:	031c      	lsls	r4, r3, #12
    96f6:	005a      	lsls	r2, r3, #1
    96f8:	0fdb      	lsrs	r3, r3, #31
    96fa:	4650      	mov	r0, sl
    96fc:	0b24      	lsrs	r4, r4, #12
    96fe:	0d52      	lsrs	r2, r2, #21
    9700:	4698      	mov	r8, r3
    9702:	d100      	bne.n	9706 <__aeabi_dmul+0x5e>
    9704:	e076      	b.n	97f4 <__aeabi_dmul+0x14c>
    9706:	4b5f      	ldr	r3, [pc, #380]	; (9884 <__aeabi_dmul+0x1dc>)
    9708:	429a      	cmp	r2, r3
    970a:	d06d      	beq.n	97e8 <__aeabi_dmul+0x140>
    970c:	2380      	movs	r3, #128	; 0x80
    970e:	0f41      	lsrs	r1, r0, #29
    9710:	041b      	lsls	r3, r3, #16
    9712:	430b      	orrs	r3, r1
    9714:	495c      	ldr	r1, [pc, #368]	; (9888 <__aeabi_dmul+0x1e0>)
    9716:	00e4      	lsls	r4, r4, #3
    9718:	468c      	mov	ip, r1
    971a:	431c      	orrs	r4, r3
    971c:	00c3      	lsls	r3, r0, #3
    971e:	2000      	movs	r0, #0
    9720:	4462      	add	r2, ip
    9722:	4641      	mov	r1, r8
    9724:	18b6      	adds	r6, r6, r2
    9726:	4069      	eors	r1, r5
    9728:	1c72      	adds	r2, r6, #1
    972a:	9101      	str	r1, [sp, #4]
    972c:	4694      	mov	ip, r2
    972e:	4307      	orrs	r7, r0
    9730:	2f0f      	cmp	r7, #15
    9732:	d900      	bls.n	9736 <__aeabi_dmul+0x8e>
    9734:	e0b0      	b.n	9898 <__aeabi_dmul+0x1f0>
    9736:	4a55      	ldr	r2, [pc, #340]	; (988c <__aeabi_dmul+0x1e4>)
    9738:	00bf      	lsls	r7, r7, #2
    973a:	59d2      	ldr	r2, [r2, r7]
    973c:	4697      	mov	pc, r2
    973e:	465b      	mov	r3, fp
    9740:	4303      	orrs	r3, r0
    9742:	4699      	mov	r9, r3
    9744:	d000      	beq.n	9748 <__aeabi_dmul+0xa0>
    9746:	e087      	b.n	9858 <__aeabi_dmul+0x1b0>
    9748:	2300      	movs	r3, #0
    974a:	469b      	mov	fp, r3
    974c:	3302      	adds	r3, #2
    974e:	2708      	movs	r7, #8
    9750:	9302      	str	r3, [sp, #8]
    9752:	e7ce      	b.n	96f2 <__aeabi_dmul+0x4a>
    9754:	4642      	mov	r2, r8
    9756:	9201      	str	r2, [sp, #4]
    9758:	2802      	cmp	r0, #2
    975a:	d067      	beq.n	982c <__aeabi_dmul+0x184>
    975c:	2803      	cmp	r0, #3
    975e:	d100      	bne.n	9762 <__aeabi_dmul+0xba>
    9760:	e20e      	b.n	9b80 <__aeabi_dmul+0x4d8>
    9762:	2801      	cmp	r0, #1
    9764:	d000      	beq.n	9768 <__aeabi_dmul+0xc0>
    9766:	e162      	b.n	9a2e <__aeabi_dmul+0x386>
    9768:	2300      	movs	r3, #0
    976a:	2400      	movs	r4, #0
    976c:	2200      	movs	r2, #0
    976e:	4699      	mov	r9, r3
    9770:	9901      	ldr	r1, [sp, #4]
    9772:	4001      	ands	r1, r0
    9774:	b2cd      	uxtb	r5, r1
    9776:	2100      	movs	r1, #0
    9778:	0312      	lsls	r2, r2, #12
    977a:	0d0b      	lsrs	r3, r1, #20
    977c:	0b12      	lsrs	r2, r2, #12
    977e:	051b      	lsls	r3, r3, #20
    9780:	4313      	orrs	r3, r2
    9782:	4a43      	ldr	r2, [pc, #268]	; (9890 <__aeabi_dmul+0x1e8>)
    9784:	0524      	lsls	r4, r4, #20
    9786:	4013      	ands	r3, r2
    9788:	431c      	orrs	r4, r3
    978a:	0064      	lsls	r4, r4, #1
    978c:	07ed      	lsls	r5, r5, #31
    978e:	0864      	lsrs	r4, r4, #1
    9790:	432c      	orrs	r4, r5
    9792:	4648      	mov	r0, r9
    9794:	0021      	movs	r1, r4
    9796:	b007      	add	sp, #28
    9798:	bc3c      	pop	{r2, r3, r4, r5}
    979a:	4690      	mov	r8, r2
    979c:	4699      	mov	r9, r3
    979e:	46a2      	mov	sl, r4
    97a0:	46ab      	mov	fp, r5
    97a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97a4:	4303      	orrs	r3, r0
    97a6:	4699      	mov	r9, r3
    97a8:	d04f      	beq.n	984a <__aeabi_dmul+0x1a2>
    97aa:	465b      	mov	r3, fp
    97ac:	2b00      	cmp	r3, #0
    97ae:	d100      	bne.n	97b2 <__aeabi_dmul+0x10a>
    97b0:	e189      	b.n	9ac6 <__aeabi_dmul+0x41e>
    97b2:	4658      	mov	r0, fp
    97b4:	f7fe fbac 	bl	7f10 <__clzsi2>
    97b8:	0003      	movs	r3, r0
    97ba:	3b0b      	subs	r3, #11
    97bc:	2b1c      	cmp	r3, #28
    97be:	dd00      	ble.n	97c2 <__aeabi_dmul+0x11a>
    97c0:	e17a      	b.n	9ab8 <__aeabi_dmul+0x410>
    97c2:	221d      	movs	r2, #29
    97c4:	1ad3      	subs	r3, r2, r3
    97c6:	003a      	movs	r2, r7
    97c8:	0001      	movs	r1, r0
    97ca:	465c      	mov	r4, fp
    97cc:	40da      	lsrs	r2, r3
    97ce:	3908      	subs	r1, #8
    97d0:	408c      	lsls	r4, r1
    97d2:	0013      	movs	r3, r2
    97d4:	408f      	lsls	r7, r1
    97d6:	4323      	orrs	r3, r4
    97d8:	469b      	mov	fp, r3
    97da:	46b9      	mov	r9, r7
    97dc:	2300      	movs	r3, #0
    97de:	4e2d      	ldr	r6, [pc, #180]	; (9894 <__aeabi_dmul+0x1ec>)
    97e0:	2700      	movs	r7, #0
    97e2:	1a36      	subs	r6, r6, r0
    97e4:	9302      	str	r3, [sp, #8]
    97e6:	e784      	b.n	96f2 <__aeabi_dmul+0x4a>
    97e8:	4653      	mov	r3, sl
    97ea:	4323      	orrs	r3, r4
    97ec:	d12a      	bne.n	9844 <__aeabi_dmul+0x19c>
    97ee:	2400      	movs	r4, #0
    97f0:	2002      	movs	r0, #2
    97f2:	e796      	b.n	9722 <__aeabi_dmul+0x7a>
    97f4:	4653      	mov	r3, sl
    97f6:	4323      	orrs	r3, r4
    97f8:	d020      	beq.n	983c <__aeabi_dmul+0x194>
    97fa:	2c00      	cmp	r4, #0
    97fc:	d100      	bne.n	9800 <__aeabi_dmul+0x158>
    97fe:	e157      	b.n	9ab0 <__aeabi_dmul+0x408>
    9800:	0020      	movs	r0, r4
    9802:	f7fe fb85 	bl	7f10 <__clzsi2>
    9806:	0003      	movs	r3, r0
    9808:	3b0b      	subs	r3, #11
    980a:	2b1c      	cmp	r3, #28
    980c:	dd00      	ble.n	9810 <__aeabi_dmul+0x168>
    980e:	e149      	b.n	9aa4 <__aeabi_dmul+0x3fc>
    9810:	211d      	movs	r1, #29
    9812:	1acb      	subs	r3, r1, r3
    9814:	4651      	mov	r1, sl
    9816:	0002      	movs	r2, r0
    9818:	40d9      	lsrs	r1, r3
    981a:	4653      	mov	r3, sl
    981c:	3a08      	subs	r2, #8
    981e:	4094      	lsls	r4, r2
    9820:	4093      	lsls	r3, r2
    9822:	430c      	orrs	r4, r1
    9824:	4a1b      	ldr	r2, [pc, #108]	; (9894 <__aeabi_dmul+0x1ec>)
    9826:	1a12      	subs	r2, r2, r0
    9828:	2000      	movs	r0, #0
    982a:	e77a      	b.n	9722 <__aeabi_dmul+0x7a>
    982c:	2501      	movs	r5, #1
    982e:	9b01      	ldr	r3, [sp, #4]
    9830:	4c14      	ldr	r4, [pc, #80]	; (9884 <__aeabi_dmul+0x1dc>)
    9832:	401d      	ands	r5, r3
    9834:	2300      	movs	r3, #0
    9836:	2200      	movs	r2, #0
    9838:	4699      	mov	r9, r3
    983a:	e79c      	b.n	9776 <__aeabi_dmul+0xce>
    983c:	2400      	movs	r4, #0
    983e:	2200      	movs	r2, #0
    9840:	2001      	movs	r0, #1
    9842:	e76e      	b.n	9722 <__aeabi_dmul+0x7a>
    9844:	4653      	mov	r3, sl
    9846:	2003      	movs	r0, #3
    9848:	e76b      	b.n	9722 <__aeabi_dmul+0x7a>
    984a:	2300      	movs	r3, #0
    984c:	469b      	mov	fp, r3
    984e:	3301      	adds	r3, #1
    9850:	2704      	movs	r7, #4
    9852:	2600      	movs	r6, #0
    9854:	9302      	str	r3, [sp, #8]
    9856:	e74c      	b.n	96f2 <__aeabi_dmul+0x4a>
    9858:	2303      	movs	r3, #3
    985a:	4681      	mov	r9, r0
    985c:	270c      	movs	r7, #12
    985e:	9302      	str	r3, [sp, #8]
    9860:	e747      	b.n	96f2 <__aeabi_dmul+0x4a>
    9862:	2280      	movs	r2, #128	; 0x80
    9864:	2300      	movs	r3, #0
    9866:	2500      	movs	r5, #0
    9868:	0312      	lsls	r2, r2, #12
    986a:	4699      	mov	r9, r3
    986c:	4c05      	ldr	r4, [pc, #20]	; (9884 <__aeabi_dmul+0x1dc>)
    986e:	e782      	b.n	9776 <__aeabi_dmul+0xce>
    9870:	465c      	mov	r4, fp
    9872:	464b      	mov	r3, r9
    9874:	9802      	ldr	r0, [sp, #8]
    9876:	e76f      	b.n	9758 <__aeabi_dmul+0xb0>
    9878:	465c      	mov	r4, fp
    987a:	464b      	mov	r3, r9
    987c:	9501      	str	r5, [sp, #4]
    987e:	9802      	ldr	r0, [sp, #8]
    9880:	e76a      	b.n	9758 <__aeabi_dmul+0xb0>
    9882:	46c0      	nop			; (mov r8, r8)
    9884:	000007ff 	.word	0x000007ff
    9888:	fffffc01 	.word	0xfffffc01
    988c:	0000c1a8 	.word	0x0000c1a8
    9890:	800fffff 	.word	0x800fffff
    9894:	fffffc0d 	.word	0xfffffc0d
    9898:	464a      	mov	r2, r9
    989a:	4649      	mov	r1, r9
    989c:	0c17      	lsrs	r7, r2, #16
    989e:	0c1a      	lsrs	r2, r3, #16
    98a0:	041b      	lsls	r3, r3, #16
    98a2:	0c1b      	lsrs	r3, r3, #16
    98a4:	0408      	lsls	r0, r1, #16
    98a6:	0019      	movs	r1, r3
    98a8:	0c00      	lsrs	r0, r0, #16
    98aa:	4341      	muls	r1, r0
    98ac:	0015      	movs	r5, r2
    98ae:	4688      	mov	r8, r1
    98b0:	0019      	movs	r1, r3
    98b2:	437d      	muls	r5, r7
    98b4:	4379      	muls	r1, r7
    98b6:	9503      	str	r5, [sp, #12]
    98b8:	4689      	mov	r9, r1
    98ba:	0029      	movs	r1, r5
    98bc:	0015      	movs	r5, r2
    98be:	4345      	muls	r5, r0
    98c0:	444d      	add	r5, r9
    98c2:	9502      	str	r5, [sp, #8]
    98c4:	4645      	mov	r5, r8
    98c6:	0c2d      	lsrs	r5, r5, #16
    98c8:	46aa      	mov	sl, r5
    98ca:	9d02      	ldr	r5, [sp, #8]
    98cc:	4455      	add	r5, sl
    98ce:	45a9      	cmp	r9, r5
    98d0:	d906      	bls.n	98e0 <__aeabi_dmul+0x238>
    98d2:	468a      	mov	sl, r1
    98d4:	2180      	movs	r1, #128	; 0x80
    98d6:	0249      	lsls	r1, r1, #9
    98d8:	4689      	mov	r9, r1
    98da:	44ca      	add	sl, r9
    98dc:	4651      	mov	r1, sl
    98de:	9103      	str	r1, [sp, #12]
    98e0:	0c29      	lsrs	r1, r5, #16
    98e2:	9104      	str	r1, [sp, #16]
    98e4:	4641      	mov	r1, r8
    98e6:	0409      	lsls	r1, r1, #16
    98e8:	042d      	lsls	r5, r5, #16
    98ea:	0c09      	lsrs	r1, r1, #16
    98ec:	4688      	mov	r8, r1
    98ee:	0029      	movs	r1, r5
    98f0:	0c25      	lsrs	r5, r4, #16
    98f2:	0424      	lsls	r4, r4, #16
    98f4:	4441      	add	r1, r8
    98f6:	0c24      	lsrs	r4, r4, #16
    98f8:	9105      	str	r1, [sp, #20]
    98fa:	0021      	movs	r1, r4
    98fc:	4341      	muls	r1, r0
    98fe:	4688      	mov	r8, r1
    9900:	0021      	movs	r1, r4
    9902:	4379      	muls	r1, r7
    9904:	468a      	mov	sl, r1
    9906:	4368      	muls	r0, r5
    9908:	4641      	mov	r1, r8
    990a:	4450      	add	r0, sl
    990c:	4681      	mov	r9, r0
    990e:	0c08      	lsrs	r0, r1, #16
    9910:	4448      	add	r0, r9
    9912:	436f      	muls	r7, r5
    9914:	4582      	cmp	sl, r0
    9916:	d903      	bls.n	9920 <__aeabi_dmul+0x278>
    9918:	2180      	movs	r1, #128	; 0x80
    991a:	0249      	lsls	r1, r1, #9
    991c:	4689      	mov	r9, r1
    991e:	444f      	add	r7, r9
    9920:	0c01      	lsrs	r1, r0, #16
    9922:	4689      	mov	r9, r1
    9924:	0039      	movs	r1, r7
    9926:	4449      	add	r1, r9
    9928:	9102      	str	r1, [sp, #8]
    992a:	4641      	mov	r1, r8
    992c:	040f      	lsls	r7, r1, #16
    992e:	9904      	ldr	r1, [sp, #16]
    9930:	0c3f      	lsrs	r7, r7, #16
    9932:	4688      	mov	r8, r1
    9934:	0400      	lsls	r0, r0, #16
    9936:	19c0      	adds	r0, r0, r7
    9938:	4480      	add	r8, r0
    993a:	4641      	mov	r1, r8
    993c:	9104      	str	r1, [sp, #16]
    993e:	4659      	mov	r1, fp
    9940:	0c0f      	lsrs	r7, r1, #16
    9942:	0409      	lsls	r1, r1, #16
    9944:	0c09      	lsrs	r1, r1, #16
    9946:	4688      	mov	r8, r1
    9948:	4359      	muls	r1, r3
    994a:	468a      	mov	sl, r1
    994c:	0039      	movs	r1, r7
    994e:	4351      	muls	r1, r2
    9950:	4689      	mov	r9, r1
    9952:	4641      	mov	r1, r8
    9954:	434a      	muls	r2, r1
    9956:	4651      	mov	r1, sl
    9958:	0c09      	lsrs	r1, r1, #16
    995a:	468b      	mov	fp, r1
    995c:	437b      	muls	r3, r7
    995e:	18d2      	adds	r2, r2, r3
    9960:	445a      	add	r2, fp
    9962:	4293      	cmp	r3, r2
    9964:	d903      	bls.n	996e <__aeabi_dmul+0x2c6>
    9966:	2380      	movs	r3, #128	; 0x80
    9968:	025b      	lsls	r3, r3, #9
    996a:	469b      	mov	fp, r3
    996c:	44d9      	add	r9, fp
    996e:	4651      	mov	r1, sl
    9970:	0409      	lsls	r1, r1, #16
    9972:	0c09      	lsrs	r1, r1, #16
    9974:	468a      	mov	sl, r1
    9976:	4641      	mov	r1, r8
    9978:	4361      	muls	r1, r4
    997a:	437c      	muls	r4, r7
    997c:	0c13      	lsrs	r3, r2, #16
    997e:	0412      	lsls	r2, r2, #16
    9980:	444b      	add	r3, r9
    9982:	4452      	add	r2, sl
    9984:	46a1      	mov	r9, r4
    9986:	468a      	mov	sl, r1
    9988:	003c      	movs	r4, r7
    998a:	4641      	mov	r1, r8
    998c:	436c      	muls	r4, r5
    998e:	434d      	muls	r5, r1
    9990:	4651      	mov	r1, sl
    9992:	444d      	add	r5, r9
    9994:	0c0f      	lsrs	r7, r1, #16
    9996:	197d      	adds	r5, r7, r5
    9998:	45a9      	cmp	r9, r5
    999a:	d903      	bls.n	99a4 <__aeabi_dmul+0x2fc>
    999c:	2180      	movs	r1, #128	; 0x80
    999e:	0249      	lsls	r1, r1, #9
    99a0:	4688      	mov	r8, r1
    99a2:	4444      	add	r4, r8
    99a4:	9f04      	ldr	r7, [sp, #16]
    99a6:	9903      	ldr	r1, [sp, #12]
    99a8:	46b8      	mov	r8, r7
    99aa:	4441      	add	r1, r8
    99ac:	468b      	mov	fp, r1
    99ae:	4583      	cmp	fp, r0
    99b0:	4180      	sbcs	r0, r0
    99b2:	4241      	negs	r1, r0
    99b4:	4688      	mov	r8, r1
    99b6:	4651      	mov	r1, sl
    99b8:	0408      	lsls	r0, r1, #16
    99ba:	042f      	lsls	r7, r5, #16
    99bc:	0c00      	lsrs	r0, r0, #16
    99be:	183f      	adds	r7, r7, r0
    99c0:	4658      	mov	r0, fp
    99c2:	9902      	ldr	r1, [sp, #8]
    99c4:	1810      	adds	r0, r2, r0
    99c6:	4689      	mov	r9, r1
    99c8:	4290      	cmp	r0, r2
    99ca:	4192      	sbcs	r2, r2
    99cc:	444f      	add	r7, r9
    99ce:	46ba      	mov	sl, r7
    99d0:	4252      	negs	r2, r2
    99d2:	4699      	mov	r9, r3
    99d4:	4693      	mov	fp, r2
    99d6:	44c2      	add	sl, r8
    99d8:	44d1      	add	r9, sl
    99da:	44cb      	add	fp, r9
    99dc:	428f      	cmp	r7, r1
    99de:	41bf      	sbcs	r7, r7
    99e0:	45c2      	cmp	sl, r8
    99e2:	4189      	sbcs	r1, r1
    99e4:	4599      	cmp	r9, r3
    99e6:	419b      	sbcs	r3, r3
    99e8:	4593      	cmp	fp, r2
    99ea:	4192      	sbcs	r2, r2
    99ec:	427f      	negs	r7, r7
    99ee:	4249      	negs	r1, r1
    99f0:	0c2d      	lsrs	r5, r5, #16
    99f2:	4252      	negs	r2, r2
    99f4:	430f      	orrs	r7, r1
    99f6:	425b      	negs	r3, r3
    99f8:	4313      	orrs	r3, r2
    99fa:	197f      	adds	r7, r7, r5
    99fc:	18ff      	adds	r7, r7, r3
    99fe:	465b      	mov	r3, fp
    9a00:	193c      	adds	r4, r7, r4
    9a02:	0ddb      	lsrs	r3, r3, #23
    9a04:	9a05      	ldr	r2, [sp, #20]
    9a06:	0264      	lsls	r4, r4, #9
    9a08:	431c      	orrs	r4, r3
    9a0a:	0243      	lsls	r3, r0, #9
    9a0c:	4313      	orrs	r3, r2
    9a0e:	1e5d      	subs	r5, r3, #1
    9a10:	41ab      	sbcs	r3, r5
    9a12:	465a      	mov	r2, fp
    9a14:	0dc0      	lsrs	r0, r0, #23
    9a16:	4303      	orrs	r3, r0
    9a18:	0252      	lsls	r2, r2, #9
    9a1a:	4313      	orrs	r3, r2
    9a1c:	01e2      	lsls	r2, r4, #7
    9a1e:	d556      	bpl.n	9ace <__aeabi_dmul+0x426>
    9a20:	2001      	movs	r0, #1
    9a22:	085a      	lsrs	r2, r3, #1
    9a24:	4003      	ands	r3, r0
    9a26:	4313      	orrs	r3, r2
    9a28:	07e2      	lsls	r2, r4, #31
    9a2a:	4313      	orrs	r3, r2
    9a2c:	0864      	lsrs	r4, r4, #1
    9a2e:	485a      	ldr	r0, [pc, #360]	; (9b98 <__aeabi_dmul+0x4f0>)
    9a30:	4460      	add	r0, ip
    9a32:	2800      	cmp	r0, #0
    9a34:	dd4d      	ble.n	9ad2 <__aeabi_dmul+0x42a>
    9a36:	075a      	lsls	r2, r3, #29
    9a38:	d009      	beq.n	9a4e <__aeabi_dmul+0x3a6>
    9a3a:	220f      	movs	r2, #15
    9a3c:	401a      	ands	r2, r3
    9a3e:	2a04      	cmp	r2, #4
    9a40:	d005      	beq.n	9a4e <__aeabi_dmul+0x3a6>
    9a42:	1d1a      	adds	r2, r3, #4
    9a44:	429a      	cmp	r2, r3
    9a46:	419b      	sbcs	r3, r3
    9a48:	425b      	negs	r3, r3
    9a4a:	18e4      	adds	r4, r4, r3
    9a4c:	0013      	movs	r3, r2
    9a4e:	01e2      	lsls	r2, r4, #7
    9a50:	d504      	bpl.n	9a5c <__aeabi_dmul+0x3b4>
    9a52:	2080      	movs	r0, #128	; 0x80
    9a54:	4a51      	ldr	r2, [pc, #324]	; (9b9c <__aeabi_dmul+0x4f4>)
    9a56:	00c0      	lsls	r0, r0, #3
    9a58:	4014      	ands	r4, r2
    9a5a:	4460      	add	r0, ip
    9a5c:	4a50      	ldr	r2, [pc, #320]	; (9ba0 <__aeabi_dmul+0x4f8>)
    9a5e:	4290      	cmp	r0, r2
    9a60:	dd00      	ble.n	9a64 <__aeabi_dmul+0x3bc>
    9a62:	e6e3      	b.n	982c <__aeabi_dmul+0x184>
    9a64:	2501      	movs	r5, #1
    9a66:	08db      	lsrs	r3, r3, #3
    9a68:	0762      	lsls	r2, r4, #29
    9a6a:	431a      	orrs	r2, r3
    9a6c:	0264      	lsls	r4, r4, #9
    9a6e:	9b01      	ldr	r3, [sp, #4]
    9a70:	4691      	mov	r9, r2
    9a72:	0b22      	lsrs	r2, r4, #12
    9a74:	0544      	lsls	r4, r0, #21
    9a76:	0d64      	lsrs	r4, r4, #21
    9a78:	401d      	ands	r5, r3
    9a7a:	e67c      	b.n	9776 <__aeabi_dmul+0xce>
    9a7c:	2280      	movs	r2, #128	; 0x80
    9a7e:	4659      	mov	r1, fp
    9a80:	0312      	lsls	r2, r2, #12
    9a82:	4211      	tst	r1, r2
    9a84:	d008      	beq.n	9a98 <__aeabi_dmul+0x3f0>
    9a86:	4214      	tst	r4, r2
    9a88:	d106      	bne.n	9a98 <__aeabi_dmul+0x3f0>
    9a8a:	4322      	orrs	r2, r4
    9a8c:	0312      	lsls	r2, r2, #12
    9a8e:	0b12      	lsrs	r2, r2, #12
    9a90:	4645      	mov	r5, r8
    9a92:	4699      	mov	r9, r3
    9a94:	4c43      	ldr	r4, [pc, #268]	; (9ba4 <__aeabi_dmul+0x4fc>)
    9a96:	e66e      	b.n	9776 <__aeabi_dmul+0xce>
    9a98:	465b      	mov	r3, fp
    9a9a:	431a      	orrs	r2, r3
    9a9c:	0312      	lsls	r2, r2, #12
    9a9e:	0b12      	lsrs	r2, r2, #12
    9aa0:	4c40      	ldr	r4, [pc, #256]	; (9ba4 <__aeabi_dmul+0x4fc>)
    9aa2:	e668      	b.n	9776 <__aeabi_dmul+0xce>
    9aa4:	0003      	movs	r3, r0
    9aa6:	4654      	mov	r4, sl
    9aa8:	3b28      	subs	r3, #40	; 0x28
    9aaa:	409c      	lsls	r4, r3
    9aac:	2300      	movs	r3, #0
    9aae:	e6b9      	b.n	9824 <__aeabi_dmul+0x17c>
    9ab0:	f7fe fa2e 	bl	7f10 <__clzsi2>
    9ab4:	3020      	adds	r0, #32
    9ab6:	e6a6      	b.n	9806 <__aeabi_dmul+0x15e>
    9ab8:	0003      	movs	r3, r0
    9aba:	3b28      	subs	r3, #40	; 0x28
    9abc:	409f      	lsls	r7, r3
    9abe:	2300      	movs	r3, #0
    9ac0:	46bb      	mov	fp, r7
    9ac2:	4699      	mov	r9, r3
    9ac4:	e68a      	b.n	97dc <__aeabi_dmul+0x134>
    9ac6:	f7fe fa23 	bl	7f10 <__clzsi2>
    9aca:	3020      	adds	r0, #32
    9acc:	e674      	b.n	97b8 <__aeabi_dmul+0x110>
    9ace:	46b4      	mov	ip, r6
    9ad0:	e7ad      	b.n	9a2e <__aeabi_dmul+0x386>
    9ad2:	2501      	movs	r5, #1
    9ad4:	1a2a      	subs	r2, r5, r0
    9ad6:	2a38      	cmp	r2, #56	; 0x38
    9ad8:	dd06      	ble.n	9ae8 <__aeabi_dmul+0x440>
    9ada:	9b01      	ldr	r3, [sp, #4]
    9adc:	2400      	movs	r4, #0
    9ade:	401d      	ands	r5, r3
    9ae0:	2300      	movs	r3, #0
    9ae2:	2200      	movs	r2, #0
    9ae4:	4699      	mov	r9, r3
    9ae6:	e646      	b.n	9776 <__aeabi_dmul+0xce>
    9ae8:	2a1f      	cmp	r2, #31
    9aea:	dc21      	bgt.n	9b30 <__aeabi_dmul+0x488>
    9aec:	2520      	movs	r5, #32
    9aee:	0020      	movs	r0, r4
    9af0:	1aad      	subs	r5, r5, r2
    9af2:	001e      	movs	r6, r3
    9af4:	40ab      	lsls	r3, r5
    9af6:	40a8      	lsls	r0, r5
    9af8:	40d6      	lsrs	r6, r2
    9afa:	1e5d      	subs	r5, r3, #1
    9afc:	41ab      	sbcs	r3, r5
    9afe:	4330      	orrs	r0, r6
    9b00:	4318      	orrs	r0, r3
    9b02:	40d4      	lsrs	r4, r2
    9b04:	0743      	lsls	r3, r0, #29
    9b06:	d009      	beq.n	9b1c <__aeabi_dmul+0x474>
    9b08:	230f      	movs	r3, #15
    9b0a:	4003      	ands	r3, r0
    9b0c:	2b04      	cmp	r3, #4
    9b0e:	d005      	beq.n	9b1c <__aeabi_dmul+0x474>
    9b10:	0003      	movs	r3, r0
    9b12:	1d18      	adds	r0, r3, #4
    9b14:	4298      	cmp	r0, r3
    9b16:	419b      	sbcs	r3, r3
    9b18:	425b      	negs	r3, r3
    9b1a:	18e4      	adds	r4, r4, r3
    9b1c:	0223      	lsls	r3, r4, #8
    9b1e:	d521      	bpl.n	9b64 <__aeabi_dmul+0x4bc>
    9b20:	2501      	movs	r5, #1
    9b22:	9b01      	ldr	r3, [sp, #4]
    9b24:	2401      	movs	r4, #1
    9b26:	401d      	ands	r5, r3
    9b28:	2300      	movs	r3, #0
    9b2a:	2200      	movs	r2, #0
    9b2c:	4699      	mov	r9, r3
    9b2e:	e622      	b.n	9776 <__aeabi_dmul+0xce>
    9b30:	251f      	movs	r5, #31
    9b32:	0021      	movs	r1, r4
    9b34:	426d      	negs	r5, r5
    9b36:	1a28      	subs	r0, r5, r0
    9b38:	40c1      	lsrs	r1, r0
    9b3a:	0008      	movs	r0, r1
    9b3c:	2a20      	cmp	r2, #32
    9b3e:	d01d      	beq.n	9b7c <__aeabi_dmul+0x4d4>
    9b40:	355f      	adds	r5, #95	; 0x5f
    9b42:	1aaa      	subs	r2, r5, r2
    9b44:	4094      	lsls	r4, r2
    9b46:	4323      	orrs	r3, r4
    9b48:	1e5c      	subs	r4, r3, #1
    9b4a:	41a3      	sbcs	r3, r4
    9b4c:	2507      	movs	r5, #7
    9b4e:	4303      	orrs	r3, r0
    9b50:	401d      	ands	r5, r3
    9b52:	2200      	movs	r2, #0
    9b54:	2d00      	cmp	r5, #0
    9b56:	d009      	beq.n	9b6c <__aeabi_dmul+0x4c4>
    9b58:	220f      	movs	r2, #15
    9b5a:	2400      	movs	r4, #0
    9b5c:	401a      	ands	r2, r3
    9b5e:	0018      	movs	r0, r3
    9b60:	2a04      	cmp	r2, #4
    9b62:	d1d6      	bne.n	9b12 <__aeabi_dmul+0x46a>
    9b64:	0003      	movs	r3, r0
    9b66:	0765      	lsls	r5, r4, #29
    9b68:	0264      	lsls	r4, r4, #9
    9b6a:	0b22      	lsrs	r2, r4, #12
    9b6c:	08db      	lsrs	r3, r3, #3
    9b6e:	432b      	orrs	r3, r5
    9b70:	2501      	movs	r5, #1
    9b72:	4699      	mov	r9, r3
    9b74:	9b01      	ldr	r3, [sp, #4]
    9b76:	2400      	movs	r4, #0
    9b78:	401d      	ands	r5, r3
    9b7a:	e5fc      	b.n	9776 <__aeabi_dmul+0xce>
    9b7c:	2400      	movs	r4, #0
    9b7e:	e7e2      	b.n	9b46 <__aeabi_dmul+0x49e>
    9b80:	2280      	movs	r2, #128	; 0x80
    9b82:	2501      	movs	r5, #1
    9b84:	0312      	lsls	r2, r2, #12
    9b86:	4322      	orrs	r2, r4
    9b88:	9901      	ldr	r1, [sp, #4]
    9b8a:	0312      	lsls	r2, r2, #12
    9b8c:	0b12      	lsrs	r2, r2, #12
    9b8e:	400d      	ands	r5, r1
    9b90:	4699      	mov	r9, r3
    9b92:	4c04      	ldr	r4, [pc, #16]	; (9ba4 <__aeabi_dmul+0x4fc>)
    9b94:	e5ef      	b.n	9776 <__aeabi_dmul+0xce>
    9b96:	46c0      	nop			; (mov r8, r8)
    9b98:	000003ff 	.word	0x000003ff
    9b9c:	feffffff 	.word	0xfeffffff
    9ba0:	000007fe 	.word	0x000007fe
    9ba4:	000007ff 	.word	0x000007ff

00009ba8 <__aeabi_dsub>:
    9ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9baa:	4646      	mov	r6, r8
    9bac:	46d6      	mov	lr, sl
    9bae:	464f      	mov	r7, r9
    9bb0:	030c      	lsls	r4, r1, #12
    9bb2:	b5c0      	push	{r6, r7, lr}
    9bb4:	0fcd      	lsrs	r5, r1, #31
    9bb6:	004e      	lsls	r6, r1, #1
    9bb8:	0a61      	lsrs	r1, r4, #9
    9bba:	0f44      	lsrs	r4, r0, #29
    9bbc:	430c      	orrs	r4, r1
    9bbe:	00c1      	lsls	r1, r0, #3
    9bc0:	0058      	lsls	r0, r3, #1
    9bc2:	0d40      	lsrs	r0, r0, #21
    9bc4:	4684      	mov	ip, r0
    9bc6:	468a      	mov	sl, r1
    9bc8:	000f      	movs	r7, r1
    9bca:	0319      	lsls	r1, r3, #12
    9bcc:	0f50      	lsrs	r0, r2, #29
    9bce:	0a49      	lsrs	r1, r1, #9
    9bd0:	4301      	orrs	r1, r0
    9bd2:	48c6      	ldr	r0, [pc, #792]	; (9eec <__aeabi_dsub+0x344>)
    9bd4:	0d76      	lsrs	r6, r6, #21
    9bd6:	46a8      	mov	r8, r5
    9bd8:	0fdb      	lsrs	r3, r3, #31
    9bda:	00d2      	lsls	r2, r2, #3
    9bdc:	4584      	cmp	ip, r0
    9bde:	d100      	bne.n	9be2 <__aeabi_dsub+0x3a>
    9be0:	e0d8      	b.n	9d94 <__aeabi_dsub+0x1ec>
    9be2:	2001      	movs	r0, #1
    9be4:	4043      	eors	r3, r0
    9be6:	42ab      	cmp	r3, r5
    9be8:	d100      	bne.n	9bec <__aeabi_dsub+0x44>
    9bea:	e0a6      	b.n	9d3a <__aeabi_dsub+0x192>
    9bec:	4660      	mov	r0, ip
    9bee:	1a35      	subs	r5, r6, r0
    9bf0:	2d00      	cmp	r5, #0
    9bf2:	dc00      	bgt.n	9bf6 <__aeabi_dsub+0x4e>
    9bf4:	e105      	b.n	9e02 <__aeabi_dsub+0x25a>
    9bf6:	2800      	cmp	r0, #0
    9bf8:	d110      	bne.n	9c1c <__aeabi_dsub+0x74>
    9bfa:	000b      	movs	r3, r1
    9bfc:	4313      	orrs	r3, r2
    9bfe:	d100      	bne.n	9c02 <__aeabi_dsub+0x5a>
    9c00:	e0d7      	b.n	9db2 <__aeabi_dsub+0x20a>
    9c02:	1e6b      	subs	r3, r5, #1
    9c04:	2b00      	cmp	r3, #0
    9c06:	d000      	beq.n	9c0a <__aeabi_dsub+0x62>
    9c08:	e14b      	b.n	9ea2 <__aeabi_dsub+0x2fa>
    9c0a:	4653      	mov	r3, sl
    9c0c:	1a9f      	subs	r7, r3, r2
    9c0e:	45ba      	cmp	sl, r7
    9c10:	4180      	sbcs	r0, r0
    9c12:	1a64      	subs	r4, r4, r1
    9c14:	4240      	negs	r0, r0
    9c16:	1a24      	subs	r4, r4, r0
    9c18:	2601      	movs	r6, #1
    9c1a:	e01e      	b.n	9c5a <__aeabi_dsub+0xb2>
    9c1c:	4bb3      	ldr	r3, [pc, #716]	; (9eec <__aeabi_dsub+0x344>)
    9c1e:	429e      	cmp	r6, r3
    9c20:	d048      	beq.n	9cb4 <__aeabi_dsub+0x10c>
    9c22:	2380      	movs	r3, #128	; 0x80
    9c24:	041b      	lsls	r3, r3, #16
    9c26:	4319      	orrs	r1, r3
    9c28:	2d38      	cmp	r5, #56	; 0x38
    9c2a:	dd00      	ble.n	9c2e <__aeabi_dsub+0x86>
    9c2c:	e119      	b.n	9e62 <__aeabi_dsub+0x2ba>
    9c2e:	2d1f      	cmp	r5, #31
    9c30:	dd00      	ble.n	9c34 <__aeabi_dsub+0x8c>
    9c32:	e14c      	b.n	9ece <__aeabi_dsub+0x326>
    9c34:	2320      	movs	r3, #32
    9c36:	000f      	movs	r7, r1
    9c38:	1b5b      	subs	r3, r3, r5
    9c3a:	0010      	movs	r0, r2
    9c3c:	409a      	lsls	r2, r3
    9c3e:	409f      	lsls	r7, r3
    9c40:	40e8      	lsrs	r0, r5
    9c42:	1e53      	subs	r3, r2, #1
    9c44:	419a      	sbcs	r2, r3
    9c46:	40e9      	lsrs	r1, r5
    9c48:	4307      	orrs	r7, r0
    9c4a:	4317      	orrs	r7, r2
    9c4c:	4653      	mov	r3, sl
    9c4e:	1bdf      	subs	r7, r3, r7
    9c50:	1a61      	subs	r1, r4, r1
    9c52:	45ba      	cmp	sl, r7
    9c54:	41a4      	sbcs	r4, r4
    9c56:	4264      	negs	r4, r4
    9c58:	1b0c      	subs	r4, r1, r4
    9c5a:	0223      	lsls	r3, r4, #8
    9c5c:	d400      	bmi.n	9c60 <__aeabi_dsub+0xb8>
    9c5e:	e0c5      	b.n	9dec <__aeabi_dsub+0x244>
    9c60:	0264      	lsls	r4, r4, #9
    9c62:	0a65      	lsrs	r5, r4, #9
    9c64:	2d00      	cmp	r5, #0
    9c66:	d100      	bne.n	9c6a <__aeabi_dsub+0xc2>
    9c68:	e0f6      	b.n	9e58 <__aeabi_dsub+0x2b0>
    9c6a:	0028      	movs	r0, r5
    9c6c:	f7fe f950 	bl	7f10 <__clzsi2>
    9c70:	0003      	movs	r3, r0
    9c72:	3b08      	subs	r3, #8
    9c74:	2b1f      	cmp	r3, #31
    9c76:	dd00      	ble.n	9c7a <__aeabi_dsub+0xd2>
    9c78:	e0e9      	b.n	9e4e <__aeabi_dsub+0x2a6>
    9c7a:	2220      	movs	r2, #32
    9c7c:	003c      	movs	r4, r7
    9c7e:	1ad2      	subs	r2, r2, r3
    9c80:	409d      	lsls	r5, r3
    9c82:	40d4      	lsrs	r4, r2
    9c84:	409f      	lsls	r7, r3
    9c86:	4325      	orrs	r5, r4
    9c88:	429e      	cmp	r6, r3
    9c8a:	dd00      	ble.n	9c8e <__aeabi_dsub+0xe6>
    9c8c:	e0db      	b.n	9e46 <__aeabi_dsub+0x29e>
    9c8e:	1b9e      	subs	r6, r3, r6
    9c90:	1c73      	adds	r3, r6, #1
    9c92:	2b1f      	cmp	r3, #31
    9c94:	dd00      	ble.n	9c98 <__aeabi_dsub+0xf0>
    9c96:	e10a      	b.n	9eae <__aeabi_dsub+0x306>
    9c98:	2220      	movs	r2, #32
    9c9a:	0038      	movs	r0, r7
    9c9c:	1ad2      	subs	r2, r2, r3
    9c9e:	0029      	movs	r1, r5
    9ca0:	4097      	lsls	r7, r2
    9ca2:	002c      	movs	r4, r5
    9ca4:	4091      	lsls	r1, r2
    9ca6:	40d8      	lsrs	r0, r3
    9ca8:	1e7a      	subs	r2, r7, #1
    9caa:	4197      	sbcs	r7, r2
    9cac:	40dc      	lsrs	r4, r3
    9cae:	2600      	movs	r6, #0
    9cb0:	4301      	orrs	r1, r0
    9cb2:	430f      	orrs	r7, r1
    9cb4:	077b      	lsls	r3, r7, #29
    9cb6:	d009      	beq.n	9ccc <__aeabi_dsub+0x124>
    9cb8:	230f      	movs	r3, #15
    9cba:	403b      	ands	r3, r7
    9cbc:	2b04      	cmp	r3, #4
    9cbe:	d005      	beq.n	9ccc <__aeabi_dsub+0x124>
    9cc0:	1d3b      	adds	r3, r7, #4
    9cc2:	42bb      	cmp	r3, r7
    9cc4:	41bf      	sbcs	r7, r7
    9cc6:	427f      	negs	r7, r7
    9cc8:	19e4      	adds	r4, r4, r7
    9cca:	001f      	movs	r7, r3
    9ccc:	0223      	lsls	r3, r4, #8
    9cce:	d525      	bpl.n	9d1c <__aeabi_dsub+0x174>
    9cd0:	4b86      	ldr	r3, [pc, #536]	; (9eec <__aeabi_dsub+0x344>)
    9cd2:	3601      	adds	r6, #1
    9cd4:	429e      	cmp	r6, r3
    9cd6:	d100      	bne.n	9cda <__aeabi_dsub+0x132>
    9cd8:	e0af      	b.n	9e3a <__aeabi_dsub+0x292>
    9cda:	4b85      	ldr	r3, [pc, #532]	; (9ef0 <__aeabi_dsub+0x348>)
    9cdc:	2501      	movs	r5, #1
    9cde:	401c      	ands	r4, r3
    9ce0:	4643      	mov	r3, r8
    9ce2:	0762      	lsls	r2, r4, #29
    9ce4:	08ff      	lsrs	r7, r7, #3
    9ce6:	0264      	lsls	r4, r4, #9
    9ce8:	0576      	lsls	r6, r6, #21
    9cea:	4317      	orrs	r7, r2
    9cec:	0b24      	lsrs	r4, r4, #12
    9cee:	0d76      	lsrs	r6, r6, #21
    9cf0:	401d      	ands	r5, r3
    9cf2:	2100      	movs	r1, #0
    9cf4:	0324      	lsls	r4, r4, #12
    9cf6:	0b23      	lsrs	r3, r4, #12
    9cf8:	0d0c      	lsrs	r4, r1, #20
    9cfa:	4a7e      	ldr	r2, [pc, #504]	; (9ef4 <__aeabi_dsub+0x34c>)
    9cfc:	0524      	lsls	r4, r4, #20
    9cfe:	431c      	orrs	r4, r3
    9d00:	4014      	ands	r4, r2
    9d02:	0533      	lsls	r3, r6, #20
    9d04:	4323      	orrs	r3, r4
    9d06:	005b      	lsls	r3, r3, #1
    9d08:	07ed      	lsls	r5, r5, #31
    9d0a:	085b      	lsrs	r3, r3, #1
    9d0c:	432b      	orrs	r3, r5
    9d0e:	0038      	movs	r0, r7
    9d10:	0019      	movs	r1, r3
    9d12:	bc1c      	pop	{r2, r3, r4}
    9d14:	4690      	mov	r8, r2
    9d16:	4699      	mov	r9, r3
    9d18:	46a2      	mov	sl, r4
    9d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d1c:	2501      	movs	r5, #1
    9d1e:	4643      	mov	r3, r8
    9d20:	0762      	lsls	r2, r4, #29
    9d22:	08ff      	lsrs	r7, r7, #3
    9d24:	4317      	orrs	r7, r2
    9d26:	08e4      	lsrs	r4, r4, #3
    9d28:	401d      	ands	r5, r3
    9d2a:	4b70      	ldr	r3, [pc, #448]	; (9eec <__aeabi_dsub+0x344>)
    9d2c:	429e      	cmp	r6, r3
    9d2e:	d036      	beq.n	9d9e <__aeabi_dsub+0x1f6>
    9d30:	0324      	lsls	r4, r4, #12
    9d32:	0576      	lsls	r6, r6, #21
    9d34:	0b24      	lsrs	r4, r4, #12
    9d36:	0d76      	lsrs	r6, r6, #21
    9d38:	e7db      	b.n	9cf2 <__aeabi_dsub+0x14a>
    9d3a:	4663      	mov	r3, ip
    9d3c:	1af3      	subs	r3, r6, r3
    9d3e:	2b00      	cmp	r3, #0
    9d40:	dc00      	bgt.n	9d44 <__aeabi_dsub+0x19c>
    9d42:	e094      	b.n	9e6e <__aeabi_dsub+0x2c6>
    9d44:	4660      	mov	r0, ip
    9d46:	2800      	cmp	r0, #0
    9d48:	d035      	beq.n	9db6 <__aeabi_dsub+0x20e>
    9d4a:	4868      	ldr	r0, [pc, #416]	; (9eec <__aeabi_dsub+0x344>)
    9d4c:	4286      	cmp	r6, r0
    9d4e:	d0b1      	beq.n	9cb4 <__aeabi_dsub+0x10c>
    9d50:	2780      	movs	r7, #128	; 0x80
    9d52:	043f      	lsls	r7, r7, #16
    9d54:	4339      	orrs	r1, r7
    9d56:	2b38      	cmp	r3, #56	; 0x38
    9d58:	dc00      	bgt.n	9d5c <__aeabi_dsub+0x1b4>
    9d5a:	e0fd      	b.n	9f58 <__aeabi_dsub+0x3b0>
    9d5c:	430a      	orrs	r2, r1
    9d5e:	0017      	movs	r7, r2
    9d60:	2100      	movs	r1, #0
    9d62:	1e7a      	subs	r2, r7, #1
    9d64:	4197      	sbcs	r7, r2
    9d66:	4457      	add	r7, sl
    9d68:	4557      	cmp	r7, sl
    9d6a:	4180      	sbcs	r0, r0
    9d6c:	1909      	adds	r1, r1, r4
    9d6e:	4244      	negs	r4, r0
    9d70:	190c      	adds	r4, r1, r4
    9d72:	0223      	lsls	r3, r4, #8
    9d74:	d53a      	bpl.n	9dec <__aeabi_dsub+0x244>
    9d76:	4b5d      	ldr	r3, [pc, #372]	; (9eec <__aeabi_dsub+0x344>)
    9d78:	3601      	adds	r6, #1
    9d7a:	429e      	cmp	r6, r3
    9d7c:	d100      	bne.n	9d80 <__aeabi_dsub+0x1d8>
    9d7e:	e14b      	b.n	a018 <__aeabi_dsub+0x470>
    9d80:	2201      	movs	r2, #1
    9d82:	4b5b      	ldr	r3, [pc, #364]	; (9ef0 <__aeabi_dsub+0x348>)
    9d84:	401c      	ands	r4, r3
    9d86:	087b      	lsrs	r3, r7, #1
    9d88:	4017      	ands	r7, r2
    9d8a:	431f      	orrs	r7, r3
    9d8c:	07e2      	lsls	r2, r4, #31
    9d8e:	4317      	orrs	r7, r2
    9d90:	0864      	lsrs	r4, r4, #1
    9d92:	e78f      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9d94:	0008      	movs	r0, r1
    9d96:	4310      	orrs	r0, r2
    9d98:	d000      	beq.n	9d9c <__aeabi_dsub+0x1f4>
    9d9a:	e724      	b.n	9be6 <__aeabi_dsub+0x3e>
    9d9c:	e721      	b.n	9be2 <__aeabi_dsub+0x3a>
    9d9e:	0023      	movs	r3, r4
    9da0:	433b      	orrs	r3, r7
    9da2:	d100      	bne.n	9da6 <__aeabi_dsub+0x1fe>
    9da4:	e1b9      	b.n	a11a <__aeabi_dsub+0x572>
    9da6:	2280      	movs	r2, #128	; 0x80
    9da8:	0312      	lsls	r2, r2, #12
    9daa:	4314      	orrs	r4, r2
    9dac:	0324      	lsls	r4, r4, #12
    9dae:	0b24      	lsrs	r4, r4, #12
    9db0:	e79f      	b.n	9cf2 <__aeabi_dsub+0x14a>
    9db2:	002e      	movs	r6, r5
    9db4:	e77e      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9db6:	0008      	movs	r0, r1
    9db8:	4310      	orrs	r0, r2
    9dba:	d100      	bne.n	9dbe <__aeabi_dsub+0x216>
    9dbc:	e0ca      	b.n	9f54 <__aeabi_dsub+0x3ac>
    9dbe:	1e58      	subs	r0, r3, #1
    9dc0:	4684      	mov	ip, r0
    9dc2:	2800      	cmp	r0, #0
    9dc4:	d000      	beq.n	9dc8 <__aeabi_dsub+0x220>
    9dc6:	e0e7      	b.n	9f98 <__aeabi_dsub+0x3f0>
    9dc8:	4452      	add	r2, sl
    9dca:	4552      	cmp	r2, sl
    9dcc:	4180      	sbcs	r0, r0
    9dce:	1864      	adds	r4, r4, r1
    9dd0:	4240      	negs	r0, r0
    9dd2:	1824      	adds	r4, r4, r0
    9dd4:	0017      	movs	r7, r2
    9dd6:	2601      	movs	r6, #1
    9dd8:	0223      	lsls	r3, r4, #8
    9dda:	d507      	bpl.n	9dec <__aeabi_dsub+0x244>
    9ddc:	2602      	movs	r6, #2
    9dde:	e7cf      	b.n	9d80 <__aeabi_dsub+0x1d8>
    9de0:	4664      	mov	r4, ip
    9de2:	432c      	orrs	r4, r5
    9de4:	d100      	bne.n	9de8 <__aeabi_dsub+0x240>
    9de6:	e1b3      	b.n	a150 <__aeabi_dsub+0x5a8>
    9de8:	002c      	movs	r4, r5
    9dea:	4667      	mov	r7, ip
    9dec:	077b      	lsls	r3, r7, #29
    9dee:	d000      	beq.n	9df2 <__aeabi_dsub+0x24a>
    9df0:	e762      	b.n	9cb8 <__aeabi_dsub+0x110>
    9df2:	0763      	lsls	r3, r4, #29
    9df4:	08ff      	lsrs	r7, r7, #3
    9df6:	431f      	orrs	r7, r3
    9df8:	2501      	movs	r5, #1
    9dfa:	4643      	mov	r3, r8
    9dfc:	08e4      	lsrs	r4, r4, #3
    9dfe:	401d      	ands	r5, r3
    9e00:	e793      	b.n	9d2a <__aeabi_dsub+0x182>
    9e02:	2d00      	cmp	r5, #0
    9e04:	d178      	bne.n	9ef8 <__aeabi_dsub+0x350>
    9e06:	1c75      	adds	r5, r6, #1
    9e08:	056d      	lsls	r5, r5, #21
    9e0a:	0d6d      	lsrs	r5, r5, #21
    9e0c:	2d01      	cmp	r5, #1
    9e0e:	dc00      	bgt.n	9e12 <__aeabi_dsub+0x26a>
    9e10:	e0f2      	b.n	9ff8 <__aeabi_dsub+0x450>
    9e12:	4650      	mov	r0, sl
    9e14:	1a80      	subs	r0, r0, r2
    9e16:	4582      	cmp	sl, r0
    9e18:	41bf      	sbcs	r7, r7
    9e1a:	1a65      	subs	r5, r4, r1
    9e1c:	427f      	negs	r7, r7
    9e1e:	1bed      	subs	r5, r5, r7
    9e20:	4684      	mov	ip, r0
    9e22:	0228      	lsls	r0, r5, #8
    9e24:	d400      	bmi.n	9e28 <__aeabi_dsub+0x280>
    9e26:	e08c      	b.n	9f42 <__aeabi_dsub+0x39a>
    9e28:	4650      	mov	r0, sl
    9e2a:	1a17      	subs	r7, r2, r0
    9e2c:	42ba      	cmp	r2, r7
    9e2e:	4192      	sbcs	r2, r2
    9e30:	1b0c      	subs	r4, r1, r4
    9e32:	4255      	negs	r5, r2
    9e34:	1b65      	subs	r5, r4, r5
    9e36:	4698      	mov	r8, r3
    9e38:	e714      	b.n	9c64 <__aeabi_dsub+0xbc>
    9e3a:	2501      	movs	r5, #1
    9e3c:	4643      	mov	r3, r8
    9e3e:	2400      	movs	r4, #0
    9e40:	401d      	ands	r5, r3
    9e42:	2700      	movs	r7, #0
    9e44:	e755      	b.n	9cf2 <__aeabi_dsub+0x14a>
    9e46:	4c2a      	ldr	r4, [pc, #168]	; (9ef0 <__aeabi_dsub+0x348>)
    9e48:	1af6      	subs	r6, r6, r3
    9e4a:	402c      	ands	r4, r5
    9e4c:	e732      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9e4e:	003d      	movs	r5, r7
    9e50:	3828      	subs	r0, #40	; 0x28
    9e52:	4085      	lsls	r5, r0
    9e54:	2700      	movs	r7, #0
    9e56:	e717      	b.n	9c88 <__aeabi_dsub+0xe0>
    9e58:	0038      	movs	r0, r7
    9e5a:	f7fe f859 	bl	7f10 <__clzsi2>
    9e5e:	3020      	adds	r0, #32
    9e60:	e706      	b.n	9c70 <__aeabi_dsub+0xc8>
    9e62:	430a      	orrs	r2, r1
    9e64:	0017      	movs	r7, r2
    9e66:	2100      	movs	r1, #0
    9e68:	1e7a      	subs	r2, r7, #1
    9e6a:	4197      	sbcs	r7, r2
    9e6c:	e6ee      	b.n	9c4c <__aeabi_dsub+0xa4>
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d000      	beq.n	9e74 <__aeabi_dsub+0x2cc>
    9e72:	e0e5      	b.n	a040 <__aeabi_dsub+0x498>
    9e74:	1c73      	adds	r3, r6, #1
    9e76:	469c      	mov	ip, r3
    9e78:	055b      	lsls	r3, r3, #21
    9e7a:	0d5b      	lsrs	r3, r3, #21
    9e7c:	2b01      	cmp	r3, #1
    9e7e:	dc00      	bgt.n	9e82 <__aeabi_dsub+0x2da>
    9e80:	e09f      	b.n	9fc2 <__aeabi_dsub+0x41a>
    9e82:	4b1a      	ldr	r3, [pc, #104]	; (9eec <__aeabi_dsub+0x344>)
    9e84:	459c      	cmp	ip, r3
    9e86:	d100      	bne.n	9e8a <__aeabi_dsub+0x2e2>
    9e88:	e0c5      	b.n	a016 <__aeabi_dsub+0x46e>
    9e8a:	4452      	add	r2, sl
    9e8c:	4552      	cmp	r2, sl
    9e8e:	4180      	sbcs	r0, r0
    9e90:	1864      	adds	r4, r4, r1
    9e92:	4240      	negs	r0, r0
    9e94:	1824      	adds	r4, r4, r0
    9e96:	07e7      	lsls	r7, r4, #31
    9e98:	0852      	lsrs	r2, r2, #1
    9e9a:	4317      	orrs	r7, r2
    9e9c:	0864      	lsrs	r4, r4, #1
    9e9e:	4666      	mov	r6, ip
    9ea0:	e708      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9ea2:	4812      	ldr	r0, [pc, #72]	; (9eec <__aeabi_dsub+0x344>)
    9ea4:	4285      	cmp	r5, r0
    9ea6:	d100      	bne.n	9eaa <__aeabi_dsub+0x302>
    9ea8:	e085      	b.n	9fb6 <__aeabi_dsub+0x40e>
    9eaa:	001d      	movs	r5, r3
    9eac:	e6bc      	b.n	9c28 <__aeabi_dsub+0x80>
    9eae:	0029      	movs	r1, r5
    9eb0:	3e1f      	subs	r6, #31
    9eb2:	40f1      	lsrs	r1, r6
    9eb4:	2b20      	cmp	r3, #32
    9eb6:	d100      	bne.n	9eba <__aeabi_dsub+0x312>
    9eb8:	e07f      	b.n	9fba <__aeabi_dsub+0x412>
    9eba:	2240      	movs	r2, #64	; 0x40
    9ebc:	1ad3      	subs	r3, r2, r3
    9ebe:	409d      	lsls	r5, r3
    9ec0:	432f      	orrs	r7, r5
    9ec2:	1e7d      	subs	r5, r7, #1
    9ec4:	41af      	sbcs	r7, r5
    9ec6:	2400      	movs	r4, #0
    9ec8:	430f      	orrs	r7, r1
    9eca:	2600      	movs	r6, #0
    9ecc:	e78e      	b.n	9dec <__aeabi_dsub+0x244>
    9ece:	002b      	movs	r3, r5
    9ed0:	000f      	movs	r7, r1
    9ed2:	3b20      	subs	r3, #32
    9ed4:	40df      	lsrs	r7, r3
    9ed6:	2d20      	cmp	r5, #32
    9ed8:	d071      	beq.n	9fbe <__aeabi_dsub+0x416>
    9eda:	2340      	movs	r3, #64	; 0x40
    9edc:	1b5d      	subs	r5, r3, r5
    9ede:	40a9      	lsls	r1, r5
    9ee0:	430a      	orrs	r2, r1
    9ee2:	1e51      	subs	r1, r2, #1
    9ee4:	418a      	sbcs	r2, r1
    9ee6:	2100      	movs	r1, #0
    9ee8:	4317      	orrs	r7, r2
    9eea:	e6af      	b.n	9c4c <__aeabi_dsub+0xa4>
    9eec:	000007ff 	.word	0x000007ff
    9ef0:	ff7fffff 	.word	0xff7fffff
    9ef4:	800fffff 	.word	0x800fffff
    9ef8:	2e00      	cmp	r6, #0
    9efa:	d03e      	beq.n	9f7a <__aeabi_dsub+0x3d2>
    9efc:	4eb3      	ldr	r6, [pc, #716]	; (a1cc <__aeabi_dsub+0x624>)
    9efe:	45b4      	cmp	ip, r6
    9f00:	d045      	beq.n	9f8e <__aeabi_dsub+0x3e6>
    9f02:	2680      	movs	r6, #128	; 0x80
    9f04:	0436      	lsls	r6, r6, #16
    9f06:	426d      	negs	r5, r5
    9f08:	4334      	orrs	r4, r6
    9f0a:	2d38      	cmp	r5, #56	; 0x38
    9f0c:	dd00      	ble.n	9f10 <__aeabi_dsub+0x368>
    9f0e:	e0a8      	b.n	a062 <__aeabi_dsub+0x4ba>
    9f10:	2d1f      	cmp	r5, #31
    9f12:	dd00      	ble.n	9f16 <__aeabi_dsub+0x36e>
    9f14:	e11f      	b.n	a156 <__aeabi_dsub+0x5ae>
    9f16:	2620      	movs	r6, #32
    9f18:	0027      	movs	r7, r4
    9f1a:	4650      	mov	r0, sl
    9f1c:	1b76      	subs	r6, r6, r5
    9f1e:	40b7      	lsls	r7, r6
    9f20:	40e8      	lsrs	r0, r5
    9f22:	4307      	orrs	r7, r0
    9f24:	4650      	mov	r0, sl
    9f26:	40b0      	lsls	r0, r6
    9f28:	1e46      	subs	r6, r0, #1
    9f2a:	41b0      	sbcs	r0, r6
    9f2c:	40ec      	lsrs	r4, r5
    9f2e:	4338      	orrs	r0, r7
    9f30:	1a17      	subs	r7, r2, r0
    9f32:	42ba      	cmp	r2, r7
    9f34:	4192      	sbcs	r2, r2
    9f36:	1b0c      	subs	r4, r1, r4
    9f38:	4252      	negs	r2, r2
    9f3a:	1aa4      	subs	r4, r4, r2
    9f3c:	4666      	mov	r6, ip
    9f3e:	4698      	mov	r8, r3
    9f40:	e68b      	b.n	9c5a <__aeabi_dsub+0xb2>
    9f42:	4664      	mov	r4, ip
    9f44:	4667      	mov	r7, ip
    9f46:	432c      	orrs	r4, r5
    9f48:	d000      	beq.n	9f4c <__aeabi_dsub+0x3a4>
    9f4a:	e68b      	b.n	9c64 <__aeabi_dsub+0xbc>
    9f4c:	2500      	movs	r5, #0
    9f4e:	2600      	movs	r6, #0
    9f50:	2700      	movs	r7, #0
    9f52:	e6ea      	b.n	9d2a <__aeabi_dsub+0x182>
    9f54:	001e      	movs	r6, r3
    9f56:	e6ad      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9f58:	2b1f      	cmp	r3, #31
    9f5a:	dc60      	bgt.n	a01e <__aeabi_dsub+0x476>
    9f5c:	2720      	movs	r7, #32
    9f5e:	1af8      	subs	r0, r7, r3
    9f60:	000f      	movs	r7, r1
    9f62:	4684      	mov	ip, r0
    9f64:	4087      	lsls	r7, r0
    9f66:	0010      	movs	r0, r2
    9f68:	40d8      	lsrs	r0, r3
    9f6a:	4307      	orrs	r7, r0
    9f6c:	4660      	mov	r0, ip
    9f6e:	4082      	lsls	r2, r0
    9f70:	1e50      	subs	r0, r2, #1
    9f72:	4182      	sbcs	r2, r0
    9f74:	40d9      	lsrs	r1, r3
    9f76:	4317      	orrs	r7, r2
    9f78:	e6f5      	b.n	9d66 <__aeabi_dsub+0x1be>
    9f7a:	0026      	movs	r6, r4
    9f7c:	4650      	mov	r0, sl
    9f7e:	4306      	orrs	r6, r0
    9f80:	d005      	beq.n	9f8e <__aeabi_dsub+0x3e6>
    9f82:	43ed      	mvns	r5, r5
    9f84:	2d00      	cmp	r5, #0
    9f86:	d0d3      	beq.n	9f30 <__aeabi_dsub+0x388>
    9f88:	4e90      	ldr	r6, [pc, #576]	; (a1cc <__aeabi_dsub+0x624>)
    9f8a:	45b4      	cmp	ip, r6
    9f8c:	d1bd      	bne.n	9f0a <__aeabi_dsub+0x362>
    9f8e:	000c      	movs	r4, r1
    9f90:	0017      	movs	r7, r2
    9f92:	4666      	mov	r6, ip
    9f94:	4698      	mov	r8, r3
    9f96:	e68d      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9f98:	488c      	ldr	r0, [pc, #560]	; (a1cc <__aeabi_dsub+0x624>)
    9f9a:	4283      	cmp	r3, r0
    9f9c:	d00b      	beq.n	9fb6 <__aeabi_dsub+0x40e>
    9f9e:	4663      	mov	r3, ip
    9fa0:	e6d9      	b.n	9d56 <__aeabi_dsub+0x1ae>
    9fa2:	2d00      	cmp	r5, #0
    9fa4:	d000      	beq.n	9fa8 <__aeabi_dsub+0x400>
    9fa6:	e096      	b.n	a0d6 <__aeabi_dsub+0x52e>
    9fa8:	0008      	movs	r0, r1
    9faa:	4310      	orrs	r0, r2
    9fac:	d100      	bne.n	9fb0 <__aeabi_dsub+0x408>
    9fae:	e0e2      	b.n	a176 <__aeabi_dsub+0x5ce>
    9fb0:	000c      	movs	r4, r1
    9fb2:	0017      	movs	r7, r2
    9fb4:	4698      	mov	r8, r3
    9fb6:	4e85      	ldr	r6, [pc, #532]	; (a1cc <__aeabi_dsub+0x624>)
    9fb8:	e67c      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9fba:	2500      	movs	r5, #0
    9fbc:	e780      	b.n	9ec0 <__aeabi_dsub+0x318>
    9fbe:	2100      	movs	r1, #0
    9fc0:	e78e      	b.n	9ee0 <__aeabi_dsub+0x338>
    9fc2:	0023      	movs	r3, r4
    9fc4:	4650      	mov	r0, sl
    9fc6:	4303      	orrs	r3, r0
    9fc8:	2e00      	cmp	r6, #0
    9fca:	d000      	beq.n	9fce <__aeabi_dsub+0x426>
    9fcc:	e0a8      	b.n	a120 <__aeabi_dsub+0x578>
    9fce:	2b00      	cmp	r3, #0
    9fd0:	d100      	bne.n	9fd4 <__aeabi_dsub+0x42c>
    9fd2:	e0de      	b.n	a192 <__aeabi_dsub+0x5ea>
    9fd4:	000b      	movs	r3, r1
    9fd6:	4313      	orrs	r3, r2
    9fd8:	d100      	bne.n	9fdc <__aeabi_dsub+0x434>
    9fda:	e66b      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9fdc:	4452      	add	r2, sl
    9fde:	4552      	cmp	r2, sl
    9fe0:	4180      	sbcs	r0, r0
    9fe2:	1864      	adds	r4, r4, r1
    9fe4:	4240      	negs	r0, r0
    9fe6:	1824      	adds	r4, r4, r0
    9fe8:	0017      	movs	r7, r2
    9fea:	0223      	lsls	r3, r4, #8
    9fec:	d400      	bmi.n	9ff0 <__aeabi_dsub+0x448>
    9fee:	e6fd      	b.n	9dec <__aeabi_dsub+0x244>
    9ff0:	4b77      	ldr	r3, [pc, #476]	; (a1d0 <__aeabi_dsub+0x628>)
    9ff2:	4666      	mov	r6, ip
    9ff4:	401c      	ands	r4, r3
    9ff6:	e65d      	b.n	9cb4 <__aeabi_dsub+0x10c>
    9ff8:	0025      	movs	r5, r4
    9ffa:	4650      	mov	r0, sl
    9ffc:	4305      	orrs	r5, r0
    9ffe:	2e00      	cmp	r6, #0
    a000:	d1cf      	bne.n	9fa2 <__aeabi_dsub+0x3fa>
    a002:	2d00      	cmp	r5, #0
    a004:	d14f      	bne.n	a0a6 <__aeabi_dsub+0x4fe>
    a006:	000c      	movs	r4, r1
    a008:	4314      	orrs	r4, r2
    a00a:	d100      	bne.n	a00e <__aeabi_dsub+0x466>
    a00c:	e0a0      	b.n	a150 <__aeabi_dsub+0x5a8>
    a00e:	000c      	movs	r4, r1
    a010:	0017      	movs	r7, r2
    a012:	4698      	mov	r8, r3
    a014:	e64e      	b.n	9cb4 <__aeabi_dsub+0x10c>
    a016:	4666      	mov	r6, ip
    a018:	2400      	movs	r4, #0
    a01a:	2700      	movs	r7, #0
    a01c:	e685      	b.n	9d2a <__aeabi_dsub+0x182>
    a01e:	001f      	movs	r7, r3
    a020:	0008      	movs	r0, r1
    a022:	3f20      	subs	r7, #32
    a024:	40f8      	lsrs	r0, r7
    a026:	0007      	movs	r7, r0
    a028:	2b20      	cmp	r3, #32
    a02a:	d100      	bne.n	a02e <__aeabi_dsub+0x486>
    a02c:	e08e      	b.n	a14c <__aeabi_dsub+0x5a4>
    a02e:	2040      	movs	r0, #64	; 0x40
    a030:	1ac3      	subs	r3, r0, r3
    a032:	4099      	lsls	r1, r3
    a034:	430a      	orrs	r2, r1
    a036:	1e51      	subs	r1, r2, #1
    a038:	418a      	sbcs	r2, r1
    a03a:	2100      	movs	r1, #0
    a03c:	4317      	orrs	r7, r2
    a03e:	e692      	b.n	9d66 <__aeabi_dsub+0x1be>
    a040:	2e00      	cmp	r6, #0
    a042:	d114      	bne.n	a06e <__aeabi_dsub+0x4c6>
    a044:	0026      	movs	r6, r4
    a046:	4650      	mov	r0, sl
    a048:	4306      	orrs	r6, r0
    a04a:	d062      	beq.n	a112 <__aeabi_dsub+0x56a>
    a04c:	43db      	mvns	r3, r3
    a04e:	2b00      	cmp	r3, #0
    a050:	d15c      	bne.n	a10c <__aeabi_dsub+0x564>
    a052:	1887      	adds	r7, r0, r2
    a054:	4297      	cmp	r7, r2
    a056:	4192      	sbcs	r2, r2
    a058:	1864      	adds	r4, r4, r1
    a05a:	4252      	negs	r2, r2
    a05c:	18a4      	adds	r4, r4, r2
    a05e:	4666      	mov	r6, ip
    a060:	e687      	b.n	9d72 <__aeabi_dsub+0x1ca>
    a062:	4650      	mov	r0, sl
    a064:	4320      	orrs	r0, r4
    a066:	1e44      	subs	r4, r0, #1
    a068:	41a0      	sbcs	r0, r4
    a06a:	2400      	movs	r4, #0
    a06c:	e760      	b.n	9f30 <__aeabi_dsub+0x388>
    a06e:	4e57      	ldr	r6, [pc, #348]	; (a1cc <__aeabi_dsub+0x624>)
    a070:	45b4      	cmp	ip, r6
    a072:	d04e      	beq.n	a112 <__aeabi_dsub+0x56a>
    a074:	2680      	movs	r6, #128	; 0x80
    a076:	0436      	lsls	r6, r6, #16
    a078:	425b      	negs	r3, r3
    a07a:	4334      	orrs	r4, r6
    a07c:	2b38      	cmp	r3, #56	; 0x38
    a07e:	dd00      	ble.n	a082 <__aeabi_dsub+0x4da>
    a080:	e07f      	b.n	a182 <__aeabi_dsub+0x5da>
    a082:	2b1f      	cmp	r3, #31
    a084:	dd00      	ble.n	a088 <__aeabi_dsub+0x4e0>
    a086:	e08b      	b.n	a1a0 <__aeabi_dsub+0x5f8>
    a088:	2620      	movs	r6, #32
    a08a:	0027      	movs	r7, r4
    a08c:	4650      	mov	r0, sl
    a08e:	1af6      	subs	r6, r6, r3
    a090:	40b7      	lsls	r7, r6
    a092:	40d8      	lsrs	r0, r3
    a094:	4307      	orrs	r7, r0
    a096:	4650      	mov	r0, sl
    a098:	40b0      	lsls	r0, r6
    a09a:	1e46      	subs	r6, r0, #1
    a09c:	41b0      	sbcs	r0, r6
    a09e:	4307      	orrs	r7, r0
    a0a0:	40dc      	lsrs	r4, r3
    a0a2:	18bf      	adds	r7, r7, r2
    a0a4:	e7d6      	b.n	a054 <__aeabi_dsub+0x4ac>
    a0a6:	000d      	movs	r5, r1
    a0a8:	4315      	orrs	r5, r2
    a0aa:	d100      	bne.n	a0ae <__aeabi_dsub+0x506>
    a0ac:	e602      	b.n	9cb4 <__aeabi_dsub+0x10c>
    a0ae:	4650      	mov	r0, sl
    a0b0:	1a80      	subs	r0, r0, r2
    a0b2:	4582      	cmp	sl, r0
    a0b4:	41bf      	sbcs	r7, r7
    a0b6:	1a65      	subs	r5, r4, r1
    a0b8:	427f      	negs	r7, r7
    a0ba:	1bed      	subs	r5, r5, r7
    a0bc:	4684      	mov	ip, r0
    a0be:	0228      	lsls	r0, r5, #8
    a0c0:	d400      	bmi.n	a0c4 <__aeabi_dsub+0x51c>
    a0c2:	e68d      	b.n	9de0 <__aeabi_dsub+0x238>
    a0c4:	4650      	mov	r0, sl
    a0c6:	1a17      	subs	r7, r2, r0
    a0c8:	42ba      	cmp	r2, r7
    a0ca:	4192      	sbcs	r2, r2
    a0cc:	1b0c      	subs	r4, r1, r4
    a0ce:	4252      	negs	r2, r2
    a0d0:	1aa4      	subs	r4, r4, r2
    a0d2:	4698      	mov	r8, r3
    a0d4:	e5ee      	b.n	9cb4 <__aeabi_dsub+0x10c>
    a0d6:	000d      	movs	r5, r1
    a0d8:	4315      	orrs	r5, r2
    a0da:	d100      	bne.n	a0de <__aeabi_dsub+0x536>
    a0dc:	e76b      	b.n	9fb6 <__aeabi_dsub+0x40e>
    a0de:	4650      	mov	r0, sl
    a0e0:	0767      	lsls	r7, r4, #29
    a0e2:	08c0      	lsrs	r0, r0, #3
    a0e4:	4307      	orrs	r7, r0
    a0e6:	2080      	movs	r0, #128	; 0x80
    a0e8:	08e4      	lsrs	r4, r4, #3
    a0ea:	0300      	lsls	r0, r0, #12
    a0ec:	4204      	tst	r4, r0
    a0ee:	d007      	beq.n	a100 <__aeabi_dsub+0x558>
    a0f0:	08cd      	lsrs	r5, r1, #3
    a0f2:	4205      	tst	r5, r0
    a0f4:	d104      	bne.n	a100 <__aeabi_dsub+0x558>
    a0f6:	002c      	movs	r4, r5
    a0f8:	4698      	mov	r8, r3
    a0fa:	08d7      	lsrs	r7, r2, #3
    a0fc:	0749      	lsls	r1, r1, #29
    a0fe:	430f      	orrs	r7, r1
    a100:	0f7b      	lsrs	r3, r7, #29
    a102:	00e4      	lsls	r4, r4, #3
    a104:	431c      	orrs	r4, r3
    a106:	00ff      	lsls	r7, r7, #3
    a108:	4e30      	ldr	r6, [pc, #192]	; (a1cc <__aeabi_dsub+0x624>)
    a10a:	e5d3      	b.n	9cb4 <__aeabi_dsub+0x10c>
    a10c:	4e2f      	ldr	r6, [pc, #188]	; (a1cc <__aeabi_dsub+0x624>)
    a10e:	45b4      	cmp	ip, r6
    a110:	d1b4      	bne.n	a07c <__aeabi_dsub+0x4d4>
    a112:	000c      	movs	r4, r1
    a114:	0017      	movs	r7, r2
    a116:	4666      	mov	r6, ip
    a118:	e5cc      	b.n	9cb4 <__aeabi_dsub+0x10c>
    a11a:	2700      	movs	r7, #0
    a11c:	2400      	movs	r4, #0
    a11e:	e5e8      	b.n	9cf2 <__aeabi_dsub+0x14a>
    a120:	2b00      	cmp	r3, #0
    a122:	d039      	beq.n	a198 <__aeabi_dsub+0x5f0>
    a124:	000b      	movs	r3, r1
    a126:	4313      	orrs	r3, r2
    a128:	d100      	bne.n	a12c <__aeabi_dsub+0x584>
    a12a:	e744      	b.n	9fb6 <__aeabi_dsub+0x40e>
    a12c:	08c0      	lsrs	r0, r0, #3
    a12e:	0767      	lsls	r7, r4, #29
    a130:	4307      	orrs	r7, r0
    a132:	2080      	movs	r0, #128	; 0x80
    a134:	08e4      	lsrs	r4, r4, #3
    a136:	0300      	lsls	r0, r0, #12
    a138:	4204      	tst	r4, r0
    a13a:	d0e1      	beq.n	a100 <__aeabi_dsub+0x558>
    a13c:	08cb      	lsrs	r3, r1, #3
    a13e:	4203      	tst	r3, r0
    a140:	d1de      	bne.n	a100 <__aeabi_dsub+0x558>
    a142:	08d7      	lsrs	r7, r2, #3
    a144:	0749      	lsls	r1, r1, #29
    a146:	430f      	orrs	r7, r1
    a148:	001c      	movs	r4, r3
    a14a:	e7d9      	b.n	a100 <__aeabi_dsub+0x558>
    a14c:	2100      	movs	r1, #0
    a14e:	e771      	b.n	a034 <__aeabi_dsub+0x48c>
    a150:	2500      	movs	r5, #0
    a152:	2700      	movs	r7, #0
    a154:	e5e9      	b.n	9d2a <__aeabi_dsub+0x182>
    a156:	002e      	movs	r6, r5
    a158:	0027      	movs	r7, r4
    a15a:	3e20      	subs	r6, #32
    a15c:	40f7      	lsrs	r7, r6
    a15e:	2d20      	cmp	r5, #32
    a160:	d02f      	beq.n	a1c2 <__aeabi_dsub+0x61a>
    a162:	2640      	movs	r6, #64	; 0x40
    a164:	1b75      	subs	r5, r6, r5
    a166:	40ac      	lsls	r4, r5
    a168:	4650      	mov	r0, sl
    a16a:	4320      	orrs	r0, r4
    a16c:	1e44      	subs	r4, r0, #1
    a16e:	41a0      	sbcs	r0, r4
    a170:	2400      	movs	r4, #0
    a172:	4338      	orrs	r0, r7
    a174:	e6dc      	b.n	9f30 <__aeabi_dsub+0x388>
    a176:	2480      	movs	r4, #128	; 0x80
    a178:	2500      	movs	r5, #0
    a17a:	0324      	lsls	r4, r4, #12
    a17c:	4e13      	ldr	r6, [pc, #76]	; (a1cc <__aeabi_dsub+0x624>)
    a17e:	2700      	movs	r7, #0
    a180:	e5d3      	b.n	9d2a <__aeabi_dsub+0x182>
    a182:	4650      	mov	r0, sl
    a184:	4320      	orrs	r0, r4
    a186:	0007      	movs	r7, r0
    a188:	1e78      	subs	r0, r7, #1
    a18a:	4187      	sbcs	r7, r0
    a18c:	2400      	movs	r4, #0
    a18e:	18bf      	adds	r7, r7, r2
    a190:	e760      	b.n	a054 <__aeabi_dsub+0x4ac>
    a192:	000c      	movs	r4, r1
    a194:	0017      	movs	r7, r2
    a196:	e58d      	b.n	9cb4 <__aeabi_dsub+0x10c>
    a198:	000c      	movs	r4, r1
    a19a:	0017      	movs	r7, r2
    a19c:	4e0b      	ldr	r6, [pc, #44]	; (a1cc <__aeabi_dsub+0x624>)
    a19e:	e589      	b.n	9cb4 <__aeabi_dsub+0x10c>
    a1a0:	001e      	movs	r6, r3
    a1a2:	0027      	movs	r7, r4
    a1a4:	3e20      	subs	r6, #32
    a1a6:	40f7      	lsrs	r7, r6
    a1a8:	2b20      	cmp	r3, #32
    a1aa:	d00c      	beq.n	a1c6 <__aeabi_dsub+0x61e>
    a1ac:	2640      	movs	r6, #64	; 0x40
    a1ae:	1af3      	subs	r3, r6, r3
    a1b0:	409c      	lsls	r4, r3
    a1b2:	4650      	mov	r0, sl
    a1b4:	4320      	orrs	r0, r4
    a1b6:	1e44      	subs	r4, r0, #1
    a1b8:	41a0      	sbcs	r0, r4
    a1ba:	4307      	orrs	r7, r0
    a1bc:	2400      	movs	r4, #0
    a1be:	18bf      	adds	r7, r7, r2
    a1c0:	e748      	b.n	a054 <__aeabi_dsub+0x4ac>
    a1c2:	2400      	movs	r4, #0
    a1c4:	e7d0      	b.n	a168 <__aeabi_dsub+0x5c0>
    a1c6:	2400      	movs	r4, #0
    a1c8:	e7f3      	b.n	a1b2 <__aeabi_dsub+0x60a>
    a1ca:	46c0      	nop			; (mov r8, r8)
    a1cc:	000007ff 	.word	0x000007ff
    a1d0:	ff7fffff 	.word	0xff7fffff

0000a1d4 <__aeabi_dcmpun>:
    a1d4:	b570      	push	{r4, r5, r6, lr}
    a1d6:	4e0e      	ldr	r6, [pc, #56]	; (a210 <__aeabi_dcmpun+0x3c>)
    a1d8:	030d      	lsls	r5, r1, #12
    a1da:	031c      	lsls	r4, r3, #12
    a1dc:	0049      	lsls	r1, r1, #1
    a1de:	005b      	lsls	r3, r3, #1
    a1e0:	0b2d      	lsrs	r5, r5, #12
    a1e2:	0d49      	lsrs	r1, r1, #21
    a1e4:	0b24      	lsrs	r4, r4, #12
    a1e6:	0d5b      	lsrs	r3, r3, #21
    a1e8:	42b1      	cmp	r1, r6
    a1ea:	d004      	beq.n	a1f6 <__aeabi_dcmpun+0x22>
    a1ec:	4908      	ldr	r1, [pc, #32]	; (a210 <__aeabi_dcmpun+0x3c>)
    a1ee:	2000      	movs	r0, #0
    a1f0:	428b      	cmp	r3, r1
    a1f2:	d008      	beq.n	a206 <__aeabi_dcmpun+0x32>
    a1f4:	bd70      	pop	{r4, r5, r6, pc}
    a1f6:	4305      	orrs	r5, r0
    a1f8:	2001      	movs	r0, #1
    a1fa:	2d00      	cmp	r5, #0
    a1fc:	d1fa      	bne.n	a1f4 <__aeabi_dcmpun+0x20>
    a1fe:	4904      	ldr	r1, [pc, #16]	; (a210 <__aeabi_dcmpun+0x3c>)
    a200:	2000      	movs	r0, #0
    a202:	428b      	cmp	r3, r1
    a204:	d1f6      	bne.n	a1f4 <__aeabi_dcmpun+0x20>
    a206:	4314      	orrs	r4, r2
    a208:	0020      	movs	r0, r4
    a20a:	1e44      	subs	r4, r0, #1
    a20c:	41a0      	sbcs	r0, r4
    a20e:	e7f1      	b.n	a1f4 <__aeabi_dcmpun+0x20>
    a210:	000007ff 	.word	0x000007ff

0000a214 <__aeabi_d2iz>:
    a214:	b530      	push	{r4, r5, lr}
    a216:	4d13      	ldr	r5, [pc, #76]	; (a264 <__aeabi_d2iz+0x50>)
    a218:	030a      	lsls	r2, r1, #12
    a21a:	004b      	lsls	r3, r1, #1
    a21c:	0b12      	lsrs	r2, r2, #12
    a21e:	0d5b      	lsrs	r3, r3, #21
    a220:	0fc9      	lsrs	r1, r1, #31
    a222:	2400      	movs	r4, #0
    a224:	42ab      	cmp	r3, r5
    a226:	dd10      	ble.n	a24a <__aeabi_d2iz+0x36>
    a228:	4c0f      	ldr	r4, [pc, #60]	; (a268 <__aeabi_d2iz+0x54>)
    a22a:	42a3      	cmp	r3, r4
    a22c:	dc0f      	bgt.n	a24e <__aeabi_d2iz+0x3a>
    a22e:	2480      	movs	r4, #128	; 0x80
    a230:	4d0e      	ldr	r5, [pc, #56]	; (a26c <__aeabi_d2iz+0x58>)
    a232:	0364      	lsls	r4, r4, #13
    a234:	4322      	orrs	r2, r4
    a236:	1aed      	subs	r5, r5, r3
    a238:	2d1f      	cmp	r5, #31
    a23a:	dd0b      	ble.n	a254 <__aeabi_d2iz+0x40>
    a23c:	480c      	ldr	r0, [pc, #48]	; (a270 <__aeabi_d2iz+0x5c>)
    a23e:	1ac3      	subs	r3, r0, r3
    a240:	40da      	lsrs	r2, r3
    a242:	4254      	negs	r4, r2
    a244:	2900      	cmp	r1, #0
    a246:	d100      	bne.n	a24a <__aeabi_d2iz+0x36>
    a248:	0014      	movs	r4, r2
    a24a:	0020      	movs	r0, r4
    a24c:	bd30      	pop	{r4, r5, pc}
    a24e:	4b09      	ldr	r3, [pc, #36]	; (a274 <__aeabi_d2iz+0x60>)
    a250:	18cc      	adds	r4, r1, r3
    a252:	e7fa      	b.n	a24a <__aeabi_d2iz+0x36>
    a254:	4c08      	ldr	r4, [pc, #32]	; (a278 <__aeabi_d2iz+0x64>)
    a256:	40e8      	lsrs	r0, r5
    a258:	46a4      	mov	ip, r4
    a25a:	4463      	add	r3, ip
    a25c:	409a      	lsls	r2, r3
    a25e:	4302      	orrs	r2, r0
    a260:	e7ef      	b.n	a242 <__aeabi_d2iz+0x2e>
    a262:	46c0      	nop			; (mov r8, r8)
    a264:	000003fe 	.word	0x000003fe
    a268:	0000041d 	.word	0x0000041d
    a26c:	00000433 	.word	0x00000433
    a270:	00000413 	.word	0x00000413
    a274:	7fffffff 	.word	0x7fffffff
    a278:	fffffbed 	.word	0xfffffbed

0000a27c <__aeabi_i2d>:
    a27c:	b570      	push	{r4, r5, r6, lr}
    a27e:	2800      	cmp	r0, #0
    a280:	d030      	beq.n	a2e4 <__aeabi_i2d+0x68>
    a282:	17c3      	asrs	r3, r0, #31
    a284:	18c4      	adds	r4, r0, r3
    a286:	405c      	eors	r4, r3
    a288:	0fc5      	lsrs	r5, r0, #31
    a28a:	0020      	movs	r0, r4
    a28c:	f7fd fe40 	bl	7f10 <__clzsi2>
    a290:	4b17      	ldr	r3, [pc, #92]	; (a2f0 <__aeabi_i2d+0x74>)
    a292:	4a18      	ldr	r2, [pc, #96]	; (a2f4 <__aeabi_i2d+0x78>)
    a294:	1a1b      	subs	r3, r3, r0
    a296:	1ad2      	subs	r2, r2, r3
    a298:	2a1f      	cmp	r2, #31
    a29a:	dd18      	ble.n	a2ce <__aeabi_i2d+0x52>
    a29c:	4a16      	ldr	r2, [pc, #88]	; (a2f8 <__aeabi_i2d+0x7c>)
    a29e:	1ad2      	subs	r2, r2, r3
    a2a0:	4094      	lsls	r4, r2
    a2a2:	2200      	movs	r2, #0
    a2a4:	0324      	lsls	r4, r4, #12
    a2a6:	055b      	lsls	r3, r3, #21
    a2a8:	0b24      	lsrs	r4, r4, #12
    a2aa:	0d5b      	lsrs	r3, r3, #21
    a2ac:	2100      	movs	r1, #0
    a2ae:	0010      	movs	r0, r2
    a2b0:	0324      	lsls	r4, r4, #12
    a2b2:	0d0a      	lsrs	r2, r1, #20
    a2b4:	0b24      	lsrs	r4, r4, #12
    a2b6:	0512      	lsls	r2, r2, #20
    a2b8:	4322      	orrs	r2, r4
    a2ba:	4c10      	ldr	r4, [pc, #64]	; (a2fc <__aeabi_i2d+0x80>)
    a2bc:	051b      	lsls	r3, r3, #20
    a2be:	4022      	ands	r2, r4
    a2c0:	4313      	orrs	r3, r2
    a2c2:	005b      	lsls	r3, r3, #1
    a2c4:	07ed      	lsls	r5, r5, #31
    a2c6:	085b      	lsrs	r3, r3, #1
    a2c8:	432b      	orrs	r3, r5
    a2ca:	0019      	movs	r1, r3
    a2cc:	bd70      	pop	{r4, r5, r6, pc}
    a2ce:	0021      	movs	r1, r4
    a2d0:	4091      	lsls	r1, r2
    a2d2:	000a      	movs	r2, r1
    a2d4:	210b      	movs	r1, #11
    a2d6:	1a08      	subs	r0, r1, r0
    a2d8:	40c4      	lsrs	r4, r0
    a2da:	055b      	lsls	r3, r3, #21
    a2dc:	0324      	lsls	r4, r4, #12
    a2de:	0b24      	lsrs	r4, r4, #12
    a2e0:	0d5b      	lsrs	r3, r3, #21
    a2e2:	e7e3      	b.n	a2ac <__aeabi_i2d+0x30>
    a2e4:	2500      	movs	r5, #0
    a2e6:	2300      	movs	r3, #0
    a2e8:	2400      	movs	r4, #0
    a2ea:	2200      	movs	r2, #0
    a2ec:	e7de      	b.n	a2ac <__aeabi_i2d+0x30>
    a2ee:	46c0      	nop			; (mov r8, r8)
    a2f0:	0000041e 	.word	0x0000041e
    a2f4:	00000433 	.word	0x00000433
    a2f8:	00000413 	.word	0x00000413
    a2fc:	800fffff 	.word	0x800fffff

0000a300 <__aeabi_ui2d>:
    a300:	b510      	push	{r4, lr}
    a302:	1e04      	subs	r4, r0, #0
    a304:	d028      	beq.n	a358 <__aeabi_ui2d+0x58>
    a306:	f7fd fe03 	bl	7f10 <__clzsi2>
    a30a:	4b15      	ldr	r3, [pc, #84]	; (a360 <__aeabi_ui2d+0x60>)
    a30c:	4a15      	ldr	r2, [pc, #84]	; (a364 <__aeabi_ui2d+0x64>)
    a30e:	1a1b      	subs	r3, r3, r0
    a310:	1ad2      	subs	r2, r2, r3
    a312:	2a1f      	cmp	r2, #31
    a314:	dd15      	ble.n	a342 <__aeabi_ui2d+0x42>
    a316:	4a14      	ldr	r2, [pc, #80]	; (a368 <__aeabi_ui2d+0x68>)
    a318:	1ad2      	subs	r2, r2, r3
    a31a:	4094      	lsls	r4, r2
    a31c:	2200      	movs	r2, #0
    a31e:	0324      	lsls	r4, r4, #12
    a320:	055b      	lsls	r3, r3, #21
    a322:	0b24      	lsrs	r4, r4, #12
    a324:	0d5b      	lsrs	r3, r3, #21
    a326:	2100      	movs	r1, #0
    a328:	0010      	movs	r0, r2
    a32a:	0324      	lsls	r4, r4, #12
    a32c:	0d0a      	lsrs	r2, r1, #20
    a32e:	0b24      	lsrs	r4, r4, #12
    a330:	0512      	lsls	r2, r2, #20
    a332:	4322      	orrs	r2, r4
    a334:	4c0d      	ldr	r4, [pc, #52]	; (a36c <__aeabi_ui2d+0x6c>)
    a336:	051b      	lsls	r3, r3, #20
    a338:	4022      	ands	r2, r4
    a33a:	4313      	orrs	r3, r2
    a33c:	005b      	lsls	r3, r3, #1
    a33e:	0859      	lsrs	r1, r3, #1
    a340:	bd10      	pop	{r4, pc}
    a342:	0021      	movs	r1, r4
    a344:	4091      	lsls	r1, r2
    a346:	000a      	movs	r2, r1
    a348:	210b      	movs	r1, #11
    a34a:	1a08      	subs	r0, r1, r0
    a34c:	40c4      	lsrs	r4, r0
    a34e:	055b      	lsls	r3, r3, #21
    a350:	0324      	lsls	r4, r4, #12
    a352:	0b24      	lsrs	r4, r4, #12
    a354:	0d5b      	lsrs	r3, r3, #21
    a356:	e7e6      	b.n	a326 <__aeabi_ui2d+0x26>
    a358:	2300      	movs	r3, #0
    a35a:	2400      	movs	r4, #0
    a35c:	2200      	movs	r2, #0
    a35e:	e7e2      	b.n	a326 <__aeabi_ui2d+0x26>
    a360:	0000041e 	.word	0x0000041e
    a364:	00000433 	.word	0x00000433
    a368:	00000413 	.word	0x00000413
    a36c:	800fffff 	.word	0x800fffff

0000a370 <__aeabi_f2d>:
    a370:	0041      	lsls	r1, r0, #1
    a372:	0e09      	lsrs	r1, r1, #24
    a374:	1c4b      	adds	r3, r1, #1
    a376:	b570      	push	{r4, r5, r6, lr}
    a378:	b2db      	uxtb	r3, r3
    a37a:	0246      	lsls	r6, r0, #9
    a37c:	0a75      	lsrs	r5, r6, #9
    a37e:	0fc4      	lsrs	r4, r0, #31
    a380:	2b01      	cmp	r3, #1
    a382:	dd14      	ble.n	a3ae <__aeabi_f2d+0x3e>
    a384:	23e0      	movs	r3, #224	; 0xe0
    a386:	009b      	lsls	r3, r3, #2
    a388:	076d      	lsls	r5, r5, #29
    a38a:	0b36      	lsrs	r6, r6, #12
    a38c:	18cb      	adds	r3, r1, r3
    a38e:	2100      	movs	r1, #0
    a390:	0d0a      	lsrs	r2, r1, #20
    a392:	0028      	movs	r0, r5
    a394:	0512      	lsls	r2, r2, #20
    a396:	4d1c      	ldr	r5, [pc, #112]	; (a408 <__aeabi_f2d+0x98>)
    a398:	4332      	orrs	r2, r6
    a39a:	055b      	lsls	r3, r3, #21
    a39c:	402a      	ands	r2, r5
    a39e:	085b      	lsrs	r3, r3, #1
    a3a0:	4313      	orrs	r3, r2
    a3a2:	005b      	lsls	r3, r3, #1
    a3a4:	07e4      	lsls	r4, r4, #31
    a3a6:	085b      	lsrs	r3, r3, #1
    a3a8:	4323      	orrs	r3, r4
    a3aa:	0019      	movs	r1, r3
    a3ac:	bd70      	pop	{r4, r5, r6, pc}
    a3ae:	2900      	cmp	r1, #0
    a3b0:	d114      	bne.n	a3dc <__aeabi_f2d+0x6c>
    a3b2:	2d00      	cmp	r5, #0
    a3b4:	d01e      	beq.n	a3f4 <__aeabi_f2d+0x84>
    a3b6:	0028      	movs	r0, r5
    a3b8:	f7fd fdaa 	bl	7f10 <__clzsi2>
    a3bc:	280a      	cmp	r0, #10
    a3be:	dc1c      	bgt.n	a3fa <__aeabi_f2d+0x8a>
    a3c0:	230b      	movs	r3, #11
    a3c2:	002a      	movs	r2, r5
    a3c4:	1a1b      	subs	r3, r3, r0
    a3c6:	40da      	lsrs	r2, r3
    a3c8:	0003      	movs	r3, r0
    a3ca:	3315      	adds	r3, #21
    a3cc:	409d      	lsls	r5, r3
    a3ce:	4b0f      	ldr	r3, [pc, #60]	; (a40c <__aeabi_f2d+0x9c>)
    a3d0:	0312      	lsls	r2, r2, #12
    a3d2:	1a1b      	subs	r3, r3, r0
    a3d4:	055b      	lsls	r3, r3, #21
    a3d6:	0b16      	lsrs	r6, r2, #12
    a3d8:	0d5b      	lsrs	r3, r3, #21
    a3da:	e7d8      	b.n	a38e <__aeabi_f2d+0x1e>
    a3dc:	2d00      	cmp	r5, #0
    a3de:	d006      	beq.n	a3ee <__aeabi_f2d+0x7e>
    a3e0:	0b32      	lsrs	r2, r6, #12
    a3e2:	2680      	movs	r6, #128	; 0x80
    a3e4:	0336      	lsls	r6, r6, #12
    a3e6:	076d      	lsls	r5, r5, #29
    a3e8:	4316      	orrs	r6, r2
    a3ea:	4b09      	ldr	r3, [pc, #36]	; (a410 <__aeabi_f2d+0xa0>)
    a3ec:	e7cf      	b.n	a38e <__aeabi_f2d+0x1e>
    a3ee:	4b08      	ldr	r3, [pc, #32]	; (a410 <__aeabi_f2d+0xa0>)
    a3f0:	2600      	movs	r6, #0
    a3f2:	e7cc      	b.n	a38e <__aeabi_f2d+0x1e>
    a3f4:	2300      	movs	r3, #0
    a3f6:	2600      	movs	r6, #0
    a3f8:	e7c9      	b.n	a38e <__aeabi_f2d+0x1e>
    a3fa:	0003      	movs	r3, r0
    a3fc:	002a      	movs	r2, r5
    a3fe:	3b0b      	subs	r3, #11
    a400:	409a      	lsls	r2, r3
    a402:	2500      	movs	r5, #0
    a404:	e7e3      	b.n	a3ce <__aeabi_f2d+0x5e>
    a406:	46c0      	nop			; (mov r8, r8)
    a408:	800fffff 	.word	0x800fffff
    a40c:	00000389 	.word	0x00000389
    a410:	000007ff 	.word	0x000007ff

0000a414 <__aeabi_d2f>:
    a414:	b5f0      	push	{r4, r5, r6, r7, lr}
    a416:	004c      	lsls	r4, r1, #1
    a418:	0d64      	lsrs	r4, r4, #21
    a41a:	030b      	lsls	r3, r1, #12
    a41c:	1c62      	adds	r2, r4, #1
    a41e:	0f45      	lsrs	r5, r0, #29
    a420:	0a5b      	lsrs	r3, r3, #9
    a422:	0552      	lsls	r2, r2, #21
    a424:	432b      	orrs	r3, r5
    a426:	0fc9      	lsrs	r1, r1, #31
    a428:	00c5      	lsls	r5, r0, #3
    a42a:	0d52      	lsrs	r2, r2, #21
    a42c:	2a01      	cmp	r2, #1
    a42e:	dd28      	ble.n	a482 <__aeabi_d2f+0x6e>
    a430:	4a3a      	ldr	r2, [pc, #232]	; (a51c <__aeabi_d2f+0x108>)
    a432:	18a6      	adds	r6, r4, r2
    a434:	2efe      	cmp	r6, #254	; 0xfe
    a436:	dc1b      	bgt.n	a470 <__aeabi_d2f+0x5c>
    a438:	2e00      	cmp	r6, #0
    a43a:	dd3e      	ble.n	a4ba <__aeabi_d2f+0xa6>
    a43c:	0180      	lsls	r0, r0, #6
    a43e:	0002      	movs	r2, r0
    a440:	1e50      	subs	r0, r2, #1
    a442:	4182      	sbcs	r2, r0
    a444:	0f6d      	lsrs	r5, r5, #29
    a446:	432a      	orrs	r2, r5
    a448:	00db      	lsls	r3, r3, #3
    a44a:	4313      	orrs	r3, r2
    a44c:	075a      	lsls	r2, r3, #29
    a44e:	d004      	beq.n	a45a <__aeabi_d2f+0x46>
    a450:	220f      	movs	r2, #15
    a452:	401a      	ands	r2, r3
    a454:	2a04      	cmp	r2, #4
    a456:	d000      	beq.n	a45a <__aeabi_d2f+0x46>
    a458:	3304      	adds	r3, #4
    a45a:	2280      	movs	r2, #128	; 0x80
    a45c:	04d2      	lsls	r2, r2, #19
    a45e:	401a      	ands	r2, r3
    a460:	d05a      	beq.n	a518 <__aeabi_d2f+0x104>
    a462:	3601      	adds	r6, #1
    a464:	2eff      	cmp	r6, #255	; 0xff
    a466:	d003      	beq.n	a470 <__aeabi_d2f+0x5c>
    a468:	019b      	lsls	r3, r3, #6
    a46a:	0a5b      	lsrs	r3, r3, #9
    a46c:	b2f4      	uxtb	r4, r6
    a46e:	e001      	b.n	a474 <__aeabi_d2f+0x60>
    a470:	24ff      	movs	r4, #255	; 0xff
    a472:	2300      	movs	r3, #0
    a474:	0258      	lsls	r0, r3, #9
    a476:	05e4      	lsls	r4, r4, #23
    a478:	0a40      	lsrs	r0, r0, #9
    a47a:	07c9      	lsls	r1, r1, #31
    a47c:	4320      	orrs	r0, r4
    a47e:	4308      	orrs	r0, r1
    a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a482:	2c00      	cmp	r4, #0
    a484:	d007      	beq.n	a496 <__aeabi_d2f+0x82>
    a486:	431d      	orrs	r5, r3
    a488:	d0f2      	beq.n	a470 <__aeabi_d2f+0x5c>
    a48a:	2080      	movs	r0, #128	; 0x80
    a48c:	00db      	lsls	r3, r3, #3
    a48e:	0480      	lsls	r0, r0, #18
    a490:	4303      	orrs	r3, r0
    a492:	26ff      	movs	r6, #255	; 0xff
    a494:	e7da      	b.n	a44c <__aeabi_d2f+0x38>
    a496:	432b      	orrs	r3, r5
    a498:	d003      	beq.n	a4a2 <__aeabi_d2f+0x8e>
    a49a:	2305      	movs	r3, #5
    a49c:	08db      	lsrs	r3, r3, #3
    a49e:	2cff      	cmp	r4, #255	; 0xff
    a4a0:	d003      	beq.n	a4aa <__aeabi_d2f+0x96>
    a4a2:	025b      	lsls	r3, r3, #9
    a4a4:	0a5b      	lsrs	r3, r3, #9
    a4a6:	b2e4      	uxtb	r4, r4
    a4a8:	e7e4      	b.n	a474 <__aeabi_d2f+0x60>
    a4aa:	2b00      	cmp	r3, #0
    a4ac:	d032      	beq.n	a514 <__aeabi_d2f+0x100>
    a4ae:	2080      	movs	r0, #128	; 0x80
    a4b0:	03c0      	lsls	r0, r0, #15
    a4b2:	4303      	orrs	r3, r0
    a4b4:	025b      	lsls	r3, r3, #9
    a4b6:	0a5b      	lsrs	r3, r3, #9
    a4b8:	e7dc      	b.n	a474 <__aeabi_d2f+0x60>
    a4ba:	0032      	movs	r2, r6
    a4bc:	3217      	adds	r2, #23
    a4be:	db14      	blt.n	a4ea <__aeabi_d2f+0xd6>
    a4c0:	2280      	movs	r2, #128	; 0x80
    a4c2:	271e      	movs	r7, #30
    a4c4:	0412      	lsls	r2, r2, #16
    a4c6:	4313      	orrs	r3, r2
    a4c8:	1bbf      	subs	r7, r7, r6
    a4ca:	2f1f      	cmp	r7, #31
    a4cc:	dc0f      	bgt.n	a4ee <__aeabi_d2f+0xda>
    a4ce:	4a14      	ldr	r2, [pc, #80]	; (a520 <__aeabi_d2f+0x10c>)
    a4d0:	4694      	mov	ip, r2
    a4d2:	4464      	add	r4, ip
    a4d4:	002a      	movs	r2, r5
    a4d6:	40a5      	lsls	r5, r4
    a4d8:	002e      	movs	r6, r5
    a4da:	40a3      	lsls	r3, r4
    a4dc:	1e75      	subs	r5, r6, #1
    a4de:	41ae      	sbcs	r6, r5
    a4e0:	40fa      	lsrs	r2, r7
    a4e2:	4333      	orrs	r3, r6
    a4e4:	4313      	orrs	r3, r2
    a4e6:	2600      	movs	r6, #0
    a4e8:	e7b0      	b.n	a44c <__aeabi_d2f+0x38>
    a4ea:	2400      	movs	r4, #0
    a4ec:	e7d5      	b.n	a49a <__aeabi_d2f+0x86>
    a4ee:	2202      	movs	r2, #2
    a4f0:	4252      	negs	r2, r2
    a4f2:	1b96      	subs	r6, r2, r6
    a4f4:	001a      	movs	r2, r3
    a4f6:	40f2      	lsrs	r2, r6
    a4f8:	2f20      	cmp	r7, #32
    a4fa:	d009      	beq.n	a510 <__aeabi_d2f+0xfc>
    a4fc:	4809      	ldr	r0, [pc, #36]	; (a524 <__aeabi_d2f+0x110>)
    a4fe:	4684      	mov	ip, r0
    a500:	4464      	add	r4, ip
    a502:	40a3      	lsls	r3, r4
    a504:	432b      	orrs	r3, r5
    a506:	1e5d      	subs	r5, r3, #1
    a508:	41ab      	sbcs	r3, r5
    a50a:	2600      	movs	r6, #0
    a50c:	4313      	orrs	r3, r2
    a50e:	e79d      	b.n	a44c <__aeabi_d2f+0x38>
    a510:	2300      	movs	r3, #0
    a512:	e7f7      	b.n	a504 <__aeabi_d2f+0xf0>
    a514:	2300      	movs	r3, #0
    a516:	e7ad      	b.n	a474 <__aeabi_d2f+0x60>
    a518:	0034      	movs	r4, r6
    a51a:	e7bf      	b.n	a49c <__aeabi_d2f+0x88>
    a51c:	fffffc80 	.word	0xfffffc80
    a520:	fffffc82 	.word	0xfffffc82
    a524:	fffffca2 	.word	0xfffffca2

0000a528 <__clzdi2>:
    a528:	b510      	push	{r4, lr}
    a52a:	2900      	cmp	r1, #0
    a52c:	d103      	bne.n	a536 <__clzdi2+0xe>
    a52e:	f7fd fcef 	bl	7f10 <__clzsi2>
    a532:	3020      	adds	r0, #32
    a534:	e002      	b.n	a53c <__clzdi2+0x14>
    a536:	1c08      	adds	r0, r1, #0
    a538:	f7fd fcea 	bl	7f10 <__clzsi2>
    a53c:	bd10      	pop	{r4, pc}
    a53e:	46c0      	nop			; (mov r8, r8)

0000a540 <__errno>:
    a540:	4b01      	ldr	r3, [pc, #4]	; (a548 <__errno+0x8>)
    a542:	6818      	ldr	r0, [r3, #0]
    a544:	4770      	bx	lr
    a546:	46c0      	nop			; (mov r8, r8)
    a548:	2000057c 	.word	0x2000057c

0000a54c <__libc_init_array>:
    a54c:	b570      	push	{r4, r5, r6, lr}
    a54e:	2600      	movs	r6, #0
    a550:	4d0c      	ldr	r5, [pc, #48]	; (a584 <__libc_init_array+0x38>)
    a552:	4c0d      	ldr	r4, [pc, #52]	; (a588 <__libc_init_array+0x3c>)
    a554:	1b64      	subs	r4, r4, r5
    a556:	10a4      	asrs	r4, r4, #2
    a558:	42a6      	cmp	r6, r4
    a55a:	d109      	bne.n	a570 <__libc_init_array+0x24>
    a55c:	2600      	movs	r6, #0
    a55e:	f001 fe8f 	bl	c280 <_init>
    a562:	4d0a      	ldr	r5, [pc, #40]	; (a58c <__libc_init_array+0x40>)
    a564:	4c0a      	ldr	r4, [pc, #40]	; (a590 <__libc_init_array+0x44>)
    a566:	1b64      	subs	r4, r4, r5
    a568:	10a4      	asrs	r4, r4, #2
    a56a:	42a6      	cmp	r6, r4
    a56c:	d105      	bne.n	a57a <__libc_init_array+0x2e>
    a56e:	bd70      	pop	{r4, r5, r6, pc}
    a570:	00b3      	lsls	r3, r6, #2
    a572:	58eb      	ldr	r3, [r5, r3]
    a574:	4798      	blx	r3
    a576:	3601      	adds	r6, #1
    a578:	e7ee      	b.n	a558 <__libc_init_array+0xc>
    a57a:	00b3      	lsls	r3, r6, #2
    a57c:	58eb      	ldr	r3, [r5, r3]
    a57e:	4798      	blx	r3
    a580:	3601      	adds	r6, #1
    a582:	e7f2      	b.n	a56a <__libc_init_array+0x1e>
    a584:	0000c28c 	.word	0x0000c28c
    a588:	0000c28c 	.word	0x0000c28c
    a58c:	0000c28c 	.word	0x0000c28c
    a590:	0000c290 	.word	0x0000c290

0000a594 <memcpy>:
    a594:	2300      	movs	r3, #0
    a596:	b510      	push	{r4, lr}
    a598:	429a      	cmp	r2, r3
    a59a:	d100      	bne.n	a59e <memcpy+0xa>
    a59c:	bd10      	pop	{r4, pc}
    a59e:	5ccc      	ldrb	r4, [r1, r3]
    a5a0:	54c4      	strb	r4, [r0, r3]
    a5a2:	3301      	adds	r3, #1
    a5a4:	e7f8      	b.n	a598 <memcpy+0x4>

0000a5a6 <memset>:
    a5a6:	0003      	movs	r3, r0
    a5a8:	1882      	adds	r2, r0, r2
    a5aa:	4293      	cmp	r3, r2
    a5ac:	d100      	bne.n	a5b0 <memset+0xa>
    a5ae:	4770      	bx	lr
    a5b0:	7019      	strb	r1, [r3, #0]
    a5b2:	3301      	adds	r3, #1
    a5b4:	e7f9      	b.n	a5aa <memset+0x4>
	...

0000a5b8 <iprintf>:
    a5b8:	b40f      	push	{r0, r1, r2, r3}
    a5ba:	4b0b      	ldr	r3, [pc, #44]	; (a5e8 <iprintf+0x30>)
    a5bc:	b513      	push	{r0, r1, r4, lr}
    a5be:	681c      	ldr	r4, [r3, #0]
    a5c0:	2c00      	cmp	r4, #0
    a5c2:	d005      	beq.n	a5d0 <iprintf+0x18>
    a5c4:	69a3      	ldr	r3, [r4, #24]
    a5c6:	2b00      	cmp	r3, #0
    a5c8:	d102      	bne.n	a5d0 <iprintf+0x18>
    a5ca:	0020      	movs	r0, r4
    a5cc:	f000 f9de 	bl	a98c <__sinit>
    a5d0:	ab05      	add	r3, sp, #20
    a5d2:	9a04      	ldr	r2, [sp, #16]
    a5d4:	68a1      	ldr	r1, [r4, #8]
    a5d6:	0020      	movs	r0, r4
    a5d8:	9301      	str	r3, [sp, #4]
    a5da:	f000 fd19 	bl	b010 <_vfiprintf_r>
    a5de:	bc16      	pop	{r1, r2, r4}
    a5e0:	bc08      	pop	{r3}
    a5e2:	b004      	add	sp, #16
    a5e4:	4718      	bx	r3
    a5e6:	46c0      	nop			; (mov r8, r8)
    a5e8:	2000057c 	.word	0x2000057c

0000a5ec <setbuf>:
    a5ec:	424a      	negs	r2, r1
    a5ee:	414a      	adcs	r2, r1
    a5f0:	2380      	movs	r3, #128	; 0x80
    a5f2:	b510      	push	{r4, lr}
    a5f4:	0052      	lsls	r2, r2, #1
    a5f6:	00db      	lsls	r3, r3, #3
    a5f8:	f000 f802 	bl	a600 <setvbuf>
    a5fc:	bd10      	pop	{r4, pc}
	...

0000a600 <setvbuf>:
    a600:	b5f0      	push	{r4, r5, r6, r7, lr}
    a602:	001d      	movs	r5, r3
    a604:	4b4f      	ldr	r3, [pc, #316]	; (a744 <setvbuf+0x144>)
    a606:	b085      	sub	sp, #20
    a608:	681e      	ldr	r6, [r3, #0]
    a60a:	0004      	movs	r4, r0
    a60c:	000f      	movs	r7, r1
    a60e:	9200      	str	r2, [sp, #0]
    a610:	2e00      	cmp	r6, #0
    a612:	d005      	beq.n	a620 <setvbuf+0x20>
    a614:	69b3      	ldr	r3, [r6, #24]
    a616:	2b00      	cmp	r3, #0
    a618:	d102      	bne.n	a620 <setvbuf+0x20>
    a61a:	0030      	movs	r0, r6
    a61c:	f000 f9b6 	bl	a98c <__sinit>
    a620:	4b49      	ldr	r3, [pc, #292]	; (a748 <setvbuf+0x148>)
    a622:	429c      	cmp	r4, r3
    a624:	d150      	bne.n	a6c8 <setvbuf+0xc8>
    a626:	6874      	ldr	r4, [r6, #4]
    a628:	9b00      	ldr	r3, [sp, #0]
    a62a:	2b02      	cmp	r3, #2
    a62c:	d005      	beq.n	a63a <setvbuf+0x3a>
    a62e:	2b01      	cmp	r3, #1
    a630:	d900      	bls.n	a634 <setvbuf+0x34>
    a632:	e084      	b.n	a73e <setvbuf+0x13e>
    a634:	2d00      	cmp	r5, #0
    a636:	da00      	bge.n	a63a <setvbuf+0x3a>
    a638:	e081      	b.n	a73e <setvbuf+0x13e>
    a63a:	0021      	movs	r1, r4
    a63c:	0030      	movs	r0, r6
    a63e:	f000 f937 	bl	a8b0 <_fflush_r>
    a642:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a644:	2900      	cmp	r1, #0
    a646:	d008      	beq.n	a65a <setvbuf+0x5a>
    a648:	0023      	movs	r3, r4
    a64a:	3344      	adds	r3, #68	; 0x44
    a64c:	4299      	cmp	r1, r3
    a64e:	d002      	beq.n	a656 <setvbuf+0x56>
    a650:	0030      	movs	r0, r6
    a652:	f000 faa7 	bl	aba4 <_free_r>
    a656:	2300      	movs	r3, #0
    a658:	6363      	str	r3, [r4, #52]	; 0x34
    a65a:	2300      	movs	r3, #0
    a65c:	61a3      	str	r3, [r4, #24]
    a65e:	6063      	str	r3, [r4, #4]
    a660:	89a3      	ldrh	r3, [r4, #12]
    a662:	061b      	lsls	r3, r3, #24
    a664:	d503      	bpl.n	a66e <setvbuf+0x6e>
    a666:	6921      	ldr	r1, [r4, #16]
    a668:	0030      	movs	r0, r6
    a66a:	f000 fa9b 	bl	aba4 <_free_r>
    a66e:	89a3      	ldrh	r3, [r4, #12]
    a670:	4a36      	ldr	r2, [pc, #216]	; (a74c <setvbuf+0x14c>)
    a672:	4013      	ands	r3, r2
    a674:	81a3      	strh	r3, [r4, #12]
    a676:	9b00      	ldr	r3, [sp, #0]
    a678:	2b02      	cmp	r3, #2
    a67a:	d05a      	beq.n	a732 <setvbuf+0x132>
    a67c:	ab03      	add	r3, sp, #12
    a67e:	aa02      	add	r2, sp, #8
    a680:	0021      	movs	r1, r4
    a682:	0030      	movs	r0, r6
    a684:	f000 fa18 	bl	aab8 <__swhatbuf_r>
    a688:	89a3      	ldrh	r3, [r4, #12]
    a68a:	4318      	orrs	r0, r3
    a68c:	81a0      	strh	r0, [r4, #12]
    a68e:	2d00      	cmp	r5, #0
    a690:	d124      	bne.n	a6dc <setvbuf+0xdc>
    a692:	9d02      	ldr	r5, [sp, #8]
    a694:	0028      	movs	r0, r5
    a696:	f000 fa7b 	bl	ab90 <malloc>
    a69a:	9501      	str	r5, [sp, #4]
    a69c:	1e07      	subs	r7, r0, #0
    a69e:	d142      	bne.n	a726 <setvbuf+0x126>
    a6a0:	9b02      	ldr	r3, [sp, #8]
    a6a2:	9301      	str	r3, [sp, #4]
    a6a4:	42ab      	cmp	r3, r5
    a6a6:	d139      	bne.n	a71c <setvbuf+0x11c>
    a6a8:	2001      	movs	r0, #1
    a6aa:	4240      	negs	r0, r0
    a6ac:	2302      	movs	r3, #2
    a6ae:	89a2      	ldrh	r2, [r4, #12]
    a6b0:	4313      	orrs	r3, r2
    a6b2:	81a3      	strh	r3, [r4, #12]
    a6b4:	2300      	movs	r3, #0
    a6b6:	60a3      	str	r3, [r4, #8]
    a6b8:	0023      	movs	r3, r4
    a6ba:	3347      	adds	r3, #71	; 0x47
    a6bc:	6023      	str	r3, [r4, #0]
    a6be:	6123      	str	r3, [r4, #16]
    a6c0:	2301      	movs	r3, #1
    a6c2:	6163      	str	r3, [r4, #20]
    a6c4:	b005      	add	sp, #20
    a6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6c8:	4b21      	ldr	r3, [pc, #132]	; (a750 <setvbuf+0x150>)
    a6ca:	429c      	cmp	r4, r3
    a6cc:	d101      	bne.n	a6d2 <setvbuf+0xd2>
    a6ce:	68b4      	ldr	r4, [r6, #8]
    a6d0:	e7aa      	b.n	a628 <setvbuf+0x28>
    a6d2:	4b20      	ldr	r3, [pc, #128]	; (a754 <setvbuf+0x154>)
    a6d4:	429c      	cmp	r4, r3
    a6d6:	d1a7      	bne.n	a628 <setvbuf+0x28>
    a6d8:	68f4      	ldr	r4, [r6, #12]
    a6da:	e7a5      	b.n	a628 <setvbuf+0x28>
    a6dc:	2f00      	cmp	r7, #0
    a6de:	d0d9      	beq.n	a694 <setvbuf+0x94>
    a6e0:	69b3      	ldr	r3, [r6, #24]
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d102      	bne.n	a6ec <setvbuf+0xec>
    a6e6:	0030      	movs	r0, r6
    a6e8:	f000 f950 	bl	a98c <__sinit>
    a6ec:	9b00      	ldr	r3, [sp, #0]
    a6ee:	2b01      	cmp	r3, #1
    a6f0:	d103      	bne.n	a6fa <setvbuf+0xfa>
    a6f2:	89a3      	ldrh	r3, [r4, #12]
    a6f4:	9a00      	ldr	r2, [sp, #0]
    a6f6:	431a      	orrs	r2, r3
    a6f8:	81a2      	strh	r2, [r4, #12]
    a6fa:	2008      	movs	r0, #8
    a6fc:	89a3      	ldrh	r3, [r4, #12]
    a6fe:	6027      	str	r7, [r4, #0]
    a700:	6127      	str	r7, [r4, #16]
    a702:	6165      	str	r5, [r4, #20]
    a704:	4018      	ands	r0, r3
    a706:	d018      	beq.n	a73a <setvbuf+0x13a>
    a708:	2001      	movs	r0, #1
    a70a:	4018      	ands	r0, r3
    a70c:	2300      	movs	r3, #0
    a70e:	4298      	cmp	r0, r3
    a710:	d011      	beq.n	a736 <setvbuf+0x136>
    a712:	426d      	negs	r5, r5
    a714:	60a3      	str	r3, [r4, #8]
    a716:	61a5      	str	r5, [r4, #24]
    a718:	0018      	movs	r0, r3
    a71a:	e7d3      	b.n	a6c4 <setvbuf+0xc4>
    a71c:	9801      	ldr	r0, [sp, #4]
    a71e:	f000 fa37 	bl	ab90 <malloc>
    a722:	1e07      	subs	r7, r0, #0
    a724:	d0c0      	beq.n	a6a8 <setvbuf+0xa8>
    a726:	2380      	movs	r3, #128	; 0x80
    a728:	89a2      	ldrh	r2, [r4, #12]
    a72a:	9d01      	ldr	r5, [sp, #4]
    a72c:	4313      	orrs	r3, r2
    a72e:	81a3      	strh	r3, [r4, #12]
    a730:	e7d6      	b.n	a6e0 <setvbuf+0xe0>
    a732:	2000      	movs	r0, #0
    a734:	e7ba      	b.n	a6ac <setvbuf+0xac>
    a736:	60a5      	str	r5, [r4, #8]
    a738:	e7c4      	b.n	a6c4 <setvbuf+0xc4>
    a73a:	60a0      	str	r0, [r4, #8]
    a73c:	e7c2      	b.n	a6c4 <setvbuf+0xc4>
    a73e:	2001      	movs	r0, #1
    a740:	4240      	negs	r0, r0
    a742:	e7bf      	b.n	a6c4 <setvbuf+0xc4>
    a744:	2000057c 	.word	0x2000057c
    a748:	0000c20c 	.word	0x0000c20c
    a74c:	fffff35c 	.word	0xfffff35c
    a750:	0000c22c 	.word	0x0000c22c
    a754:	0000c1ec 	.word	0x0000c1ec

0000a758 <siprintf>:
    a758:	b40e      	push	{r1, r2, r3}
    a75a:	b510      	push	{r4, lr}
    a75c:	b09d      	sub	sp, #116	; 0x74
    a75e:	a902      	add	r1, sp, #8
    a760:	9002      	str	r0, [sp, #8]
    a762:	6108      	str	r0, [r1, #16]
    a764:	480b      	ldr	r0, [pc, #44]	; (a794 <siprintf+0x3c>)
    a766:	2482      	movs	r4, #130	; 0x82
    a768:	6088      	str	r0, [r1, #8]
    a76a:	6148      	str	r0, [r1, #20]
    a76c:	2001      	movs	r0, #1
    a76e:	4240      	negs	r0, r0
    a770:	ab1f      	add	r3, sp, #124	; 0x7c
    a772:	81c8      	strh	r0, [r1, #14]
    a774:	4808      	ldr	r0, [pc, #32]	; (a798 <siprintf+0x40>)
    a776:	cb04      	ldmia	r3!, {r2}
    a778:	00a4      	lsls	r4, r4, #2
    a77a:	6800      	ldr	r0, [r0, #0]
    a77c:	9301      	str	r3, [sp, #4]
    a77e:	818c      	strh	r4, [r1, #12]
    a780:	f000 fb1a 	bl	adb8 <_svfiprintf_r>
    a784:	2300      	movs	r3, #0
    a786:	9a02      	ldr	r2, [sp, #8]
    a788:	7013      	strb	r3, [r2, #0]
    a78a:	b01d      	add	sp, #116	; 0x74
    a78c:	bc10      	pop	{r4}
    a78e:	bc08      	pop	{r3}
    a790:	b003      	add	sp, #12
    a792:	4718      	bx	r3
    a794:	7fffffff 	.word	0x7fffffff
    a798:	2000057c 	.word	0x2000057c

0000a79c <__sflush_r>:
    a79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a79e:	898a      	ldrh	r2, [r1, #12]
    a7a0:	0005      	movs	r5, r0
    a7a2:	000c      	movs	r4, r1
    a7a4:	0713      	lsls	r3, r2, #28
    a7a6:	d460      	bmi.n	a86a <__sflush_r+0xce>
    a7a8:	684b      	ldr	r3, [r1, #4]
    a7aa:	2b00      	cmp	r3, #0
    a7ac:	dc04      	bgt.n	a7b8 <__sflush_r+0x1c>
    a7ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a7b0:	2b00      	cmp	r3, #0
    a7b2:	dc01      	bgt.n	a7b8 <__sflush_r+0x1c>
    a7b4:	2000      	movs	r0, #0
    a7b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a7b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a7ba:	2f00      	cmp	r7, #0
    a7bc:	d0fa      	beq.n	a7b4 <__sflush_r+0x18>
    a7be:	2300      	movs	r3, #0
    a7c0:	682e      	ldr	r6, [r5, #0]
    a7c2:	602b      	str	r3, [r5, #0]
    a7c4:	2380      	movs	r3, #128	; 0x80
    a7c6:	015b      	lsls	r3, r3, #5
    a7c8:	401a      	ands	r2, r3
    a7ca:	d034      	beq.n	a836 <__sflush_r+0x9a>
    a7cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a7ce:	89a3      	ldrh	r3, [r4, #12]
    a7d0:	075b      	lsls	r3, r3, #29
    a7d2:	d506      	bpl.n	a7e2 <__sflush_r+0x46>
    a7d4:	6863      	ldr	r3, [r4, #4]
    a7d6:	1ac0      	subs	r0, r0, r3
    a7d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d001      	beq.n	a7e2 <__sflush_r+0x46>
    a7de:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a7e0:	1ac0      	subs	r0, r0, r3
    a7e2:	0002      	movs	r2, r0
    a7e4:	6a21      	ldr	r1, [r4, #32]
    a7e6:	2300      	movs	r3, #0
    a7e8:	0028      	movs	r0, r5
    a7ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a7ec:	47b8      	blx	r7
    a7ee:	89a1      	ldrh	r1, [r4, #12]
    a7f0:	1c43      	adds	r3, r0, #1
    a7f2:	d106      	bne.n	a802 <__sflush_r+0x66>
    a7f4:	682b      	ldr	r3, [r5, #0]
    a7f6:	2b1d      	cmp	r3, #29
    a7f8:	d831      	bhi.n	a85e <__sflush_r+0xc2>
    a7fa:	4a2c      	ldr	r2, [pc, #176]	; (a8ac <__sflush_r+0x110>)
    a7fc:	40da      	lsrs	r2, r3
    a7fe:	07d3      	lsls	r3, r2, #31
    a800:	d52d      	bpl.n	a85e <__sflush_r+0xc2>
    a802:	2300      	movs	r3, #0
    a804:	6063      	str	r3, [r4, #4]
    a806:	6923      	ldr	r3, [r4, #16]
    a808:	6023      	str	r3, [r4, #0]
    a80a:	04cb      	lsls	r3, r1, #19
    a80c:	d505      	bpl.n	a81a <__sflush_r+0x7e>
    a80e:	1c43      	adds	r3, r0, #1
    a810:	d102      	bne.n	a818 <__sflush_r+0x7c>
    a812:	682b      	ldr	r3, [r5, #0]
    a814:	2b00      	cmp	r3, #0
    a816:	d100      	bne.n	a81a <__sflush_r+0x7e>
    a818:	6560      	str	r0, [r4, #84]	; 0x54
    a81a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a81c:	602e      	str	r6, [r5, #0]
    a81e:	2900      	cmp	r1, #0
    a820:	d0c8      	beq.n	a7b4 <__sflush_r+0x18>
    a822:	0023      	movs	r3, r4
    a824:	3344      	adds	r3, #68	; 0x44
    a826:	4299      	cmp	r1, r3
    a828:	d002      	beq.n	a830 <__sflush_r+0x94>
    a82a:	0028      	movs	r0, r5
    a82c:	f000 f9ba 	bl	aba4 <_free_r>
    a830:	2000      	movs	r0, #0
    a832:	6360      	str	r0, [r4, #52]	; 0x34
    a834:	e7bf      	b.n	a7b6 <__sflush_r+0x1a>
    a836:	2301      	movs	r3, #1
    a838:	6a21      	ldr	r1, [r4, #32]
    a83a:	0028      	movs	r0, r5
    a83c:	47b8      	blx	r7
    a83e:	1c43      	adds	r3, r0, #1
    a840:	d1c5      	bne.n	a7ce <__sflush_r+0x32>
    a842:	682b      	ldr	r3, [r5, #0]
    a844:	2b00      	cmp	r3, #0
    a846:	d0c2      	beq.n	a7ce <__sflush_r+0x32>
    a848:	2b1d      	cmp	r3, #29
    a84a:	d001      	beq.n	a850 <__sflush_r+0xb4>
    a84c:	2b16      	cmp	r3, #22
    a84e:	d101      	bne.n	a854 <__sflush_r+0xb8>
    a850:	602e      	str	r6, [r5, #0]
    a852:	e7af      	b.n	a7b4 <__sflush_r+0x18>
    a854:	2340      	movs	r3, #64	; 0x40
    a856:	89a2      	ldrh	r2, [r4, #12]
    a858:	4313      	orrs	r3, r2
    a85a:	81a3      	strh	r3, [r4, #12]
    a85c:	e7ab      	b.n	a7b6 <__sflush_r+0x1a>
    a85e:	2340      	movs	r3, #64	; 0x40
    a860:	430b      	orrs	r3, r1
    a862:	2001      	movs	r0, #1
    a864:	81a3      	strh	r3, [r4, #12]
    a866:	4240      	negs	r0, r0
    a868:	e7a5      	b.n	a7b6 <__sflush_r+0x1a>
    a86a:	690f      	ldr	r7, [r1, #16]
    a86c:	2f00      	cmp	r7, #0
    a86e:	d0a1      	beq.n	a7b4 <__sflush_r+0x18>
    a870:	680b      	ldr	r3, [r1, #0]
    a872:	600f      	str	r7, [r1, #0]
    a874:	1bdb      	subs	r3, r3, r7
    a876:	9301      	str	r3, [sp, #4]
    a878:	2300      	movs	r3, #0
    a87a:	0792      	lsls	r2, r2, #30
    a87c:	d100      	bne.n	a880 <__sflush_r+0xe4>
    a87e:	694b      	ldr	r3, [r1, #20]
    a880:	60a3      	str	r3, [r4, #8]
    a882:	9b01      	ldr	r3, [sp, #4]
    a884:	2b00      	cmp	r3, #0
    a886:	dc00      	bgt.n	a88a <__sflush_r+0xee>
    a888:	e794      	b.n	a7b4 <__sflush_r+0x18>
    a88a:	9b01      	ldr	r3, [sp, #4]
    a88c:	003a      	movs	r2, r7
    a88e:	6a21      	ldr	r1, [r4, #32]
    a890:	0028      	movs	r0, r5
    a892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a894:	47b0      	blx	r6
    a896:	2800      	cmp	r0, #0
    a898:	dc03      	bgt.n	a8a2 <__sflush_r+0x106>
    a89a:	2340      	movs	r3, #64	; 0x40
    a89c:	89a2      	ldrh	r2, [r4, #12]
    a89e:	4313      	orrs	r3, r2
    a8a0:	e7df      	b.n	a862 <__sflush_r+0xc6>
    a8a2:	9b01      	ldr	r3, [sp, #4]
    a8a4:	183f      	adds	r7, r7, r0
    a8a6:	1a1b      	subs	r3, r3, r0
    a8a8:	9301      	str	r3, [sp, #4]
    a8aa:	e7ea      	b.n	a882 <__sflush_r+0xe6>
    a8ac:	20400001 	.word	0x20400001

0000a8b0 <_fflush_r>:
    a8b0:	690b      	ldr	r3, [r1, #16]
    a8b2:	b570      	push	{r4, r5, r6, lr}
    a8b4:	0005      	movs	r5, r0
    a8b6:	000c      	movs	r4, r1
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d101      	bne.n	a8c0 <_fflush_r+0x10>
    a8bc:	2000      	movs	r0, #0
    a8be:	bd70      	pop	{r4, r5, r6, pc}
    a8c0:	2800      	cmp	r0, #0
    a8c2:	d004      	beq.n	a8ce <_fflush_r+0x1e>
    a8c4:	6983      	ldr	r3, [r0, #24]
    a8c6:	2b00      	cmp	r3, #0
    a8c8:	d101      	bne.n	a8ce <_fflush_r+0x1e>
    a8ca:	f000 f85f 	bl	a98c <__sinit>
    a8ce:	4b0b      	ldr	r3, [pc, #44]	; (a8fc <_fflush_r+0x4c>)
    a8d0:	429c      	cmp	r4, r3
    a8d2:	d109      	bne.n	a8e8 <_fflush_r+0x38>
    a8d4:	686c      	ldr	r4, [r5, #4]
    a8d6:	220c      	movs	r2, #12
    a8d8:	5ea3      	ldrsh	r3, [r4, r2]
    a8da:	2b00      	cmp	r3, #0
    a8dc:	d0ee      	beq.n	a8bc <_fflush_r+0xc>
    a8de:	0021      	movs	r1, r4
    a8e0:	0028      	movs	r0, r5
    a8e2:	f7ff ff5b 	bl	a79c <__sflush_r>
    a8e6:	e7ea      	b.n	a8be <_fflush_r+0xe>
    a8e8:	4b05      	ldr	r3, [pc, #20]	; (a900 <_fflush_r+0x50>)
    a8ea:	429c      	cmp	r4, r3
    a8ec:	d101      	bne.n	a8f2 <_fflush_r+0x42>
    a8ee:	68ac      	ldr	r4, [r5, #8]
    a8f0:	e7f1      	b.n	a8d6 <_fflush_r+0x26>
    a8f2:	4b04      	ldr	r3, [pc, #16]	; (a904 <_fflush_r+0x54>)
    a8f4:	429c      	cmp	r4, r3
    a8f6:	d1ee      	bne.n	a8d6 <_fflush_r+0x26>
    a8f8:	68ec      	ldr	r4, [r5, #12]
    a8fa:	e7ec      	b.n	a8d6 <_fflush_r+0x26>
    a8fc:	0000c20c 	.word	0x0000c20c
    a900:	0000c22c 	.word	0x0000c22c
    a904:	0000c1ec 	.word	0x0000c1ec

0000a908 <_cleanup_r>:
    a908:	b510      	push	{r4, lr}
    a90a:	4902      	ldr	r1, [pc, #8]	; (a914 <_cleanup_r+0xc>)
    a90c:	f000 f8b2 	bl	aa74 <_fwalk_reent>
    a910:	bd10      	pop	{r4, pc}
    a912:	46c0      	nop			; (mov r8, r8)
    a914:	0000a8b1 	.word	0x0000a8b1

0000a918 <std.isra.0>:
    a918:	2300      	movs	r3, #0
    a91a:	b510      	push	{r4, lr}
    a91c:	0004      	movs	r4, r0
    a91e:	6003      	str	r3, [r0, #0]
    a920:	6043      	str	r3, [r0, #4]
    a922:	6083      	str	r3, [r0, #8]
    a924:	8181      	strh	r1, [r0, #12]
    a926:	6643      	str	r3, [r0, #100]	; 0x64
    a928:	81c2      	strh	r2, [r0, #14]
    a92a:	6103      	str	r3, [r0, #16]
    a92c:	6143      	str	r3, [r0, #20]
    a92e:	6183      	str	r3, [r0, #24]
    a930:	0019      	movs	r1, r3
    a932:	2208      	movs	r2, #8
    a934:	305c      	adds	r0, #92	; 0x5c
    a936:	f7ff fe36 	bl	a5a6 <memset>
    a93a:	4b05      	ldr	r3, [pc, #20]	; (a950 <std.isra.0+0x38>)
    a93c:	6224      	str	r4, [r4, #32]
    a93e:	6263      	str	r3, [r4, #36]	; 0x24
    a940:	4b04      	ldr	r3, [pc, #16]	; (a954 <std.isra.0+0x3c>)
    a942:	62a3      	str	r3, [r4, #40]	; 0x28
    a944:	4b04      	ldr	r3, [pc, #16]	; (a958 <std.isra.0+0x40>)
    a946:	62e3      	str	r3, [r4, #44]	; 0x2c
    a948:	4b04      	ldr	r3, [pc, #16]	; (a95c <std.isra.0+0x44>)
    a94a:	6323      	str	r3, [r4, #48]	; 0x30
    a94c:	bd10      	pop	{r4, pc}
    a94e:	46c0      	nop			; (mov r8, r8)
    a950:	0000b57d 	.word	0x0000b57d
    a954:	0000b5a5 	.word	0x0000b5a5
    a958:	0000b5dd 	.word	0x0000b5dd
    a95c:	0000b609 	.word	0x0000b609

0000a960 <__sfmoreglue>:
    a960:	b570      	push	{r4, r5, r6, lr}
    a962:	2568      	movs	r5, #104	; 0x68
    a964:	1e4a      	subs	r2, r1, #1
    a966:	4355      	muls	r5, r2
    a968:	000e      	movs	r6, r1
    a96a:	0029      	movs	r1, r5
    a96c:	3174      	adds	r1, #116	; 0x74
    a96e:	f000 f963 	bl	ac38 <_malloc_r>
    a972:	1e04      	subs	r4, r0, #0
    a974:	d008      	beq.n	a988 <__sfmoreglue+0x28>
    a976:	2100      	movs	r1, #0
    a978:	002a      	movs	r2, r5
    a97a:	6001      	str	r1, [r0, #0]
    a97c:	6046      	str	r6, [r0, #4]
    a97e:	300c      	adds	r0, #12
    a980:	60a0      	str	r0, [r4, #8]
    a982:	3268      	adds	r2, #104	; 0x68
    a984:	f7ff fe0f 	bl	a5a6 <memset>
    a988:	0020      	movs	r0, r4
    a98a:	bd70      	pop	{r4, r5, r6, pc}

0000a98c <__sinit>:
    a98c:	6983      	ldr	r3, [r0, #24]
    a98e:	b513      	push	{r0, r1, r4, lr}
    a990:	0004      	movs	r4, r0
    a992:	2b00      	cmp	r3, #0
    a994:	d128      	bne.n	a9e8 <__sinit+0x5c>
    a996:	6483      	str	r3, [r0, #72]	; 0x48
    a998:	64c3      	str	r3, [r0, #76]	; 0x4c
    a99a:	6503      	str	r3, [r0, #80]	; 0x50
    a99c:	4b13      	ldr	r3, [pc, #76]	; (a9ec <__sinit+0x60>)
    a99e:	4a14      	ldr	r2, [pc, #80]	; (a9f0 <__sinit+0x64>)
    a9a0:	681b      	ldr	r3, [r3, #0]
    a9a2:	6282      	str	r2, [r0, #40]	; 0x28
    a9a4:	9301      	str	r3, [sp, #4]
    a9a6:	4298      	cmp	r0, r3
    a9a8:	d101      	bne.n	a9ae <__sinit+0x22>
    a9aa:	2301      	movs	r3, #1
    a9ac:	6183      	str	r3, [r0, #24]
    a9ae:	0020      	movs	r0, r4
    a9b0:	f000 f820 	bl	a9f4 <__sfp>
    a9b4:	6060      	str	r0, [r4, #4]
    a9b6:	0020      	movs	r0, r4
    a9b8:	f000 f81c 	bl	a9f4 <__sfp>
    a9bc:	60a0      	str	r0, [r4, #8]
    a9be:	0020      	movs	r0, r4
    a9c0:	f000 f818 	bl	a9f4 <__sfp>
    a9c4:	2200      	movs	r2, #0
    a9c6:	60e0      	str	r0, [r4, #12]
    a9c8:	2104      	movs	r1, #4
    a9ca:	6860      	ldr	r0, [r4, #4]
    a9cc:	f7ff ffa4 	bl	a918 <std.isra.0>
    a9d0:	2201      	movs	r2, #1
    a9d2:	2109      	movs	r1, #9
    a9d4:	68a0      	ldr	r0, [r4, #8]
    a9d6:	f7ff ff9f 	bl	a918 <std.isra.0>
    a9da:	2202      	movs	r2, #2
    a9dc:	2112      	movs	r1, #18
    a9de:	68e0      	ldr	r0, [r4, #12]
    a9e0:	f7ff ff9a 	bl	a918 <std.isra.0>
    a9e4:	2301      	movs	r3, #1
    a9e6:	61a3      	str	r3, [r4, #24]
    a9e8:	bd13      	pop	{r0, r1, r4, pc}
    a9ea:	46c0      	nop			; (mov r8, r8)
    a9ec:	0000c1e8 	.word	0x0000c1e8
    a9f0:	0000a909 	.word	0x0000a909

0000a9f4 <__sfp>:
    a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9f6:	4b1e      	ldr	r3, [pc, #120]	; (aa70 <__sfp+0x7c>)
    a9f8:	0007      	movs	r7, r0
    a9fa:	681e      	ldr	r6, [r3, #0]
    a9fc:	69b3      	ldr	r3, [r6, #24]
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d102      	bne.n	aa08 <__sfp+0x14>
    aa02:	0030      	movs	r0, r6
    aa04:	f7ff ffc2 	bl	a98c <__sinit>
    aa08:	3648      	adds	r6, #72	; 0x48
    aa0a:	68b4      	ldr	r4, [r6, #8]
    aa0c:	6873      	ldr	r3, [r6, #4]
    aa0e:	3b01      	subs	r3, #1
    aa10:	d504      	bpl.n	aa1c <__sfp+0x28>
    aa12:	6833      	ldr	r3, [r6, #0]
    aa14:	2b00      	cmp	r3, #0
    aa16:	d007      	beq.n	aa28 <__sfp+0x34>
    aa18:	6836      	ldr	r6, [r6, #0]
    aa1a:	e7f6      	b.n	aa0a <__sfp+0x16>
    aa1c:	220c      	movs	r2, #12
    aa1e:	5ea5      	ldrsh	r5, [r4, r2]
    aa20:	2d00      	cmp	r5, #0
    aa22:	d00d      	beq.n	aa40 <__sfp+0x4c>
    aa24:	3468      	adds	r4, #104	; 0x68
    aa26:	e7f2      	b.n	aa0e <__sfp+0x1a>
    aa28:	2104      	movs	r1, #4
    aa2a:	0038      	movs	r0, r7
    aa2c:	f7ff ff98 	bl	a960 <__sfmoreglue>
    aa30:	6030      	str	r0, [r6, #0]
    aa32:	2800      	cmp	r0, #0
    aa34:	d1f0      	bne.n	aa18 <__sfp+0x24>
    aa36:	230c      	movs	r3, #12
    aa38:	0004      	movs	r4, r0
    aa3a:	603b      	str	r3, [r7, #0]
    aa3c:	0020      	movs	r0, r4
    aa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa40:	2301      	movs	r3, #1
    aa42:	0020      	movs	r0, r4
    aa44:	425b      	negs	r3, r3
    aa46:	81e3      	strh	r3, [r4, #14]
    aa48:	3302      	adds	r3, #2
    aa4a:	81a3      	strh	r3, [r4, #12]
    aa4c:	6665      	str	r5, [r4, #100]	; 0x64
    aa4e:	6025      	str	r5, [r4, #0]
    aa50:	60a5      	str	r5, [r4, #8]
    aa52:	6065      	str	r5, [r4, #4]
    aa54:	6125      	str	r5, [r4, #16]
    aa56:	6165      	str	r5, [r4, #20]
    aa58:	61a5      	str	r5, [r4, #24]
    aa5a:	2208      	movs	r2, #8
    aa5c:	0029      	movs	r1, r5
    aa5e:	305c      	adds	r0, #92	; 0x5c
    aa60:	f7ff fda1 	bl	a5a6 <memset>
    aa64:	6365      	str	r5, [r4, #52]	; 0x34
    aa66:	63a5      	str	r5, [r4, #56]	; 0x38
    aa68:	64a5      	str	r5, [r4, #72]	; 0x48
    aa6a:	64e5      	str	r5, [r4, #76]	; 0x4c
    aa6c:	e7e6      	b.n	aa3c <__sfp+0x48>
    aa6e:	46c0      	nop			; (mov r8, r8)
    aa70:	0000c1e8 	.word	0x0000c1e8

0000aa74 <_fwalk_reent>:
    aa74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aa76:	0004      	movs	r4, r0
    aa78:	0007      	movs	r7, r0
    aa7a:	2600      	movs	r6, #0
    aa7c:	9101      	str	r1, [sp, #4]
    aa7e:	3448      	adds	r4, #72	; 0x48
    aa80:	2c00      	cmp	r4, #0
    aa82:	d101      	bne.n	aa88 <_fwalk_reent+0x14>
    aa84:	0030      	movs	r0, r6
    aa86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    aa88:	6863      	ldr	r3, [r4, #4]
    aa8a:	68a5      	ldr	r5, [r4, #8]
    aa8c:	9300      	str	r3, [sp, #0]
    aa8e:	9b00      	ldr	r3, [sp, #0]
    aa90:	3b01      	subs	r3, #1
    aa92:	9300      	str	r3, [sp, #0]
    aa94:	d501      	bpl.n	aa9a <_fwalk_reent+0x26>
    aa96:	6824      	ldr	r4, [r4, #0]
    aa98:	e7f2      	b.n	aa80 <_fwalk_reent+0xc>
    aa9a:	89ab      	ldrh	r3, [r5, #12]
    aa9c:	2b01      	cmp	r3, #1
    aa9e:	d908      	bls.n	aab2 <_fwalk_reent+0x3e>
    aaa0:	220e      	movs	r2, #14
    aaa2:	5eab      	ldrsh	r3, [r5, r2]
    aaa4:	3301      	adds	r3, #1
    aaa6:	d004      	beq.n	aab2 <_fwalk_reent+0x3e>
    aaa8:	0029      	movs	r1, r5
    aaaa:	0038      	movs	r0, r7
    aaac:	9b01      	ldr	r3, [sp, #4]
    aaae:	4798      	blx	r3
    aab0:	4306      	orrs	r6, r0
    aab2:	3568      	adds	r5, #104	; 0x68
    aab4:	e7eb      	b.n	aa8e <_fwalk_reent+0x1a>
	...

0000aab8 <__swhatbuf_r>:
    aab8:	b570      	push	{r4, r5, r6, lr}
    aaba:	000e      	movs	r6, r1
    aabc:	001d      	movs	r5, r3
    aabe:	230e      	movs	r3, #14
    aac0:	5ec9      	ldrsh	r1, [r1, r3]
    aac2:	b090      	sub	sp, #64	; 0x40
    aac4:	0014      	movs	r4, r2
    aac6:	2900      	cmp	r1, #0
    aac8:	da07      	bge.n	aada <__swhatbuf_r+0x22>
    aaca:	2300      	movs	r3, #0
    aacc:	602b      	str	r3, [r5, #0]
    aace:	89b3      	ldrh	r3, [r6, #12]
    aad0:	061b      	lsls	r3, r3, #24
    aad2:	d411      	bmi.n	aaf8 <__swhatbuf_r+0x40>
    aad4:	2380      	movs	r3, #128	; 0x80
    aad6:	00db      	lsls	r3, r3, #3
    aad8:	e00f      	b.n	aafa <__swhatbuf_r+0x42>
    aada:	aa01      	add	r2, sp, #4
    aadc:	f000 fe8c 	bl	b7f8 <_fstat_r>
    aae0:	2800      	cmp	r0, #0
    aae2:	dbf2      	blt.n	aaca <__swhatbuf_r+0x12>
    aae4:	22f0      	movs	r2, #240	; 0xf0
    aae6:	9b02      	ldr	r3, [sp, #8]
    aae8:	0212      	lsls	r2, r2, #8
    aaea:	4013      	ands	r3, r2
    aaec:	4a05      	ldr	r2, [pc, #20]	; (ab04 <__swhatbuf_r+0x4c>)
    aaee:	189b      	adds	r3, r3, r2
    aaf0:	425a      	negs	r2, r3
    aaf2:	4153      	adcs	r3, r2
    aaf4:	602b      	str	r3, [r5, #0]
    aaf6:	e7ed      	b.n	aad4 <__swhatbuf_r+0x1c>
    aaf8:	2340      	movs	r3, #64	; 0x40
    aafa:	2000      	movs	r0, #0
    aafc:	6023      	str	r3, [r4, #0]
    aafe:	b010      	add	sp, #64	; 0x40
    ab00:	bd70      	pop	{r4, r5, r6, pc}
    ab02:	46c0      	nop			; (mov r8, r8)
    ab04:	ffffe000 	.word	0xffffe000

0000ab08 <__smakebuf_r>:
    ab08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ab0a:	2602      	movs	r6, #2
    ab0c:	898b      	ldrh	r3, [r1, #12]
    ab0e:	0005      	movs	r5, r0
    ab10:	000c      	movs	r4, r1
    ab12:	4233      	tst	r3, r6
    ab14:	d006      	beq.n	ab24 <__smakebuf_r+0x1c>
    ab16:	0023      	movs	r3, r4
    ab18:	3347      	adds	r3, #71	; 0x47
    ab1a:	6023      	str	r3, [r4, #0]
    ab1c:	6123      	str	r3, [r4, #16]
    ab1e:	2301      	movs	r3, #1
    ab20:	6163      	str	r3, [r4, #20]
    ab22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ab24:	ab01      	add	r3, sp, #4
    ab26:	466a      	mov	r2, sp
    ab28:	f7ff ffc6 	bl	aab8 <__swhatbuf_r>
    ab2c:	9900      	ldr	r1, [sp, #0]
    ab2e:	0007      	movs	r7, r0
    ab30:	0028      	movs	r0, r5
    ab32:	f000 f881 	bl	ac38 <_malloc_r>
    ab36:	2800      	cmp	r0, #0
    ab38:	d108      	bne.n	ab4c <__smakebuf_r+0x44>
    ab3a:	220c      	movs	r2, #12
    ab3c:	5ea3      	ldrsh	r3, [r4, r2]
    ab3e:	059a      	lsls	r2, r3, #22
    ab40:	d4ef      	bmi.n	ab22 <__smakebuf_r+0x1a>
    ab42:	2203      	movs	r2, #3
    ab44:	4393      	bics	r3, r2
    ab46:	431e      	orrs	r6, r3
    ab48:	81a6      	strh	r6, [r4, #12]
    ab4a:	e7e4      	b.n	ab16 <__smakebuf_r+0xe>
    ab4c:	4b0f      	ldr	r3, [pc, #60]	; (ab8c <__smakebuf_r+0x84>)
    ab4e:	62ab      	str	r3, [r5, #40]	; 0x28
    ab50:	2380      	movs	r3, #128	; 0x80
    ab52:	89a2      	ldrh	r2, [r4, #12]
    ab54:	6020      	str	r0, [r4, #0]
    ab56:	4313      	orrs	r3, r2
    ab58:	81a3      	strh	r3, [r4, #12]
    ab5a:	9b00      	ldr	r3, [sp, #0]
    ab5c:	6120      	str	r0, [r4, #16]
    ab5e:	6163      	str	r3, [r4, #20]
    ab60:	9b01      	ldr	r3, [sp, #4]
    ab62:	2b00      	cmp	r3, #0
    ab64:	d00d      	beq.n	ab82 <__smakebuf_r+0x7a>
    ab66:	230e      	movs	r3, #14
    ab68:	5ee1      	ldrsh	r1, [r4, r3]
    ab6a:	0028      	movs	r0, r5
    ab6c:	f000 fe56 	bl	b81c <_isatty_r>
    ab70:	2800      	cmp	r0, #0
    ab72:	d006      	beq.n	ab82 <__smakebuf_r+0x7a>
    ab74:	2203      	movs	r2, #3
    ab76:	89a3      	ldrh	r3, [r4, #12]
    ab78:	4393      	bics	r3, r2
    ab7a:	001a      	movs	r2, r3
    ab7c:	2301      	movs	r3, #1
    ab7e:	4313      	orrs	r3, r2
    ab80:	81a3      	strh	r3, [r4, #12]
    ab82:	89a0      	ldrh	r0, [r4, #12]
    ab84:	4338      	orrs	r0, r7
    ab86:	81a0      	strh	r0, [r4, #12]
    ab88:	e7cb      	b.n	ab22 <__smakebuf_r+0x1a>
    ab8a:	46c0      	nop			; (mov r8, r8)
    ab8c:	0000a909 	.word	0x0000a909

0000ab90 <malloc>:
    ab90:	b510      	push	{r4, lr}
    ab92:	4b03      	ldr	r3, [pc, #12]	; (aba0 <malloc+0x10>)
    ab94:	0001      	movs	r1, r0
    ab96:	6818      	ldr	r0, [r3, #0]
    ab98:	f000 f84e 	bl	ac38 <_malloc_r>
    ab9c:	bd10      	pop	{r4, pc}
    ab9e:	46c0      	nop			; (mov r8, r8)
    aba0:	2000057c 	.word	0x2000057c

0000aba4 <_free_r>:
    aba4:	b570      	push	{r4, r5, r6, lr}
    aba6:	0005      	movs	r5, r0
    aba8:	2900      	cmp	r1, #0
    abaa:	d010      	beq.n	abce <_free_r+0x2a>
    abac:	1f0c      	subs	r4, r1, #4
    abae:	6823      	ldr	r3, [r4, #0]
    abb0:	2b00      	cmp	r3, #0
    abb2:	da00      	bge.n	abb6 <_free_r+0x12>
    abb4:	18e4      	adds	r4, r4, r3
    abb6:	0028      	movs	r0, r5
    abb8:	f000 fe73 	bl	b8a2 <__malloc_lock>
    abbc:	4a1d      	ldr	r2, [pc, #116]	; (ac34 <_free_r+0x90>)
    abbe:	6813      	ldr	r3, [r2, #0]
    abc0:	2b00      	cmp	r3, #0
    abc2:	d105      	bne.n	abd0 <_free_r+0x2c>
    abc4:	6063      	str	r3, [r4, #4]
    abc6:	6014      	str	r4, [r2, #0]
    abc8:	0028      	movs	r0, r5
    abca:	f000 fe6b 	bl	b8a4 <__malloc_unlock>
    abce:	bd70      	pop	{r4, r5, r6, pc}
    abd0:	42a3      	cmp	r3, r4
    abd2:	d909      	bls.n	abe8 <_free_r+0x44>
    abd4:	6821      	ldr	r1, [r4, #0]
    abd6:	1860      	adds	r0, r4, r1
    abd8:	4283      	cmp	r3, r0
    abda:	d1f3      	bne.n	abc4 <_free_r+0x20>
    abdc:	6818      	ldr	r0, [r3, #0]
    abde:	685b      	ldr	r3, [r3, #4]
    abe0:	1841      	adds	r1, r0, r1
    abe2:	6021      	str	r1, [r4, #0]
    abe4:	e7ee      	b.n	abc4 <_free_r+0x20>
    abe6:	0013      	movs	r3, r2
    abe8:	685a      	ldr	r2, [r3, #4]
    abea:	2a00      	cmp	r2, #0
    abec:	d001      	beq.n	abf2 <_free_r+0x4e>
    abee:	42a2      	cmp	r2, r4
    abf0:	d9f9      	bls.n	abe6 <_free_r+0x42>
    abf2:	6819      	ldr	r1, [r3, #0]
    abf4:	1858      	adds	r0, r3, r1
    abf6:	42a0      	cmp	r0, r4
    abf8:	d10b      	bne.n	ac12 <_free_r+0x6e>
    abfa:	6820      	ldr	r0, [r4, #0]
    abfc:	1809      	adds	r1, r1, r0
    abfe:	1858      	adds	r0, r3, r1
    ac00:	6019      	str	r1, [r3, #0]
    ac02:	4282      	cmp	r2, r0
    ac04:	d1e0      	bne.n	abc8 <_free_r+0x24>
    ac06:	6810      	ldr	r0, [r2, #0]
    ac08:	6852      	ldr	r2, [r2, #4]
    ac0a:	1841      	adds	r1, r0, r1
    ac0c:	6019      	str	r1, [r3, #0]
    ac0e:	605a      	str	r2, [r3, #4]
    ac10:	e7da      	b.n	abc8 <_free_r+0x24>
    ac12:	42a0      	cmp	r0, r4
    ac14:	d902      	bls.n	ac1c <_free_r+0x78>
    ac16:	230c      	movs	r3, #12
    ac18:	602b      	str	r3, [r5, #0]
    ac1a:	e7d5      	b.n	abc8 <_free_r+0x24>
    ac1c:	6821      	ldr	r1, [r4, #0]
    ac1e:	1860      	adds	r0, r4, r1
    ac20:	4282      	cmp	r2, r0
    ac22:	d103      	bne.n	ac2c <_free_r+0x88>
    ac24:	6810      	ldr	r0, [r2, #0]
    ac26:	6852      	ldr	r2, [r2, #4]
    ac28:	1841      	adds	r1, r0, r1
    ac2a:	6021      	str	r1, [r4, #0]
    ac2c:	6062      	str	r2, [r4, #4]
    ac2e:	605c      	str	r4, [r3, #4]
    ac30:	e7ca      	b.n	abc8 <_free_r+0x24>
    ac32:	46c0      	nop			; (mov r8, r8)
    ac34:	2000084c 	.word	0x2000084c

0000ac38 <_malloc_r>:
    ac38:	2303      	movs	r3, #3
    ac3a:	b570      	push	{r4, r5, r6, lr}
    ac3c:	1ccd      	adds	r5, r1, #3
    ac3e:	439d      	bics	r5, r3
    ac40:	3508      	adds	r5, #8
    ac42:	0006      	movs	r6, r0
    ac44:	2d0c      	cmp	r5, #12
    ac46:	d21e      	bcs.n	ac86 <_malloc_r+0x4e>
    ac48:	250c      	movs	r5, #12
    ac4a:	42a9      	cmp	r1, r5
    ac4c:	d81d      	bhi.n	ac8a <_malloc_r+0x52>
    ac4e:	0030      	movs	r0, r6
    ac50:	f000 fe27 	bl	b8a2 <__malloc_lock>
    ac54:	4a25      	ldr	r2, [pc, #148]	; (acec <_malloc_r+0xb4>)
    ac56:	6814      	ldr	r4, [r2, #0]
    ac58:	0021      	movs	r1, r4
    ac5a:	2900      	cmp	r1, #0
    ac5c:	d119      	bne.n	ac92 <_malloc_r+0x5a>
    ac5e:	4c24      	ldr	r4, [pc, #144]	; (acf0 <_malloc_r+0xb8>)
    ac60:	6823      	ldr	r3, [r4, #0]
    ac62:	2b00      	cmp	r3, #0
    ac64:	d103      	bne.n	ac6e <_malloc_r+0x36>
    ac66:	0030      	movs	r0, r6
    ac68:	f000 fc76 	bl	b558 <_sbrk_r>
    ac6c:	6020      	str	r0, [r4, #0]
    ac6e:	0029      	movs	r1, r5
    ac70:	0030      	movs	r0, r6
    ac72:	f000 fc71 	bl	b558 <_sbrk_r>
    ac76:	1c43      	adds	r3, r0, #1
    ac78:	d12c      	bne.n	acd4 <_malloc_r+0x9c>
    ac7a:	230c      	movs	r3, #12
    ac7c:	0030      	movs	r0, r6
    ac7e:	6033      	str	r3, [r6, #0]
    ac80:	f000 fe10 	bl	b8a4 <__malloc_unlock>
    ac84:	e003      	b.n	ac8e <_malloc_r+0x56>
    ac86:	2d00      	cmp	r5, #0
    ac88:	dadf      	bge.n	ac4a <_malloc_r+0x12>
    ac8a:	230c      	movs	r3, #12
    ac8c:	6033      	str	r3, [r6, #0]
    ac8e:	2000      	movs	r0, #0
    ac90:	bd70      	pop	{r4, r5, r6, pc}
    ac92:	680b      	ldr	r3, [r1, #0]
    ac94:	1b5b      	subs	r3, r3, r5
    ac96:	d41a      	bmi.n	acce <_malloc_r+0x96>
    ac98:	2b0b      	cmp	r3, #11
    ac9a:	d903      	bls.n	aca4 <_malloc_r+0x6c>
    ac9c:	600b      	str	r3, [r1, #0]
    ac9e:	18cc      	adds	r4, r1, r3
    aca0:	6025      	str	r5, [r4, #0]
    aca2:	e003      	b.n	acac <_malloc_r+0x74>
    aca4:	428c      	cmp	r4, r1
    aca6:	d10e      	bne.n	acc6 <_malloc_r+0x8e>
    aca8:	6863      	ldr	r3, [r4, #4]
    acaa:	6013      	str	r3, [r2, #0]
    acac:	0030      	movs	r0, r6
    acae:	f000 fdf9 	bl	b8a4 <__malloc_unlock>
    acb2:	0020      	movs	r0, r4
    acb4:	2207      	movs	r2, #7
    acb6:	300b      	adds	r0, #11
    acb8:	1d23      	adds	r3, r4, #4
    acba:	4390      	bics	r0, r2
    acbc:	1ac3      	subs	r3, r0, r3
    acbe:	d0e7      	beq.n	ac90 <_malloc_r+0x58>
    acc0:	425a      	negs	r2, r3
    acc2:	50e2      	str	r2, [r4, r3]
    acc4:	e7e4      	b.n	ac90 <_malloc_r+0x58>
    acc6:	684b      	ldr	r3, [r1, #4]
    acc8:	6063      	str	r3, [r4, #4]
    acca:	000c      	movs	r4, r1
    accc:	e7ee      	b.n	acac <_malloc_r+0x74>
    acce:	000c      	movs	r4, r1
    acd0:	6849      	ldr	r1, [r1, #4]
    acd2:	e7c2      	b.n	ac5a <_malloc_r+0x22>
    acd4:	2303      	movs	r3, #3
    acd6:	1cc4      	adds	r4, r0, #3
    acd8:	439c      	bics	r4, r3
    acda:	42a0      	cmp	r0, r4
    acdc:	d0e0      	beq.n	aca0 <_malloc_r+0x68>
    acde:	1a21      	subs	r1, r4, r0
    ace0:	0030      	movs	r0, r6
    ace2:	f000 fc39 	bl	b558 <_sbrk_r>
    ace6:	1c43      	adds	r3, r0, #1
    ace8:	d1da      	bne.n	aca0 <_malloc_r+0x68>
    acea:	e7c6      	b.n	ac7a <_malloc_r+0x42>
    acec:	2000084c 	.word	0x2000084c
    acf0:	20000850 	.word	0x20000850

0000acf4 <__ssputs_r>:
    acf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    acf6:	688e      	ldr	r6, [r1, #8]
    acf8:	b085      	sub	sp, #20
    acfa:	0007      	movs	r7, r0
    acfc:	000c      	movs	r4, r1
    acfe:	9203      	str	r2, [sp, #12]
    ad00:	9301      	str	r3, [sp, #4]
    ad02:	429e      	cmp	r6, r3
    ad04:	d839      	bhi.n	ad7a <__ssputs_r+0x86>
    ad06:	2390      	movs	r3, #144	; 0x90
    ad08:	898a      	ldrh	r2, [r1, #12]
    ad0a:	00db      	lsls	r3, r3, #3
    ad0c:	421a      	tst	r2, r3
    ad0e:	d034      	beq.n	ad7a <__ssputs_r+0x86>
    ad10:	2503      	movs	r5, #3
    ad12:	6909      	ldr	r1, [r1, #16]
    ad14:	6823      	ldr	r3, [r4, #0]
    ad16:	1a5b      	subs	r3, r3, r1
    ad18:	9302      	str	r3, [sp, #8]
    ad1a:	6963      	ldr	r3, [r4, #20]
    ad1c:	9802      	ldr	r0, [sp, #8]
    ad1e:	435d      	muls	r5, r3
    ad20:	0feb      	lsrs	r3, r5, #31
    ad22:	195d      	adds	r5, r3, r5
    ad24:	9b01      	ldr	r3, [sp, #4]
    ad26:	106d      	asrs	r5, r5, #1
    ad28:	3301      	adds	r3, #1
    ad2a:	181b      	adds	r3, r3, r0
    ad2c:	42ab      	cmp	r3, r5
    ad2e:	d900      	bls.n	ad32 <__ssputs_r+0x3e>
    ad30:	001d      	movs	r5, r3
    ad32:	0553      	lsls	r3, r2, #21
    ad34:	d532      	bpl.n	ad9c <__ssputs_r+0xa8>
    ad36:	0029      	movs	r1, r5
    ad38:	0038      	movs	r0, r7
    ad3a:	f7ff ff7d 	bl	ac38 <_malloc_r>
    ad3e:	1e06      	subs	r6, r0, #0
    ad40:	d109      	bne.n	ad56 <__ssputs_r+0x62>
    ad42:	230c      	movs	r3, #12
    ad44:	603b      	str	r3, [r7, #0]
    ad46:	2340      	movs	r3, #64	; 0x40
    ad48:	2001      	movs	r0, #1
    ad4a:	89a2      	ldrh	r2, [r4, #12]
    ad4c:	4240      	negs	r0, r0
    ad4e:	4313      	orrs	r3, r2
    ad50:	81a3      	strh	r3, [r4, #12]
    ad52:	b005      	add	sp, #20
    ad54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad56:	9a02      	ldr	r2, [sp, #8]
    ad58:	6921      	ldr	r1, [r4, #16]
    ad5a:	f7ff fc1b 	bl	a594 <memcpy>
    ad5e:	89a3      	ldrh	r3, [r4, #12]
    ad60:	4a14      	ldr	r2, [pc, #80]	; (adb4 <__ssputs_r+0xc0>)
    ad62:	401a      	ands	r2, r3
    ad64:	2380      	movs	r3, #128	; 0x80
    ad66:	4313      	orrs	r3, r2
    ad68:	81a3      	strh	r3, [r4, #12]
    ad6a:	9b02      	ldr	r3, [sp, #8]
    ad6c:	6126      	str	r6, [r4, #16]
    ad6e:	18f6      	adds	r6, r6, r3
    ad70:	6026      	str	r6, [r4, #0]
    ad72:	6165      	str	r5, [r4, #20]
    ad74:	9e01      	ldr	r6, [sp, #4]
    ad76:	1aed      	subs	r5, r5, r3
    ad78:	60a5      	str	r5, [r4, #8]
    ad7a:	9b01      	ldr	r3, [sp, #4]
    ad7c:	42b3      	cmp	r3, r6
    ad7e:	d200      	bcs.n	ad82 <__ssputs_r+0x8e>
    ad80:	001e      	movs	r6, r3
    ad82:	0032      	movs	r2, r6
    ad84:	9903      	ldr	r1, [sp, #12]
    ad86:	6820      	ldr	r0, [r4, #0]
    ad88:	f000 fd79 	bl	b87e <memmove>
    ad8c:	68a3      	ldr	r3, [r4, #8]
    ad8e:	2000      	movs	r0, #0
    ad90:	1b9b      	subs	r3, r3, r6
    ad92:	60a3      	str	r3, [r4, #8]
    ad94:	6823      	ldr	r3, [r4, #0]
    ad96:	199e      	adds	r6, r3, r6
    ad98:	6026      	str	r6, [r4, #0]
    ad9a:	e7da      	b.n	ad52 <__ssputs_r+0x5e>
    ad9c:	002a      	movs	r2, r5
    ad9e:	0038      	movs	r0, r7
    ada0:	f000 fd81 	bl	b8a6 <_realloc_r>
    ada4:	1e06      	subs	r6, r0, #0
    ada6:	d1e0      	bne.n	ad6a <__ssputs_r+0x76>
    ada8:	6921      	ldr	r1, [r4, #16]
    adaa:	0038      	movs	r0, r7
    adac:	f7ff fefa 	bl	aba4 <_free_r>
    adb0:	e7c7      	b.n	ad42 <__ssputs_r+0x4e>
    adb2:	46c0      	nop			; (mov r8, r8)
    adb4:	fffffb7f 	.word	0xfffffb7f

0000adb8 <_svfiprintf_r>:
    adb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adba:	b09f      	sub	sp, #124	; 0x7c
    adbc:	9002      	str	r0, [sp, #8]
    adbe:	9305      	str	r3, [sp, #20]
    adc0:	898b      	ldrh	r3, [r1, #12]
    adc2:	000f      	movs	r7, r1
    adc4:	0016      	movs	r6, r2
    adc6:	061b      	lsls	r3, r3, #24
    adc8:	d511      	bpl.n	adee <_svfiprintf_r+0x36>
    adca:	690b      	ldr	r3, [r1, #16]
    adcc:	2b00      	cmp	r3, #0
    adce:	d10e      	bne.n	adee <_svfiprintf_r+0x36>
    add0:	2140      	movs	r1, #64	; 0x40
    add2:	f7ff ff31 	bl	ac38 <_malloc_r>
    add6:	6038      	str	r0, [r7, #0]
    add8:	6138      	str	r0, [r7, #16]
    adda:	2800      	cmp	r0, #0
    addc:	d105      	bne.n	adea <_svfiprintf_r+0x32>
    adde:	230c      	movs	r3, #12
    ade0:	9a02      	ldr	r2, [sp, #8]
    ade2:	3801      	subs	r0, #1
    ade4:	6013      	str	r3, [r2, #0]
    ade6:	b01f      	add	sp, #124	; 0x7c
    ade8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adea:	2340      	movs	r3, #64	; 0x40
    adec:	617b      	str	r3, [r7, #20]
    adee:	2300      	movs	r3, #0
    adf0:	ad06      	add	r5, sp, #24
    adf2:	616b      	str	r3, [r5, #20]
    adf4:	3320      	adds	r3, #32
    adf6:	766b      	strb	r3, [r5, #25]
    adf8:	3310      	adds	r3, #16
    adfa:	76ab      	strb	r3, [r5, #26]
    adfc:	0034      	movs	r4, r6
    adfe:	7823      	ldrb	r3, [r4, #0]
    ae00:	2b00      	cmp	r3, #0
    ae02:	d147      	bne.n	ae94 <_svfiprintf_r+0xdc>
    ae04:	1ba3      	subs	r3, r4, r6
    ae06:	9304      	str	r3, [sp, #16]
    ae08:	d00d      	beq.n	ae26 <_svfiprintf_r+0x6e>
    ae0a:	1ba3      	subs	r3, r4, r6
    ae0c:	0032      	movs	r2, r6
    ae0e:	0039      	movs	r1, r7
    ae10:	9802      	ldr	r0, [sp, #8]
    ae12:	f7ff ff6f 	bl	acf4 <__ssputs_r>
    ae16:	1c43      	adds	r3, r0, #1
    ae18:	d100      	bne.n	ae1c <_svfiprintf_r+0x64>
    ae1a:	e0b5      	b.n	af88 <_svfiprintf_r+0x1d0>
    ae1c:	696a      	ldr	r2, [r5, #20]
    ae1e:	9b04      	ldr	r3, [sp, #16]
    ae20:	4694      	mov	ip, r2
    ae22:	4463      	add	r3, ip
    ae24:	616b      	str	r3, [r5, #20]
    ae26:	7823      	ldrb	r3, [r4, #0]
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d100      	bne.n	ae2e <_svfiprintf_r+0x76>
    ae2c:	e0ac      	b.n	af88 <_svfiprintf_r+0x1d0>
    ae2e:	2201      	movs	r2, #1
    ae30:	2300      	movs	r3, #0
    ae32:	4252      	negs	r2, r2
    ae34:	606a      	str	r2, [r5, #4]
    ae36:	a902      	add	r1, sp, #8
    ae38:	3254      	adds	r2, #84	; 0x54
    ae3a:	1852      	adds	r2, r2, r1
    ae3c:	3401      	adds	r4, #1
    ae3e:	602b      	str	r3, [r5, #0]
    ae40:	60eb      	str	r3, [r5, #12]
    ae42:	60ab      	str	r3, [r5, #8]
    ae44:	7013      	strb	r3, [r2, #0]
    ae46:	65ab      	str	r3, [r5, #88]	; 0x58
    ae48:	4e58      	ldr	r6, [pc, #352]	; (afac <_svfiprintf_r+0x1f4>)
    ae4a:	2205      	movs	r2, #5
    ae4c:	7821      	ldrb	r1, [r4, #0]
    ae4e:	0030      	movs	r0, r6
    ae50:	f000 fd0a 	bl	b868 <memchr>
    ae54:	1c62      	adds	r2, r4, #1
    ae56:	2800      	cmp	r0, #0
    ae58:	d120      	bne.n	ae9c <_svfiprintf_r+0xe4>
    ae5a:	6829      	ldr	r1, [r5, #0]
    ae5c:	06cb      	lsls	r3, r1, #27
    ae5e:	d504      	bpl.n	ae6a <_svfiprintf_r+0xb2>
    ae60:	2353      	movs	r3, #83	; 0x53
    ae62:	ae02      	add	r6, sp, #8
    ae64:	3020      	adds	r0, #32
    ae66:	199b      	adds	r3, r3, r6
    ae68:	7018      	strb	r0, [r3, #0]
    ae6a:	070b      	lsls	r3, r1, #28
    ae6c:	d504      	bpl.n	ae78 <_svfiprintf_r+0xc0>
    ae6e:	2353      	movs	r3, #83	; 0x53
    ae70:	202b      	movs	r0, #43	; 0x2b
    ae72:	ae02      	add	r6, sp, #8
    ae74:	199b      	adds	r3, r3, r6
    ae76:	7018      	strb	r0, [r3, #0]
    ae78:	7823      	ldrb	r3, [r4, #0]
    ae7a:	2b2a      	cmp	r3, #42	; 0x2a
    ae7c:	d016      	beq.n	aeac <_svfiprintf_r+0xf4>
    ae7e:	2000      	movs	r0, #0
    ae80:	210a      	movs	r1, #10
    ae82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae84:	7822      	ldrb	r2, [r4, #0]
    ae86:	3a30      	subs	r2, #48	; 0x30
    ae88:	2a09      	cmp	r2, #9
    ae8a:	d955      	bls.n	af38 <_svfiprintf_r+0x180>
    ae8c:	2800      	cmp	r0, #0
    ae8e:	d015      	beq.n	aebc <_svfiprintf_r+0x104>
    ae90:	9309      	str	r3, [sp, #36]	; 0x24
    ae92:	e013      	b.n	aebc <_svfiprintf_r+0x104>
    ae94:	2b25      	cmp	r3, #37	; 0x25
    ae96:	d0b5      	beq.n	ae04 <_svfiprintf_r+0x4c>
    ae98:	3401      	adds	r4, #1
    ae9a:	e7b0      	b.n	adfe <_svfiprintf_r+0x46>
    ae9c:	2301      	movs	r3, #1
    ae9e:	1b80      	subs	r0, r0, r6
    aea0:	4083      	lsls	r3, r0
    aea2:	6829      	ldr	r1, [r5, #0]
    aea4:	0014      	movs	r4, r2
    aea6:	430b      	orrs	r3, r1
    aea8:	602b      	str	r3, [r5, #0]
    aeaa:	e7cd      	b.n	ae48 <_svfiprintf_r+0x90>
    aeac:	9b05      	ldr	r3, [sp, #20]
    aeae:	1d18      	adds	r0, r3, #4
    aeb0:	681b      	ldr	r3, [r3, #0]
    aeb2:	9005      	str	r0, [sp, #20]
    aeb4:	2b00      	cmp	r3, #0
    aeb6:	db39      	blt.n	af2c <_svfiprintf_r+0x174>
    aeb8:	9309      	str	r3, [sp, #36]	; 0x24
    aeba:	0014      	movs	r4, r2
    aebc:	7823      	ldrb	r3, [r4, #0]
    aebe:	2b2e      	cmp	r3, #46	; 0x2e
    aec0:	d10b      	bne.n	aeda <_svfiprintf_r+0x122>
    aec2:	7863      	ldrb	r3, [r4, #1]
    aec4:	1c62      	adds	r2, r4, #1
    aec6:	2b2a      	cmp	r3, #42	; 0x2a
    aec8:	d13e      	bne.n	af48 <_svfiprintf_r+0x190>
    aeca:	9b05      	ldr	r3, [sp, #20]
    aecc:	3402      	adds	r4, #2
    aece:	1d1a      	adds	r2, r3, #4
    aed0:	681b      	ldr	r3, [r3, #0]
    aed2:	9205      	str	r2, [sp, #20]
    aed4:	2b00      	cmp	r3, #0
    aed6:	db34      	blt.n	af42 <_svfiprintf_r+0x18a>
    aed8:	9307      	str	r3, [sp, #28]
    aeda:	4e35      	ldr	r6, [pc, #212]	; (afb0 <_svfiprintf_r+0x1f8>)
    aedc:	7821      	ldrb	r1, [r4, #0]
    aede:	2203      	movs	r2, #3
    aee0:	0030      	movs	r0, r6
    aee2:	f000 fcc1 	bl	b868 <memchr>
    aee6:	2800      	cmp	r0, #0
    aee8:	d006      	beq.n	aef8 <_svfiprintf_r+0x140>
    aeea:	2340      	movs	r3, #64	; 0x40
    aeec:	1b80      	subs	r0, r0, r6
    aeee:	4083      	lsls	r3, r0
    aef0:	682a      	ldr	r2, [r5, #0]
    aef2:	3401      	adds	r4, #1
    aef4:	4313      	orrs	r3, r2
    aef6:	602b      	str	r3, [r5, #0]
    aef8:	7821      	ldrb	r1, [r4, #0]
    aefa:	2206      	movs	r2, #6
    aefc:	482d      	ldr	r0, [pc, #180]	; (afb4 <_svfiprintf_r+0x1fc>)
    aefe:	1c66      	adds	r6, r4, #1
    af00:	7629      	strb	r1, [r5, #24]
    af02:	f000 fcb1 	bl	b868 <memchr>
    af06:	2800      	cmp	r0, #0
    af08:	d046      	beq.n	af98 <_svfiprintf_r+0x1e0>
    af0a:	4b2b      	ldr	r3, [pc, #172]	; (afb8 <_svfiprintf_r+0x200>)
    af0c:	2b00      	cmp	r3, #0
    af0e:	d12f      	bne.n	af70 <_svfiprintf_r+0x1b8>
    af10:	6829      	ldr	r1, [r5, #0]
    af12:	9b05      	ldr	r3, [sp, #20]
    af14:	2207      	movs	r2, #7
    af16:	05c9      	lsls	r1, r1, #23
    af18:	d528      	bpl.n	af6c <_svfiprintf_r+0x1b4>
    af1a:	189b      	adds	r3, r3, r2
    af1c:	4393      	bics	r3, r2
    af1e:	3308      	adds	r3, #8
    af20:	9305      	str	r3, [sp, #20]
    af22:	696b      	ldr	r3, [r5, #20]
    af24:	9a03      	ldr	r2, [sp, #12]
    af26:	189b      	adds	r3, r3, r2
    af28:	616b      	str	r3, [r5, #20]
    af2a:	e767      	b.n	adfc <_svfiprintf_r+0x44>
    af2c:	425b      	negs	r3, r3
    af2e:	60eb      	str	r3, [r5, #12]
    af30:	2302      	movs	r3, #2
    af32:	430b      	orrs	r3, r1
    af34:	602b      	str	r3, [r5, #0]
    af36:	e7c0      	b.n	aeba <_svfiprintf_r+0x102>
    af38:	434b      	muls	r3, r1
    af3a:	3401      	adds	r4, #1
    af3c:	189b      	adds	r3, r3, r2
    af3e:	2001      	movs	r0, #1
    af40:	e7a0      	b.n	ae84 <_svfiprintf_r+0xcc>
    af42:	2301      	movs	r3, #1
    af44:	425b      	negs	r3, r3
    af46:	e7c7      	b.n	aed8 <_svfiprintf_r+0x120>
    af48:	2300      	movs	r3, #0
    af4a:	0014      	movs	r4, r2
    af4c:	200a      	movs	r0, #10
    af4e:	001a      	movs	r2, r3
    af50:	606b      	str	r3, [r5, #4]
    af52:	7821      	ldrb	r1, [r4, #0]
    af54:	3930      	subs	r1, #48	; 0x30
    af56:	2909      	cmp	r1, #9
    af58:	d903      	bls.n	af62 <_svfiprintf_r+0x1aa>
    af5a:	2b00      	cmp	r3, #0
    af5c:	d0bd      	beq.n	aeda <_svfiprintf_r+0x122>
    af5e:	9207      	str	r2, [sp, #28]
    af60:	e7bb      	b.n	aeda <_svfiprintf_r+0x122>
    af62:	4342      	muls	r2, r0
    af64:	3401      	adds	r4, #1
    af66:	1852      	adds	r2, r2, r1
    af68:	2301      	movs	r3, #1
    af6a:	e7f2      	b.n	af52 <_svfiprintf_r+0x19a>
    af6c:	3307      	adds	r3, #7
    af6e:	e7d5      	b.n	af1c <_svfiprintf_r+0x164>
    af70:	ab05      	add	r3, sp, #20
    af72:	9300      	str	r3, [sp, #0]
    af74:	003a      	movs	r2, r7
    af76:	4b11      	ldr	r3, [pc, #68]	; (afbc <_svfiprintf_r+0x204>)
    af78:	0029      	movs	r1, r5
    af7a:	9802      	ldr	r0, [sp, #8]
    af7c:	e000      	b.n	af80 <_svfiprintf_r+0x1c8>
    af7e:	bf00      	nop
    af80:	9003      	str	r0, [sp, #12]
    af82:	9b03      	ldr	r3, [sp, #12]
    af84:	3301      	adds	r3, #1
    af86:	d1cc      	bne.n	af22 <_svfiprintf_r+0x16a>
    af88:	89bb      	ldrh	r3, [r7, #12]
    af8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    af8c:	065b      	lsls	r3, r3, #25
    af8e:	d400      	bmi.n	af92 <_svfiprintf_r+0x1da>
    af90:	e729      	b.n	ade6 <_svfiprintf_r+0x2e>
    af92:	2001      	movs	r0, #1
    af94:	4240      	negs	r0, r0
    af96:	e726      	b.n	ade6 <_svfiprintf_r+0x2e>
    af98:	ab05      	add	r3, sp, #20
    af9a:	9300      	str	r3, [sp, #0]
    af9c:	003a      	movs	r2, r7
    af9e:	4b07      	ldr	r3, [pc, #28]	; (afbc <_svfiprintf_r+0x204>)
    afa0:	0029      	movs	r1, r5
    afa2:	9802      	ldr	r0, [sp, #8]
    afa4:	f000 f9be 	bl	b324 <_printf_i>
    afa8:	e7ea      	b.n	af80 <_svfiprintf_r+0x1c8>
    afaa:	46c0      	nop			; (mov r8, r8)
    afac:	0000c24c 	.word	0x0000c24c
    afb0:	0000c252 	.word	0x0000c252
    afb4:	0000c256 	.word	0x0000c256
    afb8:	00000000 	.word	0x00000000
    afbc:	0000acf5 	.word	0x0000acf5

0000afc0 <__sfputc_r>:
    afc0:	6893      	ldr	r3, [r2, #8]
    afc2:	b510      	push	{r4, lr}
    afc4:	3b01      	subs	r3, #1
    afc6:	6093      	str	r3, [r2, #8]
    afc8:	2b00      	cmp	r3, #0
    afca:	da05      	bge.n	afd8 <__sfputc_r+0x18>
    afcc:	6994      	ldr	r4, [r2, #24]
    afce:	42a3      	cmp	r3, r4
    afd0:	db08      	blt.n	afe4 <__sfputc_r+0x24>
    afd2:	b2cb      	uxtb	r3, r1
    afd4:	2b0a      	cmp	r3, #10
    afd6:	d005      	beq.n	afe4 <__sfputc_r+0x24>
    afd8:	6813      	ldr	r3, [r2, #0]
    afda:	1c58      	adds	r0, r3, #1
    afdc:	6010      	str	r0, [r2, #0]
    afde:	7019      	strb	r1, [r3, #0]
    afe0:	b2c8      	uxtb	r0, r1
    afe2:	bd10      	pop	{r4, pc}
    afe4:	f000 fb16 	bl	b614 <__swbuf_r>
    afe8:	e7fb      	b.n	afe2 <__sfputc_r+0x22>

0000afea <__sfputs_r>:
    afea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afec:	0006      	movs	r6, r0
    afee:	000f      	movs	r7, r1
    aff0:	0014      	movs	r4, r2
    aff2:	18d5      	adds	r5, r2, r3
    aff4:	42ac      	cmp	r4, r5
    aff6:	d101      	bne.n	affc <__sfputs_r+0x12>
    aff8:	2000      	movs	r0, #0
    affa:	e007      	b.n	b00c <__sfputs_r+0x22>
    affc:	7821      	ldrb	r1, [r4, #0]
    affe:	003a      	movs	r2, r7
    b000:	0030      	movs	r0, r6
    b002:	f7ff ffdd 	bl	afc0 <__sfputc_r>
    b006:	3401      	adds	r4, #1
    b008:	1c43      	adds	r3, r0, #1
    b00a:	d1f3      	bne.n	aff4 <__sfputs_r+0xa>
    b00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000b010 <_vfiprintf_r>:
    b010:	b5f0      	push	{r4, r5, r6, r7, lr}
    b012:	b09f      	sub	sp, #124	; 0x7c
    b014:	0006      	movs	r6, r0
    b016:	000f      	movs	r7, r1
    b018:	0014      	movs	r4, r2
    b01a:	9305      	str	r3, [sp, #20]
    b01c:	2800      	cmp	r0, #0
    b01e:	d004      	beq.n	b02a <_vfiprintf_r+0x1a>
    b020:	6983      	ldr	r3, [r0, #24]
    b022:	2b00      	cmp	r3, #0
    b024:	d101      	bne.n	b02a <_vfiprintf_r+0x1a>
    b026:	f7ff fcb1 	bl	a98c <__sinit>
    b02a:	4b7f      	ldr	r3, [pc, #508]	; (b228 <_vfiprintf_r+0x218>)
    b02c:	429f      	cmp	r7, r3
    b02e:	d15c      	bne.n	b0ea <_vfiprintf_r+0xda>
    b030:	6877      	ldr	r7, [r6, #4]
    b032:	89bb      	ldrh	r3, [r7, #12]
    b034:	071b      	lsls	r3, r3, #28
    b036:	d562      	bpl.n	b0fe <_vfiprintf_r+0xee>
    b038:	693b      	ldr	r3, [r7, #16]
    b03a:	2b00      	cmp	r3, #0
    b03c:	d05f      	beq.n	b0fe <_vfiprintf_r+0xee>
    b03e:	2300      	movs	r3, #0
    b040:	ad06      	add	r5, sp, #24
    b042:	616b      	str	r3, [r5, #20]
    b044:	3320      	adds	r3, #32
    b046:	766b      	strb	r3, [r5, #25]
    b048:	3310      	adds	r3, #16
    b04a:	76ab      	strb	r3, [r5, #26]
    b04c:	9402      	str	r4, [sp, #8]
    b04e:	9c02      	ldr	r4, [sp, #8]
    b050:	7823      	ldrb	r3, [r4, #0]
    b052:	2b00      	cmp	r3, #0
    b054:	d15d      	bne.n	b112 <_vfiprintf_r+0x102>
    b056:	9b02      	ldr	r3, [sp, #8]
    b058:	1ae3      	subs	r3, r4, r3
    b05a:	9304      	str	r3, [sp, #16]
    b05c:	d00d      	beq.n	b07a <_vfiprintf_r+0x6a>
    b05e:	9b04      	ldr	r3, [sp, #16]
    b060:	9a02      	ldr	r2, [sp, #8]
    b062:	0039      	movs	r1, r7
    b064:	0030      	movs	r0, r6
    b066:	f7ff ffc0 	bl	afea <__sfputs_r>
    b06a:	1c43      	adds	r3, r0, #1
    b06c:	d100      	bne.n	b070 <_vfiprintf_r+0x60>
    b06e:	e0cc      	b.n	b20a <_vfiprintf_r+0x1fa>
    b070:	696a      	ldr	r2, [r5, #20]
    b072:	9b04      	ldr	r3, [sp, #16]
    b074:	4694      	mov	ip, r2
    b076:	4463      	add	r3, ip
    b078:	616b      	str	r3, [r5, #20]
    b07a:	7823      	ldrb	r3, [r4, #0]
    b07c:	2b00      	cmp	r3, #0
    b07e:	d100      	bne.n	b082 <_vfiprintf_r+0x72>
    b080:	e0c3      	b.n	b20a <_vfiprintf_r+0x1fa>
    b082:	2201      	movs	r2, #1
    b084:	2300      	movs	r3, #0
    b086:	4252      	negs	r2, r2
    b088:	606a      	str	r2, [r5, #4]
    b08a:	a902      	add	r1, sp, #8
    b08c:	3254      	adds	r2, #84	; 0x54
    b08e:	1852      	adds	r2, r2, r1
    b090:	3401      	adds	r4, #1
    b092:	602b      	str	r3, [r5, #0]
    b094:	60eb      	str	r3, [r5, #12]
    b096:	60ab      	str	r3, [r5, #8]
    b098:	7013      	strb	r3, [r2, #0]
    b09a:	65ab      	str	r3, [r5, #88]	; 0x58
    b09c:	7821      	ldrb	r1, [r4, #0]
    b09e:	2205      	movs	r2, #5
    b0a0:	4862      	ldr	r0, [pc, #392]	; (b22c <_vfiprintf_r+0x21c>)
    b0a2:	f000 fbe1 	bl	b868 <memchr>
    b0a6:	1c63      	adds	r3, r4, #1
    b0a8:	469c      	mov	ip, r3
    b0aa:	2800      	cmp	r0, #0
    b0ac:	d135      	bne.n	b11a <_vfiprintf_r+0x10a>
    b0ae:	6829      	ldr	r1, [r5, #0]
    b0b0:	06cb      	lsls	r3, r1, #27
    b0b2:	d504      	bpl.n	b0be <_vfiprintf_r+0xae>
    b0b4:	2353      	movs	r3, #83	; 0x53
    b0b6:	aa02      	add	r2, sp, #8
    b0b8:	3020      	adds	r0, #32
    b0ba:	189b      	adds	r3, r3, r2
    b0bc:	7018      	strb	r0, [r3, #0]
    b0be:	070b      	lsls	r3, r1, #28
    b0c0:	d504      	bpl.n	b0cc <_vfiprintf_r+0xbc>
    b0c2:	2353      	movs	r3, #83	; 0x53
    b0c4:	202b      	movs	r0, #43	; 0x2b
    b0c6:	aa02      	add	r2, sp, #8
    b0c8:	189b      	adds	r3, r3, r2
    b0ca:	7018      	strb	r0, [r3, #0]
    b0cc:	7823      	ldrb	r3, [r4, #0]
    b0ce:	2b2a      	cmp	r3, #42	; 0x2a
    b0d0:	d02c      	beq.n	b12c <_vfiprintf_r+0x11c>
    b0d2:	2000      	movs	r0, #0
    b0d4:	210a      	movs	r1, #10
    b0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0d8:	7822      	ldrb	r2, [r4, #0]
    b0da:	3a30      	subs	r2, #48	; 0x30
    b0dc:	2a09      	cmp	r2, #9
    b0de:	d800      	bhi.n	b0e2 <_vfiprintf_r+0xd2>
    b0e0:	e06b      	b.n	b1ba <_vfiprintf_r+0x1aa>
    b0e2:	2800      	cmp	r0, #0
    b0e4:	d02a      	beq.n	b13c <_vfiprintf_r+0x12c>
    b0e6:	9309      	str	r3, [sp, #36]	; 0x24
    b0e8:	e028      	b.n	b13c <_vfiprintf_r+0x12c>
    b0ea:	4b51      	ldr	r3, [pc, #324]	; (b230 <_vfiprintf_r+0x220>)
    b0ec:	429f      	cmp	r7, r3
    b0ee:	d101      	bne.n	b0f4 <_vfiprintf_r+0xe4>
    b0f0:	68b7      	ldr	r7, [r6, #8]
    b0f2:	e79e      	b.n	b032 <_vfiprintf_r+0x22>
    b0f4:	4b4f      	ldr	r3, [pc, #316]	; (b234 <_vfiprintf_r+0x224>)
    b0f6:	429f      	cmp	r7, r3
    b0f8:	d19b      	bne.n	b032 <_vfiprintf_r+0x22>
    b0fa:	68f7      	ldr	r7, [r6, #12]
    b0fc:	e799      	b.n	b032 <_vfiprintf_r+0x22>
    b0fe:	0039      	movs	r1, r7
    b100:	0030      	movs	r0, r6
    b102:	f000 faf1 	bl	b6e8 <__swsetup_r>
    b106:	2800      	cmp	r0, #0
    b108:	d099      	beq.n	b03e <_vfiprintf_r+0x2e>
    b10a:	2001      	movs	r0, #1
    b10c:	4240      	negs	r0, r0
    b10e:	b01f      	add	sp, #124	; 0x7c
    b110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b112:	2b25      	cmp	r3, #37	; 0x25
    b114:	d09f      	beq.n	b056 <_vfiprintf_r+0x46>
    b116:	3401      	adds	r4, #1
    b118:	e79a      	b.n	b050 <_vfiprintf_r+0x40>
    b11a:	4b44      	ldr	r3, [pc, #272]	; (b22c <_vfiprintf_r+0x21c>)
    b11c:	6829      	ldr	r1, [r5, #0]
    b11e:	1ac0      	subs	r0, r0, r3
    b120:	2301      	movs	r3, #1
    b122:	4083      	lsls	r3, r0
    b124:	430b      	orrs	r3, r1
    b126:	602b      	str	r3, [r5, #0]
    b128:	4664      	mov	r4, ip
    b12a:	e7b7      	b.n	b09c <_vfiprintf_r+0x8c>
    b12c:	9b05      	ldr	r3, [sp, #20]
    b12e:	1d18      	adds	r0, r3, #4
    b130:	681b      	ldr	r3, [r3, #0]
    b132:	9005      	str	r0, [sp, #20]
    b134:	2b00      	cmp	r3, #0
    b136:	db3a      	blt.n	b1ae <_vfiprintf_r+0x19e>
    b138:	9309      	str	r3, [sp, #36]	; 0x24
    b13a:	4664      	mov	r4, ip
    b13c:	7823      	ldrb	r3, [r4, #0]
    b13e:	2b2e      	cmp	r3, #46	; 0x2e
    b140:	d10b      	bne.n	b15a <_vfiprintf_r+0x14a>
    b142:	7863      	ldrb	r3, [r4, #1]
    b144:	1c62      	adds	r2, r4, #1
    b146:	2b2a      	cmp	r3, #42	; 0x2a
    b148:	d13f      	bne.n	b1ca <_vfiprintf_r+0x1ba>
    b14a:	9b05      	ldr	r3, [sp, #20]
    b14c:	3402      	adds	r4, #2
    b14e:	1d1a      	adds	r2, r3, #4
    b150:	681b      	ldr	r3, [r3, #0]
    b152:	9205      	str	r2, [sp, #20]
    b154:	2b00      	cmp	r3, #0
    b156:	db35      	blt.n	b1c4 <_vfiprintf_r+0x1b4>
    b158:	9307      	str	r3, [sp, #28]
    b15a:	7821      	ldrb	r1, [r4, #0]
    b15c:	2203      	movs	r2, #3
    b15e:	4836      	ldr	r0, [pc, #216]	; (b238 <_vfiprintf_r+0x228>)
    b160:	f000 fb82 	bl	b868 <memchr>
    b164:	2800      	cmp	r0, #0
    b166:	d007      	beq.n	b178 <_vfiprintf_r+0x168>
    b168:	4b33      	ldr	r3, [pc, #204]	; (b238 <_vfiprintf_r+0x228>)
    b16a:	682a      	ldr	r2, [r5, #0]
    b16c:	1ac0      	subs	r0, r0, r3
    b16e:	2340      	movs	r3, #64	; 0x40
    b170:	4083      	lsls	r3, r0
    b172:	4313      	orrs	r3, r2
    b174:	602b      	str	r3, [r5, #0]
    b176:	3401      	adds	r4, #1
    b178:	7821      	ldrb	r1, [r4, #0]
    b17a:	1c63      	adds	r3, r4, #1
    b17c:	2206      	movs	r2, #6
    b17e:	482f      	ldr	r0, [pc, #188]	; (b23c <_vfiprintf_r+0x22c>)
    b180:	9302      	str	r3, [sp, #8]
    b182:	7629      	strb	r1, [r5, #24]
    b184:	f000 fb70 	bl	b868 <memchr>
    b188:	2800      	cmp	r0, #0
    b18a:	d044      	beq.n	b216 <_vfiprintf_r+0x206>
    b18c:	4b2c      	ldr	r3, [pc, #176]	; (b240 <_vfiprintf_r+0x230>)
    b18e:	2b00      	cmp	r3, #0
    b190:	d12f      	bne.n	b1f2 <_vfiprintf_r+0x1e2>
    b192:	6829      	ldr	r1, [r5, #0]
    b194:	9b05      	ldr	r3, [sp, #20]
    b196:	2207      	movs	r2, #7
    b198:	05c9      	lsls	r1, r1, #23
    b19a:	d528      	bpl.n	b1ee <_vfiprintf_r+0x1de>
    b19c:	189b      	adds	r3, r3, r2
    b19e:	4393      	bics	r3, r2
    b1a0:	3308      	adds	r3, #8
    b1a2:	9305      	str	r3, [sp, #20]
    b1a4:	696b      	ldr	r3, [r5, #20]
    b1a6:	9a03      	ldr	r2, [sp, #12]
    b1a8:	189b      	adds	r3, r3, r2
    b1aa:	616b      	str	r3, [r5, #20]
    b1ac:	e74f      	b.n	b04e <_vfiprintf_r+0x3e>
    b1ae:	425b      	negs	r3, r3
    b1b0:	60eb      	str	r3, [r5, #12]
    b1b2:	2302      	movs	r3, #2
    b1b4:	430b      	orrs	r3, r1
    b1b6:	602b      	str	r3, [r5, #0]
    b1b8:	e7bf      	b.n	b13a <_vfiprintf_r+0x12a>
    b1ba:	434b      	muls	r3, r1
    b1bc:	3401      	adds	r4, #1
    b1be:	189b      	adds	r3, r3, r2
    b1c0:	2001      	movs	r0, #1
    b1c2:	e789      	b.n	b0d8 <_vfiprintf_r+0xc8>
    b1c4:	2301      	movs	r3, #1
    b1c6:	425b      	negs	r3, r3
    b1c8:	e7c6      	b.n	b158 <_vfiprintf_r+0x148>
    b1ca:	2300      	movs	r3, #0
    b1cc:	0014      	movs	r4, r2
    b1ce:	200a      	movs	r0, #10
    b1d0:	001a      	movs	r2, r3
    b1d2:	606b      	str	r3, [r5, #4]
    b1d4:	7821      	ldrb	r1, [r4, #0]
    b1d6:	3930      	subs	r1, #48	; 0x30
    b1d8:	2909      	cmp	r1, #9
    b1da:	d903      	bls.n	b1e4 <_vfiprintf_r+0x1d4>
    b1dc:	2b00      	cmp	r3, #0
    b1de:	d0bc      	beq.n	b15a <_vfiprintf_r+0x14a>
    b1e0:	9207      	str	r2, [sp, #28]
    b1e2:	e7ba      	b.n	b15a <_vfiprintf_r+0x14a>
    b1e4:	4342      	muls	r2, r0
    b1e6:	3401      	adds	r4, #1
    b1e8:	1852      	adds	r2, r2, r1
    b1ea:	2301      	movs	r3, #1
    b1ec:	e7f2      	b.n	b1d4 <_vfiprintf_r+0x1c4>
    b1ee:	3307      	adds	r3, #7
    b1f0:	e7d5      	b.n	b19e <_vfiprintf_r+0x18e>
    b1f2:	ab05      	add	r3, sp, #20
    b1f4:	9300      	str	r3, [sp, #0]
    b1f6:	003a      	movs	r2, r7
    b1f8:	4b12      	ldr	r3, [pc, #72]	; (b244 <_vfiprintf_r+0x234>)
    b1fa:	0029      	movs	r1, r5
    b1fc:	0030      	movs	r0, r6
    b1fe:	e000      	b.n	b202 <_vfiprintf_r+0x1f2>
    b200:	bf00      	nop
    b202:	9003      	str	r0, [sp, #12]
    b204:	9b03      	ldr	r3, [sp, #12]
    b206:	3301      	adds	r3, #1
    b208:	d1cc      	bne.n	b1a4 <_vfiprintf_r+0x194>
    b20a:	89bb      	ldrh	r3, [r7, #12]
    b20c:	065b      	lsls	r3, r3, #25
    b20e:	d500      	bpl.n	b212 <_vfiprintf_r+0x202>
    b210:	e77b      	b.n	b10a <_vfiprintf_r+0xfa>
    b212:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b214:	e77b      	b.n	b10e <_vfiprintf_r+0xfe>
    b216:	ab05      	add	r3, sp, #20
    b218:	9300      	str	r3, [sp, #0]
    b21a:	003a      	movs	r2, r7
    b21c:	4b09      	ldr	r3, [pc, #36]	; (b244 <_vfiprintf_r+0x234>)
    b21e:	0029      	movs	r1, r5
    b220:	0030      	movs	r0, r6
    b222:	f000 f87f 	bl	b324 <_printf_i>
    b226:	e7ec      	b.n	b202 <_vfiprintf_r+0x1f2>
    b228:	0000c20c 	.word	0x0000c20c
    b22c:	0000c24c 	.word	0x0000c24c
    b230:	0000c22c 	.word	0x0000c22c
    b234:	0000c1ec 	.word	0x0000c1ec
    b238:	0000c252 	.word	0x0000c252
    b23c:	0000c256 	.word	0x0000c256
    b240:	00000000 	.word	0x00000000
    b244:	0000afeb 	.word	0x0000afeb

0000b248 <_printf_common>:
    b248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b24a:	0015      	movs	r5, r2
    b24c:	9301      	str	r3, [sp, #4]
    b24e:	688a      	ldr	r2, [r1, #8]
    b250:	690b      	ldr	r3, [r1, #16]
    b252:	9000      	str	r0, [sp, #0]
    b254:	000c      	movs	r4, r1
    b256:	4293      	cmp	r3, r2
    b258:	da00      	bge.n	b25c <_printf_common+0x14>
    b25a:	0013      	movs	r3, r2
    b25c:	0022      	movs	r2, r4
    b25e:	602b      	str	r3, [r5, #0]
    b260:	3243      	adds	r2, #67	; 0x43
    b262:	7812      	ldrb	r2, [r2, #0]
    b264:	2a00      	cmp	r2, #0
    b266:	d001      	beq.n	b26c <_printf_common+0x24>
    b268:	3301      	adds	r3, #1
    b26a:	602b      	str	r3, [r5, #0]
    b26c:	6823      	ldr	r3, [r4, #0]
    b26e:	069b      	lsls	r3, r3, #26
    b270:	d502      	bpl.n	b278 <_printf_common+0x30>
    b272:	682b      	ldr	r3, [r5, #0]
    b274:	3302      	adds	r3, #2
    b276:	602b      	str	r3, [r5, #0]
    b278:	2706      	movs	r7, #6
    b27a:	6823      	ldr	r3, [r4, #0]
    b27c:	401f      	ands	r7, r3
    b27e:	d027      	beq.n	b2d0 <_printf_common+0x88>
    b280:	0023      	movs	r3, r4
    b282:	3343      	adds	r3, #67	; 0x43
    b284:	781b      	ldrb	r3, [r3, #0]
    b286:	1e5a      	subs	r2, r3, #1
    b288:	4193      	sbcs	r3, r2
    b28a:	6822      	ldr	r2, [r4, #0]
    b28c:	0692      	lsls	r2, r2, #26
    b28e:	d430      	bmi.n	b2f2 <_printf_common+0xaa>
    b290:	0022      	movs	r2, r4
    b292:	9901      	ldr	r1, [sp, #4]
    b294:	3243      	adds	r2, #67	; 0x43
    b296:	9800      	ldr	r0, [sp, #0]
    b298:	9e08      	ldr	r6, [sp, #32]
    b29a:	47b0      	blx	r6
    b29c:	1c43      	adds	r3, r0, #1
    b29e:	d025      	beq.n	b2ec <_printf_common+0xa4>
    b2a0:	2306      	movs	r3, #6
    b2a2:	6820      	ldr	r0, [r4, #0]
    b2a4:	682a      	ldr	r2, [r5, #0]
    b2a6:	68e1      	ldr	r1, [r4, #12]
    b2a8:	4003      	ands	r3, r0
    b2aa:	2500      	movs	r5, #0
    b2ac:	2b04      	cmp	r3, #4
    b2ae:	d103      	bne.n	b2b8 <_printf_common+0x70>
    b2b0:	1a8d      	subs	r5, r1, r2
    b2b2:	43eb      	mvns	r3, r5
    b2b4:	17db      	asrs	r3, r3, #31
    b2b6:	401d      	ands	r5, r3
    b2b8:	68a3      	ldr	r3, [r4, #8]
    b2ba:	6922      	ldr	r2, [r4, #16]
    b2bc:	4293      	cmp	r3, r2
    b2be:	dd01      	ble.n	b2c4 <_printf_common+0x7c>
    b2c0:	1a9b      	subs	r3, r3, r2
    b2c2:	18ed      	adds	r5, r5, r3
    b2c4:	2700      	movs	r7, #0
    b2c6:	42bd      	cmp	r5, r7
    b2c8:	d120      	bne.n	b30c <_printf_common+0xc4>
    b2ca:	2000      	movs	r0, #0
    b2cc:	e010      	b.n	b2f0 <_printf_common+0xa8>
    b2ce:	3701      	adds	r7, #1
    b2d0:	68e3      	ldr	r3, [r4, #12]
    b2d2:	682a      	ldr	r2, [r5, #0]
    b2d4:	1a9b      	subs	r3, r3, r2
    b2d6:	429f      	cmp	r7, r3
    b2d8:	dad2      	bge.n	b280 <_printf_common+0x38>
    b2da:	0022      	movs	r2, r4
    b2dc:	2301      	movs	r3, #1
    b2de:	3219      	adds	r2, #25
    b2e0:	9901      	ldr	r1, [sp, #4]
    b2e2:	9800      	ldr	r0, [sp, #0]
    b2e4:	9e08      	ldr	r6, [sp, #32]
    b2e6:	47b0      	blx	r6
    b2e8:	1c43      	adds	r3, r0, #1
    b2ea:	d1f0      	bne.n	b2ce <_printf_common+0x86>
    b2ec:	2001      	movs	r0, #1
    b2ee:	4240      	negs	r0, r0
    b2f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b2f2:	2030      	movs	r0, #48	; 0x30
    b2f4:	18e1      	adds	r1, r4, r3
    b2f6:	3143      	adds	r1, #67	; 0x43
    b2f8:	7008      	strb	r0, [r1, #0]
    b2fa:	0021      	movs	r1, r4
    b2fc:	1c5a      	adds	r2, r3, #1
    b2fe:	3145      	adds	r1, #69	; 0x45
    b300:	7809      	ldrb	r1, [r1, #0]
    b302:	18a2      	adds	r2, r4, r2
    b304:	3243      	adds	r2, #67	; 0x43
    b306:	3302      	adds	r3, #2
    b308:	7011      	strb	r1, [r2, #0]
    b30a:	e7c1      	b.n	b290 <_printf_common+0x48>
    b30c:	0022      	movs	r2, r4
    b30e:	2301      	movs	r3, #1
    b310:	321a      	adds	r2, #26
    b312:	9901      	ldr	r1, [sp, #4]
    b314:	9800      	ldr	r0, [sp, #0]
    b316:	9e08      	ldr	r6, [sp, #32]
    b318:	47b0      	blx	r6
    b31a:	1c43      	adds	r3, r0, #1
    b31c:	d0e6      	beq.n	b2ec <_printf_common+0xa4>
    b31e:	3701      	adds	r7, #1
    b320:	e7d1      	b.n	b2c6 <_printf_common+0x7e>
	...

0000b324 <_printf_i>:
    b324:	b5f0      	push	{r4, r5, r6, r7, lr}
    b326:	b08b      	sub	sp, #44	; 0x2c
    b328:	9206      	str	r2, [sp, #24]
    b32a:	000a      	movs	r2, r1
    b32c:	3243      	adds	r2, #67	; 0x43
    b32e:	9307      	str	r3, [sp, #28]
    b330:	9005      	str	r0, [sp, #20]
    b332:	9204      	str	r2, [sp, #16]
    b334:	7e0a      	ldrb	r2, [r1, #24]
    b336:	000c      	movs	r4, r1
    b338:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b33a:	2a6e      	cmp	r2, #110	; 0x6e
    b33c:	d100      	bne.n	b340 <_printf_i+0x1c>
    b33e:	e08f      	b.n	b460 <_printf_i+0x13c>
    b340:	d817      	bhi.n	b372 <_printf_i+0x4e>
    b342:	2a63      	cmp	r2, #99	; 0x63
    b344:	d02c      	beq.n	b3a0 <_printf_i+0x7c>
    b346:	d808      	bhi.n	b35a <_printf_i+0x36>
    b348:	2a00      	cmp	r2, #0
    b34a:	d100      	bne.n	b34e <_printf_i+0x2a>
    b34c:	e099      	b.n	b482 <_printf_i+0x15e>
    b34e:	2a58      	cmp	r2, #88	; 0x58
    b350:	d054      	beq.n	b3fc <_printf_i+0xd8>
    b352:	0026      	movs	r6, r4
    b354:	3642      	adds	r6, #66	; 0x42
    b356:	7032      	strb	r2, [r6, #0]
    b358:	e029      	b.n	b3ae <_printf_i+0x8a>
    b35a:	2a64      	cmp	r2, #100	; 0x64
    b35c:	d001      	beq.n	b362 <_printf_i+0x3e>
    b35e:	2a69      	cmp	r2, #105	; 0x69
    b360:	d1f7      	bne.n	b352 <_printf_i+0x2e>
    b362:	6821      	ldr	r1, [r4, #0]
    b364:	681a      	ldr	r2, [r3, #0]
    b366:	0608      	lsls	r0, r1, #24
    b368:	d523      	bpl.n	b3b2 <_printf_i+0x8e>
    b36a:	1d11      	adds	r1, r2, #4
    b36c:	6019      	str	r1, [r3, #0]
    b36e:	6815      	ldr	r5, [r2, #0]
    b370:	e025      	b.n	b3be <_printf_i+0x9a>
    b372:	2a73      	cmp	r2, #115	; 0x73
    b374:	d100      	bne.n	b378 <_printf_i+0x54>
    b376:	e088      	b.n	b48a <_printf_i+0x166>
    b378:	d808      	bhi.n	b38c <_printf_i+0x68>
    b37a:	2a6f      	cmp	r2, #111	; 0x6f
    b37c:	d029      	beq.n	b3d2 <_printf_i+0xae>
    b37e:	2a70      	cmp	r2, #112	; 0x70
    b380:	d1e7      	bne.n	b352 <_printf_i+0x2e>
    b382:	2220      	movs	r2, #32
    b384:	6809      	ldr	r1, [r1, #0]
    b386:	430a      	orrs	r2, r1
    b388:	6022      	str	r2, [r4, #0]
    b38a:	e003      	b.n	b394 <_printf_i+0x70>
    b38c:	2a75      	cmp	r2, #117	; 0x75
    b38e:	d020      	beq.n	b3d2 <_printf_i+0xae>
    b390:	2a78      	cmp	r2, #120	; 0x78
    b392:	d1de      	bne.n	b352 <_printf_i+0x2e>
    b394:	0022      	movs	r2, r4
    b396:	2178      	movs	r1, #120	; 0x78
    b398:	3245      	adds	r2, #69	; 0x45
    b39a:	7011      	strb	r1, [r2, #0]
    b39c:	4a6c      	ldr	r2, [pc, #432]	; (b550 <_printf_i+0x22c>)
    b39e:	e030      	b.n	b402 <_printf_i+0xde>
    b3a0:	000e      	movs	r6, r1
    b3a2:	681a      	ldr	r2, [r3, #0]
    b3a4:	3642      	adds	r6, #66	; 0x42
    b3a6:	1d11      	adds	r1, r2, #4
    b3a8:	6019      	str	r1, [r3, #0]
    b3aa:	6813      	ldr	r3, [r2, #0]
    b3ac:	7033      	strb	r3, [r6, #0]
    b3ae:	2301      	movs	r3, #1
    b3b0:	e079      	b.n	b4a6 <_printf_i+0x182>
    b3b2:	0649      	lsls	r1, r1, #25
    b3b4:	d5d9      	bpl.n	b36a <_printf_i+0x46>
    b3b6:	1d11      	adds	r1, r2, #4
    b3b8:	6019      	str	r1, [r3, #0]
    b3ba:	2300      	movs	r3, #0
    b3bc:	5ed5      	ldrsh	r5, [r2, r3]
    b3be:	2d00      	cmp	r5, #0
    b3c0:	da03      	bge.n	b3ca <_printf_i+0xa6>
    b3c2:	232d      	movs	r3, #45	; 0x2d
    b3c4:	9a04      	ldr	r2, [sp, #16]
    b3c6:	426d      	negs	r5, r5
    b3c8:	7013      	strb	r3, [r2, #0]
    b3ca:	4b62      	ldr	r3, [pc, #392]	; (b554 <_printf_i+0x230>)
    b3cc:	270a      	movs	r7, #10
    b3ce:	9303      	str	r3, [sp, #12]
    b3d0:	e02f      	b.n	b432 <_printf_i+0x10e>
    b3d2:	6820      	ldr	r0, [r4, #0]
    b3d4:	6819      	ldr	r1, [r3, #0]
    b3d6:	0605      	lsls	r5, r0, #24
    b3d8:	d503      	bpl.n	b3e2 <_printf_i+0xbe>
    b3da:	1d08      	adds	r0, r1, #4
    b3dc:	6018      	str	r0, [r3, #0]
    b3de:	680d      	ldr	r5, [r1, #0]
    b3e0:	e005      	b.n	b3ee <_printf_i+0xca>
    b3e2:	0640      	lsls	r0, r0, #25
    b3e4:	d5f9      	bpl.n	b3da <_printf_i+0xb6>
    b3e6:	680d      	ldr	r5, [r1, #0]
    b3e8:	1d08      	adds	r0, r1, #4
    b3ea:	6018      	str	r0, [r3, #0]
    b3ec:	b2ad      	uxth	r5, r5
    b3ee:	4b59      	ldr	r3, [pc, #356]	; (b554 <_printf_i+0x230>)
    b3f0:	2708      	movs	r7, #8
    b3f2:	9303      	str	r3, [sp, #12]
    b3f4:	2a6f      	cmp	r2, #111	; 0x6f
    b3f6:	d018      	beq.n	b42a <_printf_i+0x106>
    b3f8:	270a      	movs	r7, #10
    b3fa:	e016      	b.n	b42a <_printf_i+0x106>
    b3fc:	3145      	adds	r1, #69	; 0x45
    b3fe:	700a      	strb	r2, [r1, #0]
    b400:	4a54      	ldr	r2, [pc, #336]	; (b554 <_printf_i+0x230>)
    b402:	9203      	str	r2, [sp, #12]
    b404:	681a      	ldr	r2, [r3, #0]
    b406:	6821      	ldr	r1, [r4, #0]
    b408:	1d10      	adds	r0, r2, #4
    b40a:	6018      	str	r0, [r3, #0]
    b40c:	6815      	ldr	r5, [r2, #0]
    b40e:	0608      	lsls	r0, r1, #24
    b410:	d522      	bpl.n	b458 <_printf_i+0x134>
    b412:	07cb      	lsls	r3, r1, #31
    b414:	d502      	bpl.n	b41c <_printf_i+0xf8>
    b416:	2320      	movs	r3, #32
    b418:	4319      	orrs	r1, r3
    b41a:	6021      	str	r1, [r4, #0]
    b41c:	2710      	movs	r7, #16
    b41e:	2d00      	cmp	r5, #0
    b420:	d103      	bne.n	b42a <_printf_i+0x106>
    b422:	2320      	movs	r3, #32
    b424:	6822      	ldr	r2, [r4, #0]
    b426:	439a      	bics	r2, r3
    b428:	6022      	str	r2, [r4, #0]
    b42a:	0023      	movs	r3, r4
    b42c:	2200      	movs	r2, #0
    b42e:	3343      	adds	r3, #67	; 0x43
    b430:	701a      	strb	r2, [r3, #0]
    b432:	6863      	ldr	r3, [r4, #4]
    b434:	60a3      	str	r3, [r4, #8]
    b436:	2b00      	cmp	r3, #0
    b438:	db5c      	blt.n	b4f4 <_printf_i+0x1d0>
    b43a:	2204      	movs	r2, #4
    b43c:	6821      	ldr	r1, [r4, #0]
    b43e:	4391      	bics	r1, r2
    b440:	6021      	str	r1, [r4, #0]
    b442:	2d00      	cmp	r5, #0
    b444:	d158      	bne.n	b4f8 <_printf_i+0x1d4>
    b446:	9e04      	ldr	r6, [sp, #16]
    b448:	2b00      	cmp	r3, #0
    b44a:	d064      	beq.n	b516 <_printf_i+0x1f2>
    b44c:	0026      	movs	r6, r4
    b44e:	9b03      	ldr	r3, [sp, #12]
    b450:	3642      	adds	r6, #66	; 0x42
    b452:	781b      	ldrb	r3, [r3, #0]
    b454:	7033      	strb	r3, [r6, #0]
    b456:	e05e      	b.n	b516 <_printf_i+0x1f2>
    b458:	0648      	lsls	r0, r1, #25
    b45a:	d5da      	bpl.n	b412 <_printf_i+0xee>
    b45c:	b2ad      	uxth	r5, r5
    b45e:	e7d8      	b.n	b412 <_printf_i+0xee>
    b460:	6809      	ldr	r1, [r1, #0]
    b462:	681a      	ldr	r2, [r3, #0]
    b464:	0608      	lsls	r0, r1, #24
    b466:	d505      	bpl.n	b474 <_printf_i+0x150>
    b468:	1d11      	adds	r1, r2, #4
    b46a:	6019      	str	r1, [r3, #0]
    b46c:	6813      	ldr	r3, [r2, #0]
    b46e:	6962      	ldr	r2, [r4, #20]
    b470:	601a      	str	r2, [r3, #0]
    b472:	e006      	b.n	b482 <_printf_i+0x15e>
    b474:	0649      	lsls	r1, r1, #25
    b476:	d5f7      	bpl.n	b468 <_printf_i+0x144>
    b478:	1d11      	adds	r1, r2, #4
    b47a:	6019      	str	r1, [r3, #0]
    b47c:	6813      	ldr	r3, [r2, #0]
    b47e:	8aa2      	ldrh	r2, [r4, #20]
    b480:	801a      	strh	r2, [r3, #0]
    b482:	2300      	movs	r3, #0
    b484:	9e04      	ldr	r6, [sp, #16]
    b486:	6123      	str	r3, [r4, #16]
    b488:	e054      	b.n	b534 <_printf_i+0x210>
    b48a:	681a      	ldr	r2, [r3, #0]
    b48c:	1d11      	adds	r1, r2, #4
    b48e:	6019      	str	r1, [r3, #0]
    b490:	6816      	ldr	r6, [r2, #0]
    b492:	2100      	movs	r1, #0
    b494:	6862      	ldr	r2, [r4, #4]
    b496:	0030      	movs	r0, r6
    b498:	f000 f9e6 	bl	b868 <memchr>
    b49c:	2800      	cmp	r0, #0
    b49e:	d001      	beq.n	b4a4 <_printf_i+0x180>
    b4a0:	1b80      	subs	r0, r0, r6
    b4a2:	6060      	str	r0, [r4, #4]
    b4a4:	6863      	ldr	r3, [r4, #4]
    b4a6:	6123      	str	r3, [r4, #16]
    b4a8:	2300      	movs	r3, #0
    b4aa:	9a04      	ldr	r2, [sp, #16]
    b4ac:	7013      	strb	r3, [r2, #0]
    b4ae:	e041      	b.n	b534 <_printf_i+0x210>
    b4b0:	6923      	ldr	r3, [r4, #16]
    b4b2:	0032      	movs	r2, r6
    b4b4:	9906      	ldr	r1, [sp, #24]
    b4b6:	9805      	ldr	r0, [sp, #20]
    b4b8:	9d07      	ldr	r5, [sp, #28]
    b4ba:	47a8      	blx	r5
    b4bc:	1c43      	adds	r3, r0, #1
    b4be:	d043      	beq.n	b548 <_printf_i+0x224>
    b4c0:	6823      	ldr	r3, [r4, #0]
    b4c2:	2500      	movs	r5, #0
    b4c4:	079b      	lsls	r3, r3, #30
    b4c6:	d40f      	bmi.n	b4e8 <_printf_i+0x1c4>
    b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b4ca:	68e0      	ldr	r0, [r4, #12]
    b4cc:	4298      	cmp	r0, r3
    b4ce:	da3d      	bge.n	b54c <_printf_i+0x228>
    b4d0:	0018      	movs	r0, r3
    b4d2:	e03b      	b.n	b54c <_printf_i+0x228>
    b4d4:	0022      	movs	r2, r4
    b4d6:	2301      	movs	r3, #1
    b4d8:	3219      	adds	r2, #25
    b4da:	9906      	ldr	r1, [sp, #24]
    b4dc:	9805      	ldr	r0, [sp, #20]
    b4de:	9e07      	ldr	r6, [sp, #28]
    b4e0:	47b0      	blx	r6
    b4e2:	1c43      	adds	r3, r0, #1
    b4e4:	d030      	beq.n	b548 <_printf_i+0x224>
    b4e6:	3501      	adds	r5, #1
    b4e8:	68e3      	ldr	r3, [r4, #12]
    b4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b4ec:	1a9b      	subs	r3, r3, r2
    b4ee:	429d      	cmp	r5, r3
    b4f0:	dbf0      	blt.n	b4d4 <_printf_i+0x1b0>
    b4f2:	e7e9      	b.n	b4c8 <_printf_i+0x1a4>
    b4f4:	2d00      	cmp	r5, #0
    b4f6:	d0a9      	beq.n	b44c <_printf_i+0x128>
    b4f8:	9e04      	ldr	r6, [sp, #16]
    b4fa:	0028      	movs	r0, r5
    b4fc:	0039      	movs	r1, r7
    b4fe:	f7fc fbd9 	bl	7cb4 <__aeabi_uidivmod>
    b502:	9b03      	ldr	r3, [sp, #12]
    b504:	3e01      	subs	r6, #1
    b506:	5c5b      	ldrb	r3, [r3, r1]
    b508:	0028      	movs	r0, r5
    b50a:	7033      	strb	r3, [r6, #0]
    b50c:	0039      	movs	r1, r7
    b50e:	f7fc fb4b 	bl	7ba8 <__udivsi3>
    b512:	1e05      	subs	r5, r0, #0
    b514:	d1f1      	bne.n	b4fa <_printf_i+0x1d6>
    b516:	2f08      	cmp	r7, #8
    b518:	d109      	bne.n	b52e <_printf_i+0x20a>
    b51a:	6823      	ldr	r3, [r4, #0]
    b51c:	07db      	lsls	r3, r3, #31
    b51e:	d506      	bpl.n	b52e <_printf_i+0x20a>
    b520:	6863      	ldr	r3, [r4, #4]
    b522:	6922      	ldr	r2, [r4, #16]
    b524:	4293      	cmp	r3, r2
    b526:	dc02      	bgt.n	b52e <_printf_i+0x20a>
    b528:	2330      	movs	r3, #48	; 0x30
    b52a:	3e01      	subs	r6, #1
    b52c:	7033      	strb	r3, [r6, #0]
    b52e:	9b04      	ldr	r3, [sp, #16]
    b530:	1b9b      	subs	r3, r3, r6
    b532:	6123      	str	r3, [r4, #16]
    b534:	9b07      	ldr	r3, [sp, #28]
    b536:	aa09      	add	r2, sp, #36	; 0x24
    b538:	9300      	str	r3, [sp, #0]
    b53a:	0021      	movs	r1, r4
    b53c:	9b06      	ldr	r3, [sp, #24]
    b53e:	9805      	ldr	r0, [sp, #20]
    b540:	f7ff fe82 	bl	b248 <_printf_common>
    b544:	1c43      	adds	r3, r0, #1
    b546:	d1b3      	bne.n	b4b0 <_printf_i+0x18c>
    b548:	2001      	movs	r0, #1
    b54a:	4240      	negs	r0, r0
    b54c:	b00b      	add	sp, #44	; 0x2c
    b54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b550:	0000c26e 	.word	0x0000c26e
    b554:	0000c25d 	.word	0x0000c25d

0000b558 <_sbrk_r>:
    b558:	2300      	movs	r3, #0
    b55a:	b570      	push	{r4, r5, r6, lr}
    b55c:	4c06      	ldr	r4, [pc, #24]	; (b578 <_sbrk_r+0x20>)
    b55e:	0005      	movs	r5, r0
    b560:	0008      	movs	r0, r1
    b562:	6023      	str	r3, [r4, #0]
    b564:	f7f9 f998 	bl	4898 <_sbrk>
    b568:	1c43      	adds	r3, r0, #1
    b56a:	d103      	bne.n	b574 <_sbrk_r+0x1c>
    b56c:	6823      	ldr	r3, [r4, #0]
    b56e:	2b00      	cmp	r3, #0
    b570:	d000      	beq.n	b574 <_sbrk_r+0x1c>
    b572:	602b      	str	r3, [r5, #0]
    b574:	bd70      	pop	{r4, r5, r6, pc}
    b576:	46c0      	nop			; (mov r8, r8)
    b578:	20000d14 	.word	0x20000d14

0000b57c <__sread>:
    b57c:	b570      	push	{r4, r5, r6, lr}
    b57e:	000c      	movs	r4, r1
    b580:	250e      	movs	r5, #14
    b582:	5f49      	ldrsh	r1, [r1, r5]
    b584:	f000 f9b6 	bl	b8f4 <_read_r>
    b588:	2800      	cmp	r0, #0
    b58a:	db03      	blt.n	b594 <__sread+0x18>
    b58c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b58e:	181b      	adds	r3, r3, r0
    b590:	6563      	str	r3, [r4, #84]	; 0x54
    b592:	bd70      	pop	{r4, r5, r6, pc}
    b594:	89a3      	ldrh	r3, [r4, #12]
    b596:	4a02      	ldr	r2, [pc, #8]	; (b5a0 <__sread+0x24>)
    b598:	4013      	ands	r3, r2
    b59a:	81a3      	strh	r3, [r4, #12]
    b59c:	e7f9      	b.n	b592 <__sread+0x16>
    b59e:	46c0      	nop			; (mov r8, r8)
    b5a0:	ffffefff 	.word	0xffffefff

0000b5a4 <__swrite>:
    b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5a6:	001f      	movs	r7, r3
    b5a8:	898b      	ldrh	r3, [r1, #12]
    b5aa:	0005      	movs	r5, r0
    b5ac:	000c      	movs	r4, r1
    b5ae:	0016      	movs	r6, r2
    b5b0:	05db      	lsls	r3, r3, #23
    b5b2:	d505      	bpl.n	b5c0 <__swrite+0x1c>
    b5b4:	230e      	movs	r3, #14
    b5b6:	5ec9      	ldrsh	r1, [r1, r3]
    b5b8:	2200      	movs	r2, #0
    b5ba:	2302      	movs	r3, #2
    b5bc:	f000 f940 	bl	b840 <_lseek_r>
    b5c0:	89a3      	ldrh	r3, [r4, #12]
    b5c2:	4a05      	ldr	r2, [pc, #20]	; (b5d8 <__swrite+0x34>)
    b5c4:	0028      	movs	r0, r5
    b5c6:	4013      	ands	r3, r2
    b5c8:	81a3      	strh	r3, [r4, #12]
    b5ca:	0032      	movs	r2, r6
    b5cc:	230e      	movs	r3, #14
    b5ce:	5ee1      	ldrsh	r1, [r4, r3]
    b5d0:	003b      	movs	r3, r7
    b5d2:	f000 f875 	bl	b6c0 <_write_r>
    b5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5d8:	ffffefff 	.word	0xffffefff

0000b5dc <__sseek>:
    b5dc:	b570      	push	{r4, r5, r6, lr}
    b5de:	000c      	movs	r4, r1
    b5e0:	250e      	movs	r5, #14
    b5e2:	5f49      	ldrsh	r1, [r1, r5]
    b5e4:	f000 f92c 	bl	b840 <_lseek_r>
    b5e8:	89a3      	ldrh	r3, [r4, #12]
    b5ea:	1c42      	adds	r2, r0, #1
    b5ec:	d103      	bne.n	b5f6 <__sseek+0x1a>
    b5ee:	4a05      	ldr	r2, [pc, #20]	; (b604 <__sseek+0x28>)
    b5f0:	4013      	ands	r3, r2
    b5f2:	81a3      	strh	r3, [r4, #12]
    b5f4:	bd70      	pop	{r4, r5, r6, pc}
    b5f6:	2280      	movs	r2, #128	; 0x80
    b5f8:	0152      	lsls	r2, r2, #5
    b5fa:	4313      	orrs	r3, r2
    b5fc:	81a3      	strh	r3, [r4, #12]
    b5fe:	6560      	str	r0, [r4, #84]	; 0x54
    b600:	e7f8      	b.n	b5f4 <__sseek+0x18>
    b602:	46c0      	nop			; (mov r8, r8)
    b604:	ffffefff 	.word	0xffffefff

0000b608 <__sclose>:
    b608:	b510      	push	{r4, lr}
    b60a:	230e      	movs	r3, #14
    b60c:	5ec9      	ldrsh	r1, [r1, r3]
    b60e:	f000 f8e1 	bl	b7d4 <_close_r>
    b612:	bd10      	pop	{r4, pc}

0000b614 <__swbuf_r>:
    b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b616:	0005      	movs	r5, r0
    b618:	000e      	movs	r6, r1
    b61a:	0014      	movs	r4, r2
    b61c:	2800      	cmp	r0, #0
    b61e:	d004      	beq.n	b62a <__swbuf_r+0x16>
    b620:	6983      	ldr	r3, [r0, #24]
    b622:	2b00      	cmp	r3, #0
    b624:	d101      	bne.n	b62a <__swbuf_r+0x16>
    b626:	f7ff f9b1 	bl	a98c <__sinit>
    b62a:	4b22      	ldr	r3, [pc, #136]	; (b6b4 <__swbuf_r+0xa0>)
    b62c:	429c      	cmp	r4, r3
    b62e:	d12d      	bne.n	b68c <__swbuf_r+0x78>
    b630:	686c      	ldr	r4, [r5, #4]
    b632:	69a3      	ldr	r3, [r4, #24]
    b634:	60a3      	str	r3, [r4, #8]
    b636:	89a3      	ldrh	r3, [r4, #12]
    b638:	071b      	lsls	r3, r3, #28
    b63a:	d531      	bpl.n	b6a0 <__swbuf_r+0x8c>
    b63c:	6923      	ldr	r3, [r4, #16]
    b63e:	2b00      	cmp	r3, #0
    b640:	d02e      	beq.n	b6a0 <__swbuf_r+0x8c>
    b642:	6823      	ldr	r3, [r4, #0]
    b644:	6922      	ldr	r2, [r4, #16]
    b646:	b2f7      	uxtb	r7, r6
    b648:	1a98      	subs	r0, r3, r2
    b64a:	6963      	ldr	r3, [r4, #20]
    b64c:	b2f6      	uxtb	r6, r6
    b64e:	4298      	cmp	r0, r3
    b650:	db05      	blt.n	b65e <__swbuf_r+0x4a>
    b652:	0021      	movs	r1, r4
    b654:	0028      	movs	r0, r5
    b656:	f7ff f92b 	bl	a8b0 <_fflush_r>
    b65a:	2800      	cmp	r0, #0
    b65c:	d126      	bne.n	b6ac <__swbuf_r+0x98>
    b65e:	68a3      	ldr	r3, [r4, #8]
    b660:	3001      	adds	r0, #1
    b662:	3b01      	subs	r3, #1
    b664:	60a3      	str	r3, [r4, #8]
    b666:	6823      	ldr	r3, [r4, #0]
    b668:	1c5a      	adds	r2, r3, #1
    b66a:	6022      	str	r2, [r4, #0]
    b66c:	701f      	strb	r7, [r3, #0]
    b66e:	6963      	ldr	r3, [r4, #20]
    b670:	4298      	cmp	r0, r3
    b672:	d004      	beq.n	b67e <__swbuf_r+0x6a>
    b674:	89a3      	ldrh	r3, [r4, #12]
    b676:	07db      	lsls	r3, r3, #31
    b678:	d51a      	bpl.n	b6b0 <__swbuf_r+0x9c>
    b67a:	2e0a      	cmp	r6, #10
    b67c:	d118      	bne.n	b6b0 <__swbuf_r+0x9c>
    b67e:	0021      	movs	r1, r4
    b680:	0028      	movs	r0, r5
    b682:	f7ff f915 	bl	a8b0 <_fflush_r>
    b686:	2800      	cmp	r0, #0
    b688:	d012      	beq.n	b6b0 <__swbuf_r+0x9c>
    b68a:	e00f      	b.n	b6ac <__swbuf_r+0x98>
    b68c:	4b0a      	ldr	r3, [pc, #40]	; (b6b8 <__swbuf_r+0xa4>)
    b68e:	429c      	cmp	r4, r3
    b690:	d101      	bne.n	b696 <__swbuf_r+0x82>
    b692:	68ac      	ldr	r4, [r5, #8]
    b694:	e7cd      	b.n	b632 <__swbuf_r+0x1e>
    b696:	4b09      	ldr	r3, [pc, #36]	; (b6bc <__swbuf_r+0xa8>)
    b698:	429c      	cmp	r4, r3
    b69a:	d1ca      	bne.n	b632 <__swbuf_r+0x1e>
    b69c:	68ec      	ldr	r4, [r5, #12]
    b69e:	e7c8      	b.n	b632 <__swbuf_r+0x1e>
    b6a0:	0021      	movs	r1, r4
    b6a2:	0028      	movs	r0, r5
    b6a4:	f000 f820 	bl	b6e8 <__swsetup_r>
    b6a8:	2800      	cmp	r0, #0
    b6aa:	d0ca      	beq.n	b642 <__swbuf_r+0x2e>
    b6ac:	2601      	movs	r6, #1
    b6ae:	4276      	negs	r6, r6
    b6b0:	0030      	movs	r0, r6
    b6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6b4:	0000c20c 	.word	0x0000c20c
    b6b8:	0000c22c 	.word	0x0000c22c
    b6bc:	0000c1ec 	.word	0x0000c1ec

0000b6c0 <_write_r>:
    b6c0:	b570      	push	{r4, r5, r6, lr}
    b6c2:	0005      	movs	r5, r0
    b6c4:	0008      	movs	r0, r1
    b6c6:	0011      	movs	r1, r2
    b6c8:	2200      	movs	r2, #0
    b6ca:	4c06      	ldr	r4, [pc, #24]	; (b6e4 <_write_r+0x24>)
    b6cc:	6022      	str	r2, [r4, #0]
    b6ce:	001a      	movs	r2, r3
    b6d0:	f7f9 f8ba 	bl	4848 <_write>
    b6d4:	1c43      	adds	r3, r0, #1
    b6d6:	d103      	bne.n	b6e0 <_write_r+0x20>
    b6d8:	6823      	ldr	r3, [r4, #0]
    b6da:	2b00      	cmp	r3, #0
    b6dc:	d000      	beq.n	b6e0 <_write_r+0x20>
    b6de:	602b      	str	r3, [r5, #0]
    b6e0:	bd70      	pop	{r4, r5, r6, pc}
    b6e2:	46c0      	nop			; (mov r8, r8)
    b6e4:	20000d14 	.word	0x20000d14

0000b6e8 <__swsetup_r>:
    b6e8:	4b36      	ldr	r3, [pc, #216]	; (b7c4 <__swsetup_r+0xdc>)
    b6ea:	b570      	push	{r4, r5, r6, lr}
    b6ec:	681d      	ldr	r5, [r3, #0]
    b6ee:	0006      	movs	r6, r0
    b6f0:	000c      	movs	r4, r1
    b6f2:	2d00      	cmp	r5, #0
    b6f4:	d005      	beq.n	b702 <__swsetup_r+0x1a>
    b6f6:	69ab      	ldr	r3, [r5, #24]
    b6f8:	2b00      	cmp	r3, #0
    b6fa:	d102      	bne.n	b702 <__swsetup_r+0x1a>
    b6fc:	0028      	movs	r0, r5
    b6fe:	f7ff f945 	bl	a98c <__sinit>
    b702:	4b31      	ldr	r3, [pc, #196]	; (b7c8 <__swsetup_r+0xe0>)
    b704:	429c      	cmp	r4, r3
    b706:	d10f      	bne.n	b728 <__swsetup_r+0x40>
    b708:	686c      	ldr	r4, [r5, #4]
    b70a:	230c      	movs	r3, #12
    b70c:	5ee2      	ldrsh	r2, [r4, r3]
    b70e:	b293      	uxth	r3, r2
    b710:	0719      	lsls	r1, r3, #28
    b712:	d42d      	bmi.n	b770 <__swsetup_r+0x88>
    b714:	06d9      	lsls	r1, r3, #27
    b716:	d411      	bmi.n	b73c <__swsetup_r+0x54>
    b718:	2309      	movs	r3, #9
    b71a:	2001      	movs	r0, #1
    b71c:	6033      	str	r3, [r6, #0]
    b71e:	3337      	adds	r3, #55	; 0x37
    b720:	4313      	orrs	r3, r2
    b722:	81a3      	strh	r3, [r4, #12]
    b724:	4240      	negs	r0, r0
    b726:	bd70      	pop	{r4, r5, r6, pc}
    b728:	4b28      	ldr	r3, [pc, #160]	; (b7cc <__swsetup_r+0xe4>)
    b72a:	429c      	cmp	r4, r3
    b72c:	d101      	bne.n	b732 <__swsetup_r+0x4a>
    b72e:	68ac      	ldr	r4, [r5, #8]
    b730:	e7eb      	b.n	b70a <__swsetup_r+0x22>
    b732:	4b27      	ldr	r3, [pc, #156]	; (b7d0 <__swsetup_r+0xe8>)
    b734:	429c      	cmp	r4, r3
    b736:	d1e8      	bne.n	b70a <__swsetup_r+0x22>
    b738:	68ec      	ldr	r4, [r5, #12]
    b73a:	e7e6      	b.n	b70a <__swsetup_r+0x22>
    b73c:	075b      	lsls	r3, r3, #29
    b73e:	d513      	bpl.n	b768 <__swsetup_r+0x80>
    b740:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b742:	2900      	cmp	r1, #0
    b744:	d008      	beq.n	b758 <__swsetup_r+0x70>
    b746:	0023      	movs	r3, r4
    b748:	3344      	adds	r3, #68	; 0x44
    b74a:	4299      	cmp	r1, r3
    b74c:	d002      	beq.n	b754 <__swsetup_r+0x6c>
    b74e:	0030      	movs	r0, r6
    b750:	f7ff fa28 	bl	aba4 <_free_r>
    b754:	2300      	movs	r3, #0
    b756:	6363      	str	r3, [r4, #52]	; 0x34
    b758:	2224      	movs	r2, #36	; 0x24
    b75a:	89a3      	ldrh	r3, [r4, #12]
    b75c:	4393      	bics	r3, r2
    b75e:	81a3      	strh	r3, [r4, #12]
    b760:	2300      	movs	r3, #0
    b762:	6063      	str	r3, [r4, #4]
    b764:	6923      	ldr	r3, [r4, #16]
    b766:	6023      	str	r3, [r4, #0]
    b768:	2308      	movs	r3, #8
    b76a:	89a2      	ldrh	r2, [r4, #12]
    b76c:	4313      	orrs	r3, r2
    b76e:	81a3      	strh	r3, [r4, #12]
    b770:	6923      	ldr	r3, [r4, #16]
    b772:	2b00      	cmp	r3, #0
    b774:	d10b      	bne.n	b78e <__swsetup_r+0xa6>
    b776:	21a0      	movs	r1, #160	; 0xa0
    b778:	2280      	movs	r2, #128	; 0x80
    b77a:	89a3      	ldrh	r3, [r4, #12]
    b77c:	0089      	lsls	r1, r1, #2
    b77e:	0092      	lsls	r2, r2, #2
    b780:	400b      	ands	r3, r1
    b782:	4293      	cmp	r3, r2
    b784:	d003      	beq.n	b78e <__swsetup_r+0xa6>
    b786:	0021      	movs	r1, r4
    b788:	0030      	movs	r0, r6
    b78a:	f7ff f9bd 	bl	ab08 <__smakebuf_r>
    b78e:	2301      	movs	r3, #1
    b790:	89a2      	ldrh	r2, [r4, #12]
    b792:	4013      	ands	r3, r2
    b794:	d011      	beq.n	b7ba <__swsetup_r+0xd2>
    b796:	2300      	movs	r3, #0
    b798:	60a3      	str	r3, [r4, #8]
    b79a:	6963      	ldr	r3, [r4, #20]
    b79c:	425b      	negs	r3, r3
    b79e:	61a3      	str	r3, [r4, #24]
    b7a0:	2000      	movs	r0, #0
    b7a2:	6923      	ldr	r3, [r4, #16]
    b7a4:	4283      	cmp	r3, r0
    b7a6:	d1be      	bne.n	b726 <__swsetup_r+0x3e>
    b7a8:	230c      	movs	r3, #12
    b7aa:	5ee2      	ldrsh	r2, [r4, r3]
    b7ac:	0613      	lsls	r3, r2, #24
    b7ae:	d5ba      	bpl.n	b726 <__swsetup_r+0x3e>
    b7b0:	2340      	movs	r3, #64	; 0x40
    b7b2:	4313      	orrs	r3, r2
    b7b4:	81a3      	strh	r3, [r4, #12]
    b7b6:	3801      	subs	r0, #1
    b7b8:	e7b5      	b.n	b726 <__swsetup_r+0x3e>
    b7ba:	0792      	lsls	r2, r2, #30
    b7bc:	d400      	bmi.n	b7c0 <__swsetup_r+0xd8>
    b7be:	6963      	ldr	r3, [r4, #20]
    b7c0:	60a3      	str	r3, [r4, #8]
    b7c2:	e7ed      	b.n	b7a0 <__swsetup_r+0xb8>
    b7c4:	2000057c 	.word	0x2000057c
    b7c8:	0000c20c 	.word	0x0000c20c
    b7cc:	0000c22c 	.word	0x0000c22c
    b7d0:	0000c1ec 	.word	0x0000c1ec

0000b7d4 <_close_r>:
    b7d4:	2300      	movs	r3, #0
    b7d6:	b570      	push	{r4, r5, r6, lr}
    b7d8:	4c06      	ldr	r4, [pc, #24]	; (b7f4 <_close_r+0x20>)
    b7da:	0005      	movs	r5, r0
    b7dc:	0008      	movs	r0, r1
    b7de:	6023      	str	r3, [r4, #0]
    b7e0:	f7f9 f86c 	bl	48bc <_close>
    b7e4:	1c43      	adds	r3, r0, #1
    b7e6:	d103      	bne.n	b7f0 <_close_r+0x1c>
    b7e8:	6823      	ldr	r3, [r4, #0]
    b7ea:	2b00      	cmp	r3, #0
    b7ec:	d000      	beq.n	b7f0 <_close_r+0x1c>
    b7ee:	602b      	str	r3, [r5, #0]
    b7f0:	bd70      	pop	{r4, r5, r6, pc}
    b7f2:	46c0      	nop			; (mov r8, r8)
    b7f4:	20000d14 	.word	0x20000d14

0000b7f8 <_fstat_r>:
    b7f8:	2300      	movs	r3, #0
    b7fa:	b570      	push	{r4, r5, r6, lr}
    b7fc:	4c06      	ldr	r4, [pc, #24]	; (b818 <_fstat_r+0x20>)
    b7fe:	0005      	movs	r5, r0
    b800:	0008      	movs	r0, r1
    b802:	0011      	movs	r1, r2
    b804:	6023      	str	r3, [r4, #0]
    b806:	f7f9 f85c 	bl	48c2 <_fstat>
    b80a:	1c43      	adds	r3, r0, #1
    b80c:	d103      	bne.n	b816 <_fstat_r+0x1e>
    b80e:	6823      	ldr	r3, [r4, #0]
    b810:	2b00      	cmp	r3, #0
    b812:	d000      	beq.n	b816 <_fstat_r+0x1e>
    b814:	602b      	str	r3, [r5, #0]
    b816:	bd70      	pop	{r4, r5, r6, pc}
    b818:	20000d14 	.word	0x20000d14

0000b81c <_isatty_r>:
    b81c:	2300      	movs	r3, #0
    b81e:	b570      	push	{r4, r5, r6, lr}
    b820:	4c06      	ldr	r4, [pc, #24]	; (b83c <_isatty_r+0x20>)
    b822:	0005      	movs	r5, r0
    b824:	0008      	movs	r0, r1
    b826:	6023      	str	r3, [r4, #0]
    b828:	f7f9 f850 	bl	48cc <_isatty>
    b82c:	1c43      	adds	r3, r0, #1
    b82e:	d103      	bne.n	b838 <_isatty_r+0x1c>
    b830:	6823      	ldr	r3, [r4, #0]
    b832:	2b00      	cmp	r3, #0
    b834:	d000      	beq.n	b838 <_isatty_r+0x1c>
    b836:	602b      	str	r3, [r5, #0]
    b838:	bd70      	pop	{r4, r5, r6, pc}
    b83a:	46c0      	nop			; (mov r8, r8)
    b83c:	20000d14 	.word	0x20000d14

0000b840 <_lseek_r>:
    b840:	b570      	push	{r4, r5, r6, lr}
    b842:	0005      	movs	r5, r0
    b844:	0008      	movs	r0, r1
    b846:	0011      	movs	r1, r2
    b848:	2200      	movs	r2, #0
    b84a:	4c06      	ldr	r4, [pc, #24]	; (b864 <_lseek_r+0x24>)
    b84c:	6022      	str	r2, [r4, #0]
    b84e:	001a      	movs	r2, r3
    b850:	f7f9 f83e 	bl	48d0 <_lseek>
    b854:	1c43      	adds	r3, r0, #1
    b856:	d103      	bne.n	b860 <_lseek_r+0x20>
    b858:	6823      	ldr	r3, [r4, #0]
    b85a:	2b00      	cmp	r3, #0
    b85c:	d000      	beq.n	b860 <_lseek_r+0x20>
    b85e:	602b      	str	r3, [r5, #0]
    b860:	bd70      	pop	{r4, r5, r6, pc}
    b862:	46c0      	nop			; (mov r8, r8)
    b864:	20000d14 	.word	0x20000d14

0000b868 <memchr>:
    b868:	b2c9      	uxtb	r1, r1
    b86a:	1882      	adds	r2, r0, r2
    b86c:	4290      	cmp	r0, r2
    b86e:	d101      	bne.n	b874 <memchr+0xc>
    b870:	2000      	movs	r0, #0
    b872:	4770      	bx	lr
    b874:	7803      	ldrb	r3, [r0, #0]
    b876:	428b      	cmp	r3, r1
    b878:	d0fb      	beq.n	b872 <memchr+0xa>
    b87a:	3001      	adds	r0, #1
    b87c:	e7f6      	b.n	b86c <memchr+0x4>

0000b87e <memmove>:
    b87e:	b510      	push	{r4, lr}
    b880:	4288      	cmp	r0, r1
    b882:	d902      	bls.n	b88a <memmove+0xc>
    b884:	188b      	adds	r3, r1, r2
    b886:	4298      	cmp	r0, r3
    b888:	d308      	bcc.n	b89c <memmove+0x1e>
    b88a:	2300      	movs	r3, #0
    b88c:	429a      	cmp	r2, r3
    b88e:	d007      	beq.n	b8a0 <memmove+0x22>
    b890:	5ccc      	ldrb	r4, [r1, r3]
    b892:	54c4      	strb	r4, [r0, r3]
    b894:	3301      	adds	r3, #1
    b896:	e7f9      	b.n	b88c <memmove+0xe>
    b898:	5c8b      	ldrb	r3, [r1, r2]
    b89a:	5483      	strb	r3, [r0, r2]
    b89c:	3a01      	subs	r2, #1
    b89e:	d2fb      	bcs.n	b898 <memmove+0x1a>
    b8a0:	bd10      	pop	{r4, pc}

0000b8a2 <__malloc_lock>:
    b8a2:	4770      	bx	lr

0000b8a4 <__malloc_unlock>:
    b8a4:	4770      	bx	lr

0000b8a6 <_realloc_r>:
    b8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8a8:	0007      	movs	r7, r0
    b8aa:	000d      	movs	r5, r1
    b8ac:	0016      	movs	r6, r2
    b8ae:	2900      	cmp	r1, #0
    b8b0:	d105      	bne.n	b8be <_realloc_r+0x18>
    b8b2:	0011      	movs	r1, r2
    b8b4:	f7ff f9c0 	bl	ac38 <_malloc_r>
    b8b8:	0004      	movs	r4, r0
    b8ba:	0020      	movs	r0, r4
    b8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8be:	2a00      	cmp	r2, #0
    b8c0:	d103      	bne.n	b8ca <_realloc_r+0x24>
    b8c2:	f7ff f96f 	bl	aba4 <_free_r>
    b8c6:	0034      	movs	r4, r6
    b8c8:	e7f7      	b.n	b8ba <_realloc_r+0x14>
    b8ca:	f000 f827 	bl	b91c <_malloc_usable_size_r>
    b8ce:	002c      	movs	r4, r5
    b8d0:	4286      	cmp	r6, r0
    b8d2:	d9f2      	bls.n	b8ba <_realloc_r+0x14>
    b8d4:	0031      	movs	r1, r6
    b8d6:	0038      	movs	r0, r7
    b8d8:	f7ff f9ae 	bl	ac38 <_malloc_r>
    b8dc:	1e04      	subs	r4, r0, #0
    b8de:	d0ec      	beq.n	b8ba <_realloc_r+0x14>
    b8e0:	0029      	movs	r1, r5
    b8e2:	0032      	movs	r2, r6
    b8e4:	f7fe fe56 	bl	a594 <memcpy>
    b8e8:	0029      	movs	r1, r5
    b8ea:	0038      	movs	r0, r7
    b8ec:	f7ff f95a 	bl	aba4 <_free_r>
    b8f0:	e7e3      	b.n	b8ba <_realloc_r+0x14>
	...

0000b8f4 <_read_r>:
    b8f4:	b570      	push	{r4, r5, r6, lr}
    b8f6:	0005      	movs	r5, r0
    b8f8:	0008      	movs	r0, r1
    b8fa:	0011      	movs	r1, r2
    b8fc:	2200      	movs	r2, #0
    b8fe:	4c06      	ldr	r4, [pc, #24]	; (b918 <_read_r+0x24>)
    b900:	6022      	str	r2, [r4, #0]
    b902:	001a      	movs	r2, r3
    b904:	f7f8 ff7e 	bl	4804 <_read>
    b908:	1c43      	adds	r3, r0, #1
    b90a:	d103      	bne.n	b914 <_read_r+0x20>
    b90c:	6823      	ldr	r3, [r4, #0]
    b90e:	2b00      	cmp	r3, #0
    b910:	d000      	beq.n	b914 <_read_r+0x20>
    b912:	602b      	str	r3, [r5, #0]
    b914:	bd70      	pop	{r4, r5, r6, pc}
    b916:	46c0      	nop			; (mov r8, r8)
    b918:	20000d14 	.word	0x20000d14

0000b91c <_malloc_usable_size_r>:
    b91c:	1f0b      	subs	r3, r1, #4
    b91e:	681b      	ldr	r3, [r3, #0]
    b920:	1f18      	subs	r0, r3, #4
    b922:	2b00      	cmp	r3, #0
    b924:	da01      	bge.n	b92a <_malloc_usable_size_r+0xe>
    b926:	580b      	ldr	r3, [r1, r0]
    b928:	18c0      	adds	r0, r0, r3
    b92a:	4770      	bx	lr
    b92c:	00001242 	.word	0x00001242
    b930:	00001488 	.word	0x00001488
    b934:	00001488 	.word	0x00001488
    b938:	00001488 	.word	0x00001488
    b93c:	00001488 	.word	0x00001488
    b940:	00001488 	.word	0x00001488
    b944:	00001488 	.word	0x00001488
    b948:	00001488 	.word	0x00001488
    b94c:	00001488 	.word	0x00001488
    b950:	00001488 	.word	0x00001488
    b954:	00001488 	.word	0x00001488
    b958:	00001488 	.word	0x00001488
    b95c:	00001488 	.word	0x00001488
    b960:	00001488 	.word	0x00001488
    b964:	00001488 	.word	0x00001488
    b968:	00001488 	.word	0x00001488
    b96c:	0000122a 	.word	0x0000122a
    b970:	00001488 	.word	0x00001488
    b974:	00001488 	.word	0x00001488
    b978:	00001488 	.word	0x00001488
    b97c:	00001488 	.word	0x00001488
    b980:	00001488 	.word	0x00001488
    b984:	00001488 	.word	0x00001488
    b988:	00001488 	.word	0x00001488
    b98c:	00001488 	.word	0x00001488
    b990:	00001488 	.word	0x00001488
    b994:	00001488 	.word	0x00001488
    b998:	00001488 	.word	0x00001488
    b99c:	00001488 	.word	0x00001488
    b9a0:	00001488 	.word	0x00001488
    b9a4:	00001488 	.word	0x00001488
    b9a8:	00001488 	.word	0x00001488
    b9ac:	0000123a 	.word	0x0000123a
    b9b0:	00001488 	.word	0x00001488
    b9b4:	00001488 	.word	0x00001488
    b9b8:	00001488 	.word	0x00001488
    b9bc:	00001488 	.word	0x00001488
    b9c0:	00001488 	.word	0x00001488
    b9c4:	00001488 	.word	0x00001488
    b9c8:	00001488 	.word	0x00001488
    b9cc:	00001488 	.word	0x00001488
    b9d0:	00001488 	.word	0x00001488
    b9d4:	00001488 	.word	0x00001488
    b9d8:	00001488 	.word	0x00001488
    b9dc:	00001488 	.word	0x00001488
    b9e0:	00001488 	.word	0x00001488
    b9e4:	00001488 	.word	0x00001488
    b9e8:	00001488 	.word	0x00001488
    b9ec:	00001232 	.word	0x00001232
    b9f0:	0000124a 	.word	0x0000124a
    b9f4:	00001212 	.word	0x00001212
    b9f8:	00001222 	.word	0x00001222
    b9fc:	0000121a 	.word	0x0000121a
    ba00:	00000002 	.word	0x00000002
    ba04:	00000003 	.word	0x00000003
    ba08:	00000028 	.word	0x00000028
    ba0c:	00000029 	.word	0x00000029
    ba10:	00000004 	.word	0x00000004
    ba14:	00000005 	.word	0x00000005
    ba18:	00000006 	.word	0x00000006
    ba1c:	00000007 	.word	0x00000007
    ba20:	0000ffff 	.word	0x0000ffff
    ba24:	0000ffff 	.word	0x0000ffff
    ba28:	00000022 	.word	0x00000022
    ba2c:	00000023 	.word	0x00000023
    ba30:	0000ffff 	.word	0x0000ffff
    ba34:	0000ffff 	.word	0x0000ffff
    ba38:	0000ffff 	.word	0x0000ffff
    ba3c:	0000ffff 	.word	0x0000ffff
    ba40:	00000008 	.word	0x00000008
    ba44:	00000009 	.word	0x00000009
    ba48:	0000000a 	.word	0x0000000a
    ba4c:	0000000b 	.word	0x0000000b
    ba50:	42000800 	.word	0x42000800
    ba54:	42000c00 	.word	0x42000c00
    ba58:	42001000 	.word	0x42001000
    ba5c:	42001400 	.word	0x42001400
    ba60:	42001800 	.word	0x42001800
    ba64:	42001c00 	.word	0x42001c00
    ba68:	00002436 	.word	0x00002436
    ba6c:	00002432 	.word	0x00002432
    ba70:	00002432 	.word	0x00002432
    ba74:	00002498 	.word	0x00002498
    ba78:	00002498 	.word	0x00002498
    ba7c:	0000244a 	.word	0x0000244a
    ba80:	0000243c 	.word	0x0000243c
    ba84:	00002450 	.word	0x00002450
    ba88:	00002486 	.word	0x00002486
    ba8c:	000025a0 	.word	0x000025a0
    ba90:	00002580 	.word	0x00002580
    ba94:	00002580 	.word	0x00002580
    ba98:	0000260c 	.word	0x0000260c
    ba9c:	00002592 	.word	0x00002592
    baa0:	000025ae 	.word	0x000025ae
    baa4:	00002584 	.word	0x00002584
    baa8:	000025bc 	.word	0x000025bc
    baac:	000025fc 	.word	0x000025fc
    bab0:	00003a0c 	.word	0x00003a0c
    bab4:	00003a1a 	.word	0x00003a1a
    bab8:	00003ab4 	.word	0x00003ab4
    babc:	00003b54 	.word	0x00003b54
    bac0:	00003bb8 	.word	0x00003bb8

0000bac4 <_usb_device_irq_bits>:
    bac4:	00080004 00800070 01000001 00000200     ....p...........

0000bad4 <_usb_endpoint_irq_bits>:
    bad4:	60100c03                                ...`

0000bad8 <font_5x7>:
    bad8:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
    bae8:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
    baf8:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
    bb08:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
    bb18:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
    bb28:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
    bb38:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
    bb48:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
    bb58:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
    bb68:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
    bb78:	00000000 5f000000 07000000 14000700     ......._........
    bb88:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
    bb98:	00502056 00030708 41221c00 22410000     V P......."A..A"
    bba8:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
    bbb8:	08080800 00000808 20006060 02040810     ........``. ....
    bbc8:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
    bbd8:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
    bbe8:	41314949 07091121 49494936 49494636     II1A!...6III6FII
    bbf8:	00001e29 00000014 00003440 22140800     ).......@4....."
    bc08:	14141441 41001414 02081422 06095901     A......A"....Y..
    bc18:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
    bc28:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
    bc38:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
    bc48:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
    bc58:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
    bc68:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
    bc78:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
    bc88:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
    bc98:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
    bca8:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
    bcb8:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
    bcc8:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
    bcd8:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
    bce8:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
    bcf8:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
    bd08:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
    bd18:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
    bd28:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
    bd38:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
    bd48:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
    bd58:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
    bd68:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
    bd78:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
    bd88:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
    bd98:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
    bda8:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
    bdb8:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
    bdc8:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
    bdd8:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
    bde8:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
    bdf8:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
    be08:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
    be18:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
    be28:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
    be38:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
    be48:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
    be58:	00ff0000 ff101010 14141400 101000ff     ................
    be68:	10ff00ff f010f010 fc141414 f7141400     ................
    be78:	0000ff00 14ff00ff fc04f414 10171414     ................
    be88:	1f10101f 14141f10 10001f14 00f01010     ................
    be98:	1f000000 10101010 1010101f 0010f010     ................
    bea8:	10ff0000 10101010 10101010 000010ff     ................
    beb8:	0014ff00 ff00ff00 101f0000 fc000017     ................
    bec8:	1414f404 14171017 f404f414 00ff0000     ................
    bed8:	141414f7 14141414 14f700f7 14171414     ................
    bee8:	101f1010 1414141f 101014f4 00f010f0     ................
    bef8:	1f101f00 1f000000 00000014 000014fc     ................
    bf08:	10f010f0 ff10ff10 ff141414 10101014     ................
    bf18:	0000001f ff10f000 ffffffff f0f0f0f0     ................
    bf28:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
    bf38:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
    bf48:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
    bf58:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
    bf68:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
    bf78:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
    bf88:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
    bf98:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
    bfa8:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
    bfb8:	00000018 30001010 0101ff40 01011f00     .......0@.......
    bfc8:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

0000bfd8 <bat3_icon16x16>:
    bfd8:	00000000 f83f0000 fefffc7f b7edb6ed     ......?.........
    bfe8:	b6edb7ed fc7ffeff 0000f83f 00000000     ........?.......
    bff8:	64333025 3230252e 00000064 253a6325     %03d.%02d...%c:%
    c008:	00643330 25206325 30252e64 00006432     03d.%c %d.%02d..
    c018:	63256425 00000000 706d6554 3025203a     %d%c....Temp: %0
    c028:	2d206433 53203e2d 6f736e65 305b2072     3d --> Sensor [0
    c038:	41203a5d 785b4343 7a2c792c 3025205d     ]: ACC[x,y,z] %0
    c048:	25206434 20643430 64343025 6e41202c     4d %04d %04d, An
    c058:	5b203a67 5d792c78 33302520 30252064     g: [x,y] %03d %0
    c068:	5b203b33 64333025 0009095d 706d6554     3; [%03d]...Temp
    c078:	3025203a 2d206433 53203e2d 6f736e65     : %03d --> Senso
    c088:	315b2072 41203a5d 785b4343 7a2c792c     r [1]: ACC[x,y,z
    c098:	3025205d 25206434 20643430 64343025     ] %04d %04d %04d
    c0a8:	6e41202c 5b203a67 5d792c78 33302520     , Ang: [x,y] %03
    c0b8:	30252064 5b203b33 64333025 000d0a5d     d %03; [%03d]...
    c0c8:	00776f70 74727173 00000000 00000000     pow.sqrt........

0000c0d8 <atanhi>:
    c0d8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
    c0e8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

0000c0f8 <atanlo>:
    c0f8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
    c108:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0000c118 <TWO52>:
    c118:	00000000 43300000 00000000 c3300000     ......0C......0.
    c128:	0000862c 0000857c 0000857c 0000857a     ,...|...|...z...
    c138:	0000861e 0000861e 00008614 0000857a     ............z...
    c148:	0000861e 00008614 0000861e 0000857a     ............z...
    c158:	00008624 00008624 00008624 000086b4     $...$...$.......
    c168:	00009038 0000901a 00008fd4 00008ef2     8...............
    c178:	00008fd4 0000900c 00008fd4 00008ef2     ................
    c188:	0000901a 0000901a 0000900c 00008ef2     ................
    c198:	00008eea 00008eea 00008eea 00009250     ............P...
    c1a8:	00009898 00009758 00009758 00009754     ....X...X...T...
    c1b8:	00009870 00009870 00009862 00009754     p...p...b...T...
    c1c8:	00009870 00009862 00009870 00009754     p...b...p...T...
    c1d8:	00009878 00009878 00009878 00009a7c     x...x...x...|...

0000c1e8 <_global_impure_ptr>:
    c1e8:	20000580                                ... 

0000c1ec <__sf_fake_stderr>:
	...

0000c20c <__sf_fake_stdin>:
	...

0000c22c <__sf_fake_stdout>:
	...
    c24c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c25c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c26c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c27c:	00006665                                ef..

0000c280 <_init>:
    c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c282:	46c0      	nop			; (mov r8, r8)
    c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c286:	bc08      	pop	{r3}
    c288:	469e      	mov	lr, r3
    c28a:	4770      	bx	lr

0000c28c <__init_array_start>:
    c28c:	000000dd 	.word	0x000000dd

0000c290 <_fini>:
    c290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c292:	46c0      	nop			; (mov r8, r8)
    c294:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c296:	bc08      	pop	{r3}
    c298:	469e      	mov	lr, r3
    c29a:	4770      	bx	lr

0000c29c <__fini_array_start>:
    c29c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <udi_api_cdc_comm>:
2000000c:	0275 0000 0259 0000 049d 0000 026d 0000     u...Y.......m...
2000001c:	0000 0000                                   ....

20000020 <udi_api_cdc_data>:
20000020:	064d 0000 0475 0000 0269 0000 026d 0000     M...u...i...m...
20000030:	0465 0000                                   e...

20000034 <udc_config>:
20000034:	008c 2000 0040 2000 00a0 2000               ... @.. ... 

20000040 <udc_config_fs>:
20000040:	0048 2000 00ac 2000                         H.. ... 

20000048 <udc_desc_fs>:
20000048:	0209 0043 0102 8000 0932 0004 0100 0202     ..C.....2.......
20000058:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000068:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000078:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
20000088:	0040 0000                                   @...

2000008c <udc_device_desc>:
2000008c:	0112 0201 0002 4000 03eb 2404 0100 0201     .......@...$....
2000009c:	0100 0000                                   ....

200000a0 <udc_device_lpm>:
200000a0:	0f05 000c 0701 0210 0002 0000               ............

200000ac <udi_apis>:
200000ac:	000c 2000 0020 2000                         ...  .. 

200000b4 <udc_string_desc>:
200000b4:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000d4 <udc_string_desc_languageid>:
200000d4:	0304 0409                                   ....

200000d8 <udc_string_manufacturer_name>:
200000d8:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000e4 <udc_string_product_name>:
200000e4:	4443 2043 6956 7472 6175 206c 6f43 006d     CDC Virtual Com.

200000f4 <g_interrupt_enabled>:
200000f4:	0001 0000                                   ....

200000f8 <ssd1306_buffer>:
	...
20000134:	0000 8000 8080 0000 0000 0000 0000 0000     ................
20000144:	0000 0000 8000 c080 00c0 0000 0000 0000     ................
	...
2000018c:	c080 f0e0 fcf8 e0f8 0000 0000 0000 0000     ................
	...
200001a4:	8000 8080 8080 8000 0080 0000 8000 8080     ................
200001b4:	8080 ff00 ffff 0000 0000 8080 8080 0000     ................
200001c4:	8080 0000 ff80 80ff 0080 8080 8000 8080     ................
200001d4:	0080 8080 0000 0000 8000 0080 8c00 848e     ................
200001e4:	0000 f880 f8f8 0080 0000 0000 0000 0000     ................
200001f4:	0000 0000 f0f0 f0f0 f0f0 f0f0 f0f0 f0f0     ................
20000204:	e0e0 80c0 e000 fefc ffff 7fff ffff ffff     ................
20000214:	00ff 0000 0000 0000 0000 0000 0000 fe00     ................
20000224:	c7ff 0101 0101 ff83 00ff 7c00 c7fe 0101     ...........|....
20000234:	0101 ff83 ffff 3800 c7fe 0183 0101 c783     .......8........
20000244:	ffff 0000 ff01 01ff 0001 ffff 0107 0101     ................
20000254:	0000 ff7f 0080 0000 ffff 007f ff00 ffff     ................
20000264:	0000 ff01 ffff 0001 0000 0000 0000 0000     ................
20000274:	0000 0000 0f03 7f3f ff7f ffff ffff ffff     ......?.........
20000284:	c7e7 8fc7 9f8f ffbf c3ff f0c0 ffff ffff     ................
20000294:	fcff fcfc fcfc fcfc f8fc f0f8 e0f0 00c0     ................
200002a4:	0301 0303 0303 0301 0003 0000 0100 0303     ................
200002b4:	0303 0101 0103 0000 0100 0303 0303 0101     ................
200002c4:	0303 0000 0300 0003 0000 0303 0000 0000     ................
200002d4:	0000 0100 0303 0303 0103 0000 0100 0103     ................
200002e4:	0000 0300 0103 0000 0000 0000 0000 0000     ................
200002f4:	0000 0000 0000 8000 e0c0 f9f0 ffff ffff     ................
20000304:	3fff 0f1f c787 fff7 1fff 3d1f f8fc f8f8     .?.........=....
20000314:	7cf8 ff7d ffff ffff ffff 7fff 0f3f 0007     .|}.........?...
20000324:	3030 0000 0000 0000 0000 0000 0000 0000     00..............
	...
2000033c:	fefe 00fc 0000 0000 0000 0000 0000 0000     ................
	...
20000354:	e000 00c0 0000 0000 0000 0000 0000 3030     ..............00
	...
20000378:	c000 fffe ffff ffff ffff ffff 7f7f 1f3f     ..............?.
20000388:	070f 7f1f ffff f8f8 ffff ffff feff e0f8     ................
20000398:	0000 0100 0000 0000 0000 0000 fefe 0000     ................
200003a8:	fc00 fcfe 060c 0e06 f8fc 0000 f8f0 0e1c     ................
200003b8:	0606 0c06 ffff 00ff fe00 00fe 0000 fc00     ................
200003c8:	fcfe 1800 7e3c e666 84ce 0000 ff06 06ff     ....<~f.........
200003d8:	fc06 fcfe 060c 0606 0000 fefe 0000 f8c0     ................
200003e8:	4efc 4646 4e46 787c 1840 763c cee6 80cc     .NFFFN|x@.<v....
	...
2000040c:	0701 1f0f 3f1f 3f3f 1f3f 030f 0000 0000     .....????.......
	...
20000424:	0f0f 0000 0f00 0f0f 0000 0000 0f0f 0000     ................
20000434:	0703 0c0e 1818 060c 0f0f 000f 0100 0e0f     ................
20000444:	180c 0f0c 0107 0400 0c0e 0c18 070f 0000     ................
20000454:	0f00 000f 0f00 0f0f 0000 0000 0000 0f0f     ................
20000464:	0000 0700 0c07 180c 0c1c 0606 0400 0c0e     ................
20000474:	0c18 070f 0000 0000 0000 0000 0000 0000     ................
	...

200004f8 <bat0_icon16x16>:
200004f8:	0000 0000 0000 f83f fc7f feff 06e0 07e0     ......?.........
20000508:	07e0 06e0 feff fc7f f83f 0000 0000 0000     ........?.......

20000518 <bat1_icon16x16>:
20000518:	0000 0000 0000 f83f fc7f feff 06ec 07ec     ......?.........
20000528:	07ec 06ec feff fc7f f83f 0000 0000 0000     ........?.......

20000538 <bat2_icon16x16>:
20000538:	0000 0000 0000 f83f fc7f feff 86ed 87ed     ......?.........
20000548:	87ed 86ed feff fc7f f83f 0000 0000 0000     ........?.......

20000558 <temperature_icon16x16>:
20000558:	c001 e003 2007 e007 2007 e007 2007 e007     ..... ... ... ..
20000568:	2007 f00f f81f f81f f81f f81f f00f e007     . ..............

20000578 <__fdlib_version>:
20000578:	0001 0000                                   ....

2000057c <_impure_ptr>:
2000057c:	0580 2000                                   ... 

20000580 <impure_data>:
20000580:	0000 0000 c20c 0000 c22c 0000 c1ec 0000     ........,.......
	...
